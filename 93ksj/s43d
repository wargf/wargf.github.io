
/***********************************/
/*http://www.layabox.com  2017/12/12*/
/***********************************/
var Laya=window.Laya=(function(window,document){
	var Laya={
		__internals:[],
		__packages:{},
		__classmap:{'Object':Object,'Function':Function,'Array':Array,'String':String},
		__sysClass:{'object':'Object','array':'Array','string':'String','dictionary':'Dictionary'},
		__propun:{writable: true,enumerable: false,configurable: true},
		__presubstr:String.prototype.substr,
		__substr:function(ofs,sz){return arguments.length==1?Laya.__presubstr.call(this,ofs):Laya.__presubstr.call(this,ofs,sz>0?sz:(this.length+sz));},
		__init:function(_classs){_classs.forEach(function(o){o.__init$ && o.__init$();});},
		__isClass:function(o){return o && (o.__isclass || o==Object || o==String || o==Array);},
		__newvec:function(sz,value){
			var d=[];
			d.length=sz;
			for(var i=0;i<sz;i++) d[i]=value;
			return d;
		},
		__extend:function(d,b){
			for (var p in b){
				if (!b.hasOwnProperty(p)) continue;
				var gs=Object.getOwnPropertyDescriptor(b, p);
				var g = gs.get, s = gs.set; 
				if ( g || s ) {
					if ( g && s)
						Object.defineProperty(d,p,gs);
					else{
						g && Object.defineProperty(d, p, g);
						s && Object.defineProperty(d, p, s);
					}
				}
				else d[p] = b[p];
			}
			function __() { Laya.un(this,'constructor',d); }__.prototype=b.prototype;d.prototype=new __();Laya.un(d.prototype,'__imps',Laya.__copy({},b.prototype.__imps));
		},
		__copy:function(dec,src){
			if(!src) return null;
			dec=dec||{};
			for(var i in src) dec[i]=src[i];
			return dec;
		},
		__package:function(name,o){
			if(Laya.__packages[name]) return;
			Laya.__packages[name]=true;
			var p=window,strs=name.split('.');
			if(strs.length>1){
				for(var i=0,sz=strs.length-1;i<sz;i++){
					var c=p[strs[i]];
					p=c?c:(p[strs[i]]={});
				}
			}
			p[strs[strs.length-1]] || (p[strs[strs.length-1]]=o||{});
		},
		__hasOwnProperty:function(name,o){
			o=o ||this;
		    function classHas(name,o){
				if(Object.hasOwnProperty.call(o.prototype,name)) return true;
				var s=o.prototype.__super;
				return s==null?null:classHas(name,s);
			}
			return (Object.hasOwnProperty.call(o,name)) || classHas(name,o.__class);
		},
		__typeof:function(o,value){
			if(!o || !value) return false;
			if(value===String) return (typeof o==='string');
			if(value===Number) return (typeof o==='number');
			if(value.__interface__) value=value.__interface__;
			else if(typeof value!='string')  return (o instanceof value);
			return (o.__imps && o.__imps[value]) || (o.__class==value);
		},
		__as:function(value,type){
			return (this.__typeof(value,type))?value:null;
		},
        __int:function(value){
            return value?parseInt(value):0;
        },
		interface:function(name,_super){
			Laya.__package(name,{});
			var ins=Laya.__internals;
			var a=ins[name]=ins[name] || {self:name};
			if(_super)
			{
				var supers=_super.split(',');
				a.extend=[];
				for(var i=0;i<supers.length;i++){
					var nm=supers[i];
					ins[nm]=ins[nm] || {self:nm};
					a.extend.push(ins[nm]);
				}
			}
			var o=window,words=name.split('.');
			for(var i=0;i<words.length-1;i++) o=o[words[i]];
			o[words[words.length-1]]={__interface__:name};
		},
		class:function(o,fullName,_super,miniName){
			_super && Laya.__extend(o,_super);
			if(fullName){
				Laya.__package(fullName,o);
				Laya.__classmap[fullName]=o;
				if(fullName.indexOf('.')>0){
					if(fullName.indexOf('laya.')==0){
						var paths=fullName.split('.');
						miniName=miniName || paths[paths.length-1];
						if(Laya[miniName]) console.log("Warning!,this class["+miniName+"] already exist:",Laya[miniName]);
						Laya[miniName]=o;
					}
				}
				else {
					if(fullName=="Main")
						window.Main=o;
					else{
						if(Laya[fullName]){
							console.log("Error!,this class["+fullName+"] already exist:",Laya[fullName]);
						}
						Laya[fullName]=o;
					}
				}
			}
			var un=Laya.un,p=o.prototype;
			un(p,'hasOwnProperty',Laya.__hasOwnProperty);
			un(p,'__class',o);
			un(p,'__super',_super);
			un(p,'__className',fullName);
			un(o,'__super',_super);
			un(o,'__className',fullName);
			un(o,'__isclass',true);
			un(o,'super',function(o){this.__super.call(o);});
		},
		imps:function(dec,src){
			if(!src) return null;
			var d=dec.__imps|| Laya.un(dec,'__imps',{});
			function __(name){
				var c,exs;
				if(! (c=Laya.__internals[name]) ) return;
				d[name]=true;
				if(!(exs=c.extend)) return;
				for(var i=0;i<exs.length;i++){
					__(exs[i].self);
				}
			}
			for(var i in src) __(i);
		},
        superSet:function(clas,o,prop,value){
            var fun = clas.prototype["_$set_"+prop];
            fun && fun.call(o,value);
        },
        superGet:function(clas,o,prop){
            var fun = clas.prototype["_$get_"+prop];
           	return fun?fun.call(o):null;
        },
		getset:function(isStatic,o,name,getfn,setfn){
			if(!isStatic){
				getfn && Laya.un(o,'_$get_'+name,getfn);
				setfn && Laya.un(o,'_$set_'+name,setfn);
			}
			else{
				getfn && (o['_$GET_'+name]=getfn);
				setfn && (o['_$SET_'+name]=setfn);
			}
			if(getfn && setfn) 
				Object.defineProperty(o,name,{get:getfn,set:setfn,enumerable:false,configurable:true});
			else{
				getfn && Object.defineProperty(o,name,{get:getfn,enumerable:false,configurable:true});
				setfn && Object.defineProperty(o,name,{set:setfn,enumerable:false,configurable:true});
			}
		},
		static:function(_class,def){
				for(var i=0,sz=def.length;i<sz;i+=2){
					if(def[i]=='length') 
						_class.length=def[i+1].call(_class);
					else{
						function tmp(){
							var name=def[i];
							var getfn=def[i+1];
							Object.defineProperty(_class,name,{
								get:function(){delete this[name];return this[name]=getfn.call(this);},
								set:function(v){delete this[name];this[name]=v;},enumerable: true,configurable: true});
						}
						tmp();
					}
				}
		},		
		un:function(obj,name,value){
			value || (value=obj[name]);
			Laya.__propun.value=value;
			Object.defineProperty(obj, name, Laya.__propun);
			return value;
		},
		uns:function(obj,names){
			names.forEach(function(o){Laya.un(obj,o)});
		}
	};

    window.console=window.console || ({log:function(){}});
	window.trace=window.console.log;
	Error.prototype.throwError=function(){throw arguments;};
	//String.prototype.substr=Laya.__substr;
	Object.defineProperty(Array.prototype,'fixed',{enumerable: false});

	return Laya;
})(window,document);

(function(window,document,Laya){
	var __un=Laya.un,__uns=Laya.uns,__static=Laya.static,__class=Laya.class,__getset=Laya.getset,__newvec=Laya.__newvec;
Laya.interface('game.map.IMap');
Laya.interface('laya.ui.IItem');
Laya.interface('laya.ui.ISelect');
Laya.interface('game.weapon.Iweapon');
Laya.interface('laya.runtime.IMarket');
Laya.interface('laya.filters.IFilter');
Laya.interface('laya.display.ILayout');
Laya.interface('laya.resource.IDispose');
Laya.interface('laya.runtime.IConchNode');
Laya.interface('laya.webgl.shapes.IShape');
Laya.interface('laya.webgl.submit.ISubmit');
Laya.interface('laya.filters.IFilterAction');
Laya.interface('laya.webgl.text.ICharSegment');
Laya.interface('laya.runtime.ICPlatformClass');
Laya.interface('laya.webgl.canvas.save.ISaveData');
Laya.interface('laya.webgl.resource.IMergeAtlasBitmap');
Laya.interface('laya.filters.IFilterActionGL','laya.filters.IFilterAction');
/**
*@private
*/
//class laya.utils.RunDriver
var RunDriver=(function(){
	function RunDriver(){}
	__class(RunDriver,'laya.utils.RunDriver');
	RunDriver.FILTER_ACTIONS=[];
	RunDriver.pixelRatio=-1;
	RunDriver._charSizeTestDiv=null;
	RunDriver.now=function(){
		return Date.now();
	}

	RunDriver.getWindow=function(){
		return window;
	}

	RunDriver.getPixelRatio=function(){
		if (RunDriver.pixelRatio < 0){
			var ctx=Browser.context;
			var backingStore=ctx.backingStorePixelRatio || ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1;
			RunDriver.pixelRatio=(Browser.window.devicePixelRatio || 1)/ backingStore;
			if (RunDriver.pixelRatio < 1)RunDriver.pixelRatio=1;
		}
		return RunDriver.pixelRatio;
	}

	RunDriver.getIncludeStr=function(name){
		return null;
	}

	RunDriver.createShaderCondition=function(conditionScript){
		var fn="(function() {return "+conditionScript+";})";
		return Browser.window.eval(fn);
	}

	RunDriver.fontMap=[];
	RunDriver.measureText=function(txt,font){
		var isChinese=RunDriver.hanzi.test(txt);
		if (isChinese && RunDriver.fontMap[font]){
			return RunDriver.fontMap[font];
		};
		var ctx=Browser.context;
		ctx.font=font;
		var r=ctx.measureText(txt);
		if (isChinese)RunDriver.fontMap[font]=r;
		return r;
	}

	RunDriver.getWebGLContext=function(canvas){
	};

	RunDriver.beginFlush=function(){
	};

	RunDriver.endFinish=function(){
	};

	RunDriver.addToAtlas=null;
	RunDriver.flashFlushImage=function(atlasWebGLCanvas){
	};

	RunDriver.drawToCanvas=function(sprite,_renderType,canvasWidth,canvasHeight,offsetX,offsetY){
		var canvas=HTMLCanvas.create("2D");
		var context=new RenderContext(canvasWidth,canvasHeight,canvas);
		RenderSprite.renders[_renderType]._fun(sprite,context,offsetX,offsetY);
		return canvas;
	}

	RunDriver.createParticleTemplate2D=null;
	RunDriver.createGLTextur=null;
	RunDriver.createWebGLContext2D=null;
	RunDriver.changeWebGLSize=function(w,h){
	};

	RunDriver.createRenderSprite=function(type,next){
		return new RenderSprite(type,next);
	}

	RunDriver.createFilterAction=function(type){
		return new ColorFilterAction();
	}

	RunDriver.createGraphics=function(){
		return new Graphics();
	}

	RunDriver.clear=function(value){
		Render._context.ctx.clear();
	}

	RunDriver.cancelLoadByUrl=function(url){
	};

	RunDriver.clearAtlas=function(value){
	};

	RunDriver.isAtlas=function(bitmap){
		return false;
	}

	RunDriver.addTextureToAtlas=function(value){
	};

	RunDriver.getTexturePixels=function(value,x,y,width,height){
		return null;
	}

	RunDriver.skinAniSprite=function(){
		return null;
	}

	RunDriver.update3DLoop=function(){
	};

	__static(RunDriver,
	['hanzi',function(){return this.hanzi=new RegExp("^[\u4E00-\u9FA5]$");}
	]);
	return RunDriver;
})()


/**
*<code>Laya</code> 是全局对象的引用入口集。
*Laya类引用了一些常用的全局对象，比如Laya.stage：舞台，Laya.timer：时间管理器，Laya.loader：加载管理器，使用时注意大小写。
*/
//class Laya
var ___Laya=(function(){
	//function Laya(){}
	/**
	*表示是否捕获全局错误并弹出提示。默认为false。
	*适用于移动设备等不方便调试的时候，设置为true后，如有未知错误，可以弹窗抛出详细错误堆栈。
	*/
	__getset(1,Laya,'alertGlobalError',null,function(value){
		var erralert=0;
		if (value){
			Browser.window.onerror=function (msg,url,line,column,detail){
				if (erralert++< 5 && detail)
					alert("出错啦，请把此信息截图给研发商\n"+msg+"\n"+detail.stack||detail);
			}
			}else {
			Browser.window.onerror=null;
		}
	});

	Laya.init=function(width,height,__plugins){
		var plugins=[];for(var i=2,sz=arguments.length;i<sz;i++)plugins.push(arguments[i]);
		if (Laya._isinit)return;
		ArrayBuffer.prototype.slice || (ArrayBuffer.prototype.slice=Laya._arrayBufferSlice);
		Laya._isinit=true;
		Browser.__init__();
		Context.__init__();
		Graphics.__init__();
		Laya.timer=new Timer();
		Laya.scaleTimer=new Timer();
		Laya.loader=new LoaderManager();
		WeakObject.__init__();
		for (var i=0,n=plugins.length;i < n;i++){
			if (plugins[i].enable)plugins[i].enable();
		}
		Font.__init__();
		Style.__init__();
		ResourceManager.__init__();
		CacheManager.beginCheck();
		Laya._currentStage=Laya.stage=new Stage();
		Laya.stage.conchModel && Laya.stage.conchModel.setRootNode();
		Laya.getUrlPath();
		Laya.render=new Render(0,0);
		Laya.stage.size(width,height);
		RenderSprite.__init__();
		KeyBoardManager.__init__();
		MouseManager.instance.__init__(Laya.stage,Render.canvas);
		Input.__init__();
		SoundManager.autoStopMusic=true;
		LocalStorage.__init__();
		return Render.canvas;
	}

	Laya.getUrlPath=function(){
		var location=Browser.window.location;
		var pathName=location.pathname;
		pathName=pathName.charAt(2)==':' ? pathName.substring(1):pathName;
		URL.rootPath=URL.basePath=URL.getPath(location.protocol=="file:" ? pathName :location.protocol+"//"+location.host+location.pathname);
	}

	Laya._arrayBufferSlice=function(start,end){
		var arr=this;
		var arrU8List=new Uint8Array(arr,start,end-start);
		var newU8List=new Uint8Array(arrU8List.length);
		newU8List.set(arrU8List);
		return newU8List.buffer;
	}

	Laya._runScript=function(script){
		return Browser.window["e"+String.fromCharCode(100+10+8)+"a"+"l"](script);
	}

	Laya.stage=null;
	Laya.timer=null;
	Laya.scaleTimer=null;
	Laya.loader=null;
	Laya.version="1.7.17";
	Laya.render=null;
	Laya._currentStage=null;
	Laya._isinit=false;
	Laya.MiniAdpter={init:function(){if (window.navigator && window.navigator.userAgent && window.navigator.userAgent.indexOf("MiniGame")>-1)console.error("请先引用小游戏适配库laya.wxmini.js,详细教程：https://ldc.layabox.com/doc/?nav=zh-ts-5-0-0")}};
	__static(Laya,
	['conchMarket',function(){return this.conchMarket=window.conch?conchMarket:null;},'PlatformClass',function(){return this.PlatformClass=window.PlatformClass;}
	]);
	return Laya;
})()


//class game.block.AddGolds
var AddGolds=(function(){
	function AddGolds(tile,all){
		this.weapon=0;
		this.randoms=[1,-1];
		this.delay=0;
		this._x=0;
		this._y=0;
		this._all=0;
		this._num=0;
		this._tile=null;
		this.tx=0;
		this.ty=0;
		(all===void 0)&& (all=5);
		AddGolds.clear=false;
		this._tile=tile;
		this._x=tile.x+MapData.boxW2;
		this._y=tile.y-2;
		this.tx=this._tile.tx;
		this.ty=this._tile.ty;
		this._all=all;
		this.delay=8;
		this.step();
		GlobalAPI.heartMgr.add(this,this.step);
	}

	__class(AddGolds,'game.block.AddGolds');
	var __proto=AddGolds.prototype;
	__proto.step=function(){
		if(AddGolds.clear){
			GlobalAPI.heartMgr.remove(this,this.step);
			return;
		}
		this.delay++;
		if(this.delay%4==0){
			if(this._tile.tx==this.tx && this._tile.ty==this.ty){
				if(this._tile.bmp.y==this._tile.y){
					if(this._all==0){
						this._tile.bmp.y-=6;
						}else{
						this._tile.bmp.y-=4;
					}
					}else{
					this._tile.bmp.y=this._tile.y;
				}
			}
		}
		if(this.delay<8)return;
		if(this._all>0){
			GlobalAPI.soundMgr.playSound("boxobjectflysound");
			GlobalAPI.propMgr.addProp(GlobalAPI.propMgr.getRandomGold(0),this._x,this._y,this._num/2+1>>0,this.randoms[this._num%2]);
		}
		this._num++;
		this.delay=0;
		if(this._num>this._all || MapData.isStart==false){
			GlobalAPI.heartMgr.remove(this,this.step);
			GlobalAPI.scrollMap.swapPicTile(this.tx,this.ty,1201,true);
		}
	}

	AddGolds.dispose=function(){
		AddGolds.clear=true;
	}

	AddGolds.clear=false;
	return AddGolds;
})()


/**
*宝箱飞金币
*@author guowc
*
*/
//class game.block.AddGoldsBox
var AddGoldsBox=(function(){
	function AddGoldsBox(x,y,all){
		this.weapon=0;
		this.randoms=[1,-1];
		this.delay=0;
		this._x=0;
		this._y=0;
		this._all=0;
		this._num=0;
		this.img=null;
		this.idx=0;
		this.wait=30;
		(all===void 0)&& (all=10);
		AddGoldsBox.clear=false;
		this._x=x;
		this._y=y;
		this._all=all;
		this.delay=8;
		this.img=new Image;
		this.img.texture=MapData.getFoodImg(5110);
		GlobalAPI.moveViewPort.getLayerContainer(2).addChild(this.img);
		this.img.x=x;
		this.img.y=y;
		this.step();
		GlobalAPI.heartMgr.add(this,this.step);
	}

	__class(AddGoldsBox,'game.block.AddGoldsBox');
	var __proto=AddGoldsBox.prototype;
	__proto.step=function(){
		if(AddGoldsBox.clear){
			GlobalAPI.heartMgr.remove(this,this.step);
			if(this.img){
				this.img.removeSelf();
				this.img=null;
			}
			return;
		}
		if(this.idx>this.wait){
			this.fly();
			}else{
			this.idx++;
			this._y-=2;
			this.img.y=this._y;
		}
	}

	__proto.fly=function(){
		this.delay++;
		if(this.delay%4==0){
			if(this.img.y==this._y){
				this.img.y-=2;
				}else{
				this.img.y=this._y;
			}
		}
		if(this.delay<8)return;
		if(this._all>0){
			GlobalAPI.soundMgr.playSound("boxobjectflysound");
			var act=GlobalAPI.propMgr.addProp(GlobalAPI.propMgr.getRandomGold(1),this._x+15,this._y,this._num/2+1>>0,this.randoms[this._num%2],true,true);
		}
		this._num++;
		this.delay=0;
		if(this._num>this._all || MapData.isStart==false){
			GlobalAPI.heartMgr.remove(this,this.step);
			this.img.removeSelf();
		}
	}

	AddGoldsBox.dispose=function(){
		AddGoldsBox.clear=true;
	}

	AddGoldsBox.clear=false;
	return AddGoldsBox;
})()


/**
*绘制金币图
*@author guowc
*
*/
//class game.block.AddGoldsDraw
var AddGoldsDraw=(function(){
	function AddGoldsDraw(sx,sy,list,type){
		this._type=0;
		this.idx=0;
		this.tmplist=null;
		this._sx=0;
		this._sy=0;
		this.id=0;
		this.len=0;
		this.list=null;
		this.skin=0;
		this._type=type;
		this._sx=sx;
		this._sy=sy;
		this.id=0;
		this.len=list.length;
		this.list=list;
		if(list.length>0){
			GlobalAPI.heartMgr.add(this,this.addDraw);
			if(Math.random()*5>3){
				this.skin=101;
				}else{
				this.skin=101;
			}
		}
	}

	__class(AddGoldsDraw,'game.block.AddGoldsDraw');
	var __proto=AddGoldsDraw.prototype;
	__proto.addDraw=function(){
		this.idx++;
		if(this.idx<3)return;
		this.idx=0;
		this.tmplist=this.list[this.id];
		this.id++;
		if(this.id==this.len || MapData.isStart==false){
			GlobalAPI.heartMgr.remove(this,this.addDraw);
		}
		var obj;
		for(var $each_obj in this.tmplist){
			obj=this.tmplist[$each_obj];
			if(obj){
				switch(this._type){
					case 100:
						GlobalAPI.sceneRoleMgr.addDrawFood(this._sx+obj.x*MapData.boxW,this._sy+obj.y*MapData.boxH,this.skin);
						break ;
					case 200:
						break ;
					}
			}
		}
	}

	AddGoldsDraw.foodtype=100;
	AddGoldsDraw.blocktype=200;
	return AddGoldsDraw;
})()


/**
*移动图块
*@author guowc
*
*/
//class game.block.MoveBlock
var MoveBlock=(function(){
	function MoveBlock(){
		this.speed=1;
		this.bmp=null;
		this.nextstep=0;
		this.dx=0;
		this.dy=0;
		this.maxRect=null;
		this.type=0;
		this.xdir=-1;
		this.ydir=-1;
		this._container=null;
		this.isPlay=false;
		this.canmove=false;
		this.bd=null;
		this.skinW=0;
		this.skinH=0;
		this.bmprect=new Rectangle;
		this.rect=new Rectangle(0,0,0,0);
	}

	__class(MoveBlock,'game.block.MoveBlock');
	var __proto=MoveBlock.prototype;
	__proto.start=function(container,box){
		this._container=container;
		if(!this.bd){
			this.bd=box.bitmapData;
			this.skinW=this.bd.width;
			this.skinH=this.bd.height;
			this.bmp=new Image();
			this.bmp.texture=this.bd;
			this.xdir=box.xdir;
			this.ydir=box.ydir;
			this.rect.x=box.x;
			this.rect.y=box.y;
			this.rect.width=box.rw;
			this.rect.height=box.rh;
			if(this.xdir==-1){
				this.rect.x-=this.rect.width;
			}
			if(this.ydir==-1){
				this.rect.y-=this.rect.height;
			}
			this.maxRect=this.rect.clone();
			this.maxRect.width+=this.skinW;
			this.maxRect.height+=this.skinH;
		}
		this.bmp.x=box.x;
		this.bmp.y=box.y;
		if(this.rect.width==0 && this.rect.height==0){
			this.canmove=false;
			}else{
			this.canmove=true;
			if(this.rect.width==0){
				this.type=1;
				}else if(this.rect.height==0){
				this.type=0;
				}else{
				this.type=2;
			}
			this.play();
			this.isPlay=true;
		}
		this.bmprect.x=this.bmp.x;
		this.bmprect.y=this.bmp.y;
		this.bmprect.width=this.bmp.texture.width;
		this.bmprect.height=this.bmp.texture.height;
		this._container.addChild(this.bmp);
	}

	__proto.stop=function(){
		this.bmp.visible=false;
		if(!this.canmove)return;
		if(this.isPlay){
			GlobalAPI.heartMgr.remove(this,this.move);
		}
		this.isPlay=false;
	}

	__proto.play=function(){
		this.bmp.visible=true;
		if(!this.canmove)return;
		if(!this.isPlay){
			GlobalAPI.heartMgr.add(this,this.move,true);
		}
		this.isPlay=true;
	}

	__proto.move=function(){
		var tmp=0;
		if(this.type==1 || this.type==2){
			tmp=this.bmp.y;
			if(tmp <=this.rect.y){
				this.dy=this.speed;
				}else if(tmp >=this.rect.y+this.rect.height){
				this.dy=-this.speed;
			}
			this.bmp.y+=this.dy;
			this.bmprect.y+=this.dy;
		}
		if(this.type==0 || this.type==2){
			tmp=this.bmp.x;
			if(tmp <=this.rect.x){
				this.dx=this.speed;
				}else if(tmp >=this.rect.x+this.rect.width){
				this.dx=-this.speed;
			}
			this.bmp.x+=this.dx;
			this.bmprect.x+=this.dx;
		}
	}

	//trace("move bmp",bmp.x,bmp.y);
	__proto.dispose=function(){
		if(this._container==null)return;
		this.stop();
		this.bd=null;
		if(this.bmp){
			this.bmp.removeSelf();
		}
		this.bmp=null;
		this.type=0;
		this.canmove=false;
		this.isPlay=true;
		this.dx=this.dy=0;
		this._container=null;
	}

	MoveBlock.X_TYPE=0;
	MoveBlock.Y_TYPE=1;
	MoveBlock.XY_TYPE=2;
	return MoveBlock;
})()


/**
*寻找爆炸点 扫雷式算法
*@author guowc
*
*/
//class game.block.SeachBlockBoom
var SeachBlockBoom=(function(){
	function SeachBlockBoom(x,y){
		this.checkbool=false;
		this.templist=null;
		this.roadlist=null;
		this.flaglist=null;
		//标志过的
		this.delay=4;
		this.dx=0;
		this.dy=0;
		GlobalAPI.heartMgr.add(this,this.step);
		this.flaglist=new Dictionary;
		this.templist=[];
		this.roadlist=[];
		this.templist.push(y+"_"+x);
		this.flaglist[y+"_"+x]=y+"_"+x;
		GlobalAPI.scrollMap.clearPicTile(x,y);
		MapData.rect.x=x;
		MapData.rect.y=y-MapData.boxH2;
		this.roadMethod();
	}

	__class(SeachBlockBoom,'game.block.SeachBlockBoom');
	var __proto=SeachBlockBoom.prototype;
	__proto.roadMethod=function(){
		this.roadlist.length=0;
		var mc;
		var dx=0;
		var dy=0;
		var tmp;
		var m=0;
		for (m=0;m<this.templist.length;m++){
			mc=this.templist[m];
			tmp=mc.split("_");
			dx=parseInt(tmp[1]);
			dy=parseInt(tmp[0]);
			this.setType(dx+1,dy);
			this.setType(dx-1,dy);
			this.setType(dx,dy+1);
			this.setType(dx,dy-1);
			this.setType(dx-1,dy-1);
			this.setType(dx+1,dy+1);
			this.setType(dx+1,dy-1);
			this.setType(dx-1,dy+1);
		}
		if (this.roadlist.length>0){
			this.templist.length=0;
			for (m=0;m<this.roadlist.length;m++){
				this.templist.push(this.roadlist[m]);
			}
			this.delay=8;
			this.checkbool=true;
			}else {
			GlobalAPI.heartMgr.remove(this,this.step);
		}
	}

	//trace("over......");
	__proto.setType=function(dx,dy){
		if(MapData.mapData[dy]){
			var type=MapData.mapData[dy][dx];
			if(type>0){
				var mc=dy+"_"+dx;
				if(this.flaglist[mc]==null){
					if (MapData.mapData[dy][dx]==SeachBlockBoom.boomtype){
						this.roadlist.push(mc);
					}
					if(MapData.isHitblock(type)){
						var tile=GlobalAPI.scrollMap.getPicTile(dx,dy);
						if(tile){
							GlobalAPI.blockAniMgr.add(tile,0,false);
							GlobalAPI.soundMgr.playSound("bomsound");
							}else{
							GlobalAPI.scrollMap.clearPicTile(dx,dy);
						}
						this.flaglist[mc]=mc;
					}
				}
			}
		}
	}

	__proto.step=function(){
		if(this.checkbool==false)return;
		if(this.delay<1){
			this.roadMethod();
			}else{
			this.delay--;
		}
	}

	SeachBlockBoom.boomtype=10001;
	return SeachBlockBoom;
})()


/**
*<code>EventDispatcher</code> 类是可调度事件的所有类的基类。
*/
//class laya.events.EventDispatcher
var EventDispatcher=(function(){
	var EventHandler;
	function EventDispatcher(){
		/**@private */
		this._events=null;
	}

	__class(EventDispatcher,'laya.events.EventDispatcher');
	var __proto=EventDispatcher.prototype;
	/**
	*检查 EventDispatcher 对象是否为特定事件类型注册了任何侦听器。
	*@param type 事件的类型。
	*@return 如果指定类型的侦听器已注册，则值为 true；否则，值为 false。
	*/
	__proto.hasListener=function(type){
		var listener=this._events && this._events[type];
		return !!listener;
	}

	/**
	*派发事件。
	*@param type 事件类型。
	*@param data （可选）回调数据。<b>注意：</b>如果是需要传递多个参数 p1,p2,p3,...可以使用数组结构如：[p1,p2,p3,...] ；如果需要回调单个参数 p ，且 p 是一个数组，则需要使用结构如：[p]，其他的单个参数 p ，可以直接传入参数 p。
	*@return 此事件类型是否有侦听者，如果有侦听者则值为 true，否则值为 false。
	*/
	__proto.event=function(type,data){
		if (!this._events || !this._events[type])return false;
		var listeners=this._events[type];
		if (listeners.run){
			if (listeners.once)delete this._events[type];
			data !=null ? listeners.runWith(data):listeners.run();
			}else {
			for (var i=0,n=listeners.length;i < n;i++){
				var listener=listeners[i];
				if (listener){
					(data !=null)? listener.runWith(data):listener.run();
				}
				if (!listener || listener.once){
					listeners.splice(i,1);
					i--;
					n--;
				}
			}
			if (listeners.length===0 && this._events)delete this._events[type];
		}
		return true;
	}

	/**
	*使用 EventDispatcher 对象注册指定类型的事件侦听器对象，以使侦听器能够接收事件通知。
	*@param type 事件的类型。
	*@param caller 事件侦听函数的执行域。
	*@param listener 事件侦听函数。
	*@param args （可选）事件侦听函数的回调参数。
	*@return 此 EventDispatcher 对象。
	*/
	__proto.on=function(type,caller,listener,args){
		return this._createListener(type,caller,listener,args,false);
	}

	/**
	*使用 EventDispatcher 对象注册指定类型的事件侦听器对象，以使侦听器能够接收事件通知，此侦听事件响应一次后自动移除。
	*@param type 事件的类型。
	*@param caller 事件侦听函数的执行域。
	*@param listener 事件侦听函数。
	*@param args （可选）事件侦听函数的回调参数。
	*@return 此 EventDispatcher 对象。
	*/
	__proto.once=function(type,caller,listener,args){
		return this._createListener(type,caller,listener,args,true);
	}

	/**@private */
	__proto._createListener=function(type,caller,listener,args,once,offBefore){
		(offBefore===void 0)&& (offBefore=true);
		offBefore && this.off(type,caller,listener,once);
		var handler=EventHandler.create(caller || this,listener,args,once);
		this._events || (this._events={});
		var events=this._events;
		if (!events[type])events[type]=handler;
		else {
			if (!events[type].run)events[type].push(handler);
			else events[type]=[events[type],handler];
		}
		return this;
	}

	/**
	*从 EventDispatcher 对象中删除侦听器。
	*@param type 事件的类型。
	*@param caller 事件侦听函数的执行域。
	*@param listener 事件侦听函数。
	*@param onceOnly （可选）如果值为 true ,则只移除通过 once 方法添加的侦听器。
	*@return 此 EventDispatcher 对象。
	*/
	__proto.off=function(type,caller,listener,onceOnly){
		(onceOnly===void 0)&& (onceOnly=false);
		if (!this._events || !this._events[type])return this;
		var listeners=this._events[type];
		if (listener !=null){
			if (listeners.run){
				if ((!caller || listeners.caller===caller)&& listeners.method===listener && (!onceOnly || listeners.once)){
					delete this._events[type];
					listeners.recover();
				}
				}else {
				var count=0;
				for (var i=0,n=listeners.length;i < n;i++){
					var item=listeners[i];
					if (item && (!caller || item.caller===caller)&& item.method===listener && (!onceOnly || item.once)){
						count++;
						listeners[i]=null;
						item.recover();
					}
				}
				if (count===n)delete this._events[type];
			}
		}
		return this;
	}

	/**
	*从 EventDispatcher 对象中删除指定事件类型的所有侦听器。
	*@param type （可选）事件类型，如果值为 null，则移除本对象所有类型的侦听器。
	*@return 此 EventDispatcher 对象。
	*/
	__proto.offAll=function(type){
		var events=this._events;
		if (!events)return this;
		if (type){
			this._recoverHandlers(events[type]);
			delete events[type];
			}else {
			for (var name in events){
				this._recoverHandlers(events[name]);
			}
			this._events=null;
		}
		return this;
	}

	__proto._recoverHandlers=function(arr){
		if (!arr)return;
		if (arr.run){
			arr.recover();
			}else {
			for (var i=arr.length-1;i >-1;i--){
				if (arr[i]){
					arr[i].recover();
					arr[i]=null;
				}
			}
		}
	}

	/**
	*检测指定事件类型是否是鼠标事件。
	*@param type 事件的类型。
	*@return 如果是鼠标事件，则值为 true;否则，值为 false。
	*/
	__proto.isMouseEvent=function(type){
		return EventDispatcher.MOUSE_EVENTS[type];
	}

	EventDispatcher.MOUSE_EVENTS={"rightmousedown":true,"rightmouseup":true,"rightclick":true,"mousedown":true,"mouseup":true,"mousemove":true,"mouseover":true,"mouseout":true,"click":true,"doubleclick":true};
	EventDispatcher.__init$=function(){
		Object.defineProperty(laya.events.EventDispatcher.prototype,"_events",{enumerable:false,writable:true});
		/**@private */
		//class EventHandler extends laya.utils.Handler
		EventHandler=(function(_super){
			function EventHandler(caller,method,args,once){
				EventHandler.__super.call(this,caller,method,args,once);
			}
			__class(EventHandler,'',_super);
			var __proto=EventHandler.prototype;
			__proto.recover=function(){
				if (this._id > 0){
					this._id=0;
					EventHandler._pool.push(this.clear());
				}
			}
			EventHandler.create=function(caller,method,args,once){
				(once===void 0)&& (once=true);
				if (EventHandler._pool.length)return EventHandler._pool.pop().setTo(caller,method,args,once);
				return new EventHandler(caller,method,args,once);
			}
			EventHandler._pool=[];
			return EventHandler;
		})(Handler)
	}

	return EventDispatcher;
})()


/**
*<p><code>Handler</code> 是事件处理器类。</p>
*<p>推荐使用 Handler.create()方法从对象池创建，减少对象创建消耗。创建的 Handler 对象不再使用后，可以使用 Handler.recover()将其回收到对象池，回收后不要再使用此对象，否则会导致不可预料的错误。</p>
*<p><b>注意：</b>由于鼠标事件也用本对象池，不正确的回收及调用，可能会影响鼠标事件的执行。</p>
*/
//class laya.utils.Handler
var Handler=(function(){
	function Handler(caller,method,args,once){
		/**执行域(this)。*/
		//this.caller=null;
		/**处理方法。*/
		//this.method=null;
		/**参数。*/
		//this.args=null;
		/**表示是否只执行一次。如果为true，回调后执行recover()进行回收，回收后会被再利用，默认为false 。*/
		this.once=false;
		/**@private */
		this._id=0;
		(once===void 0)&& (once=false);
		this.setTo(caller,method,args,once);
	}

	__class(Handler,'laya.utils.Handler');
	var __proto=Handler.prototype;
	/**
	*设置此对象的指定属性值。
	*@param caller 执行域(this)。
	*@param method 回调方法。
	*@param args 携带的参数。
	*@param once 是否只执行一次，如果为true，执行后执行recover()进行回收。
	*@return 返回 handler 本身。
	*/
	__proto.setTo=function(caller,method,args,once){
		this._id=Handler._gid++;
		this.caller=caller;
		this.method=method;
		this.args=args;
		this.once=once;
		return this;
	}

	/**
	*执行处理器。
	*/
	__proto.run=function(){
		if (this.method==null)return null;
		var id=this._id;
		var result=this.method.apply(this.caller,this.args);
		this._id===id && this.once && this.recover();
		return result;
	}

	/**
	*执行处理器，携带额外数据。
	*@param data 附加的回调数据，可以是单数据或者Array(作为多参)。
	*/
	__proto.runWith=function(data){
		if (this.method==null)return null;
		var id=this._id;
		if (data==null)
			var result=this.method.apply(this.caller,this.args);
		else if (!this.args && !data.unshift)result=this.method.call(this.caller,data);
		else if (this.args)result=this.method.apply(this.caller,this.args.concat(data));
		else result=this.method.apply(this.caller,data);
		this._id===id && this.once && this.recover();
		return result;
	}

	/**
	*清理对象引用。
	*/
	__proto.clear=function(){
		this.caller=null;
		this.method=null;
		this.args=null;
		return this;
	}

	/**
	*清理并回收到 Handler 对象池内。
	*/
	__proto.recover=function(){
		if (this._id > 0){
			this._id=0;
			Handler._pool.push(this.clear());
		}
	}

	Handler.create=function(caller,method,args,once){
		(once===void 0)&& (once=true);
		if (Handler._pool.length)return Handler._pool.pop().setTo(caller,method,args,once);
		return new Handler(caller,method,args,once);
	}

	Handler._pool=[];
	Handler._gid=1;
	return Handler;
})()


//class game.Body.BlockAni
var BlockAni=(function(){
	function BlockAni(){
		this.viewrt=null;
		this.handler=null;
		this.velocity=0;
		this.velocitystart=-15;
		this.act=null;
		this._dir=0;
		this.dropspeed=2;
		this.act=new Image;
		this.viewrt=GlobalAPI.moveViewPort.viewRect;
	}

	__class(BlockAni,'game.Body.BlockAni');
	var __proto=BlockAni.prototype;
	__proto.start=function(container,bd,dir,x,y){
		this.velocity=this.velocitystart;
		this.act.texture=bd;
		this.act.x=x;
		this.act.y=y;
		container.addChild(this.act);
		this._dir=dir;
		GlobalAPI.heartMgr.add(this,this.step);
	}

	__proto.getimage=function(){
		return this.act;
	}

	__proto.setVelocity=function(val){
		this.velocitystart=val;
	}

	__proto.setScaleY=function(val){
		this.act.scaleY=val;
	}

	__proto.setdropspeed=function(val){
		this.dropspeed=val;
	}

	__proto.setDieHandler=function(fun){
		this.handler=fun;
	}

	__proto.step=function(){
		this.act.x+=3*this._dir;
		this.act.y+=this.velocity;
		this.velocity+=this.dropspeed;
		this.velocity=this.velocity>12 ? 12 :this.velocity;
		if(this.act.y > this.viewrt.height+this.viewrt.y){
			GlobalAPI.heartMgr.remove(this,this.step);
			this.act.removeSelf();
			if(this.handler!=null)
				this.handler.runWith(this);
		}
	}

	return BlockAni;
})()


/**
*死亡动画
*@author guowc
*
*/
//class game.Body.DieAni
var DieAni=(function(){
	function DieAni(val,bottom,dir){
		this._handler=null;
		this.velocity=-2;
		this._bottom=0;
		this.act=null;
		this._dir=0;
		this.dropspeed=2;
		this.act=val;
		this._bottom=bottom;
		this._dir=dir;
		GlobalAPI.heartMgr.add(this,this.die);
	}

	__class(DieAni,'game.Body.DieAni');
	var __proto=DieAni.prototype;
	__proto.setVelocity=function(val){
		this.velocity=val;
	}

	__proto.setScaleY=function(val){
		this.act.scaleY=val;
	}

	__proto.setdropspeed=function(val){
		this.dropspeed=val;
	}

	__proto.setDieHandler=function(fun){
		this._handler=fun;
	}

	__proto.die=function(){
		this.velocity+=this.dropspeed;
		this.act.y+=this.velocity;
		this.act.x+=5*this._dir;
		if(this.act.y > this._bottom){
			GlobalAPI.heartMgr.remove(this,this.die);
			if(this._handler!=null){
				this._handler.run();
				this._handler=null;
			}
		}
	}

	DieAni.LEFT=-1;
	DieAni.RIGHT=1;
	DieAni.CENTER=0;
	return DieAni;
})()


/**
*生成大图块
*@author guowc
*
*/
//class game.control.BornBigMapTiles
var BornBigMapTiles=(function(){
	function BornBigMapTiles(){
		this.htmlcs=[];
		this.tiles=new Dictionary;
		if(BornBigMapTiles.instance)return;
		BornBigMapTiles.instance=this;
	}

	__class(BornBigMapTiles,'game.control.BornBigMapTiles');
	var __proto=BornBigMapTiles.prototype;
	__proto.startBorn=function(mapdata,lenx,leny){
		(lenx===void 0)&& (lenx=8);
		(leny===void 0)&& (leny=8);
		var boxdata;
		var i=0;
		var j=0;
		var ti=0;
		var tj=0;
		var allx=mapdata[0].length;
		var ally=mapdata.length;
		var sp;
		var type=0;
		var bool=false;
		var wid=lenx*MapData.boxW;
		var hei=leny*MapData.boxH;
		for(ti=0;ti<ally;ti+=leny){
			for(tj=0;tj<allx;tj+=lenx){
				sp=new Sprite;
				bool=false;
				sp.cacheAs="bitmap";
				for(i=0;i<leny;i++){
					for(j=0;j<lenx;j++){
						type=mapdata[i+ti] && mapdata[i+ti][j+tj]>>0;
						if(type>0 && !MapData.isScrollMapDraw(type)){
							boxdata=MapData.boxDatas[type];
							if(boxdata){
								bool=true;
								sp.graphics.fillTexture(boxdata.bitmapData,j*MapData.boxW,i*MapData.boxH,MapData.boxW+1,MapData.boxH+1);
							}
						}
					}
				}
				if(bool){}
					this.tiles[(ti/leny>>0)+"_"+(tj/lenx>>0)]=sp;
			}
		}
	}

	__proto.clear=function(){
		var sp;
		var $each_sp;
		for($each_sp in this.tiles){
			sp=this.tiles[$each_sp];
			if((sp instanceof laya.display.Sprite )){
				sp.graphics.destroy();
				if(sp.texture){
					sp.texture.destroy(true);
					sp.texture=null;
				}
				sp.destroy();
			}
		}
		var hc;
		for(var $each_hc in this.htmlcs){
			hc=this.htmlcs[$each_hc];
			hc.dispose();
			hc.releaseResource(true);
		}
		this.tiles=new Dictionary;
		this.htmlcs.length=0;
	}

	BornBigMapTiles.getInstance=function(){
		if(!BornBigMapTiles.instance)new BornBigMapTiles;
		return BornBigMapTiles.instance;
	}

	BornBigMapTiles.instance=null;
	return BornBigMapTiles;
})()


/**
*场景配置数据
*@author Administrator
*
*/
//class game.control.loadmap.SceneConfig
var SceneConfig=(function(){
	function SceneConfig(){}
	__class(SceneConfig,'game.control.loadmap.SceneConfig');
	SceneConfig.TILE_SIZE_W=256;
	SceneConfig.TILE_SIZE_H=256;
	__static(SceneConfig,
	['TILE_SIZE_W_R',function(){return this.TILE_SIZE_W_R=1/256;},'TILE_SIZE_H_R',function(){return this.TILE_SIZE_H_R=1/256;}
	]);
	return SceneConfig;
})()


/**
*滚动图
*@author guowc
*
*/
//class game.control.ScrollMap
var ScrollMap=(function(){
	function ScrollMap(){
		this.top=null;
		this.dic=[];
		this.wid=0;
		this.hei=0;
		this.widd=NaN;
		this.heii=NaN;
		this.renderDic=null;
		this._container=null;
		this.boxRect=null;
		this.pools=null;
		this.prevFillRect=null;
		this.add=2;
		this.pt=new Point;
		this.prevFillRect=new Rectangle();
		this.renderDic=[];
		this.boxRect=new Rectangle();
		this.pools=[];
		this.top=GlobalAPI.moveViewPort.getLayerContainer(5);
	}

	__class(ScrollMap,'game.control.ScrollMap');
	var __proto=ScrollMap.prototype;
	/**
	*
	*@param x 屏幕坐标
	*@param y
	*@return
	*
	*/
	__proto.getPic=function(x,y){
		var sx=x*this.widd>>0;
		var sy=y*this.heii>>0;
		if(MapData.mapData && MapData.mapData[sy]){
			var type=MapData.mapData[sy][sx];
			if(type > 0 && type<MapData.bgboxSort){
				var tile=this.renderDic [sy*MapData.sign+sx];
				if(!tile)return null;
				var bmp=tile.bmp;
				if(bmp.texture)
					return tile;
			}
		}
		return null;
	}

	/**
	*
	*@param sx 地图坐标
	*@param sy
	*@return
	*
	*/
	__proto.getPicTile=function(sx,sy){
		if(MapData.mapData && MapData.mapData[sy] && MapData.mapData[sy][sx]<MapData.bgboxSort){
			var tile=this.renderDic [sy*MapData.sign+sx];
			return tile;
		}
		return null;
	}

	__proto.clearPicTile=function(sx,sy){
		var tile=this.renderDic [sy*MapData.sign+sx];
		if(tile){
			tile.remove();
		}
		if(MapData.mapData[sy]){
			MapData.mapData[sy][sx]=0;
		}
	}

	__proto.addPicTile=function(sx,sy,type){
		var tile;
		var bmp;
		tile=this.renderDic[sy*MapData.sign+sx]=this.getTile(sx,sy);
		bmp=tile.bmp;
		if(!bmp.parent){
			tile.type=type;
			if(type==0){
				}else{
				MapData.mapData[sy][sx]=type;
				tile.x=bmp.x=sx *this.wid;
				tile.y=bmp.y=sy *this.hei;
				var boxData=MapData.boxDatas[type];
				if(boxData){
					bmp.texture=boxData.bitmapData;
					this._container.addChild(bmp);
				}
			}
		}
	}

	__proto.fillRectOnce=function(container,viewRect){
		var tile;
		var $each_tile;
		for($each_tile in this.renderDic){
			tile=this.renderDic[$each_tile];
			tile.remove();
			this.pools.push(tile);
		}
		this.renderDic.length=0;
		this.fillRect(container,viewRect);
		this.prevFillRect.x=this.prevFillRect.y=this.prevFillRect.width=this.prevFillRect.height=0;
	}

	__proto.fillRect=function(container,viewRect){
		if (this.prevFillRect.x+this.prevFillRect.width>=viewRect.x+viewRect.width
			&& this.prevFillRect.x<=viewRect.x
		&& this.prevFillRect.y<=viewRect.y
		&& this.prevFillRect.y+this.prevFillRect.height>=viewRect.y+viewRect.height){
			return;
		}
		if(!this._container){
			this._container=container;
		}
		this.dic.length=0;
		var sy=viewRect.y *MapData.rboxH>>0;
		var sx=viewRect.x *MapData.rboxW>>0;
		var endTileY=Math.ceil((viewRect.y+viewRect.height)*MapData.rboxH)+this.add;
		var endTileX=Math.ceil((viewRect.x+viewRect.width)*MapData.rboxW)+this.add;
		this.prevFillRect.x=sx *MapData.boxW;
		this.prevFillRect.y=sy *MapData.boxH;
		this.prevFillRect.width=(endTileX-sx)*MapData.boxW;
		this.prevFillRect.height=(endTileY-sy)*MapData.boxH;
		var tile;
		var i=sy;
		var j=0;
		while(i < endTileY){
			j=sx;
			while(j < endTileX){
				if(!this.renderDic[i*MapData.sign+j]){
					this.dic[i*MapData.sign+j]=this.getTile(j,i);
					GlobalAPI.activeMgr.checkLive(i*MapData.sign+j);
					}else{
					tile=this.renderDic[i*MapData.sign+j];
					if(tile){
						this.dic[i*MapData.sign+j]=tile;
						this.renderDic[i*MapData.sign+j]=null;
						delete this.renderDic[i*MapData.sign+j];
					}
				}
				j+=1;
			}
			i+=1;
		}
		var $each_tile;
		for($each_tile in this.renderDic){
			tile=this.renderDic[$each_tile];
			tile.remove();
			this.pools.push(tile);
		};
		var tmp=this.renderDic;
		this.renderDic=this.dic;
		this.dic=tmp;
		this.render(this.renderDic);
	}

	//trace("scrollMap**********",getTimer()-tim);
	__proto.render=function(dic){
		var tile;
		var bmp;
		var type=0;
		var dx=0;
		var dy=0;
		var $each_tile;
		for($each_tile in dic){
			tile=dic[$each_tile];
			if(tile.isEmpty){
				dx=tile.tx;
				dy=tile.ty;
				if(!MapData.mapData[dy] || !MapData.mapData[dy][dx])
					type=0;
				else
				type=MapData.mapData[dy][dx];
				tile.type=type;
				if(type==0 || !MapData.isScrollMapDraw(type)){
					}else{
					bmp=tile.bmp;
					tile.x=bmp.x=dx *this.wid;
					tile.y=bmp.y=dy *this.hei;
					var boxData=MapData.boxDatas[type];
					if(boxData){
						bmp.texture=boxData.bitmapData;
						if(tile.type==MapData.waterSort || tile.type==60007){
							this.top.addChild(bmp);
							}else{
							this._container.addChild(bmp);
						}
						tile.isEmpty=false;
						}else if(type==MapData.jumpWallClearSort || type==MapData.moveSortR || type==MapData.moveSortL){
					}
				}
			}
		}
	}

	/**
	*设定格子大小
	*@param wid
	*@param hei
	*
	*/
	__proto.setBoxRect=function(w,h){
		this.wid=this.boxRect.width=w;
		this.hei=this.boxRect.height=h;
		this.widd=1/this.wid;
		this.heii=1/this.hei;
	}

	__proto.getTile=function(x,y){
		var tile;
		if(this.pools.length > 0){
			tile=this.pools.pop();
			tile.tx=x;
			tile.ty=y;
			tile.x=x*MapData.boxW;
			tile.y=y*MapData.boxH;
			}else{
			tile=new Tiled(x,y);
		}
		return tile;
	}

	__proto.reset=function(){
		var tile;
		var $each_tile;
		for($each_tile in this.renderDic){
			tile=this.renderDic[$each_tile];
			tile.remove();
			this.pools.push(tile);
		}
		this.prevFillRect.x=this.prevFillRect.y=this.prevFillRect.width=this.prevFillRect.height=0;
		this.renderDic.length=0;
		this.pt.x=this.pt.y=0;
		this.boxRect.width=this.boxRect.height=0;
		this.wid=this.hei=0;
	}

	__proto.swapPicTile=function(sx,sy,type,skin){
		(type===void 0)&& (type=1201);
		(skin===void 0)&& (skin=false);
		var tile=this.renderDic [sy*MapData.sign+sx];
		if(tile){
			MapData.mapData[sy][sx]=tile.type=type;
			var boxData=MapData.boxDatas[type];
			if(skin && boxData){
				tile.bmp.texture=boxData.bitmapData;
			}
		}
	}

	return ScrollMap;
})()


//class game.control.Tiled
var Tiled=(function(){
	function Tiled(sx,sy){
		this.x=0;
		this.y=0;
		this.tx=0;
		this.ty=0;
		this.bmp=null;
		this.type=0;
		this.isEmpty=true;
		this.hp=0;
		this.hp=80;
		this.tx=sx;
		this.ty=sy;
		this.x=this.tx*MapData.boxW;
		this.y=this.tx*MapData.boxH;
		if(!this.bmp){
			this.bmp=new Image();
		}
	}

	__class(Tiled,'game.control.Tiled');
	var __proto=Tiled.prototype;
	__proto.remove=function(){
		this.hp=80;
		this.tx=this.ty=0;
		this.type=0;
		this.bmp.removeSelf();
		this.bmp.texture=null;
		this.isEmpty=true;
	}

	return Tiled;
})()


//class game.effect.ImgAniEffect
var ImgAniEffect=(function(){
	function ImgAniEffect(){
		this.dirt=null;
		this.pools=null;
		this.effect=null;
		if(ImgAniEffect.instance)return;
		ImgAniEffect.instance=this;
		this.pools=[];
		this.effect=GlobalAPI.moveViewPort.getLayerContainer(4);
	}

	__class(ImgAniEffect,'game.effect.ImgAniEffect');
	var __proto=ImgAniEffect.prototype;
	/**
	*
	*@param val 放置的容器 null为effect
	*@param x
	*@param y
	*@param name
	*
	*/
	__proto.start=function(val,x,y,name,autoclear){
		(autoclear===void 0)&& (autoclear=true);
		if(!val){
			val=this.effect;
		}
		if(this.pools.length>0){
			this.dirt=this.pools.pop();
			this.dirt.scaleX=this.dirt.scaleY=1;
			}else{
			this.dirt=new AniMc;
			this.dirt.loadResource(PathMgr.path_miniani+"weapon.json",PathMgr.path_miniani+"imgani"+".ani");
		}
		if(autoclear){
			this.dirt.on("complete",this,this.over,[this.dirt]);
		}
		this.dirt.x=x;
		this.dirt.y=y;
		this.dirt.setPlay(0,false,name);
		val.addChild(this.dirt);
		return this.dirt;
	}

	__proto.over=function(val){
		val.off("complete",this,this.over);
		val.setStop();
		val.index=1;
		if(val.rotation!=0){
			val.rotation=0;
		}
		this.pools.push(val);
		val.removeSelf();
	}

	ImgAniEffect.getInstance=function(){
		if(!ImgAniEffect.instance)
			new ImgAniEffect;
		return ImgAniEffect.instance;
	}

	ImgAniEffect.mount="mount";
	ImgAniEffect.hero="hero";
	ImgAniEffect.system_head="system_head";
	ImgAniEffect.fire_eye="fire_eye";
	ImgAniEffect.instance=null;
	return ImgAniEffect;
})()


//class game.effect.MiniAniEffect
var MiniAniEffect=(function(){
	function MiniAniEffect(){
		this.dirt=null;
		this.pools=null;
		this.effect=null;
		if(MiniAniEffect.instance)return;
		MiniAniEffect.instance=this;
		this.pools=[];
		this.effect=GlobalAPI.moveViewPort.getLayerContainer(4);
	}

	__class(MiniAniEffect,'game.effect.MiniAniEffect');
	var __proto=MiniAniEffect.prototype;
	/**
	*
	*@param val 放置的容器 null为effect
	*@param x
	*@param y
	*@param name
	*
	*/
	__proto.start=function(val,x,y,name,autoclear,interval,scale){
		(autoclear===void 0)&& (autoclear=true);
		(interval===void 0)&& (interval=50);
		(scale===void 0)&& (scale=1);
		if(!val){
			val=this.effect;
		}
		if(this.pools.length>0){
			this.dirt=this.pools.pop();
			this.dirt.rotation=0;
			}else{
			this.dirt=new AniMc;
			this.dirt.loadResource(PathMgr.path_miniani+"miniani.json",PathMgr.path_miniani+"miniani"+".ani");
		}
		this.dirt.scale(scale,scale,true);
		if(autoclear){
			this.dirt.on("complete",this,this.over,[this.dirt]);
		}
		this.dirt.interval=interval;
		this.dirt.x=x;
		this.dirt.y=y;
		this.dirt.setPlay(0,false,name);
		val.addChild(this.dirt);
		return this.dirt;
	}

	__proto.over=function(val){
		val.off("complete",this,this.over);
		val.setStop();
		val.index=1;
		if(val.rotation!=0){
			val.rotation=0;
		}
		this.pools.push(val);
		val.removeSelf();
	}

	MiniAniEffect.getInstance=function(){
		if(!MiniAniEffect.instance)
			new MiniAniEffect;
		return MiniAniEffect.instance;
	}

	MiniAniEffect.hurt="hurt";
	MiniAniEffect.door="door";
	MiniAniEffect.tiparrow="tiparrow";
	MiniAniEffect.heart="105";
	MiniAniEffect.magnet="106";
	MiniAniEffect.gold="101";
	MiniAniEffect.star="104";
	MiniAniEffect.defend="109";
	MiniAniEffect.defendeffect="defend";
	MiniAniEffect.boom7="boom7";
	MiniAniEffect.boom8="boom8";
	MiniAniEffect.boom10="boom10";
	MiniAniEffect.boom11="boom11";
	MiniAniEffect.spring="spring";
	MiniAniEffect.uplev="uplev";
	MiniAniEffect.arrowtip="arrowtip";
	MiniAniEffect.touchboom="touchboom";
	MiniAniEffect.touchbolt="touchbolt";
	MiniAniEffect.firelight="firelight";
	MiniAniEffect.shell0="shell0";
	MiniAniEffect.shell1="shell1";
	MiniAniEffect.blood="blood";
	MiniAniEffect.bloodb="bloodb";
	MiniAniEffect.dust="dust";
	MiniAniEffect.jumpdust="jumpdust";
	MiniAniEffect.dustw="dustw";
	MiniAniEffect.stone0="stone0";
	MiniAniEffect.ash="ash";
	MiniAniEffect.futou="futou";
	MiniAniEffect.bluefire="bluefire";
	MiniAniEffect.fire="fire";
	MiniAniEffect.endgas="endgas";
	MiniAniEffect.endgasB="endgasB";
	MiniAniEffect.fair="fair";
	MiniAniEffect.clear="clear";
	MiniAniEffect.warnboss="warnboss";
	MiniAniEffect.instance=null;
	return MiniAniEffect;
})()


/**
*数字飞行
*@author guowc
*
*/
//class game.effect.NumberFly
var NumberFly=(function(){
	function NumberFly(numName,numRect,size){
		this._numName=null;
		this._numRect=null;
		this._size=0;
		this.pools=null;
		this.container=null;
		this.idx=0;
		this.numeffect=null;
		this.numlist=null;
		this._numName=numName;
		this._numRect=numRect;
		this._size=size;
		this.numlist=[];
		this.pools=[];
		this.container=GlobalAPI.moveViewPort.getLayerContainer(4);
	}

	__class(NumberFly,'game.effect.NumberFly');
	var __proto=NumberFly.prototype;
	__proto.start=function(x,y,num){
		if(this.pools.length>0){
			this.numeffect=this.pools.pop();
			}else{
			this.numeffect=new NumberEffect;
			this.numeffect.setAsset(this._numName,PathMgr.path_miniani+"number.json",PathMgr.path_miniani+"number"+".ani",
			this._numRect,this._size);
		}
		this.numeffect.idx=45;
		this.numeffect.setNum(num);
		this.numeffect.pivot(this._numRect.width*num.length>>1,this._numRect.height>>1);
		this.numeffect.x=x;
		this.numeffect.y=y-this._numRect.bottom;
		this.container.addChild(this.numeffect);
		this.numlist.unshift(this.numeffect);
		this.idx++;
		if(this.idx==1)
			GlobalAPI.heartMgr.add(this,this.play);
	}

	__proto.start1=function(x,y,num){
		if(this.pools.length>0){
			this.numeffect=this.pools.pop();
			}else{
			this.numeffect=new NumberEffect;
			this.numeffect.setAsset(this._numName,PathMgr.path_miniani+"number.json",PathMgr.path_miniani+"number"+".ani",
			this._numRect,this._size);
		}
		this.numeffect.setNum(num);
		this.numeffect.x=x;
		this.numeffect.y=y-this._numRect.bottom;
		this.container.addChild(this.numeffect);
		Tween.to(this.numeffect,{x:x,y:y-this._numRect.bottom-60,ease:Ease.backOut},600,null,Handler.create(this,this.over,[this.numeffect]));
	}

	__proto.over=function(et){
		this.container.removeChild(et);
		this.pools.push(et);
	}

	__proto.play=function(){
		var et;
		var $each_et;
		for($each_et in this.numlist){
			et=this.numlist[$each_et];
			et.y-=2;
			et.idx-=1;
			if(et.idx<20){
				et.scale(et.scaleX-0.05,et.scaleY-0.05,true);
				}else{
				et.scale(et.scaleX+0.05,et.scaleY+0.05,true);
			}
		}
		if(et.idx<1){
			et.scale(1,1,true);
			this.numlist.pop();
			this.container.removeChild(et);
			this.pools.push(et);
			this.idx--;
		}
		if(this.idx<1)
			GlobalAPI.heartMgr.remove(this,this.play);
	}

	return NumberFly;
})()


//class game.effect.RoleAniEffect
var RoleAniEffect=(function(){
	function RoleAniEffect(){
		this.dirt=null;
		this.pools=null;
		this.effect=null;
		if(RoleAniEffect.instance)return;
		RoleAniEffect.instance=this;
		this.pools=[];
		this.effect=GlobalAPI.moveViewPort.getLayerContainer(4);
	}

	__class(RoleAniEffect,'game.effect.RoleAniEffect');
	var __proto=RoleAniEffect.prototype;
	/**
	*
	*@param val 放置的容器 null为effect
	*@param x
	*@param y
	*@param name
	*
	*/
	__proto.start=function(val,x,y,name,autoclear){
		(autoclear===void 0)&& (autoclear=true);
		if(!val){
			val=this.effect;
		}
		if(this.pools.length>0){
			this.dirt=this.pools.pop();
			this.dirt.scaleX=this.dirt.scaleY=1;
			}else{
			this.dirt=new AniMc;
			this.dirt.loadResource(PathMgr.path_miniani+"roleani.json",PathMgr.path_miniani+"roleani"+".ani");
		}
		if(autoclear){
			this.dirt.on("complete",this,this.over,[this.dirt]);
		}
		this.dirt.x=x;
		this.dirt.y=y;
		this.dirt.setPlay(0,false,name);
		val.addChild(this.dirt);
		return this.dirt;
	}

	__proto.over=function(val){
		val.off("complete",this,this.over);
		val.setStop();
		val.index=1;
		if(val.rotation!=0){
			val.rotation=0;
		}
		this.pools.push(val);
		val.removeSelf();
	}

	RoleAniEffect.getInstance=function(){
		if(!RoleAniEffect.instance)
			new RoleAniEffect;
		return RoleAniEffect.instance;
	}

	RoleAniEffect.hero="hero";
	RoleAniEffect.handr="handr";
	RoleAniEffect.handl="handl";
	RoleAniEffect.instance=null;
	return RoleAniEffect;
})()


/**
*幻影
*@author guowc
*
*/
//class game.effect.ShadowA
var ShadowA=(function(){
	function ShadowA(){
		this.idx=0;
		this.effect=null;
		this.list=null;
		if(ShadowA.instance)return;
		ShadowA.instance=this;
		this.list=[];
		this.effect=GlobalAPI.moveViewPort.getLayerContainer(0);
	}

	__class(ShadowA,'game.effect.ShadowA');
	var __proto=ShadowA.prototype;
	__proto.add=function(val){
		this.effect.addChild(val);
		this.list.push(val);
		this.idx++;
		if(this.idx==1){
			GlobalAPI.heartMgr.add(this,this.step);
		}
	}

	__proto.step=function(){
		var dis;
		var len=this.list.length;
		var i=0;
		for(i=0;i<len;i++){
			dis=this.list[i];
			if(dis){
				dis.scaleX-=0.02;
				dis.scaleY-=0.02;
				dis.alpha-=0.05;
				if(dis.alpha <0.1){
					dis.alpha=1;
					dis.scaleX=dis.scaleY=1;
					this.idx--;
					dis.texture=null;
					GlobalAPI.poolMgr.disposebitmap(dis);
					dis.removeSelf();
					this.list.splice(i,1);
					i--;
					len--;
				}
			}
		}
		if(this.idx<1){
			GlobalAPI.heartMgr.remove(this,this.step);
		}
	}

	__proto.reset=function(){
		this.idx=0;
		GlobalAPI.heartMgr.remove(this,this.step);
		var dis;
		for(var $each_dis in this.list){
			dis=this.list[$each_dis];
			dis.alpha=1;
			dis.scaleX=dis.scaleY=1;
			dis.texture=null;
			GlobalAPI.poolMgr.disposebitmap(dis);
			dis.removeSelf();
		}
		this.list.length=0;
	}

	ShadowA.getInstance=function(){
		if(!ShadowA.instance)
			new ShadowA;
		return ShadowA.instance;
	}

	ShadowA.instance=null;
	return ShadowA;
})()


/**
*震屏效果
*@author guowc
*
*/
//class game.effect.ShakeEffect
var ShakeEffect=(function(){
	function ShakeEffect(){}
	__class(ShakeEffect,'game.effect.ShakeEffect');
	ShakeEffect.start=function(xspeed,yspeed,xtim,ytim){
		(xspeed===void 0)&& (xspeed=0);
		(yspeed===void 0)&& (yspeed=5);
		(xtim===void 0)&& (xtim=0);
		(ytim===void 0)&& (ytim=16);
		if(ShakeEffect.ok==false){
			ShakeEffect.ok=true;
			ShakeEffect.idx=GlobalAPI.moveViewPort.x;
			ShakeEffect.idy=GlobalAPI.moveViewPort.y;
		}
		EffectShake.addShake(GlobalAPI.moveViewPort,xspeed,yspeed,xtim,ytim);
		EffectShake.setStartXY(ShakeEffect.idx,ShakeEffect.idy);
		GlobalAPI.heartMgr.add(null,ShakeEffect.move);
	}

	ShakeEffect.move=function(){
		if(EffectShake.update()<1){
			ShakeEffect.ok=false;
			GlobalAPI.heartMgr.remove(null,ShakeEffect.move);
		}
	}

	ShakeEffect.ok=false;
	ShakeEffect.idx=0;
	ShakeEffect.idy=0;
	return ShakeEffect;
})()


/**
*数字飞行
*@author guowc
*
*/
//class game.effect.TxtFly
var TxtFly=(function(){
	function TxtFly(){
		this.pools=null;
		this.container=null;
		this.image=null;
		if(TxtFly.instance)return;
		TxtFly.instance=this;
		this.pools=[];
		this.container=GlobalAPI.moveViewPort.getLayerContainer(4);
	}

	__class(TxtFly,'game.effect.TxtFly');
	var __proto=TxtFly.prototype;
	__proto.start=function(x,y,iconurl){
		(iconurl===void 0)&& (iconurl="");
		if(this.pools.length>0){
			this.image=this.pools.pop();
			}else{
			this.image=new Image();
		}
		this.image.skin=iconurl;
		this.image.x=x;
		this.image.y=y;
		this.container.addChild(this.image);
		Tween.to(this.image,{x:x,y:y-100,ease:Ease.backOut},800,null,Handler.create(this,this.over,[this.image]));
	}

	__proto.over=function(et){
		this.container.removeChild(et);
		this.pools.push(et);
	}

	TxtFly.getInstance=function(){
		if(!TxtFly.instance)new TxtFly;
		return TxtFly.instance;
	}

	TxtFly.instance=null;
	return TxtFly;
})()


//class game.effect.WeaponAni
var WeaponAni=(function(){
	function WeaponAni(){
		this.dirt=null;
		this.effect=null;
		if(WeaponAni.instance)return;
		WeaponAni.instance=this;
		this.effect=GlobalAPI.moveViewPort.getLayerContainer(4);
	}

	__class(WeaponAni,'game.effect.WeaponAni');
	var __proto=WeaponAni.prototype;
	/**
	*@param name
	*
	*/
	__proto.start=function(name){
		this.dirt=new AniMc;
		this.dirt.loadResource(PathMgr.path_miniani+"weapon.json",PathMgr.path_miniani+"weapon"+".ani");
		this.dirt.setStop(0,name);
		return this.dirt;
	}

	WeaponAni.getInstance=function(){
		if(!WeaponAni.instance)
			new WeaponAni;
		return WeaponAni.instance;
	}

	WeaponAni.handweapon="handweapon";
	WeaponAni.lookweapon="lookweapon";
	WeaponAni.weaponbar="weaponbar";
	WeaponAni.instance=null;
	return WeaponAni;
})()


/**
*全局API
*@author guowc
*
*/
//class game.GlobalAPI
var GlobalAPI=(function(){
	function GlobalAPI(){}
	__class(GlobalAPI,'game.GlobalAPI');
	GlobalAPI.init=function(){
		StringInfo.init(0);
		GlobalAPI.isChid=!GlobalAPI.ispackge;
		FiltersColor.init();
		MathUtil.init();
		KeyUtil.init();
		KeyUtil.initMouse();
		GlobalAPI.bg=new Image;
		if(!GlobalAPI.root)
			GlobalAPI.root=new Sprite;
		GlobalAPI.root.addChild(GlobalAPI.bg);
		GlobalAPI.bgMove=new BgMove;
		GlobalAPI.root.addChild(GlobalAPI.bgMove);
		GlobalAPI.root.mouseEnabled=true;
		Laya.stage.addChild(GlobalAPI.root);
		GlobalAPI.heartMgr=HeartManager.getInstance();
		GlobalAPI.heartMgr.hasTim(true);
		GlobalAPI.moveViewPort=MoveViewPort.getInstance();
		GlobalAPI.buffVO=new BuffVO;
		GlobalAPI.taskVO=new TaskVO;
		GlobalAPI.rankVO=new RankVO;
		GlobalAPI.scrollMap=new ScrollMap;
		GlobalAPI.weaponinfo=new WeaponInfo;
		GlobalAPI.mountinfo=new MountInfo;
		GlobalAPI.skillinfo=new SkillInfo;
		GlobalAPI.weaponptinfo=new WeaponPtInfo;
		GlobalAPI.heroinfo=new HeroInfo;
		GlobalAPI.miniAniEffect=MiniAniEffect.getInstance();
		GlobalAPI.roleAniEffect=RoleAniEffect.getInstance();
		GlobalAPI.weaponAni=WeaponAni.getInstance();
		GlobalAPI.shadowA=ShadowA.getInstance();
		GlobalAPI.levVO=new LevelVO;
		GlobalAPI.heroproxy=HeroProxy.getInstance();
		GlobalAPI.mountproxy=new MountProxy;
		GlobalAPI.systembar=SystemBar.getInstance();
		GlobalAPI.moneyBar=MoneyBar.getInstance();
		QuickMoveTip.init(GlobalAPI.root);
		SkinMgr.init();
		GlobalAPI.levelMgr=LevelMgr.getInstance();
		GlobalAPI.blockAniMgr=BlockAniMgr.getInstance();
		GlobalAPI.propMgr=PropMgr.getInstance();
		GlobalAPI.activeMgr=ActiveMgr.getInstance();
		GlobalAPI.sceneRoleMgr=SceneRoleMgr.getInstance();
		GlobalAPI.poolMgr=PoolMgr.getInstance();
		GlobalAPI.hitMgr=HitMgr.getInstance();
		GlobalAPI.soundMgr=SoundMgr.getInstance();
		GlobalAPI.weaponMgr=new WeaponMgr(1);
		GlobalAPI.weaponMgr2=new WeaponMgr(2);
		GlobalAPI.weaponEnemyMgr=WeaponEnemyMgr.getInstance();
		GlobalAPI.numflyMgr=NumberFlyMgr.getInstance();
		GlobalAPI.awardFlyMgr=AwardFlyMgr.getInstance();
		GlobalAPI.tipMgr=TipMgr.getInstance();
		Laya.stage.on("focus",null,GlobalAPI.onfocus);
		Laya.stage.on("blur",null,GlobalAPI.onblur);
		Laya.stage.on("mousedown",null,GlobalAPI.focusDown);
		GlobalAPI.playAd(null,true);
	}

	GlobalAPI.playAd=function(handler,testad){
		(testad===void 0)&& (testad=false);
		GlobalAPI._handler=handler;
		GlobalAPI._testad=testad;
		if(GlobalAPI.ispackge){
			if(GlobalAPI._handler){
				GlobalAPI._handler.runWith(10001);
				GlobalAPI._handler=null;
			}
			return;
		}
		Browser.window.h5api.canPlayAd(GlobalAPI.canplaycallback);
	}

	GlobalAPI.canplaycallback=function(data){
		GlobalAPI.adtime= 1;
		if(GlobalAPI._testad)return;
		if(GlobalAPI.adtime<1){
			QuickMoveTip.show("今日广告次数用完,明日再来吧!");
			if(GlobalAPI._handler){
				GlobalAPI._handler.runWith(10012);
				GlobalAPI._handler=null;
			}
			}else{
			Browser.window.h5api.playAd(GlobalAPI.callback);
		}
	}

	GlobalAPI.callback=function(obj){
		console.log('代码:'+obj.code+',消息:'+obj.message);
		if(obj.code===10000){
			}else if(obj.code===10001){
			if(GlobalAPI._handler){
				GlobalAPI._handler.runWith(obj.code);
				GlobalAPI._handler=null;
			}
			GlobalAPI.adtime-=1;
			Laya.stage.focus=Laya.stage;
			}else {
			QuickMoveTip.show("广告异常,请重试");
			if(GlobalAPI._handler){
				GlobalAPI._handler.runWith(obj.code);
				GlobalAPI._handler=null;
			}
		}
	}

	GlobalAPI.updatesize=function(){
		LevelView.getInstance().updatesize();
		StartView.getInstance().updatesize();
		game.GlobalAPI.systembar.updatesize();
	}

	GlobalAPI.showAni=function(uiwin,isShow){
		(isShow===void 0)&& (isShow=true);
		if(isShow){
			uiwin.pivotX=uiwin.width>>1;
			uiwin.pivotY=uiwin.height>>1;
			uiwin.x=MapData.stageW>>1;
			uiwin.y=MapData.stageH>>1;
			uiwin.scale(0.1,0.1,true);
			var scale=1;
			if(GlobalAPI.isPC==false){
				scale=AutoScale.getScale(MapData.stageW,MapData.stageH-50,uiwin.width,uiwin.height);
			}
			Tween.to(uiwin,{scaleX:scale,scaleY:scale,ease:Ease.backOut},300);
			}else{
			Tween.to(uiwin,{scaleX:0,scaleY:0,ease:Ease.linearOut},200,null,Handler.create(null,GlobalAPI.aniOver,[uiwin]));
		}
	}

	GlobalAPI.aniOver=function(uiwin){
		uiwin.removeSelf();
		uiwin.scale(1,1,true);
	}

	GlobalAPI.showBg=function(show){
		if(!GlobalAPI.blackbg){
			GlobalAPI.blackbg=new Sprite;
			GlobalAPI.blackbg.mouseEnabled=true;
			GlobalAPI.blackbg.alpha=0.6;
			GlobalAPI.blackbg.graphics.drawRect(0,0,MapData.stageW,MapData.stageH,"#333333",null,0);
			GlobalAPI.blackbg.hitArea=new Rectangle(0,0,MapData.stageW,MapData.stageH);
			}else{
			GlobalAPI.blackbg.graphics.clear();
			GlobalAPI.blackbg.graphics.drawRect(0,0,MapData.stageW,MapData.stageH,"#333333",null,0);
			GlobalAPI.blackbg.hitArea.width=MapData.stageW;
			GlobalAPI.blackbg.hitArea.height=MapData.stageH;
		}
		if(show){
			GlobalAPI.root.addChild(GlobalAPI.blackbg);
			}else{
			GlobalAPI.blackbg.removeSelf();
		}
		GlobalAPI.blackbgshow=show;
	}

	GlobalAPI.pause=function(val){
		if(val){
			GlobalAPI.systembar.skillbar.pause();
			GlobalAPI.systembar.skilladdbar.pause();
			GlobalAPI.heartMgr.pause();
			}else{
			GlobalAPI.heartMgr.play();
			GlobalAPI.systembar.skillbar.play();
			GlobalAPI.systembar.skilladdbar.play();
		}
	}

	GlobalAPI.autoscale=function(val){
		val.pivotX=val.width>>1;
		val.pivotY=val.height>>1;
		val.x=MapData.stageW>>1;
		val.y=MapData.stageH>>1;
		var sc=NaN;
		if(GlobalAPI.isPC){
			sc=AutoScale.getScale(MapData.stageW,MapData.stageH,960,600);
			}else{
			sc=AutoScale.getScale(MapData.stageW,MapData.stageH,800,500);
		}
		val.scale(sc,sc);
	}

	GlobalAPI.tilebg=function(){
		if(!GlobalAPI.bgtexture){
			GlobalAPI.bgtexture=Loader.getRes("t44sd/img/bg.jpg");
		}
		GlobalAPI.bg.texture=GlobalAPI.bgtexture;
		if(GlobalAPI.bg.texture && MapData.stageW>GlobalAPI.bg.texture.width){
			GlobalAPI.bg.scaleX=MapData.stageW/GlobalAPI.bg.texture.width;
		}
		if(GlobalAPI.bg.texture && MapData.stageH>GlobalAPI.bg.texture.height){
			GlobalAPI.bg.scaleY=MapData.stageH/GlobalAPI.bg.texture.height;
		}
	}

	GlobalAPI.setMouse=function(val){
		if(GlobalAPI.isPC){
			Mouse.cursor=val;
		}
	}

	GlobalAPI.gotourl=function(url){
		Browser.window.location.href=url;
	}

	GlobalAPI.onblur=function(){
		GlobalAPI.hasFocus=false;
		if(MapData.isStart && GlobalAPI.blackbgshow==false){
			PauseView.getInstance().show(true);
		}
	}

	GlobalAPI.onfocus=function(){
		GlobalAPI.hasFocus=true;
	}

	GlobalAPI.focusDown=function(){
		if(!GlobalAPI.hasFocus){
			Browser.window.focus();
		}
		GlobalAPI.hasFocus=true;
	}

	GlobalAPI._testad=false;
	GlobalAPI.adtime=10;
	GlobalAPI.adcode0=10000;
	GlobalAPI.adcode1=10001;
	GlobalAPI._handler=null;
	GlobalAPI.bgtexture=null;
	GlobalAPI.isChid=true;
	GlobalAPI.moveViewPort=null;
	GlobalAPI.levelMgr=null;
	GlobalAPI.blockAniMgr=null;
	GlobalAPI.propMgr=null;
	GlobalAPI.activeMgr=null;
	GlobalAPI.sceneRoleMgr=null;
	GlobalAPI.poolMgr=null;
	GlobalAPI.hitMgr=null;
	GlobalAPI.soundMgr=null;
	GlobalAPI.weaponMgr=null;
	GlobalAPI.weaponMgr2=null;
	GlobalAPI.numflyMgr=null;
	GlobalAPI.weaponEnemyMgr=null;
	GlobalAPI.awardFlyMgr=null;
	GlobalAPI.tipMgr=null;
	GlobalAPI.bgMove=null;
	GlobalAPI.moneyBar=null;
	GlobalAPI.test=false;
	GlobalAPI.scrollMap=null;
	GlobalAPI.root=null;
	GlobalAPI.isStart=false;
	GlobalAPI.bg=null;
	GlobalAPI.heartMgr=null;
	GlobalAPI.heros=null;
	GlobalAPI.hero=null;
	GlobalAPI.hero2=null;
	GlobalAPI.heroproxy=null;
	GlobalAPI.mountproxy=null;
	GlobalAPI.levVO=null;
	GlobalAPI.weaponinfo=null;
	GlobalAPI.mountinfo=null;
	GlobalAPI.heroinfo=null;
	GlobalAPI.weaponptinfo=null;
	GlobalAPI.shadowA=null;
	GlobalAPI.shootpt=null;
	GlobalAPI.heropt=null;
	GlobalAPI.heropt2=null;
	GlobalAPI.heroGroundPt=null;
	GlobalAPI.heroGroundPt2=null;
	GlobalAPI.shootGroundpt=null;
	GlobalAPI.debugTxt=null;
	GlobalAPI.keyboard=null;
	GlobalAPI.isPC=false;
	GlobalAPI.systembar=null;
	GlobalAPI.miniAniEffect=null;
	GlobalAPI.roleAniEffect=null;
	GlobalAPI.weaponAni=null;
	GlobalAPI.skillinfo=null;
	GlobalAPI.taskVO=null;
	GlobalAPI.rankVO=null;
	GlobalAPI.buffVO=null;
	GlobalAPI.maplevel=1;
	GlobalAPI.level=0;
	GlobalAPI.ispackge=false;
	GlobalAPI.blackbgshow=false;
	GlobalAPI.nowdouble=false;
	GlobalAPI.blackbg=null;
	GlobalAPI.hasFocus=false;
	GlobalAPI.shootTip=false;
	GlobalAPI.tryweaponNowuse=false;
	GlobalAPI.aliveWeaponNowuse=false;
	GlobalAPI.canTrialWeapon=true;
	__static(GlobalAPI,
	['blackFilter',function(){return this.blackFilter=new ColorFilter([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0]);}
	]);
	return GlobalAPI;
})()


/**
*是否触发激活管理
*@author guowc
*
*/
//class game.manager.ActiveMgr
var ActiveMgr=(function(){
	function ActiveMgr(){
		this.rr=3;
		this.bosslist=[30101,30301,30201];
		this.addbosstype=0;
		this._jdpt=false;
		this.enemyid=0;
		this.foodid=0;
		this.ranlev=NaN;
		this._dispose=false;
		this.viewrect=null;
		this.enemys=null;
		this.moveBlocks=null;
		this.foods=null;
		this.monsterfoods=null;
		if(ActiveMgr.instance)return;
		ActiveMgr.instance=this;
	}

	__class(ActiveMgr,'game.manager.ActiveMgr');
	var __proto=ActiveMgr.prototype;
	__proto.start=function(){
		this.ranlev=0;
		GlobalAPI.levVO.name=(GlobalAPI.levelMgr.sort+1)+"-"+(GlobalAPI.levelMgr.nowLev+1);
		GlobalAPI.levVO.passtime=Browser.now();
		GlobalAPI.levVO.reset();
		this.enemys=[];
		this.foods=[];
		this.monsterfoods=[];
		this.viewrect=GlobalAPI.moveViewPort.viewRect;
		GlobalAPI.heartMgr.add(this,this.step);
		this._dispose=false;
	}

	__proto.setEnemys=function(val){
		this.enemys.length=0;
		var obj;
		this.enemyid=0;
		var vo;
		var bossvo;
		var $each_obj;
		for($each_obj in val){
			obj=val[$each_obj];
			vo=EnemyRoleVO.setData(obj.type,MapData.levelLev);
			if(vo.hp>30000){
				if(!bossvo){
					bossvo=vo;
					}else if(bossvo.hp<vo.hp){
					bossvo=vo;
				}
			}
			if((vo.gold<0 && MapData.levelLev<3 && vo.thing==6)||
				(vo.ai==408 && MapData.levelLev>1)){
				continue ;
			}
			vo.startX=obj.x*MapData.boxW;
			vo.startY=obj.y*MapData.boxH;
			vo.sign=obj.y*MapData.sign+obj.x>>0;
			if(!vo.stronghp){
				vo.config=true;
			}
			this.enemys[vo.sign]=vo;
			this.enemyid++;
		};
		if(bossvo){
			bossvo.isBoss=true;
		}
	}

	__proto.setMoveBlocks=function(val){
		this.moveBlocks=val;
	}

	/**
	*食物位置数据
	*@param val
	*
	*/
	__proto.setFoods=function(val){
		this.monsterfoods.length=0;
		this.foods.length=0;
		var obj;
		var data;
		var foodVO;
		this.foodid=0;
		this.foods=[];
		var $each_obj;
		for($each_obj in val){
			obj=val[$each_obj];
			foodVO=new FoodVO;
			data=MapData.foodData[obj.type];
			foodVO.startX=obj.x*MapData.boxW;
			foodVO.startY=obj.y*MapData.boxH;
			foodVO.mapX=obj.x;
			foodVO.mapY=obj.y;
			foodVO.look=data.bitmapData;
			foodVO.gold=data.gold;
			foodVO.hp=data.hp;
			foodVO.score=data.score;
			foodVO.type=data.type;
			foodVO.skin=data.skin;
			foodVO.sign=obj.y*MapData.sign+obj.x>>0;
			foodVO.config=true;
			foodVO.id=this.foodid;
			foodVO.noMagnet=GlobalAPI.propMgr.isNoMagnetProp(foodVO.skin);
			foodVO.monsters=data.monsters;
			this.foods[foodVO.sign]=foodVO;
			if(foodVO.skin==400){
				this.monsterfoods[foodVO.sign]=foodVO;
			}
			this.foodid++;
		};
	}

	__proto.setMonsters=function(fvo){
		MapData.monsters=null;
		MapData.monsterslen=0;
		if(MapData.monsters==null){
			MapData.monsters=fvo.monsters;
			MapData.monsterslen=MapData.monsters.length;
			MapData.monsterLen=fvo.score+MapData.levelLev;
			MapData.monsterNum=fvo.hp;
			MapData.monsterLen+=MapData.levelLev-1;
			MapData.monsterNum+=(MapData.levelLev-1)*2;
		}
	}

	//trace("MapData.monsters",MapData.monsterslen,MapData.monsters);
	__proto.randomMonsters=function(){
		if(this.ranlev>0){
			GlobalAPI.levVO.levelgem+=2;
		}
		MapData.mapLevel=this.ranlev*2;
		var ran=NaN;
		if(this.ranlev>this.rr){
			ran=Math.random()*(MapData.monsterSortlen-2-this.rr)+5403+this.rr>>0;
			}else{
			ran=this.ranlev+5403;
		};
		var fvo=MapData.foodData[ran];
		MapData.monsters=fvo.monsters;
		MapData.monsterslen=MapData.monsters.length;
		MapData.monsterLen=fvo.score;
		MapData.monsterNum=20;
		if(this.ranlev%this.rr==0){
			if(this.ranlev<this.rr*4){
				this.addbosstype=this.bosslist[(this.ranlev-this.rr)/this.rr>>0];
				}else{
				this.addbosstype=this.bosslist[Math.random()*this.bosslist.length>>0];
			}
		}
		this.ranlev++;
	}

	/**
	*检测
	*@param sign
	*
	*/
	__proto.checkLive=function(sign){
		var foodVO=this.foods[sign];
		if(foodVO){
			if(this._jdpt){
				if(foodVO.type==5201){
					MapData.jumppts.push(new Point(foodVO.startX,foodVO.startY));
					}else if(foodVO.type==5202){
					MapData.droppts.push(new Point(foodVO.startX,foodVO.startY));
					}else if(foodVO.type==5203){
					MapData.enemypts.push(new Point(foodVO.startX,foodVO.startY));
					}else{
					GlobalAPI.sceneRoleMgr.addFood(foodVO);
				}
				delete this.foods[foodVO.sign];
				}else{
				if(foodVO.type!=5201 && foodVO.type!=5202 && foodVO.type!=5203){
					delete this.foods[foodVO.sign];
					GlobalAPI.sceneRoleMgr.addFood(foodVO);
				}
			}
		};
		var enemyVO=this.enemys[sign];
		if(enemyVO){
			GlobalAPI.sceneRoleMgr.addEnemy(enemyVO);
			delete this.enemys[sign];
		}
	}

	//trace("timx*******",getTimer()-tim);
	__proto.setJumpDropPt=function(val){
		this._jdpt=val;
		if(this._jdpt){
			MapData.jumppts.length=0;
			MapData.droppts.length=0;
			MapData.enemypts.length=0;
			}else{
			MapData.jumpptsLen=MapData.jumppts.length;
			MapData.dropptsLen=MapData.droppts.length;
			MapData.enemyptsLen=MapData.enemypts.length;
		}
	}

	/**
	*取得怪物分布长度
	*@param vo
	*@return
	*
	*/
	__proto.getMonstersWid=function(vo){
		var i=0;
		var fvo;
		var wid=0;
		var yy=vo.mapY*MapData.sign;
		delete this.monsterfoods[yy+vo.mapX];
		for(i=0;i<200;i++){
			fvo=this.monsterfoods[yy+vo.mapX+i];
			if(fvo && fvo.type==vo.type){
				wid=MapData.boxW*i;
				if(this.foods[yy+vo.mapX+i]==fvo){
					delete this.foods[yy+vo.mapX+i];
					}else{
					GlobalAPI.sceneRoleMgr.removeFood(fvo.id,true);
				}
				delete this.monsterfoods[vo.mapY*MapData.sign+vo.mapX+i];
				break ;
			}
		}
		if(wid<GlobalAPI.moveViewPort.viewRect.width)
			wid=GlobalAPI.moveViewPort.viewRect.width;
		return wid;
	}

	__proto.step=function(){
		if(this._dispose)return;
		var block;
		var rect;
		var $each_block;
		for($each_block in this.moveBlocks){
			block=this.moveBlocks[$each_block];
			rect=block.maxRect;
			if(rect.x+rect.width<=this.viewrect.x ||
				rect.x>=this.viewrect.x+this.viewrect.width ||
			rect.y>=this.viewrect.y+this.viewrect.height ||
			rect.y+rect.height<=this.viewrect.y){
				block.stop();
				}else{
				block.play();
			}
		}
	}

	__proto.dispose=function(){
		GlobalAPI.heartMgr.remove(this,this.step);
		var block;
		var $each_block;
		for($each_block in this.moveBlocks){
			block=this.moveBlocks[$each_block];
			block.dispose();
		}
		if(this.enemys)
			this.enemys.length=0;
		if(this.foods)
			this.foods.length=0;
		if(this.monsterfoods)
			this.monsterfoods.length=0;
		MapData.jumppts.length=0;
		MapData.droppts.length=0;
		MapData.monsters=null;
		MapData.monsterslen=0;
		this.viewrect=null;
	}

	ActiveMgr.getInstance=function(){
		if(!ActiveMgr.instance)
			new ActiveMgr;
		return ActiveMgr.instance;
	}

	ActiveMgr.instance=null;
	return ActiveMgr;
})()


//class game.manager.AwardFlyMgr
var AwardFlyMgr=(function(){
	function AwardFlyMgr(){
		this.imgs=[];
		if(AwardFlyMgr.instance)return;
		AwardFlyMgr.instance=this;
	}

	__class(AwardFlyMgr,'game.manager.AwardFlyMgr');
	var __proto=AwardFlyMgr.prototype;
	__proto.addfly=function(container,foodid,sx,sy,ex,ey,handler){
		var img;
		var i=0;
		while(i<5){
			if(this.imgs.length>0){
				img=this.imgs.pop();
				}else{
				img=new Image();
			}
			img.texture=MapData.foodData[foodid].bitmapData;
			img.x=sx+i%3*30-(5-3)/2*30;
			img.y=sy+(i/3>>0)*20;
			container.addChild(img);
			if(i==0){
				Tween.to(img,{x:ex,y:ey},600,null,Handler.create(this,this.over,[img,handler]));
				}else{
				Tween.to(img,{x:ex,y:ey},600,null,Handler.create(this,this.over,[img]));
			}
			i++;
		}
	}

	__proto.over=function(img,handler){
		img.removeSelf();
		this.imgs.push(img);
		if(handler){
			handler.run()
		}
	}

	AwardFlyMgr.getInstance=function(){
		if(!AwardFlyMgr.instance)
			new AwardFlyMgr;
		return AwardFlyMgr.instance;
	}

	AwardFlyMgr.instance=null;
	return AwardFlyMgr;
})()


/**
*掉落方块
*@author guowc
*
*/
//class game.manager.BlockAniMgr
var BlockAniMgr=(function(){
	function BlockAniMgr(){
		this.rect=null;
		this.pools=null;
		this.effect=null;
		this.ar=[new Point(0,0),new Point(16,0),new Point(0,16),new Point(16,16)];
		this._pt=new Point;
		if(BlockAniMgr.instance)return;
		BlockAniMgr.instance=this;
		this.pools=[];
		this.rect=new Rectangle(0,0,MapData.boxW2,MapData.boxH2);
		this.effect=GlobalAPI.moveViewPort.getLayerContainer(4);
	}

	__class(BlockAniMgr,'game.manager.BlockAniMgr');
	var __proto=BlockAniMgr.prototype;
	__proto.add=function(tile,xdir,showeffect){
		(xdir===void 0)&& (xdir=0);
		(showeffect===void 0)&& (showeffect=true);
		var x=tile.x;
		var y=tile.y;
		var bd=tile.bmp.texture;
		var pt;
		var mybd;
		var type=tile.type;
		var pou=false;
		if(type>10010 && type < 10041){
			var num=parseInt(String(type).substr(3));
			if(num>20){
				var ty=0;
				if(num>40){
					ty=200;
					}else{
					ty=100;
				};
				var data=MapData.drawData1[num];
				if(data){
					pou=true;
					new AddGolds(tile,0);
					new AddGoldsDraw(x,y,data.drawData,ty);
				}
				}else{
				switch(num){
					case 16:
						pou=true;
						new AddGolds(tile);
						break ;
					default :
						GlobalAPI.scrollMap.clearPicTile(tile.tx,tile.ty);
						GlobalAPI.propMgr.addPropBlock(type,x+MapData.boxW2,y+MapData.boxH,2,0,true,true);
						break ;
					}
			}
			}else{
			GlobalAPI.scrollMap.clearPicTile(tile.tx,tile.ty);
			if(type !=SeachBlockBoom.boomtype && Math.random()*2>1){
				GlobalAPI.propMgr.addProp(GlobalAPI.propMgr.getRandomGold(2),x+MapData.boxW2,y+MapData.boxH,2,0,true,true);
			}
		}
		if(pou){
			GlobalAPI.scrollMap.swapPicTile(tile.tx,tile.ty);
			}else{
			if(showeffect){
				GlobalAPI.soundMgr.playSound("blocksound");
				var $each_pt;
				for($each_pt in this.ar){
					pt=this.ar[$each_pt];
					this.rect.x=pt.x;
					this.rect.y=pt.y;
					var dir=0;
					if(xdir==0){
						dir=pt.x==0 ?-1:1;
						}else{
						dir=xdir;
					}
					GlobalAPI.sceneRoleMgr.addDebris(pt.x+x,pt.y+y,false,1,8,200);
					continue ;
					var ani;
					if(this.pools.length>0){
						ani=this.pools.pop();
						}else{
						ani=new BlockAni();
					}
					mybd=ani.getimage().texture;
					mybd=Texture.createFromTexture(bd,this.rect.x,this.rect.y,this.rect.width,this.rect.height);
					if(pt.y==0){
						ani.setVelocity(-20+Math.random()*5);
						}else{
						ani.setVelocity(-15+Math.random()*5);
					}
					ani.setDieHandler(Handler.create(this,this.over));
					ani.start(this.effect,mybd,dir,pt.x+x,pt.y+y);
				}
			}
		}
	}

	/*pt.x=x+16;
	pt.y=y-16;
	GlobalAPI.sceneRoleMgr.addBlood(pt.x,pt.y,true,4,10);
	GlobalAPI.sceneRoleMgr.addBlood(pt.x,pt.y,true,3,9);
	GlobalAPI.sceneRoleMgr.addBlood(pt.x,pt.y,true,3,9);
	GlobalAPI.sceneRoleMgr.addBlood(pt.x,pt.y,true,2,8);*/
	__proto.over=function(val){
		this.pools.push(val);
	}

	BlockAniMgr.getInstance=function(){
		if(!BlockAniMgr.instance)
			new BlockAniMgr;
		return BlockAniMgr.instance;
	}

	BlockAniMgr.instance=null;
	return BlockAniMgr;
})()


//class game.manager.BoltMgr
var BoltMgr=(function(){
	function BoltMgr(){
		this.effect=null;
		this.pools=null;
		this.bolt=null;
		if(BoltMgr.instance)return;
		BoltMgr.instance=this;
		this.pools=[];
		this.effect=GlobalAPI.moveViewPort.getLayerContainer(4);
	}

	__class(BoltMgr,'game.manager.BoltMgr');
	var __proto=BoltMgr.prototype;
	__proto.add=function(startPt,targetPt){
		if(this.pools.length>0){
			this.bolt=this.pools.pop();
			}else{
			this.bolt=new LaserEffect;
			this.bolt.setLineThickness(2,"#ffffff",6,"#ff0000");
		}
		this.effect.addChild(this.bolt);
		this.bolt.lightningToAni(startPt,targetPt,20,Handler.create(this,this.over,[this.bolt]));
	}

	__proto.over=function(val){
		this.bolt.removeSelf();
		this.pools.push(val);
	}

	BoltMgr.getInstance=function(){
		if(!BoltMgr.instance)
			new BoltMgr;
		return BoltMgr.instance;
	}

	BoltMgr.instance=null;
	return BoltMgr;
})()


/**
*碰撞管理
*@author guowc
*
*/
//class game.manager.HitMgr
var HitMgr=(function(){
	function HitMgr(){
		this._ar=null;
		this.sd=0;
		this.effect=null;
		this.heroproxy=null;
		this.moveView=null;
		this.foods=null;
		this.enemys=null;
		this.enemyThings=null;
		this.weapons=null;
		this.eweapons=null;
		this.endRt=null;
		this.door=null;
		this.moveballs=null;
		this.linepts=new LinePts;
		this.tpt=new Point;
		if(HitMgr.instance)return;
		HitMgr.instance=this;
	}

	__class(HitMgr,'game.manager.HitMgr');
	var __proto=HitMgr.prototype;
	__proto.start=function(ar){
		this._ar=ar;
		this.door=EndDoor.getInstance();
		this.heroproxy=HeroProxy.getInstance();
		this.foods=GlobalAPI.sceneRoleMgr.getFoods();
		this.enemys=GlobalAPI.sceneRoleMgr.getEnemys();
		this.enemyThings=GlobalAPI.sceneRoleMgr.getEnemyThins();
		this.weapons=WeaponMgr.getWeapons();
		this.eweapons=GlobalAPI.weaponEnemyMgr.getWeapons();
		this.moveView=GlobalAPI.moveViewPort;
		this.effect=this.moveView.getLayerContainer(4);
		this.endRt=MapData.mapEndRt.clone();
		this.endRt.y-=(this.endRt.height-5);
		this.endRt.x-=15;
		this.moveballs=MapProxy.getInstance().getmoveball();
		GlobalAPI.heartMgr.add(this,this.check);
	}

	/**
	*
	*@param food
	*@param score 分数加成倍速数
	*
	*/
	__proto.killfood=function(food,addscore,hero){
		var vo=food.getData();
		if(vo.skin>200){
			return;
		}
		if(vo.gold>0){
			GlobalAPI.soundMgr.playSound("goldsound");
			GlobalAPI.heroproxy.addMoney(vo.gold);
			GlobalAPI.taskVO.goldNum+=vo.gold;
			GlobalAPI.rankVO.goldNum+=vo.gold;
			GlobalAPI.systembar.updateGoldNum();
			GlobalAPI.numflyMgr.startAdd(vo.startX-10,vo.startY,"+"+vo.gold);
			}else if(GlobalAPI.propMgr.isProp(vo.skin)){
			GlobalAPI.taskVO.propNum++;
			GlobalAPI.miniAniEffect.start(this.effect,vo.startX-10,vo.startY,"clear");
			}else{
			GlobalAPI.miniAniEffect.start(this.effect,vo.startX-10,vo.startY,"clear");
		}
		hero.addProp(vo.skin,vo.startX,vo.startY);
		GlobalAPI.sceneRoleMgr.removeFood(vo.id);
	}

	__proto.check=function(){
		var food;
		var hero;
		HitMgr.pass=true;
		var $each_hero;
		for($each_hero in this._ar){
			hero=this._ar[$each_hero];
			if(this.door.isShow &&
				this.endRt.contains(hero.x,hero.y)){
				GlobalAPI.heartMgr.remove(this,this.check);
				var $each_hero;
				for($each_hero in this._ar){
					hero=this._ar[$each_hero];
					if(!hero.getPause()){
						hero.clear();
					}
				}
				if(HitMgr.pass){
					GlobalAPI.levelMgr.passlevel();
				}
				return;
			}
			var $each_food;
			for($each_food in this.foods){
				food=this.foods[$each_food];
				if(food.caneat && HitTestUtil.hitTest(hero.getHitRect(18),food.getHitRect())){
					this.killfood(food,1,hero);
				}
			}
		};
		var enemy;
		var weapon;
		var b=false;
		var pt;
		var tile;
		var evo;
		var weaponRect;
		var num=0;
		var ept;
		var pixrects;
		var tt=0;
		var rt;
		var weaponMgr;
		var weapontype=0;
		var hurt=0;
		var roleid=0;
		var $each_weapon;
		for($each_weapon in this.weapons){
			weapon=this.weapons[$each_weapon];
			if(Laya.__typeof(weapon,'game.weapon.Iweapon')){
				weaponRect=weapon.getRect();
				b=true;
				weapontype=weapon.getType();
				pt=weapon.getSkinPt();
				hurt=weapon.getHurt();
				roleid=weapon.getRoleid();
				var $each_hero;
				for($each_hero in GlobalAPI.heros){
					hero=GlobalAPI.heros[$each_hero];
					if(hero.getData().id==roleid){
						weaponMgr=hero.weaponMgr;
					}
				};
				var movedir=weapon.getMoveDir();
				var $each_enemy;
				for($each_enemy in this.enemys){
					enemy=this.enemys[$each_enemy];
					evo=enemy.getData();
					if(!enemy._pause &&
						evo.thing==0 &&
					HitTestUtil.hitTest(enemy.getKillRect(),weaponRect)){
						ept=enemy.getShootpt();
						var bloodType=(evo.ai==410 || evo.ai==412
						|| weapontype==6 || enemy.fireing>0)? 300 :100;
						var newfire=false;
						if(bloodType==300){
							newfire=enemy.startNewFire(weapon.getid());
						};
						var bool=weapontype!=6 || (weapontype==6 && newfire);
						if(bool && weaponMgr.mrandom.getRan()){
							hurt=hurt*(Math.random()*2+3)+Math.random()*hurt>>0;
							GlobalAPI.taskVO.critNum++;
							GlobalAPI.numflyMgr.startHurt(ept.x,ept.y,"-"+hurt);
						}
						if(bool){
							if(enemy.hurt(hurt)){
								GlobalAPI.sceneRoleMgr.removeEnemy(evo.id,true,movedir,roleid);
								GlobalAPI.sceneRoleMgr.addbloods(true,ept,bloodType);
								}else if(Math.random()*5<1){
								GlobalAPI.sceneRoleMgr.addbloods(false,pt,bloodType);
							}
						}
						if(weapontype==6){
							}else{
							GlobalAPI.weaponMgr.remove(weapon);
							b=false;
							break ;
						}
					}
				}
				if(b){
					var h=weaponRect.height>>1;
					tile=GlobalAPI.scrollMap.getPic(pt.x,pt.y-h);
					if(!tile){
						tile=GlobalAPI.scrollMap.getPic(pt.x,pt.y);
						if(!tile)
							tile=GlobalAPI.scrollMap.getPic(pt.x,pt.y+h);
					}
					if(tile){
						if(MapData.isHitblock(tile.type)){
							weapon.dispose();
							if(tile.type==SeachBlockBoom.boomtype){
								new SeachBlockBoom(tile.tx,tile.ty);
								}else{
								GlobalAPI.blockAniMgr.add(tile,0);
							}
							this.tpt.x=tile.x+MapData.boxW2;
							this.tpt.y=tile.y+MapData.boxH2;
							GlobalAPI.sceneRoleMgr.addbloods(true,this.tpt,200);
							}else if(tile.type<MapData.jumpWallSort){
							if(tile.type<MapData.bevel){
								pixrects=MapData.blevelRects[tile.type];
								if(pixrects){
									if(weapon.getMoveDir()==1){
										tt=weaponRect.x+weaponRect.width-tile.x>>0;
										}else{
										tt=weaponRect.x-tile.x>>0;
									}
									rt=pixrects[tt];
									if(rt){
										MapData.rectpix.x=rt.x+tile.x;
										MapData.rectpix.y=rt.y+tile.y;
										if(HitTestUtil.hitTest(weaponRect,MapData.rectpix)){
											weapon.dispose();
										}
									}
								}
								}else{
								weapon.dispose();
							}
						}
						}else{
						var type=MapData.getType(pt.x,pt.y);
						if(type>0 && type<MapData.jumpWallSort && type !=1000){
							if(type<MapData.bevel){
								pixrects=MapData.blevelRects[type];
								if(pixrects){
									tt=pt.x%MapData.boxW>>0;
									rt=pixrects[tt];
									if(rt){
										if(rt.y<pt.y%MapData.boxH){
											weapon.dispose();
										}
									}
								}
								}else{
								weapon.dispose();
							}
						}
					}
				}
			}
		}
		var $each_hero;
		for($each_hero in this._ar){
			hero=this._ar[$each_hero];
			var $each_weapon;
			for($each_weapon in this.eweapons){
				weapon=this.eweapons[$each_weapon];
				b=true;
				pt=weapon.getSkinPt();
				weaponRect=weapon.getRect();
				if(!hero.getDie()&&
					HitTestUtil.hitTest(hero.getKillRect(),weaponRect)){
					if(hero.hurt(weapon.getHurt(),true)>-1){
						GlobalAPI.weaponEnemyMgr.remove(weapon);
						b=false;
					}
				}
				if(b){
					var typee=MapData.getType(pt.x,pt.y);
					if(typee>0 && typee<MapData.jumpWallSort){
						weapon.dispose();
					}
				}
			}
		};
		var rvo;
		var ey;
		var $each_enemy;
		for($each_enemy in this.enemys){
			enemy=this.enemys[$each_enemy];
			rvo=enemy.getData();
			ept=enemy.getShootpt();
			var $each_hero;
			for($each_hero in this._ar){
				hero=this._ar[$each_hero];
				if(!enemy.getPause()
					&& enemy.checkHit
				&& !hero.getPause()
				&& HitTestUtil.hitTest(hero.getHitRect(18),enemy.getKillRect(true))){
					if(rvo.thing==2){
						GlobalAPI.sceneRoleMgr.removeEnemy(rvo.id);
						hero.addProp(rvo.skin,ept.x,ept.y,rvo.hp);
						if(rvo.gold>0){
							rvo.gold=hero.prop_magnet ? rvo.gold*2:rvo.gold;
							GlobalAPI.numflyMgr.startAdd(enemy.x,enemy.y,"+"+rvo.gold);
							this.heroproxy.addMoney(rvo.gold);
							GlobalAPI.taskVO.goldNum+=rvo.gold;
							GlobalAPI.rankVO.goldNum+=rvo.gold;
							GlobalAPI.soundMgr.playSound("goldsound");
							GlobalAPI.systembar.updateGoldNum();
							}else{
							if(GlobalAPI.propMgr.isProp(rvo.skin)){
								GlobalAPI.taskVO.propNum++;
							}
							GlobalAPI.miniAniEffect.start(this.effect,enemy.x,enemy.y,"clear");
						}
						}else{
						if(enemy.getData().hurt>0){
							if(hero.hurtStep>10 && rvo.hurt>0){
								enemy.checkHit=false;
								pt=hero._pt;
								hero.hurt(rvo.hurt);
							}
							break ;
						}
					}
				}
			}
			var $each_ey;
			for($each_ey in this.enemyThings){
				ey=this.enemyThings[$each_ey];
				evo=ey.getData();
				if(!enemy.getPause()
					&& ey.checkHit
				&& rvo.thing==0
				&& !ey.getPause()
				&& HitTestUtil.hitTest(ey.getKillRect(),enemy.getKillRect())){
					if(evo.skin==421){
						enemy.startNewFire(0);
					}
					if(enemy.hurtStep>10 && enemy.hurt(20)){
						if(evo.skin==421){
							GlobalAPI.sceneRoleMgr.addbloods(true,ept,300);
							}else{
							GlobalAPI.sceneRoleMgr.addbloods(true,ept,100);
						}
						GlobalAPI.sceneRoleMgr.removeEnemy(rvo.id,true,0,-2);
						}else if(Math.random()*5<1){
						if(evo.skin==421){
							GlobalAPI.sceneRoleMgr.addbloods(false,ept,300);
							}else{
							GlobalAPI.sceneRoleMgr.addbloods(false,ept,100);
						}
					}
				}
			}
		}
		var $each_ey;
		for($each_ey in this.enemyThings){
			ey=this.enemyThings[$each_ey];
			var $each_hero;
			for($each_hero in this._ar){
				hero=this._ar[$each_hero];
				if(!ey.getPause()
					&& ey.checkHit
				&& !hero.getPause()
				&& HitTestUtil.hitTest(hero.getHitRect(18),ey.getKillRect())){
					if(hero.hurtStep>10){
						pt=hero._pt;
						hero.hurt(ey.getData().hurt);
					}
				}
			}
		}
	}

	__proto.aoeBoom=function(aoe,pt,missenemy,rect){
		if(aoe==0)return;
		if(!rect){
			MapData.rect.x=pt.x-250;
			MapData.rect.y=pt.y-250;
			MapData.rect.width=500;
			MapData.rect.height=500;
			rect=MapData.rect;
		}
		this.aoeHurt(aoe,1,pt,-1,missenemy,rect);
		this.aoeBlock(pt.x*MapData.rboxW>>0,pt.y*MapData.rboxH>>0);
	}

	__proto.aoeHurt=function(hurt,movedir,pt,roleid,passenemy,rect){
		if(rect==null)return;
		var ept;
		var evo;
		var enemy;
		var $each_enemy;
		for($each_enemy in this.enemys){
			enemy=this.enemys[$each_enemy];
			if(enemy!=passenemy){
				evo=enemy.getData();
				ept=enemy.getShootpt();
				if(evo.thing==0 &&
					HitTestUtil.hitTest(enemy.getKillRect(),rect)){
					var bloodType=(evo.ai==410 || evo.ai==412 || enemy.fireing>0)? 300 :100;
					if(enemy.hurt(hurt,true)){
						GlobalAPI.sceneRoleMgr.removeEnemy(evo.id,true,movedir,roleid);
						GlobalAPI.sceneRoleMgr.addbloods(true,ept,bloodType);
						}else{
						GlobalAPI.sceneRoleMgr.addbloods(false,pt,bloodType);
					}
				}
			}
		}
	}

	__proto.aoeBlock=function(dx,dy){
		this.setType(dx+1,dy);
		this.setType(dx-1,dy);
		this.setType(dx,dy+1);
		this.setType(dx,dy-1);
		this.setType(dx-1,dy-1);
		this.setType(dx+1,dy+1);
		this.setType(dx+1,dy-1);
		this.setType(dx-1,dy+1);
	}

	/*setType(dx+2,dy);
	setType(dx-2,dy);
	setType(dx,dy+2);
	setType(dx,dy-2);
	setType(dx-1,dy-2);
	setType(dx-2,dy-1);
	setType(dx+1,dy+2);
	setType(dx+2,dy+1);
	setType(dx+1,dy-2);
	setType(dx+2,dy-1);
	setType(dx-1,dy+2);
	setType(dx-2,dy+1);*/
	__proto.setType=function(dx,dy){
		if(MapData.mapData[dy]){
			var tile;
			var type=MapData.mapData[dy][dx];
			if(type>0){
				if(MapData.isHitblock(type)){
					this.tpt.x=dx*MapData.boxW+MapData.boxW2;
					this.tpt.y=dy*MapData.boxH+MapData.boxH2;
					tile=GlobalAPI.scrollMap.getPicTile(dx,dy);
					if(tile){
						GlobalAPI.blockAniMgr.add(tile,0);
						GlobalAPI.sceneRoleMgr.addbloods(true,this.tpt,200);
					}
				}
			}
		}
	}

	__proto.hitboltpt=function(pts,hurt,isdian,movedir,weaponMgr){
		var pt;
		var ept;
		var evo;
		var enemy;
		var tile;
		var $each_pt;
		for($each_pt in pts){
			pt=pts[$each_pt];
			var $each_enemy;
			for($each_enemy in this.enemys){
				enemy=this.enemys[$each_enemy];
				evo=enemy.getData();
				ept=enemy.getShootpt();
				if(!enemy._pause &&
					evo.thing==0 &&
				evo.stronghp==false &&
				enemy.getKillRect().contains(pt.x,pt.y)){
					var bloodType=(evo.ai==410 || evo.ai==412 || enemy.fireing>0)? 300 :100;
					if(weaponMgr.mrandom.getRan()){
						hurt=hurt*(Math.random()*3+1)+Math.random()*hurt>>0;
						GlobalAPI.taskVO.critNum++;
						GlobalAPI.numflyMgr.startHurt(ept.x,ept.y,"-"+hurt);
					}
					if(enemy.hurt(hurt)){
						GlobalAPI.sceneRoleMgr.removeEnemy(evo.id,true,movedir,weaponMgr.getRoleid());
						GlobalAPI.sceneRoleMgr.addbloods(true,ept,bloodType);
						}else if(Math.random()*5<1){
						GlobalAPI.sceneRoleMgr.addbloods(false,pt,bloodType);
					}
					return pt;
				}
			}
			tile=GlobalAPI.scrollMap.getPic(pt.x,pt.y);
			if(tile){
				if(MapData.isHitblock(tile.type)){
					tile.hp-=hurt;
					if(tile.hp<1){
						if(tile.type==SeachBlockBoom.boomtype){
							new SeachBlockBoom(tile.tx,tile.ty);
							}else{
							GlobalAPI.blockAniMgr.add(tile,0);
						}
						this.tpt.x=tile.x+MapData.boxW2;
						this.tpt.y=tile.y+MapData.boxH2;
						GlobalAPI.sceneRoleMgr.addbloods(true,this.tpt,200);
					}
				}
				break ;
				}else{
				var type=MapData.getType(pt.x,pt.y);
				if(type>0 && type<MapData.jumpWallSort){
					if(!isdian){
						var ran=Math.random()*10;
						if(ran>8){
							GlobalAPI.soundMgr.playSound("bullthit0");
							}else if(ran>7){
							GlobalAPI.soundMgr.playSound("bullthit1");
						}
					}
					if(type<MapData.bevel){
						var pixrects=MapData.blevelRects[type];
						if(pixrects){
							var tt=pt.x%MapData.boxW>>0;
							var rt=pixrects[tt];
							if(rt){
								if(rt.y<pt.y%MapData.boxH){
									break ;
								}
							}
						}
						}else{
						break ;
					}
				}
			}
		}
		return pt;
	}

	__proto.ishitEnemy=function(sx,sy,ang){
		var pts=this.linepts.getlaserRectPt(sx,sy,ang,this.moveView.viewRect,20);
		var pt;
		var ept;
		var evo;
		var enemy;
		var tile;
		var $each_pt;
		for($each_pt in pts){
			pt=pts[$each_pt];
			var $each_enemy;
			for($each_enemy in this.enemys){
				enemy=this.enemys[$each_enemy];
				evo=enemy.getData();
				ept=enemy.getShootpt();
				if(!enemy._pause &&
					evo.thing==0 &&
				evo.stronghp==false &&
				enemy.getKillRect().contains(pt.x,pt.y)){
					return true;
				}
			}
			tile=GlobalAPI.scrollMap.getPic(pt.x,pt.y);
			if(tile){
				if(MapData.isHitblock(tile.type)){
					return true;
				}
				return false;
				}else{
				var type=MapData.getType(pt.x,pt.y);
				if(type>0 && type<MapData.jumpWallSort){
					return false;
				}
			}
		}
		return false;
	}

	__proto.dispose=function(){
		GlobalAPI.heartMgr.remove(this,this.check);
		this._ar=null;
		this.foods=this.enemys=null;
		this.weapons=null;
		this.moveView=null;
		this.heroproxy=null;
	}

	HitMgr.getInstance=function(){
		if(!HitMgr.instance)
			new HitMgr;
		return HitMgr.instance;
	}

	HitMgr.pass=false;
	HitMgr.instance=null;
	return HitMgr;
})()


/**
*关卡管理
*@author guowc
*
*/
//class game.manager.LevelMgr
var LevelMgr=(function(){
	function LevelMgr(){
		this.data=null;
		//大类
		this.sortdata=null;
		//小类
		this.needstars=null;
		this.sortNum=[];
		this.allstars=0;
		//总星数
		this.alllevels=0;
		this.alivelevels=0;
		//private var myAlert:MyAlert;
		this.nowLev=0;
		this.sort=0;
		if(LevelMgr.instance)return;
		LevelMgr.instance=this;
		this.needstars=[[0,5,20,30],[5,15,30,40],[20,25,40,50],[35,45,60,75]];
	}

	__class(LevelMgr,'game.manager.LevelMgr');
	var __proto=LevelMgr.prototype;
	/**
	*设置关卡地图数据
	*@param ar
	*
	*/
	__proto.setData=function(ar){
		this.data=ar;
		this.sortdata=this.data[this.sort];
		this.sortNum.length=0;
		var list;
		var b=true
		var $each_list;
		for($each_list in this.data){
			list=this.data[$each_list];
			this.sortNum.push(list.length);
			if(b){
				this.alllevels=list.length;
				this.allstars=list.length*4;
				b=false;
				}else{
				this.alivelevels=list.length;
			}
		}
	}

	/**
	*获得的总星数
	*@return
	*
	*/
	__proto.getStars=function(){
		var len=0;
		var stars=0;
		var sort=0;
		var $each_len;
		for($each_len in this.sortNum){
			len=this.sortNum[$each_len];
			for(var i=0;i<len;i++){
				stars+=SaveDataMgr.stars[sort+"-"+i]>>0;
			}
			sort++;
			break ;
		}
		return stars;
	}

	__proto.getSortNum=function(sort){
		return this.sortNum[sort];
	}

	__proto.setlevel=function(sort,level,levelLev,mapLevel){
		MapData.levelLev=levelLev;
		MapData.mapLevel=mapLevel;
		this.sort=sort;
		this.nowLev=level;
		MoveView.getInstance().reset();
		this.sortdata=this.data[sort];
		if(this.sortdata){
			this.loadFile();
		}else{}
	}

	/**
	*通过本关
	*
	*/
	__proto.passlevel=function(){
		GlobalAPI.taskVO.levelNum++;
		if(GlobalAPI.taskVO.goldOne<GlobalAPI.levVO.levelgold){
			GlobalAPI.taskVO.goldOne=GlobalAPI.levVO.levelgold;
		}
		MoveView.getInstance().reset();
		var lev=this.nowLev+1;
		var st=this.sort;
		if(lev==this.sortdata.length){
			st++;
			lev=0;
		}
		GlobalAPI.levVO.levelgem+=GlobalAPI.levVO.killEnemys/(10-MapData.levelLev)*0.1>>0;
		GlobalAPI.heroproxy.addGemNum(GlobalAPI.levVO.levelgem);
		if(SaveDataMgr.stars[st+"-"+lev]==undefined){
			SaveDataMgr.stars[st+"-"+lev]=0;
		}
		PassLevelView.getInstance().show(true);
		SaveDataMgr.save(true);
		SaveDataMgr.onlinesave(true);
	}

	__proto.failLevel=function(){
		if(this.sort==0){
			GlobalAPI.levVO.levelgem=0;
			}else{
			GlobalAPI.rankVO.timeNum=(Browser.now()-GlobalAPI.levVO.passtime)*0.001>>0;
		}
		if(GlobalAPI.taskVO.goldOne<GlobalAPI.levVO.levelgold){
			GlobalAPI.taskVO.goldOne=GlobalAPI.levVO.levelgold;
		}
		GlobalAPI.heroproxy.addGemNum(GlobalAPI.levVO.levelgem);
		FailLevelView.getInstance().show(true);
		SaveDataMgr.save(false);
		SaveDataMgr.onlinesave(true);
	}

	__proto.resetlevel=function(){
		MoveView.getInstance().reset();
		this.loadFile();
	}

	/**
	*通关
	*@return
	*
	*/
	__proto.isOverLevel=function(){
		if(this.nowLev==this.sortdata.length-1){
			return true;
		}
		return false;
	}

	__proto.reset=function(){
		this.sort=0;
		this.nowLev=0;
	}

	__proto.loadFile=function(){
		MapData.tryweapon=0;
		MapData.reset();
		var by=this.sortdata[this.nowLev];
		by.position=0;
		MapData.mapName=by.readUTF();
		MapData.boxW=by.readInt();
		MapData.boxH=by.readInt();
		MapData.rboxW=1/MapData.boxW;
		MapData.rboxH=1/MapData.boxH;
		MapData.downMapData(by.readObject());
		MapData.mapbgName=by.readUTF();
		MapData.movePtData=by.readObject();
		MapData.enemyPtData=by.readObject();
		MapData.foodPtData=by.readObject();
		var obj=by.readObject();
		MapData.mapStartRt.x=obj.sx;
		MapData.mapStartRt.y=obj.sy;
		MapData.mapEndRt.x=obj.ex;
		MapData.mapEndRt.y=obj.ey;
		MapData.isBoss=obj.isBoss;
		MapData.music=obj.music;
		MapData.mapfbgNames=obj.mapfbgNames;
		if(!MapData.mapfbgNames){
			MapData.mapfbgNames=[];
		}
		this.chgBg(MapData.mapbgName);
		this.chgfBg(MapData.mapfbgNames);
		MoveView.getInstance().show();
		GlobalAPI.systembar.show(true);
	}

	__proto.chgBg=function(mapbgName){
		var obj=Loader.getRes(MapData.bgData[mapbgName]);
		if(obj){
			GlobalAPI.bg.texture=obj;
			if(GlobalAPI.bg && GlobalAPI.bg.texture && MapData.stageW>GlobalAPI.bg.texture.width){
				GlobalAPI.bg.scaleX=MapData.stageW/GlobalAPI.bg.texture.width;
			}
			if(GlobalAPI.bg && GlobalAPI.bg.texture && MapData.stageH>GlobalAPI.bg.texture.height){
				GlobalAPI.bg.scaleY=MapData.stageH/GlobalAPI.bg.texture.height;
			}
		}
	}

	__proto.chgfBg=function(mapbgNames){
		if(!mapbgNames)return;
		var i=0;
		for(i=0;i<mapbgNames.length;i++){
			mapbgNames[i]=PathMgr.path+mapbgNames[i];
		}
		GlobalAPI.bgMove.setData(mapbgNames);
	}

	__proto.againLevelM=function(){
		GlobalAPI.systembar.skillbar.reset();
		GlobalAPI.systembar.skilladdbar.reset();
		GlobalAPI.systembar.combotip.reset();
		GlobalAPI.levelMgr.resetlevel();
		GlobalAPI.systembar.update();
	}

	__proto.outLevelM=function(){
		GlobalAPI.bgMove.clear();
		MoveView.getInstance().reset();
		LevelView.getInstance().updateLevel();
		LevelView.getInstance().show(true);
	}

	__proto.reviveM=function(){
		GlobalAPI.heroproxy.revivetime++;
		if(GlobalAPI.heroproxy.getnowRevive()==GlobalAPI.heroproxy.getBaseRoleVO().skin){
			GlobalAPI.hero.revive();
			}else{
			GlobalAPI.hero2.revive();
		}
	}

	__proto.canlevel=function(level,star,tip){
		(tip===void 0)&& (tip=false);
		var needstar=this.needstars[level/5>>0][star]+level%5;
		if(needstar>this.getStars()){
			if(tip){
				NeedStarView.getInstance().setStar(this.getStars(),needstar);
				NeedStarView.getInstance().show(true);
			}
			return false;
		}
		return true;
	}

	__proto.getneedstar=function(level,star){
		return this.needstars[level/5>>0][star]+level%5;
	}

	__proto.playBgMusic=function(idx){}
	LevelMgr.getInstance=function(){
		if(!LevelMgr.instance)
			new LevelMgr;
		return LevelMgr.instance;
	}

	LevelMgr.instance=null;
	return LevelMgr;
})()


//class game.manager.NumberFlyMgr
var NumberFlyMgr=(function(){
	function NumberFlyMgr(){
		this.numberHurt=null;
		this.numberHeroHurt=null;
		this.numberAdd=null;
		if(NumberFlyMgr.instance)return;
		NumberFlyMgr.instance=this;
		this.numberHurt=new NumberFly("num_o",SkinMgr.numNrect,5);
		this.numberHeroHurt=new NumberFly("num_r",SkinMgr.numRrect,5);
		this.numberAdd=new NumberFly("num_p",SkinMgr.numNrect,5);
	}

	__class(NumberFlyMgr,'game.manager.NumberFlyMgr');
	var __proto=NumberFlyMgr.prototype;
	__proto.startHeroHurt=function(x,y,num){
		this.numberHeroHurt.start(x,y,num);
	}

	__proto.startHurt=function(x,y,num){
		this.numberHurt.start(x,y,num);
	}

	__proto.startAdd=function(x,y,num){
		this.numberAdd.start1(x,y,num);
	}

	NumberFlyMgr.getInstance=function(){
		if(!NumberFlyMgr.instance)
			new NumberFlyMgr;
		return NumberFlyMgr.instance;
	}

	NumberFlyMgr.instance=null;
	return NumberFlyMgr;
})()


/**
*资源配置路径管理
*@author guowc
*
*/
//class game.manager.PathMgr
var PathMgr=(function(){
	function PathMgr(){}
	__class(PathMgr,'game.manager.PathMgr');
	PathMgr.init=function(){}
	PathMgr.getPath=function(url){
		if(PathMgr.path=="")return url;
		return url.replace(PathMgr.path,"");
	}

	PathMgr.ani=".ani";
	PathMgr.path="t44sd/";
	__static(PathMgr,
	['path_dat',function(){return this.path_dat=PathMgr.path+"material/";},'path_map',function(){return this.path_map=PathMgr.path+"map/";},'path_role',function(){return this.path_role=PathMgr.path+"atlas/role/hero/";},'path_pet',function(){return this.path_pet=PathMgr.path+"atlas/role/pet/";},'path_enemy',function(){return this.path_enemy=PathMgr.path+"atlas/role/enemy/";},'path_weapon',function(){return this.path_weapon=PathMgr.path+"atlas/role/hero/1/";},'path_airfly',function(){return this.path_airfly=PathMgr.path+"atlas/role/hero/1/";},'path_mount1',function(){return this.path_mount1=PathMgr.path+"atlas/role/mount/100/";},'path_mount2',function(){return this.path_mount2=PathMgr.path+"atlas/role/mount/200/";},'path_mount3',function(){return this.path_mount3=PathMgr.path+"atlas/role/mount/300/";},'path_miniani',function(){return this.path_miniani=PathMgr.path+"atlas/miniani/";},'path_sound',function(){return this.path_sound=PathMgr.path+"sound/";},'path_sound_gun',function(){return this.path_sound_gun=PathMgr.path+"sound/gun/";},'path_img',function(){return this.path_img=PathMgr.path+"img/";}
	]);
	return PathMgr;
})()


/**
*缓存管理
*@author guowc
*
*/
//class game.manager.PoolMgr
var PoolMgr=(function(){
	function PoolMgr(){
		this.floods=null;
		this.bitmaps=null;
		this.props=null;
		this.bullets=null;
		this.roleSkins=null;
		this.foods=null;
		this.weapons=null;
		this.shells=null;
		this.debrislist=null;
		if(PoolMgr.instance)return;
		PoolMgr.instance=this;
		this.floods=[];
		this.bitmaps=[];
		this.props=[];
		this.bullets=[];
		this.roleSkins=[];
		this.foods=[];
		this.weapons=[];
		this.shells=[];
		this.debrislist=[];
		var i=0;
		for(i=0;i<30;i++){
			this.bitmaps[i]=new Sprite;
		}
		for(i=0;i<20;i++){
			this.floods[i]=new Enemy406;
		}
	}

	__class(PoolMgr,'game.manager.PoolMgr');
	var __proto=PoolMgr.prototype;
	__proto.getflood=function(){
		var flood;
		if(this.floods.length>0){
			flood=this.floods.pop();
			return flood;
		}
		return null;
	}

	__proto.disposeflood=function(val){
		this.floods.push(val);
	}

	__proto.getdebris=function(){
		var debris;
		if(this.debrislist.length>0){
			debris=this.debrislist.pop();
			}else{
			debris=new Enemy413;
		}
		return debris;
	}

	__proto.disposedebris=function(val){
		this.debrislist.push(val);
	}

	__proto.getProp=function(){
		var prop;
		if(this.props.length>0){
			prop=this.props.pop();
			}else{
			prop=new Enemy115;
		}
		return prop;
	}

	__proto.disposeprop=function(val){
		this.props.push(val);
	}

	/*public function disposebullet(val:ThrowBullt):void{
	bullets.push(val);
}*/


__proto.getshell=function(){
	var shell;
	if(this.shells.length>0){
		shell=this.shells.pop();
		}else{
		shell=new Enemy407;
	}

	return shell;
}


__proto.disposeshell=function(val){
	this.shells.push(val);
}


__proto.getRoleSkin=function(){
	var role;
	if(this.roleSkins.length>0){
		role=this.roleSkins.pop();
		}else{
		role=new RoleSkin;
	}

	return role;
}


__proto.disposeRoleSkin=function(val){
	this.roleSkins.push(val);
}


__proto.getFood=function(){
	var food;
	if(this.foods.length>0){
		food=this.foods.pop();
		}else{
		food=new Food;
	}

	return food;
}


__proto.disposeFood=function(val){
	this.foods.push(val);
}


__proto.getbitmap=function(){
	var bitmap;
	if(this.bitmaps.length>0){
		bitmap=this.bitmaps.pop();
	}

	return bitmap;
}


__proto.disposebitmap=function(val){
	this.bitmaps.push(val);
}


__proto.getWeapon=function(){
	var s;
	if(this.weapons.length>0){
		s=this.weapons.pop();
		}else{
		s=new ShootBullet;
	}

	return s;
}


__proto.disposeWeapon=function(val){
	this.weapons.push(val);
}


PoolMgr.getInstance=function(){
	if(!PoolMgr.instance)
		new PoolMgr;
	return PoolMgr.instance;
}


PoolMgr.FireBullet="FireBullet";
PoolMgr.FollowBom="FollowBom";
PoolMgr.FollowBom1="FollowBom1";
PoolMgr.FollowBom2="FollowBom2";
PoolMgr.EfollowBom="EfollowBom";
PoolMgr.EthrowBom="EthrowBom";
PoolMgr.EthrowBom1="EthrowBom1";
PoolMgr.Eshoot1="Eshoot1";
PoolMgr.ThrowBom="ThrowBom";
PoolMgr.enemy405="enemy405";
PoolMgr.instance=null;
return PoolMgr;
})()


/**
*道具管理
*@author guowc
*
*/
//class game.manager.PropMgr
var PropMgr=(function(){
	function PropMgr(){
		this.proplist=null;
		this.randomgold=null;
		//石块跳金币随机组
		this.blockPropSkin=null;
		this.gemboxprop=null;
		this.gemboxid=0;
		this.blockid=0;
		this.randoms=[1,-1];
		this.props=null;
		this.noMagnetProp=null;
		if(PropMgr.instance)return;
		PropMgr.instance=this;
		this.gemboxprop=[];
		this.blockPropSkin={10011:105,10012:107,10013:106,10017:110};
		this.randomgold=[101,101,101,101,
		102,103,110];
		this.noMagnetProp=[111,110,105,107,106,408];
		this.props=[111,105,107,106];
		this.proplist=[111,111,111,107,107,106,106,105];
	}

	__class(PropMgr,'game.manager.PropMgr');
	var __proto=PropMgr.prototype;
	__proto.start=function(){}
	__proto.getRandomGold=function(type){
		var random=0;
		switch(type){
			case 0:
				random=this.randomgold[Math.random()*this.randomgold.length>>0]
				break ;
			case 1:
				random=101;
				this.gemboxid++;
				if(this.gemboxid>9){
					this.gemboxid=0;
					if(this.gemboxprop.length<1){
						this.gemboxprop=this.props.concat();
					};
					var idx=Math.random()*this.gemboxprop.length>>0;
					random=this.gemboxprop[idx];;
					this.gemboxprop.splice(idx,1);
				}
				break ;
			case 2:
				random=101;
				this.blockid++;
				if(this.blockid>20){
					random=110;
					this.blockid=0;
					}else if(Math.random()*20==5){
					random=this.getRandomProp();;
				}
				break ;
			}
		return random;
	}

	__proto.getRandomProp=function(){
		return this.proplist[Math.random()*this.proplist.length>>0];
	}

	__proto.isNoMagnetProp=function(skin){
		return this.noMagnetProp.indexOf(skin)>-1;
	}

	__proto.isProp=function(skin){
		return this.props.indexOf(skin)>-1;
	}

	/**
	*方块破出的道具
	*@param block
	*@param x
	*@param y
	*@param speed
	*@param dir
	*@param hasjump
	*@param hasdrop
	*@param score
	*
	*/
	__proto.addPropBlock=function(blocktype,x,y,speed,dir,hasjump,hasdrop){
		(speed===void 0)&& (speed=2);
		(dir===void 0)&& (dir=0);
		(hasjump===void 0)&& (hasjump=true);
		(hasdrop===void 0)&& (hasdrop=true);
		var skin=this.blockPropSkin[blocktype];
		if(skin>0){
			this.addProp(skin,x,y,speed,dir,hasjump,hasdrop);
			}else{
			this.addProp(this.getRandomGold(2),x,y,speed,dir,hasjump,hasdrop);
		}
	}

	__proto.addProp=function(skin,x,y,speed,dir,hasjump,hasdrop){
		(speed===void 0)&& (speed=2);
		(dir===void 0)&& (dir=0);
		(hasjump===void 0)&& (hasjump=true);
		(hasdrop===void 0)&& (hasdrop=true);
		var id=GlobalAPI.activeMgr.enemyid++;
		var vo;
		vo=new EnemyRoleVO;
		vo.ai=115;
		vo.startX=x;
		vo.startY=y;
		vo.skin=skin;
		vo.speed=speed;
		vo.id=id;
		var boxdata=MapData.getFoodData(MapData.foodSortId+skin);
		if(boxdata){
			vo.gold=MapData.levelLev*boxdata.gold>>0;
		}
		if(dir==0){
			vo.dir=this.randoms[Math.random()*2>>0];
			}else{
			vo.dir=dir;
		}
		vo.hp=0;
		vo.hurt=0;
		vo.thing=2;
		vo.noMagnet=this.isNoMagnetProp(vo.skin);
		if(hasjump==false){
			vo.jumphight=0;
			}else{
			vo.jumphight=-1;
		}
		vo.hasdrop=hasdrop;
		return GlobalAPI.sceneRoleMgr.addEnemy(vo);
	}

	__proto.addgun=function(x,y,dir,speedx,guntype,ang){
		(speedx===void 0)&& (speedx=0);
		(guntype===void 0)&& (guntype=0);
		(ang===void 0)&& (ang=0);
		var id=GlobalAPI.activeMgr.enemyid++;
		var vo;
		vo=new EnemyRoleVO;
		vo.ai=408;
		vo.startX=x;
		vo.startY=y;
		vo.speed=speedx==0 ? 1+Math.random()*2>>0 :speedx+Math.random()*2>>0;
		vo.id=id;
		vo.dir=dir;
		vo.hurt=0;
		vo.skin=408;
		vo.thing=2;
		vo.noMagnet=this.isNoMagnetProp(vo.skin);
		if(guntype==0){
			vo.hp=Math.random()*18+1>>0;
			if(vo.hp>10){
				vo.hp=Math.random()*18+1>>0;
				if(vo.hp>15){
					vo.hp=Math.random()*18+1>>0;
				}
			}
			}else{
			vo.hp=guntype;
		}
		vo.shellType=ang;
		vo.jumphight=-1;
		GlobalAPI.sceneRoleMgr.addEnemy(vo);
	}

	/**
	*扔枪
	*@param x
	*@param y
	*@param dir
	*@param speedx
	*@param guntype
	*@param ang
	*
	*/
	__proto.addThrowgun=function(x,y,dir,speedx,guntype,ang){
		(speedx===void 0)&& (speedx=0);
		(guntype===void 0)&& (guntype=0);
		(ang===void 0)&& (ang=0);
		var id=GlobalAPI.activeMgr.enemyid++;
		var vo;
		vo=new EnemyRoleVO;
		vo.ai=408;
		vo.startX=x;
		vo.startY=y;
		vo.speed=speedx==0 ? 1+Math.random()*2>>0 :speedx+Math.random()*2>>0;
		vo.id=id;
		vo.dir=dir;
		vo.hurt=0;
		vo.thing=4;
		vo.hp=guntype;
		vo.shellType=ang;
		vo.jumphight=-1;
		GlobalAPI.sceneRoleMgr.addEnemy(vo);
	}

	PropMgr.getInstance=function(){
		if(!PropMgr.instance)
			new PropMgr;
		return PropMgr.instance;
	}

	PropMgr.prop_hp=105;
	PropMgr.prop_speed=107;
	PropMgr.prop_ammo=111;
	PropMgr.prop_magnet=106;
	PropMgr.prop_gold=101;
	PropMgr.prop_gembox=110;
	PropMgr.prop_gun=408;
	PropMgr.prop_mount=806;
	PropMgr.prop_gold102=102;
	PropMgr.prop_gold103=103;
	PropMgr.prop_magnet_time=3600;
	PropMgr.prop_speed_time=2700;
	PropMgr.prop_defend_time=1200;
	PropMgr.prop_gem_time=300;
	PropMgr.instance=null;
	return PropMgr;
})()


/**
*显示在场景角色管理
*@author guowc
*
*/
//class game.manager.SceneRoleMgr
var SceneRoleMgr=(function(){
	function SceneRoleMgr(){
		this.showvrt=null;
		this._showdoor=false;
		this.freedom=0;
		this.addtime=0;
		this.hasBoss=false;
		this.startY=0;
		this.monsternum=0;
		this.ee=0;
		this.isDispose=false;
		this.viewrect=null;
		this.maxrect=null;
		this.enemys=null;
		this.enemyAnis=null;
		this.enemyThings=null;
		this.foods=null;
		this.scene=null;
		this.bgscene=null;
		this.top=null;
		this.effect=null;
		this.clearboxs=null;
		this.springboxs=null;
		this.prandom=null;
		this.grandom=null;
		this.wrandom=null;
		this.vrt=new Rectangle;
		if(SceneRoleMgr.instance)return;
		SceneRoleMgr.instance=this;
	}

	__class(SceneRoleMgr,'game.manager.SceneRoleMgr');
	var __proto=SceneRoleMgr.prototype;
	__proto.start=function(){
		this.hasBoss=false;
		this.isDispose=false;
		this.scene=GlobalAPI.moveViewPort.getLayerContainer(2);
		this.bgscene=GlobalAPI.moveViewPort.getLayerContainer(1);
		this.effect=GlobalAPI.moveViewPort.getLayerContainer(4);
		this.top=GlobalAPI.moveViewPort.getLayerContainer(5);
		this.viewrect=GlobalAPI.moveViewPort.viewRect;
		this.maxrect=GlobalAPI.moveViewPort.maxRect;
		this.vrt.width=this.viewrect.width+MapData.boxW3*2;
		this.vrt.height=this.maxrect.height;
		this.showvrt=null;
		this.enemys=[];
		this.enemyAnis=[];
		this.enemyThings=[];
		this.foods=[];
		this.clearboxs=[];
		this.springboxs=[];
		GlobalAPI.heartMgr.add(this,this.check);
		this._showdoor=false;
		this.grandom=new MRandom;
		this.grandom.setRandom(96,100);
		this.prandom=new MRandom;
		this.prandom.setRandom(3,10);
		this.wrandom=new MRandom;
		this.wrandom.setRandom(3,10);
	}

	/**
	*
	*@param val 设定显示区
	*
	*/
	__proto.setShowViewRect=function(val){
		this.showvrt=val;
	}

	__proto.getCheckRect=function(){
		return this.vrt;
	}

	__proto.check=function(){
		var act;
		var hero;
		this.vrt.x=this.viewrect.x-MapData.boxW3;
		var pt;
		if(!this._showdoor && this.vrt.contains(MapData.mapEndRt.x,MapData.mapEndRt.y)){
			EndDoor.getInstance().show(true);
			this._showdoor=true;
		}
		if(this.freedom<10){
			this.freedom++;
		}
		var $each_act;
		for($each_act in this.enemys){
			act=this.enemys[$each_act];
			if(this.freedom==10){
				if((act instanceof game.role.Enemy )&& (act).isAttacklock && (act).loseAttack){
					this.freedom=0;
					(act).isAttacklock=false;
				}
			}
			if(act.isFly==false){
				pt=act._pt;
				if(pt.y<0 || this.vrt.contains(pt.x,pt.y)){
					if(!act._show){
						act._show=true;
						act.play(this.scene);
					};
					var voo=act.getData();
					if(voo.thing==2){
						var $each_hero;
						for($each_hero in GlobalAPI.heros){
							hero=GlobalAPI.heros[$each_hero];
							if(hero.prop_magnet && !hero._pause && voo.noMagnet==false){
								if(this.viewrect.contains(pt.x,pt.y)){
									act.flyTo(hero.getPt(),0,-30,10);
								}
							}
						}
					}
					}else{
					if(act._pause==false){
						if(this.showvrt !=null){
							if(this.showvrt.contains(pt.x,pt.y)){
								}else{
								if(act.baseRoleData.config==false && act.baseRoleData.thing==0){
									this.removeEnemy(act.baseRoleData.id);
									}else if(act.touchGround){
									act.pause();
								}
							}
							}else{
							if(act.touchGround){
								act.pause();
							}
						}
						WeaponMgr.removeShootEnemy(act.getData().id);
					}
				}
			}
		}
		var $each_act;
		for($each_act in this.enemyAnis){
			act=this.enemyAnis[$each_act];
			pt=act._pt;
			if(pt.y<0 || this.vrt.contains(pt.x,pt.y)){
				if(act._pause){
					act.play(this.scene);
				}
				}else{
				if(!act._pause){
					if(!this.maxrect.contains(pt.x,pt.y)){
						GlobalAPI.sceneRoleMgr.removeEnemyAni(act.getData().id);
						}else if(act.touchGround){
						act.pause(false);
					}
				}
			}
		};
		var vo;
		var $each_act;
		for($each_act in this.enemyThings){
			act=this.enemyThings[$each_act];
			pt=act._pt;
			vo=act.baseRoleData;
			if(vo.rw>10 || vo.rh>10){
				if(vo.startX+vo.rw<=this.vrt.x ||
					vo.startX>=this.vrt.x+this.vrt.width ||
				vo.startY>=this.vrt.y+this.vrt.height ||
				vo.startY+vo.rh<=this.vrt.y){
					if(!act._pause){
						act.pause(false);
					}
					}else{
					if(act._pause){
						act.play(this.scene);
					}
				}
				}else{
				if(pt.y<0 || this.vrt.contains(pt.x,pt.y)){
					if(act._pause){
						act.play(this.scene);
					}
					}else{
					if(!act._pause){
						act.pause(false);
					}
				}
			}
		};
		var food;
		var fvo;
		var $each_food;
		for($each_food in this.foods){
			food=this.foods[$each_food];
			if(!food.move){
				fvo=food.getData();
				if(fvo.skin==400 && this.vrt.x>food.x){
					this.removeFood(fvo.id);
					}else{
					if(this.vrt.contains(food.x,food.y)){
						if(food.ispause){
							food.add(this.scene);
						}
						}else{
						if(food.ispause==false)
							food.pause();
					}
				}
			}
		};
		var e=0;
		var av=10;
		if(MapData.monsterslen>0 && this.addtime<1){
			if(this.ee>0){
				this.ee--;
				if(this.ee%av==0){
					e=this.ee/av>>0;
					var mlen=MapData.monsterslen-1;
					if(GlobalAPI.activeMgr.addbosstype>0){
						vo=EnemyRoleVO.setData(GlobalAPI.activeMgr.addbosstype,MapData.levelLev);
						GlobalAPI.activeMgr.addbosstype=0;
						}else{
						if(e>mlen){
							vo=EnemyRoleVO.setData(MapData.monsters[Math.random()*mlen>>0],MapData.levelLev);
							}else{
							vo=EnemyRoleVO.setData(MapData.monsters[e],MapData.levelLev);
						}
					}
					if(MapData.enemyptsLen<1){
						if(Math.random()*2<1){
							vo.startX=this.showvrt.x+Math.random()*150+50;
							}else{
							vo.startX=this.showvrt.x+this.showvrt.width-Math.random()*150-50;
						}
						vo.startY=this.startY;
						}else{
						var ar=[];
						var $each_pt;
						for($each_pt in MapData.enemypts){
							pt=MapData.enemypts[$each_pt];
							if(this.viewrect.contains(pt.x,pt.y)==false){
								ar.push(pt);
							}
						}
						if(ar.length>0){
							pt=ar[Math.random()*ar.length>>0];
							}else{
							pt=MapData.enemypts[Math.random()*MapData.enemyptsLen>>0];
						}
						vo.startX=pt.x;
						vo.startY=pt.y;
					}
					this.addEnemy(vo);
				}
				}else{
				if(this.hasBoss && GlobalAPI.levelMgr.sort==0){
					if(this.monsternum<2){
						MapData.monsterLen--;
						if(MapData.monsterLen<0){
							MapData.monsterLen=0;
						}
						this.addtime=MapData.frameRate;
						this.ee=MapData.monsterNum*av;
					}
					}else if((this.monsternum<2 && MapData.monsterLen>0)|| this.monsternum<1 || (GlobalAPI.levelMgr.sort==1 && this.monsternum<6 && MapData.monsterLen>0)){
					if(MapData.monsterLen<1){
						var bool=false;
						var $each_act;
						for($each_act in this.enemys){
							act=this.enemys[$each_act];
							if(act._pause==false && act.baseRoleData.thing==0 && act.baseRoleData.hurt>0 && act.baseRoleData.stronghp==false){
								bool=true;
								break ;
							}
						}
						if(bool==false){
							if(GlobalAPI.levelMgr.sort==1){
								GlobalAPI.activeMgr.randomMonsters();
								this.ee=MapData.monsterNum*av;
								}else{
								GlobalAPI.activeMgr.setJumpDropPt(true);
								GlobalAPI.activeMgr.setJumpDropPt(false);
								var dis=this.showvrt.right;
								this.setShowViewRect(null);
								GlobalAPI.moveViewPort.maxRect.x=0;
								GlobalAPI.moveViewPort.maxRect.width=MapData.mapRect.width;
								MapData.monsterslen=0;
								TipArrow.getInstance().show(true,GlobalAPI.systembar,dis);
							}
						}
						}else{
						MapData.monsterLen--;
						if(MapData.monsterLen>0){
							if(MapData.monsterLen<2 && GlobalAPI.levelMgr.sort==1){
								GlobalAPI.activeMgr.randomMonsters();
								this.ee=MapData.monsterNum*av;
								}else{
								this.addtime=MapData.frameRate;
								if(GlobalAPI.nowdouble){
									this.ee=MapData.monsterNum*av+4*av;
									}else{
									this.ee=MapData.monsterNum*av;
								}
							}
						}
					}
				}
			}
			}else{
			this.addtime--;
		}
	}

	__proto.addEnemy=function(enemyData){
		enemyData.formaturl=PathMgr.path_enemy+enemyData.skin+"/";
		enemyData.imgurl=PathMgr.path_enemy+enemyData.skin+"/";
		var enemy;
		switch(enemyData.ai){
			case 100:
				enemy=new Enemy;
				break ;
			case 102:
				enemy=new Enemy102;
				break ;
			case 103:
				enemy=new Enemy103;
				break ;
			case 108:
				enemy=new Enemy108;
				break ;
			case 109:
				enemy=new Enemy109;
				break ;
			case 115:
				enemy=GlobalAPI.poolMgr.getProp();
				break ;
			case 119:
				enemy=new Enemy119;
				this.springboxs[enemyData.id]=enemy;
				break ;
			case 201:
				enemy=new Enemy201;
				this.clearboxs[enemyData.id]=enemy;
				break ;
			case 202:
				enemy=new Enemy202;
				break ;
			case 301:
				enemy=new Enemy301;
				break ;
			case 302:
				enemy=new Enemy302;
				break ;
			case 303:
				enemy=new Enemy303;
				break ;
			case 305:
				enemy=new Enemy305;
				break ;
			case 406:
				enemy=GlobalAPI.poolMgr.getflood();
				if(!enemy)return null;
				break ;
			case 407:
				enemy=GlobalAPI.poolMgr.getshell();
				if(!enemy)return null;
				break ;
			case 408:
				if(GlobalAPI.canTrialWeapon==false){
					return null;
				}
				enemy=new Enemy408;
				break ;
			case 412:
				enemy=new Enemy412;
				break ;
			case 413:
				enemy=GlobalAPI.poolMgr.getdebris();
				if(!enemy)return null;
				break ;
			case 405:
				enemy=Pool.getItemByClass("enemy405",Enemy405);
				break ;
			case 421:
				enemy=new Enemy421;
				break ;
			case 422:
				enemy=new Enemy422;
				break ;
			default :
				throw "找不到AI"+enemyData.ai;
				return null;
			}
		if(enemyData.isBoss){
			this.hasBoss=true;
			GlobalAPI.soundMgr.playSound("warnsound");
			GlobalAPI.miniAniEffect.start(GlobalAPI.systembar,MapData.stageW>>1,MapData.stageH>>1,"warnboss");
		}
		if(enemyData.thing==0){
			if(enemyData.config==false){
				this.monsternum++;
			}
		}
		switch(enemyData.thing){
			case 1:
				if(Math.random()*6<3){
					enemy.isFrontBgM(true);
					}else{
					enemy.isFrontBgM(false);
				}
				break ;
			case 4:
				enemy.isFrontBgM(true);
				break ;
			case 5:
				enemy.isFrontBgM(false);
				break ;
			}
		enemy.setData(enemyData);
		enemy.setXY(enemy.x,enemy.y-1);
		switch(enemyData.thing){
			case 1:
			case 4:
			case 5:
				if(enemyData.ai==406 || enemyData.ai==407 || enemyData.ai==413){
					enemy.play(this.effect);
					}else if(enemy.isFrontBg){
					enemy.play(this.top);
					}else{
					enemy.play(this.bgscene);
				}
				break ;
			case 6:
				enemy.play(this.bgscene);
				break ;
			default :
				enemy.play(this.scene);
				break ;
			}
		if(enemyData.thing==1 || enemyData.thing==4 || enemyData.thing==5){
			this.enemyAnis[enemyData.id]=enemy;
			}else if(enemyData.thing==6){
			this.enemyThings[enemyData.id]=enemy;
			}else{
			this.enemys[enemyData.id]=enemy;
		}
		return enemy;
	}

	__proto.removeEnemyAni=function(id){
		var enemy=this.enemyAnis[id];
		if(!enemy)return;
		enemy.dispose();
		this.enemyAnis[id]=null;
		delete this.enemyAnis[id];
		this.clearboxs[id]=null;
		delete this.clearboxs[id];
		this.springboxs[id]=null;
		delete this.springboxs[id];
	}

	__proto.removeEnemyThings=function(id){
		var enemy=this.enemyThings[id];
		if(!enemy)return;
		enemy.dispose();
		this.enemyThings[id]=null;
		delete this.enemyThings[id];
	}

	__proto.removeEnemy=function(id,showEffect,dir,roleid){
		(showEffect===void 0)&& (showEffect=false);
		(dir===void 0)&& (dir=0);
		(roleid===void 0)&& (roleid=0);
		var enemy=this.enemys[id];
		if(!enemy)return;
		var edata=enemy.getData();
		if(edata.config==false && edata.thing==0){
			this.monsternum--;
		}
		WeaponMgr.removeShootEnemy(id);
		if(showEffect){
			enemy.die(dir);
			if(edata.basehp>30000){
				if(GlobalAPI.levelMgr.sort==0){
					if(edata.isBoss){
						this.hasBoss=false;
					}
					MapData.monsterLen=0;
				}
				GlobalAPI.levVO.levelgem+=2;
				GlobalAPI.taskVO.bossOne++;
			}
			if(edata.hurt>0){
				var hero;
				if(roleid==-2){
					}else if(roleid==-1){
					var t=0;
					var $each_hero;
					for($each_hero in GlobalAPI.heros){
						hero=GlobalAPI.heros[$each_hero];
						if(hero.baseRoleData.hp>0){
							t++;
						}
					}
					var $each_hero;
					for($each_hero in GlobalAPI.heros){
						hero=GlobalAPI.heros[$each_hero];
						if(hero.baseRoleData.hp>0){
							hero.addExp(edata.enemyexp/t);
						}
					}
					}else{
					var $each_hero;
					for($each_hero in GlobalAPI.heros){
						hero=GlobalAPI.heros[$each_hero];
						if(hero.baseRoleData.id==roleid){
							hero.addExp(edata.enemyexp);
							break ;
						}
					}
				}
			}
			if(edata.thing==0 && edata.hurt>0){
				GlobalAPI.systembar.combotip.kill();
				GlobalAPI.levVO.killEnemys++;
				GlobalAPI.taskVO.killZombie++;
				GlobalAPI.rankVO.killZombie++;
				if(GlobalAPI.levelMgr.sort==1 && GlobalAPI.levVO.killEnemys<100 && GlobalAPI.levVO.killEnemys%48==0){
					GlobalAPI.propMgr.addgun(enemy.x,enemy.y-50,0,1);
					}else if(edata.gold>0){
					dir=Math.random()*2<1 ?-1 :1;
					if(GlobalAPI.levelMgr.sort==0 && GlobalAPI.levVO.killEnemys%80==0){
						GlobalAPI.propMgr.addProp(111,enemy.x+15,enemy.y,1,dir,true,true)
						}else if(this.grandom.getRan()){
						var act=GlobalAPI.propMgr.addProp(101,enemy.x,enemy.y-5,1,dir);
						act.getData().gold=edata.gold;
						var sc=edata.gold*0.01+1;
						sc=sc>2 ? 2 :sc;
						act.scale(sc,sc,true);
						}else if(this.prandom.getRan()&& Math.random()*10>5){
						GlobalAPI.propMgr.addProp(GlobalAPI.propMgr.getRandomProp(),enemy.x+15,enemy.y,1,dir,true,true)
						}else if(GlobalAPI.levelMgr.sort==1 && this.wrandom.getRan()){
						GlobalAPI.propMgr.addgun(enemy.x,enemy.y-50,0,1);
					}
				}
			}
			}else{
			enemy.dispose();
		}
		GlobalAPI.weaponMgr.removeFollowEnemy(id);
		this.enemys[id]=null;
		delete this.enemys[id];
		this.clearboxs[id]=null;
		delete this.clearboxs[id];
		this.springboxs[id]=null;
		delete this.springboxs[id];
	}

	__proto.getEnemys=function(){
		return this.enemys;
	}

	__proto.getEnemyThins=function(){
		return this.enemyThings;
	}

	__proto.addDrawFood=function(x,y,skin){
		(skin===void 0)&& (skin=104);
		var vo=new FoodVO;
		vo.skin=skin;
		vo.type=MapData.foodSortId+vo.skin;
		var box=MapData.getFoodData(vo.type);
		vo.look=box.bitmapData;
		vo.score=box.score;
		vo.gold=box.gold;
		GlobalAPI.activeMgr.foodid++;
		vo.id=GlobalAPI.activeMgr.foodid;
		vo.startX=x;
		vo.startY=y;
		this.addFood(vo);
	}

	__proto.addFood=function(foodVO){
		var food=GlobalAPI.poolMgr.getFood();
		this.foods[foodVO.id]=food;
		food.setData(foodVO);
	}

	__proto.removeFood=function(id,clear){
		(clear===void 0)&& (clear=false);
		var food=this.foods[id];
		if(food==null)return;
		var vo=food.getData();
		this.foods[id]=null;
		delete this.foods[id];
		if(!clear && vo.skin==400){
			this.hasBoss=false;
			this.monsternum=0;
			GlobalAPI.moveViewPort.maxRect.x=food.x;
			GlobalAPI.moveViewPort.maxRect.width=GlobalAPI.activeMgr.getMonstersWid(vo);
			GlobalAPI.activeMgr.setJumpDropPt(true);
			this.setShowViewRect(GlobalAPI.moveViewPort.showViewRect);
			GlobalAPI.activeMgr.setMonsters(vo);
			this.ee=MapData.monsterNum;
			if(this.ee>0 && MapData.monsterLen>1){
				QuickMoveTip.show(StringInfo.getString("一大波僵尸来袭..."));
			}
			GlobalAPI.scrollMap.fillRectOnce(GlobalAPI.moveViewPort.getLayerContainer(0),this.showvrt);
			GlobalAPI.activeMgr.setJumpDropPt(false);
			this.startY=vo.startY;
		}
		food.dispose();
	}

	__proto.getMonsternum=function(){
		return this.monsternum;
	}

	__proto.getFoods=function(){
		return this.foods;
	}

	__proto.addbloods=function(max,pt,bloodType){
		(bloodType===void 0)&& (bloodType=100);
		var isFire=bloodType !=100;
		var num=0;
		var x=0;
		if(max){
			if(isFire){
				this.addBlood(pt.x,pt.y-15,true,2,20,false,isFire);
				this.addBlood(pt.x,pt.y-15,true,0,16,false,isFire);
				}else{
				this.addDebris(pt.x,pt.y-15,true,2,20,bloodType);
				this.addDebris(pt.x,pt.y-15,true,0,16,bloodType);
			}
			num=Enemy413.num<12 ? 3 :1;
			for(x=0;x<num;x++){
				if(isFire){
					this.addBlood(pt.x,pt.y-15,true,5,15,false,isFire);
					}else{
					this.addDebris(pt.x,pt.y-15,true,4,15,bloodType);
				}
			}
			num=Enemy413.num<12 ? 4 :0;
			for(x=0;x<num;x++){
				if(isFire){
					this.addBlood(pt.x,pt.y-15,true,4,10,false,isFire);
					}else{
					this.addDebris(pt.x,pt.y-15,true,3,10,bloodType);
				}
			}
			num=Enemy413.num<12 ? 4 :0;
			for(x=0;x<num;x++){
				if(isFire){
					this.addBlood(pt.x,pt.y-15,true,4,8,false,isFire);
					}else{
					this.addDebris(pt.x,pt.y-15,true,3,8,bloodType);
				}
			}
			}else{
			this.addBlood(pt.x,pt.y,true,0,8,false,isFire);
		}
	}

	/**
	*加炮灰
	*@param x
	*@param y
	*@param shadow
	*@param speedx
	*@param jumpheight
	*
	*/
	__proto.addBlood=function(x,y,shadow,speedx,jumpheight,isWater,isFire){
		(shadow===void 0)&& (shadow=false);
		(speedx===void 0)&& (speedx=0);
		(jumpheight===void 0)&& (jumpheight=8);
		(isWater===void 0)&& (isWater=false);
		(isFire===void 0)&& (isFire=false);
		var id=GlobalAPI.activeMgr.enemyid++;
		var vo;
		vo=new EnemyRoleVO;
		vo.ai=406;
		vo.startX=x;
		vo.startY=y;
		vo.speed=speedx==0 ? 2+Math.random()*4 :speedx+Math.random()*4;
		vo.jumphight=jumpheight;
		vo.id=id;
		vo.dir=Math.random()*2<1 ? 1:-1;
		vo.hurt=0;
		vo.thing=1;
		vo.shadow=shadow;
		if(isFire){
			vo.bloodType=200;
			}else{
			vo.bloodType=100;
		}
		GlobalAPI.sceneRoleMgr.addEnemy(vo);
	}

	/**
	*添加弹壳
	*@param x
	*@param y
	*@param dir
	*@param speedx
	*@param jumpheight
	*@param shelltype
	*
	*/
	__proto.addShell=function(x,y,dir,speedx,jumpheight,shelltype){
		(speedx===void 0)&& (speedx=0);
		(jumpheight===void 0)&& (jumpheight=8);
		(shelltype===void 0)&& (shelltype=0);
		var id=GlobalAPI.activeMgr.enemyid++;
		var vo;
		vo=new EnemyRoleVO;
		vo.ai=407;
		vo.startX=x;
		vo.startY=y;
		vo.skin=0;
		vo.speed=speedx==0 ? 2+Math.random()*3>>0 :speedx+Math.random()*3>>0;
		vo.jumphight=jumpheight;
		vo.id=id;
		vo.dir=dir;
		vo.hurt=0;
		vo.thing=1;
		vo.shellType=shelltype;
		GlobalAPI.sceneRoleMgr.addEnemy(vo);
	}

	/**
	*炸碎尸
	*@param x
	*@param y
	*@param shadow
	*@param speedx
	*@param jumpheight
	*@param isWater
	*
	*/
	__proto.addDebris=function(x,y,shadow,speedx,jumpheight,bloodType){
		(shadow===void 0)&& (shadow=false);
		(speedx===void 0)&& (speedx=0);
		(jumpheight===void 0)&& (jumpheight=8);
		(bloodType===void 0)&& (bloodType=100);
		var id=GlobalAPI.activeMgr.enemyid++;
		var vo;
		vo=new EnemyRoleVO;
		vo.ai=413;
		vo.startX=x;
		vo.startY=y;
		vo.speed=speedx==0 ? Math.random()*2 :speedx+Math.random()*4;
		vo.jumphight=jumpheight;
		vo.id=id;
		vo.dir=Math.random()*2<1 ? 1:-1;
		vo.hurt=0;
		vo.thing=1;
		vo.shadow=shadow;
		vo.bloodType=bloodType;
		GlobalAPI.sceneRoleMgr.addEnemy(vo);
	}

	__proto.checkClearBox=function(dx,dy){
		var enemy;
		var $each_enemy;
		for($each_enemy in this.clearboxs){
			enemy=this.clearboxs[$each_enemy];
			if(enemy._pause==false && enemy.checkxy(dx,dy)){
				break ;
			}
		}
	}

	__proto.checkSpringBox=function(act,dx,dy){
		var enemy;
		var $each_enemy;
		for($each_enemy in this.springboxs){
			enemy=this.springboxs[$each_enemy];
			if(enemy.checkxy(dx,dy)){
				if(act){
					act.orderJump(-20);
					if((act instanceof game.role.Hero )){
						(act).setGayNum(1);
					}
				}
				break ;
			}
		}
	}

	__proto.dispose=function(){
		this.isDispose=true;
		GlobalAPI.heartMgr.remove(this,this.check);
		var enemy;
		var $each_enemy;
		for($each_enemy in this.enemys){
			enemy=this.enemys[$each_enemy];
			enemy.dispose();
		}
		var $each_enemy;
		for($each_enemy in this.enemyAnis){
			enemy=this.enemyAnis[$each_enemy];
			enemy.dispose();
		}
		var $each_enemy;
		for($each_enemy in this.enemyThings){
			enemy=this.enemyThings[$each_enemy];
			enemy.dispose();
		};
		var food;
		var $each_food;
		for($each_food in this.foods){
			food=this.foods[$each_food];
			food.dispose();
		}
		if(this.enemys)
			this.enemys.length=0;
		if(this.enemyAnis)
			this.enemyAnis.length=0;
		if(this.enemyThings)
			this.enemyThings.length=0;
		if(this.foods)
			this.foods.length=0;
		if(this.clearboxs)
			this.clearboxs.length=0;
		if(this.springboxs)
			this.springboxs.length=0;
		this._showdoor=false;
	}

	SceneRoleMgr.getInstance=function(){
		if(!SceneRoleMgr.instance)
			new SceneRoleMgr;
		return SceneRoleMgr.instance;
	}

	SceneRoleMgr.instance=null;
	return SceneRoleMgr;
})()


/**
*皮肤相关
*@author guowc
*
*/
//class game.manager.SkinMgr
var SkinMgr=(function(){
	function SkinMgr(){}
	__class(SkinMgr,'game.manager.SkinMgr');
	SkinMgr.init=function(){
		if(GlobalAPI.isChid){
			SkinMgr.bloodtexture=Laya.loader.getRes("miniani/miniani/bloodb0001.png");
			}else{
			SkinMgr.bloodtexture=Laya.loader.getRes("miniani/miniani/blood0001.png");
		}
		SkinMgr.dusttexture=Laya.loader.getRes("miniani/miniani/dust0001.png");
	}

	SkinMgr.star="comp/star.png";
	SkinMgr.starbg="comp/starbg.png";
	SkinMgr.bigstar="comp/bigstar.png";
	SkinMgr.bigstarbg="comp/bigstarbg.png";
	SkinMgr.heart="comp/heart.png";
	SkinMgr.boss="comp/boss.png";
	SkinMgr.tip="comp/tip.png";
	SkinMgr.bulletfire="comp/bulletfire.png";
	SkinMgr.followbom="bulletskin/followbom.png";
	SkinMgr.followbom1="bulletskin/followbom1.png";
	SkinMgr.followbom2="bulletskin/followbom2.png";
	SkinMgr.followbom3="bulletskin/followbom3.png";
	SkinMgr.firebullet="bulletskin/firebullet.png";
	SkinMgr.lockimg="othericon/lockimg.png";
	SkinMgr.border="othericon/border.png";
	SkinMgr.mybox="othericon/mybox.png";
	SkinMgr.mybox1="othericon/mybox1.png";
	SkinMgr.combobg="othericon/combobg.png";
	SkinMgr.cirlbg="othericon/cirlbg.png";
	SkinMgr.miss="othericon/miss.png";
	SkinMgr.shootpt="othericon/shootpt.png";
	SkinMgr.tilebg="t44sd/img/bg.jpg";
	SkinMgr.skill0="skillskin/100.png";
	SkinMgr.skill1="skillskin/101.png";
	SkinMgr.skill2="skillskin/102.png";
	SkinMgr.skill_speed="skillskin/107.png";
	SkinMgr.skill_hp="skillskin/105.png";
	SkinMgr.skill_magnet="skillskin/106.png";
	SkinMgr.skill_grenade="skillskin/108.png";
	SkinMgr.skill_bolt="skillskin/109.png";
	SkinMgr.bloodtexture=null;
	SkinMgr.dusttexture=null;
	__static(SkinMgr,
	['numRrect',function(){return this.numRrect=new Rectangle(0,0,16,18);},'numNrect',function(){return this.numNrect=new Rectangle(0,0,16,20);},'numDrect',function(){return this.numDrect=new Rectangle(0,0,13,18);},'numErect',function(){return this.numErect=new Rectangle(0,0,11,18);},'numLrect',function(){return this.numLrect=new Rectangle(0,0,22,26);},'numJrect',function(){return this.numJrect=new Rectangle(0,0,32,43);},'yellowGlowfilter',function(){return this.yellowGlowfilter=[new GlowFilter("#ffff00",8,0,0)];}
	]);
	return SkinMgr;
})()


/**
*声音管理
*@author guowc
*
*/
//class game.manager.SoundMgr
var SoundMgr=(function(){
	function SoundMgr(){
		this.btnchannel=null;
		this.sound0=[];
		this.sound1=[];
		this.now=0;
		this._bgsound=null;
		if(SoundMgr.instance)return;
		SoundMgr.instance=this;
		this._bgsound="bgsound";
		if(GlobalAPI.ispackge){
			SoundMgr.soundformat=Browser.onIOS ? ".mp3" :".mp3";
			}else{
			SoundMgr.soundformat=".mp3";
		}
	}

	__class(SoundMgr,'game.manager.SoundMgr');
	var __proto=SoundMgr.prototype;
	__proto.playSound=function(name,startTime,loops,complete,soundClass){
		(startTime===void 0)&& (startTime=0);
		(loops===void 0)&& (loops=1);
		if(SoundMgr.soundLock)return null;
		this.now=Browser.now();
		var idx=this.sound0.indexOf(name);
		if(idx<0){
			this.sound0.push(name);
			this.sound1.push(this.now);
			}else{
			var num=this.sound1[idx];
			if(this.now-num<16){
				return null;
			}
			this.sound1[idx]=this.now;
		}
		return SoundManager.playSound(PathMgr.path_sound+name+SoundMgr.soundformat,loops,complete,soundClass,startTime);
	}

	__proto.playgunSound=function(name,startTime,loops,complete,soundClass){
		(startTime===void 0)&& (startTime=0);
		(loops===void 0)&& (loops=1);
		if(SoundMgr.soundLock)return null;
		return SoundManager.playSound(PathMgr.path_sound_gun+name+SoundMgr.soundformat,loops,complete,soundClass,startTime);
	}

	__proto.playMusic=function(name,startTime,loops,complete){
		(startTime===void 0)&& (startTime=0);
		(loops===void 0)&& (loops=0);
		this._bgsound=name;
		if(SoundMgr.musicLock)return null;
		return SoundManager.playMusic(PathMgr.path_sound+name+SoundMgr.soundformat,loops,complete,startTime);
	}

	__proto.pauseMusic=function(val){
		SoundMgr.musicLock=val;
		if(val){
			SoundManager.stopMusic();
			}else{
			GlobalAPI.soundMgr.playMusic(this._bgsound);
		}
	}

	__proto.playbtn=function(){
		this.btnchannel=GlobalAPI.soundMgr.playSound("buttonsound");
	}

	SoundMgr.getInstance=function(){
		if(!SoundMgr.instance)
			new SoundMgr;
		return SoundMgr.instance;
	}

	SoundMgr.buttonsound="buttonsound";
	SoundMgr.goldsound="goldsound";
	SoundMgr.atreadsound="atreadsound";
	SoundMgr.bomsound="bomsound";
	SoundMgr.boxobjectflysound="boxobjectflysound";
	SoundMgr.blocksound="blocksound";
	SoundMgr.springsound="springsound";
	SoundMgr.propsound="propsound";
	SoundMgr.magnetsound="magnetsound";
	SoundMgr.speedsound="speedsound";
	SoundMgr.hurtsound="hurtsound";
	SoundMgr.shootsound="shootsound";
	SoundMgr.summonsound="summonsound";
	SoundMgr.bgsound="bgsound";
	SoundMgr.wooddropsound="wooddropsound";
	SoundMgr.starsound="starsound";
	SoundMgr.failsound="failsound";
	SoundMgr.addbulletsound="addbulletsound";
	SoundMgr.chgweaponsound="chgweaponsound";
	SoundMgr.jizhongsound="jizhongsound";
	SoundMgr.zombiediesound="zombiediesound";
	SoundMgr.shellsound="shellsound";
	SoundMgr.rocketsound="rocketsound";
	SoundMgr.patsound="patsound";
	SoundMgr.warnsound="warnsound";
	SoundMgr.uplevelsound="uplevelsound";
	SoundMgr.transform="transform";
	SoundMgr.bullthit0="bullthit0";
	SoundMgr.bullthit1="bullthit1";
	SoundMgr.musicLock=false;
	SoundMgr.soundLock=true;
	SoundMgr.soundformat=null;
	SoundMgr.instance=null;
	return SoundMgr;
})()


//class game.manager.TipMgr
var TipMgr=(function(){
	function TipMgr(){
		this.i=0;
		this.level=0;
		if(TipMgr.instance)return;
		TipMgr.instance=this;
	}

	__class(TipMgr,'game.manager.TipMgr');
	var __proto=TipMgr.prototype;
	__proto.herotabtip=function(){
		this.i=GlobalAPI.heroinfo.heroNum;
		var t=-1;
		while(this.i>0){
			this.i--
			this.level=GlobalAPI.heroproxy.getHeroLev(this.i);
			if(GlobalAPI.heroproxy.getHeroLev(this.i)>0){
				return-1;
			}
			if(GlobalAPI.heroproxy.canBuy(GlobalAPI.heroinfo.uplevGold(this.level,this.i))){
				if(this.level==0){
					return this.i;
					}else if(t==-1){
					t=this.i;
				}
			}
		}
		return t;
	}

	__proto.weapontabtip=function(){
		this.i=GlobalAPI.weaponinfo.weaponnum;
		var t=-1;
		while (this.i>0){
			this.i--;
			this.level=GlobalAPI.heroproxy.getWeaponLev(this.i);
			if(GlobalAPI.heroproxy.canBuy(GlobalAPI.weaponinfo.uplevGold(this.level,this.i))){
				if(this.level==0){
					return this.i;
					}else if(t==-1){
					t=this.i;
				}
			}
		}
		return t;
	}

	__proto.mounttabtip=function(){
		this.i=GlobalAPI.mountinfo.mountnum;
		var t=-1;
		while (this.i>0){
			this.i--;
			this.level=GlobalAPI.heroproxy.getMountLev(this.i);
			if(GlobalAPI.heroproxy.canBuy(GlobalAPI.mountinfo.uplevGold(this.level,this.i))){
				if(this.level==0){
					return this.i;
					}else if(t==-1){
					t=this.i;
				}
			}
		}
		return t;
	}

	__proto.skilltabtip=function(){
		this.i=GlobalAPI.skillinfo.skillLen;
		var t=-1;
		while (this.i>0){
			this.i--;
			this.level=GlobalAPI.heroproxy.getSkillLev(this.i);
			if(GlobalAPI.skillinfo.isSkillType(this.i)&& GlobalAPI.heroproxy.canBuy(GlobalAPI.skillinfo.uplevGold(this.level,this.i))){
				if(this.level==0){
					return this.i;
					}else if(t==-1){
					t=this.i;
				}
			}
		}
		return t;
	}

	TipMgr.getInstance=function(){
		if(!TipMgr.instance)new TipMgr;
		return TipMgr.instance;
	}

	TipMgr.instance=null;
	return TipMgr;
})()


/**
*敌人武器管理
*@author guowc
*
*/
//class game.manager.WeaponEnemyMgr
var WeaponEnemyMgr=(function(){
	function WeaponEnemyMgr(){
		this.weaponlist=null;
		this.weaponlen=0;
		this.weaponskin=null;
		this.enemys=null;
		this.moveView=null;
		this.viewRect=null;
		this.effect=null;
		this.weapons=null;
		this.heroProxy=null;
		this.markid=0;
		this.pt=new Point;
		this.ept=new Point;
		if(WeaponEnemyMgr.instance)
			return;
		WeaponEnemyMgr.instance=this;
		this.weaponlist=[0,1,2];
		this.weaponskin=[1,2,3];
		this.weaponlen=this.weaponlist.length-1;
		this.heroProxy=HeroProxy.getInstance();
		this.moveView=MoveViewPort.getInstance();
		this.viewRect=this.moveView.viewRect;
		this.effect=this.moveView.getLayerContainer(4);
		this.weapons=[];
		WeaponEnemyMgr.followList=[];
	}

	__class(WeaponEnemyMgr,'game.manager.WeaponEnemyMgr');
	var __proto=WeaponEnemyMgr.prototype;
	__proto.start=function(){
		this.markid=0;
		this.weapons.length=0;
		this.enemys=SceneRoleMgr.getInstance().getEnemys();
		WeaponEnemyMgr.followList.length=0;
	}

	/**
	*销毁武器
	*@param val
	*
	*/
	__proto.remove=function(val){
		this.weapons[val.getid()]=null;
		delete this.weapons[val.getid()];
		val.setid(0);
		val.dispose();
	}

	/**
	*射击武器
	*@param startPt
	*@param dir
	*
	*/
	__proto.shootBullet=function(startPt,rotation,angbool,skintype,hurt){
		(rotation===void 0)&& (rotation=0);
		(angbool===void 0)&& (angbool=false);
		(skintype===void 0)&& (skintype=1001);
		(hurt===void 0)&& (hurt=5);
		if(angbool){
			var dx=GlobalAPI.heropt.x-startPt.x;
			var dy=GlobalAPI.heropt.y-30-startPt.y;
			rotation=Math.atan2(dy,dx)*MathUtil.rotation;
		};
		var bom;
		switch(skintype){
			case 1001:
				bom=Pool.getItem("Eshoot1");
				break ;
			};
		var skin;
		if(!bom){
			switch(skintype){
				case 1001:
					bom=new EshootBullet1;
					skin=GlobalAPI.miniAniEffect.start(null,0,0,"bluefire",false);
					break ;
				}
			bom.setSpeed(5);
			bom.setType(0);
		}
		if(bom.getid()==0){
			this.markid++;
			bom.setid(this.markid);
		}
		bom.setHurt(hurt);
		bom.setLimitRect(this.moveView.viewRect);
		bom.start(this.effect,startPt,skin);
		bom.setAng(rotation);
		this.weapons[bom.getid()]=bom;
	}

	/**
	*投掷武器
	*@param startPt 起始位置
	*@param dir 方向
	*@param distance 距离
	*@param tpt 目标点
	*@param speedframe 投射目标点帧时间
	*@param chgang 角度变换
	*@param skintype
	*
	*/
	__proto.throwBom=function(startPt,dir,distance,tpt,speedframe,chgang,skintype,hurt){
		(dir===void 0)&& (dir=1);
		(distance===void 0)&& (distance=110);
		(speedframe===void 0)&& (speedframe=15);
		(chgang===void 0)&& (chgang=false);
		(skintype===void 0)&& (skintype=2001);
		(hurt===void 0)&& (hurt=1);
		var bom;
		switch(skintype){
			case 2001:
				bom=Pool.getItem("EthrowBom1");
				break ;
			};
		var skin;
		if(!bom){
			switch(skintype){
				case 2001:
					bom=new EthrowBom1;
					skin=GlobalAPI.miniAniEffect.start(null,0,0,"futou",false);
					break ;
				}
			bom.setType(1);
		}
		if(bom.getid()==0){
			this.markid++;
			bom.setid(this.markid);
		}
		bom.setHurt(hurt);
		bom.setLimitRect(this.moveView.viewRect);
		bom.setFrameOk(speedframe);
		bom.setChgAng(chgang);
		if(tpt){
			bom.throwBom(this.effect,startPt,tpt,skin);
		}else
		bom.throwBomPos(this.effect,startPt,distance*dir,skin);
		this.weapons[bom.getid()]=bom;
	}

	/**
	*追踪武器
	*@param startPt
	*@param dir 射击方向(1右-1左)
	*
	*/
	__proto.followBom=function(startPt,rotation,hurt,speed,isfollow){
		var _$this=this;
		(rotation===void 0)&& (rotation=0);
		(hurt===void 0)&& (hurt=0);
		(speed===void 0)&& (speed=10);
		(isfollow===void 0)&& (isfollow=false);
		var bom;
		bom=Pool.getItem("EfollowBom");
		if(bom){
			bom.setWaitStep(12);
		};
		var skin;
		if(!bom){
			bom=new EfollowBom;
			skin=new Image("bulletskin/followbom3.png");
			bom.setWaitStep(12);
		}
		if(bom.getid()==0){
			this.markid++;
			bom.setid(this.markid);
		}
		bom.setHurt(hurt);
		bom.setStartAng(rotation);
		bom.setSpeed(speed);
		if(isfollow){
			bom.setFollowObj(null,this,followAct);
			bom.setFlyCirlOver(this,followAct);
		}
		bom.setLimitRect(this.moveView.maxRect);
		bom.start(this.effect,startPt,null,skin);
		bom.updateTargetPt(GlobalAPI.shootpt.x,GlobalAPI.shootpt.y-80);
		this.weapons[bom.getid()]=bom;
		function followAct (val){
			var enemy;
			var id=0;
			var enemyd;
			var ar=[];
			var vo;
			var $each_enemy;
			for($each_enemy in GlobalAPI.heros){
				enemy=GlobalAPI.heros[$each_enemy];
				vo=enemy.getData();
				id=vo.id;
				if(!enemy._pause){
					enemyd=enemy;
					if(!WeaponEnemyMgr.followList[id]){
						ar.push(enemy);
					}
				}
			}
			if(ar.length>0){
				_$this.ept.x=GlobalAPI.heropt.x;
				_$this.ept.y=GlobalAPI.heropt.y;
				var start=true;
				var old=0;
				var now=0;
				var $each_enemy;
				for($each_enemy in ar){
					enemy=ar[$each_enemy];
					_$this.pt.x=enemy.x;
					_$this.pt.y=enemy.y;
					if(start){
						enemyd=enemy;
						old=_$this.ept.distance(_$this.pt.x,_$this.pt.y);
						start=false;
						}else{
						now=_$this.ept.distance(_$this.pt.x,_$this.pt.y);
						if(now<old){
							old=now;
							enemyd=enemy;
						}
					}
				}
			}
			if(enemyd){
				WeaponEnemyMgr.followList[enemyd.getData().id]=enemyd;
				val.setFollowObj(enemyd,_$this,followAct);
				}else{
				val.moveOver();
			}
		}
	}

	__proto.getWeapons=function(){
		return this.weapons;
	}

	__proto.removeFollowEnemy=function(id){
		if(WeaponEnemyMgr.followList[id])
			delete WeaponEnemyMgr.followList[id];
	}

	__proto.dispose=function(){
		this.markid=0;
		var i;
		var $each_i;
		for($each_i in this.weapons){
			i=this.weapons[$each_i];
			i.setid(0);
			i.clear();
		}
		WeaponEnemyMgr.followList.length=0;
		this.weapons.length=0;
		this.enemys=null;
	}

	WeaponEnemyMgr.getInstance=function(){
		if(!WeaponEnemyMgr.instance)
			new WeaponEnemyMgr;
		return WeaponEnemyMgr.instance;
	}

	WeaponEnemyMgr.WEAPON_SHOOT=0;
	WeaponEnemyMgr.WEAPON_THROW=1;
	WeaponEnemyMgr.WEAPON_SHOOT1=2;
	WeaponEnemyMgr.WEAPON_THROW1=4;
	WeaponEnemyMgr.WEAPON_DROP=5;
	WeaponEnemyMgr.Shoot_Type1=1001;
	WeaponEnemyMgr.Throw_Type1=2001;
	WeaponEnemyMgr.followList=null;
	WeaponEnemyMgr.instance=null;
	return WeaponEnemyMgr;
})()


/**
*武器管理
*@author guowc
*
*/
//class game.manager.WeaponMgr
var WeaponMgr=(function(){
	function WeaponMgr(idx){
		this.roleid=0;
		this.buffVO=null;
		this.idxMgr=0;
		this._gunid=0;
		this._gunNum=3;
		this._gunidlist=null;
		this._gunidlistlen=0;
		this._cliplist=null;
		this.skin=null;
		this.realgay=0;
		this.cliplistobj=null;
		this.angs=[-110,-100,-90,-80,-70];
		this.bolt=null;
		this.shoot=null;
		this.laser=null;
		this.shoot1=null;
		this.shoot2=null;
		this.shoot3=null;
		this.shoot4=null;
		this.boltarray=[];
		this.sd=0;
		this.ang=2;
		//射击角度
		this.aniAng=0;
		//开火抖动动画角度
		this.attack=false;
		this.weaponPt=null;
		this.weaponShellPt=null;
		this.weaponAng=0;
		//错开角度
		this.type=0;
		this.weaponSort=0;
		this.mrandom=null;
		this.idx=0;
		this.nowhurt=0;
		this.nowaoe=NaN;
		this.soundstr=null;
		this.gay=0;
		//间隔攻击时间
		this.nowShootNum=0;
		this.firemc=null;
		this.weaponlist=null;
		this.weaponlen=0;
		this.weaponhurt=null;
		this.weaponaoe=null;
		this.weaponcrit=null;
		this.weaponPts=null;
		this.weaponAngs=null;
		//调整角度(如加特林型的)
		this.moveView=null;
		this.viewRect=null;
		this.effect=null;
		this.lightSkin=null;
		this.blotSkin=null;
		this.nowbolt=false;
		//正在发射闪电
		this.boltpts=null;
		this.linepts=null;
		this.clip=0;
		//一个弹夹最大容量
		this.allclip=0;
		//总弹夹
		this.isshotgun=false;
		this.isblotgun=false;
		this.isFiregun=false;
		this.isRocketgun=false;
		this.hasAmmo=null;
		//子弹是否拥有
		this.nowclip=0;
		//当前弹夹子弹数
		this.nowallclip=0;
		this.pt=new Point;
		this.ept=new Point;
		if(!GlobalAPI.weaponinfo)
			throw "need run weaponinfo";
		this.idxMgr=idx;
		this.mrandom=new MRandom;
		this.weaponlist=[];
		this.weaponhurt=[];
		this.weaponaoe=[];
		this.weaponcrit=[];
		this._gunidlist=[];
		this.weaponAngs=
		[0,0,0,0,0,
		0,0,17,4,15,
		0,5,14,0,0,
		8,0,10,6];
		this.weaponlen=GlobalAPI.weaponinfo.weaponInfo.length;
		this.moveView=GlobalAPI.moveViewPort;
		this.viewRect=this.moveView.viewRect;
		this.effect=this.moveView.getLayerContainer(2);
		this.bolt=new BoltEffect;
		this.bolt.lineNode(5);
		this.laser=new LaserEffect;
		this.lightSkin=GlobalAPI.miniAniEffect.start(null,0,0,"firelight",false);
		this.lightSkin.stop();
		this.blotSkin=GlobalAPI.miniAniEffect.start(null,0,0,"touchbolt",false);
		this.blotSkin.stop();
		this.shoot=new ShootEffect;
		this.shoot1=new ShootEffect;
		this.shoot2=new ShootEffect;
		this.shoot3=new ShootEffect;
		this.shoot4=new ShootEffect;
		this.linepts=new LinePts;
		this._cliplist=[];
		WeaponMgr.followList=[];
		WeaponMgr.weapons=[];
		this.hasAmmo=[];
		this.buffVO=new BuffVO;
	}

	__class(WeaponMgr,'game.manager.WeaponMgr');
	var __proto=WeaponMgr.prototype;
	__proto.getGunid=function(){
		return this._gunid;
	}

	__proto.setRoleid=function(id){
		this.buffVO.reset();
		this.hasAmmo.length=0;
		this._cliplist.length=0;
		this.roleid=id;
		GlobalAPI.heroinfo.setBuff(this.roleid,this.buffVO);
		var mountid=GlobalAPI.heroproxy.getMountSelect(this.roleid);
		this.buffVO.clip+=GlobalAPI.mountinfo.getClip(mountid,GlobalAPI.heroproxy.getMountLev(mountid));
		this.weaponPts=GlobalAPI.weaponptinfo.getWeaponPts(this.roleid);
		var list=GlobalAPI.heroproxy.getWeaponSelect(this.roleid);
		this._gunidlistlen=0;
		var i=0;
		var k=0;
		this._gunidlist.length=0;
		for(i=0;i<list.length;i++){
			k=list[i];
			if(k>-1){
				this._gunidlist.push(k);
				this._gunidlistlen++;
			}
		}
		for(i=0;i<this._gunidlistlen;i++){
			k=this._gunidlist[i];
			if(k>-1){
				this.clip=GlobalAPI.weaponinfo.getclip(k);
				this.allclip=GlobalAPI.weaponinfo.getallclip(k,GlobalAPI.heroproxy.getWeaponLev(k),this.buffVO);
				this._cliplist.push({nowclip:this.clip,nowallclip:this.allclip-this.clip});
				this.hasAmmo.push(1);
				}else{
				this.clip=this.allclip=1;
			}
		}
	}

	__proto.getRoleid=function(){
		return this.roleid;
	}

	__proto.fullallclip=function(){
		var i=0;
		var k=0;
		var obj;
		var mclip=0;
		var mallclip=0;
		for(i=0;i<this._gunidlistlen;i++){
			k=this._gunidlist[i];
			if(k>-1){
				mclip=GlobalAPI.weaponinfo.getclip(k);
				mallclip=GlobalAPI.weaponinfo.getallclip(k,GlobalAPI.heroproxy.getWeaponLev(k),this.buffVO);
				}else{
				mclip=mallclip=1;
			}
			obj=this._cliplist[i];
			obj.nowclip=mclip;
			obj.nowallclip=mallclip-mclip;
			this.hasAmmo[i]=1;
		}
		this.addnowallclip();
		GlobalAPI.soundMgr.playSound("addbulletsound");
	}

	__proto.start=function(){
		this.realgay=this.gay=0;
		WeaponMgr.markid=0;
		this.effect.addChildAt(this.shoot,0);
		this.effect.addChildAt(this.shoot1,0);
		this.effect.addChildAt(this.shoot2,0);
		this.effect.addChildAt(this.shoot3,0);
		this.effect.addChildAt(this.shoot4,0);
		this.effect.addChildAt(this.bolt,0);
		this.effect.addChildAt(this.laser,0);
		this.shoot.visible=this.shoot1.visible=this.shoot2.visible=this.shoot3.visible=this.shoot4.visible=
		this.bolt.visible=this.laser.visible=false;
		this.cliplistobj=null;
		var i=0;
		for(i=0;i<this.weaponlen;i++){
			this.weaponlist[i]=GlobalAPI.weaponinfo.weaponInfo[i].id;
			this.weaponhurt[i]=GlobalAPI.weaponinfo.getDamage(i,GlobalAPI.heroproxy.getWeaponLev(i),this.buffVO);
			this.weaponaoe[i]=GlobalAPI.weaponinfo.getWeaponAoe(i);
			this.weaponcrit[i]=GlobalAPI.weaponinfo.getCrit(i,GlobalAPI.heroproxy.getWeaponLev(i),this.buffVO);
		}
		GlobalAPI.heartMgr.add(this,this.step);
		this.attack=true;
		this.idx=-1;
		this._gunid=0;
		this.setWeaponIdx(this._gunidlist[this._gunid]);
	}

	/**
	*添加武器
	*@param idx 武器序列号
	*
	*/
	__proto.addWeaponIdx=function(idx,nowuse){
		(nowuse===void 0)&& (nowuse=false);
		var tmpclip=GlobalAPI.weaponinfo.getclip(idx);
		var tmpallclip=GlobalAPI.weaponinfo.getallclip(idx,GlobalAPI.heroproxy.getWeaponLev(idx),this.buffVO);
		if(this._gunidlist.indexOf(idx)>-1){
			var id=this._gunidlist.indexOf(idx);
			var obj=this._cliplist[id];
			if(obj.nowallclip!=-1){
				obj.nowallclip=tmpallclip-tmpclip;
				obj.nowclip=tmpclip;
				if(id==this._gunid){
					this.setWeaponIdx(idx);
				}
			}
			}else{
			this._gunidlist.push(idx);
			this._cliplist.push({nowclip:tmpclip,nowallclip:tmpallclip-tmpclip});
			this._gunidlistlen=this._gunidlist.length;
			this.hasAmmo[this._gunidlistlen-1]=1;
			ClipBarAll.getInstance().setGunInfo(this.idxMgr,this._gunid,this._gunidlistlen);
		}
		if(nowuse){
			if(this.cliplistobj){
				this.cliplistobj.nowclip=this.nowclip;
				this.cliplistobj.nowallclip=this.nowallclip;
			}
			this._gunid=this._gunidlist.indexOf(idx);
			this.setWeaponIdx(idx);
			}else{
			GlobalAPI.soundMgr.playSound("chgweaponsound");
		}
	}

	/**
	*
	*@param id 武器背包序号(gunid)
	*
	*/
	__proto.removeWeaponIdx=function(id){
		this._gunidlist.splice(id,1);
		this._cliplist.splice(id,1);
		this.hasAmmo.splice(id,1);
		this._gunidlistlen=this._gunidlist.length;
		if(this._gunid>0){
			this._gunid-=1;
		}
		if(this._gunidlistlen<1){
			this.addWeaponIdx(0);
		}
		this.chgWeaponIdx(true);
	}

	/**
	*获取武器伤害值
	*@param type
	*@return
	*
	*/
	__proto.getHurt=function(idx){
		return this.weaponhurt[idx];
	}

	__proto.getAoe=function(idx){
		return this.weaponaoe[idx];
	}

	__proto.getCrit=function(idx){
		return this.weaponcrit[idx];
	}

	__proto.setHero=function(val){
		this.skin=val;
	}

	__proto.setWeaponIdx=function(idx){
		this.setWeapon(idx);
		this.skin.updateFair();
	}

	__proto.getWeaponIdx=function(){
		return this._gunidlist[this._gunid];
	}

	/**
	*切换武器
	*
	*/
	__proto.chgWeaponIdx=function(add,autoAmmo){
		(autoAmmo===void 0)&& (autoAmmo=false);
		if(this.cliplistobj){
			this.cliplistobj.nowclip=this.nowclip;
			this.cliplistobj.nowallclip=this.nowallclip;
		};
		var b=false;
		var id;
		for(var $each_id in this.hasAmmo){
			id=this.hasAmmo[$each_id];
			if(id==1){
				b=true;
				break ;
			}
		}
		if(b==false){
			QuickMoveTip.show("没有弹药了");
			this.addWeaponIdx(0);
			return;
		}
		if(add){
			this._gunid++;
			if(this._gunid>=this._gunidlistlen){
				this._gunid=0;
				}else{
				if(autoAmmo && (this._gunidlist[this._gunid]<0 || this.hasAmmo[this._gunid]==0)){
					this.chgWeaponIdx(add,true);
					return;
				}
			}
			}else{
			this._gunid--;
			if(this._gunid<0){
				this._gunid=this._gunidlistlen-1;
				}else{
				if(autoAmmo && (this._gunidlist[this._gunid]<0 || this.hasAmmo[this._gunid]==0)){
					this.chgWeaponIdx(add,true);
					return;
				}
			}
		}
		this.setWeaponIdx(this._gunidlist[this._gunid]);
	}

	__proto.setWeapon=function(idx){
		this.sd=0;
		if(this.nowbolt){
			this.disposelaserpts();
		}
		this.isshotgun=false;
		this.isblotgun=false;
		this.isRocketgun=false;
		this.isFiregun=false;
		this.type=GlobalAPI.weaponinfo.getType(idx);
		switch(this.type){
			case 1:
				this.isshotgun=true;
				break ;
			case 3:
				this.isblotgun=true;
				this.laser.setLineThickness(1,"#ffffff",4,"#00CCFF");
				break ;
			case 4:
				this.isblotgun=true;
				this.bolt.setLineThickness(2,"#ffffff",8,"#0088ff");
				break ;
			case 6:
				this.isFiregun=true;
				break ;
			}
		this.weaponSort=this.type;
		var obj=GlobalAPI.weaponinfo.weaponInfo[idx];
		this.soundstr=obj.sound;
		this.weaponPt=this.weaponPts[idx];
		this.skin.updateWeaponSkin(obj.skin);
		ClipBarAll.getInstance().setGunSkin(obj.skin,this.idxMgr);
		ClipBarAll.getInstance().setGunInfo(this.idxMgr,this._gunid,this._gunidlistlen);
		GlobalAPI.soundMgr.playSound("chgweaponsound");
		if(this.realgay==this.gay){
			this.realgay=this.gay=obj.gay;
			}else{
			this.realgay=obj.gay;
			this.gay=this.realgay>>1;
		}
		this.aniAng=obj.ang;
		this.weaponShellPt=GlobalAPI.weaponptinfo.getWeaponShellPts()[idx];
		this.weaponAng=this.weaponAngs[idx];
		this.nowhurt=this.getHurt(idx);
		this.nowaoe=this.getAoe(idx);
		this.nowShootNum=0;
		this.clip=GlobalAPI.weaponinfo.getclip(idx);
		this.allclip=GlobalAPI.weaponinfo.getallclip(idx,GlobalAPI.heroproxy.getWeaponLev(idx),this.buffVO);
		var crit=this.getCrit(idx);
		if(this.allclip<100 && this.allclip>0){
			var tt=crit/10>>0;
			tt=Math.random()*10<crit-tt ? tt+1:tt;
			this.mrandom.setRandom(tt,10);
			}else{
			this.mrandom.setRandom(crit,100);
		}
		this.cliplistobj=this._cliplist[this._gunid];
		this.nowclip=this.cliplistobj.nowclip;
		this.nowallclip=this.cliplistobj.nowallclip;
		this.updatecliptxt();
	}

	__proto.addspeed=function(val){
		this.gay=val ? this.realgay>>1 :this.realgay;
	}

	/**
	*开火
	*@param startPt
	*@param dir 方向1右-1左
	*/
	__proto.fire=function(startPt){
		var fire=false;
		switch(this.type){
			case 0:
				fire=true;
				GlobalAPI.soundMgr.playgunSound(this.soundstr);
				this.shootbullet(startPt,this.ang);
				break ;
			case 1:
				fire=true;
				GlobalAPI.soundMgr.playgunSound(this.soundstr);
				this.shootbullet(startPt,this.ang);
				this.shootbullet(startPt,this.ang+5,1);
				this.shootbullet(startPt,this.ang-5,2);
				this.shootbullet(startPt,this.ang+10,3);
				this.shootbullet(startPt,this.ang-10,4);
				break ;
			case 6:
				fire=true;
				this.fireBullet(startPt,this.ang);
				if(this.sd<1){
					this.sd=32;
					GlobalAPI.soundMgr.playgunSound(this.soundstr);
				}
				break ;
			case 3:
				fire=true;
				this.boltpts=this.linepts.getlaserRectPt(startPt.x,startPt.y,this.ang,this.viewRect,20);
				this.pt=GlobalAPI.hitMgr.hitboltpt(this.boltpts,this.nowhurt,true,0,this);
				this.laser.lightningTo(startPt,this.pt);
				if(!this.nowbolt){
					this.laser.visible=true;
					this.nowbolt=true;
				}
				if(this.sd<1){
					this.sd=4;
					GlobalAPI.soundMgr.playgunSound(this.soundstr);
				}
				this.blotSkin.visible=true;
				this.blotSkin.nextFrame(true);
				this.blotSkin.x=this.pt.x;
				this.blotSkin.y=this.pt.y;
				break ;
			case 4:
				fire=true;
				this.boltpts=this.linepts.getlaserRectPt(startPt.x,startPt.y,this.ang,this.viewRect,30);
				this.pt=GlobalAPI.hitMgr.hitboltpt(this.boltpts,this.nowhurt,true,0,this);
				this.bolt.lineNode(startPt.distance(this.pt.x,this.pt.y)/20>>0);
				this.bolt.lightningTo(startPt,this.pt);
				if(!this.nowbolt){
					this.bolt.visible=true;
					this.nowbolt=true;
				}
				if(this.sd<1){
					this.sd=4;
					GlobalAPI.soundMgr.playgunSound(this.soundstr);
				}
				this.blotSkin.visible=true;
				this.blotSkin.nextFrame(true);
				this.blotSkin.x=this.pt.x;
				this.blotSkin.y=this.pt.y;
				break ;
			case 7:
				this.isRocketgun=true;
				fire=true;
				GlobalAPI.soundMgr.playSound(this.soundstr);
				this.followBom(startPt,this.ang,200,this.nowhurt,this.nowhurt*this.nowaoe);
				break ;
			case 8:
				this.isRocketgun=true;
				fire=true;
				GlobalAPI.soundMgr.playSound(this.soundstr);
				this.boltpts=this.linepts.getlaserRectPt(startPt.x,startPt.y,this.ang,this.viewRect,30);
				this.pt=GlobalAPI.hitMgr.hitboltpt(this.boltpts,this.nowhurt,true,0,this);
				MapData.rect.x=this.pt.x-250;
				MapData.rect.y=this.pt.y-450;
				MapData.rect.width=500;
				MapData.rect.height=500;
				GlobalAPI.hitMgr.aoeBoom(this.nowhurt*this.nowaoe,this.pt,null,MapData.rect);
				ShakeEffect.start(3,4,3,6)
				GlobalAPI.soundMgr.playSound("bomsound");
				GlobalAPI.miniAniEffect.start(null,this.pt.x,this.pt.y,"boom8",true,30,1.5);
				break ;
			case 9:
				this.isRocketgun=true;
				fire=true;
				GlobalAPI.soundMgr.playSound(this.soundstr);
				this.followBom(startPt,this.ang,200,this.nowhurt,this.nowhurt*this.nowaoe);
				this.followBom(startPt,this.ang+6,200,this.nowhurt,this.nowhurt*this.nowaoe);
				this.followBom(startPt,this.ang-6,200,this.nowhurt,this.nowhurt*this.nowaoe);
				break ;
			case 10:
				this.isRocketgun=true;
				fire=true;
				GlobalAPI.soundMgr.playSound(this.soundstr);
				this.followBom(startPt,this.ang,202,this.nowhurt,this.nowhurt*this.nowaoe);
				this.followBom(startPt,this.ang+5,10000,this.nowhurt*0.2,this.nowhurt*0.01);
				this.followBom(startPt,this.ang-5,10000,this.nowhurt*0.2,this.nowhurt*0.01);
				this.followBom(startPt,this.ang+10,10000,this.nowhurt*0.2,this.nowhurt*0.01);
				this.followBom(startPt,this.ang-10,10000,this.nowhurt*0.2,this.nowhurt*0.01);
				break ;
			}
		if(fire){
			if(this.nowclip>0){
				this.nowclip-=1;
			}
			this.updatecliptxt();
			this.attack=false;
			if(this.isshotgun){
				this.shoot1.visible=this.shoot2.visible=this.shoot3.visible=this.shoot4.visible=true;
			}
			if(!this.isblotgun && !this.isFiregun && !this.isRocketgun){
				this.shoot.visible=true;
			}
			if(this.type !=6){
				this.lightSkin.visible=true;
				this.lightSkin.nextFrame(true);
				this.lightSkin.rotation=this.ang;
				this.lightSkin.x=startPt.x;
				this.lightSkin.y=startPt.y;
				DepthManager.bringToTop(this.lightSkin);
			}
			GlobalAPI.taskVO.ammoNum++;
			}else{
			this.lightSkin.visible=false;
		}
	}

	/**
	*装弹夹
	*
	*/
	__proto.addclip=function(){
		if(this.nowclip<this.clip){
			var tmpadd=this.clip-this.nowclip;
			var add=0
			if(this.nowallclip>tmpadd || this.nowallclip<0){
				this.nowclip=this.clip;
				if(this.nowallclip>-1){
					this.nowallclip=this.nowallclip-tmpadd;
				}
				return true;
				}else{
				add=this.nowallclip;
				this.nowclip+=add;
				this.nowallclip=0;
				if(add==0){
					this.hasAmmo[this._gunid]=0;
					return false;
					}else{
					return true;
				}
			}
		}
		return false;
	}

	__proto.addnowallclip=function(){
		if(this.nowallclip>-1){
			this.nowclip=this.clip;
			this.nowallclip=this.allclip-this.clip;
		}
		this.updatecliptxt();
	}

	__proto.updatecliptxt=function(){
		ClipBarAll.getInstance().setTxt(this.nowclip,this.nowallclip,this.idxMgr);
	}

	__proto.followbomfire=function(startPt){
		GlobalAPI.soundMgr.playSound("rocketsound");
		var hurt=GlobalAPI.skillinfo.getSkillEffect(0);
		this.followBom(startPt,this.angs[Math.random()*5>>0],10000,hurt,hurt*0.3);
	}

	/**
	*闪电大杀
	*
	*/
	__proto.boltfire=function(){
		var enemy;
		var vo;
		var tpt;
		this.boltarray.length=0;
		var vt=GlobalAPI.sceneRoleMgr.getCheckRect();
		var $each_enemy;
		for($each_enemy in WeaponMgr.enemys){
			enemy=WeaponMgr.enemys[$each_enemy];
			vo=enemy.getData();
			tpt=enemy.getPt();
			if(vo.thing==0 &&
				vo.hurt >0 &&
			vo.hp>0 &&
			!enemy._pause &&
			enemy._show　&&
			vt.contains(tpt.x,tpt.y)){
				this.pt.x=tpt.x;
				this.pt.y=this.viewRect.y-100;
				this.ept.x=tpt.x;
				this.ept.y=tpt.y;
				BoltMgr.getInstance().add(this.pt,this.ept);
				this.boltarray.push(enemy);
				GlobalAPI.miniAniEffect.start(null,this.pt.x,this.ept.y,"touchbolt");
				enemy.startNewFire(0);
			}
		}
		var $each_enemy;
		for($each_enemy in this.boltarray){
			enemy=this.boltarray[$each_enemy];
			vo=enemy.getData();
			if(vo.stronghp==false && enemy.hurt(GlobalAPI.skillinfo.getSkillEffect(1))){
				GlobalAPI.sceneRoleMgr.removeEnemy(vo.id,true,0,-1);
			}
		}
		if(this.boltarray.length<1){
			var num=this.viewRect.width/6>>0;
			this.pt.y=this.viewRect.y-100;
			this.ept.y=this.viewRect.bottom-10;
			for(var i=0;i<5;i++){
				this.ept.x=this.pt.x=num*(i+1)+this.viewRect.x;
				BoltMgr.getInstance().add(this.pt,this.ept);
				GlobalAPI.miniAniEffect.start(null,this.ept.x,this.ept.y,"touchbolt");
			}
		}
		GlobalAPI.soundMgr.playgunSound("diansound");
		ShakeEffect.start(4,4,6,5);
	}

	__proto.step=function(){
		if(this.sd>0)
			this.sd--;
		if(this.attack==false){
			this.nowShootNum++;
			if(this.nowShootNum>this.gay){
				this.attack=true;
				this.nowShootNum=0;
				if(this.nowbolt){
					this.lightSkin.visible=false;
					this.disposelaserpts();
				}
			}
			if(this.nowShootNum > 1){
				this.lightSkin.visible=false;
				this.shoot.visible=false;
				if(this.isshotgun){
					this.shoot1.visible=this.shoot2.visible=this.shoot3.visible=this.shoot4.visible=false;
				}
			}
		}
	}

	/**
	*销毁武器
	*@param val
	*
	*/
	__proto.remove=function(val){
		WeaponMgr.weapons[val.getid()]=null;
		delete WeaponMgr.weapons[val.getid()];
		val.setid(0);
		val.dispose();
	}

	__proto.fireBullet=function(startPt,rotation){
		(rotation===void 0)&& (rotation=0);
		var bom;
		bom=Pool.getItem("FireBullet");
		rotation=Math.random()*2>>0==1 ? rotation-5 :rotation+5;
		if(bom){
			bom.start(this.effect,startPt,null);
			bom.setAng(rotation);
			}else{
			bom=new FireBullet;
			var skin=new Image("bulletskin/firebullet.png");
			bom.start(this.effect,startPt,skin);
			bom.setType(this.type);
			bom.setAng(rotation);
			bom.setSpeed(6);
		}
		if(bom.getid()==0){
			WeaponMgr.markid++;
			bom.setid(WeaponMgr.markid);
		}
		bom.setRoleid(this.roleid);
		bom.setHurt(this.nowhurt);
		bom.setLimitRect(this.moveView.viewRect);
		WeaponMgr.weapons[bom.getid()]=bom;
	}

	__proto.shootbullet=function(startPt,ang,nameNum){
		(nameNum===void 0)&& (nameNum=0);
		ShakeEffect.start(1,1,1,2);
		ang=ang%360;
		var dx=MathUtil.coss[ang]*20>>0;
		var dy=MathUtil.sins[ang]*20>>0;
		this.boltpts=this.linepts.getlaserRectPt1(startPt.x,startPt.y,dx,dy,this.viewRect);
		var ran=Math.random()*2+4>>0;
		dx=dx*ran;
		dy=dy*ran;
		var movedir=dx>0 ? 1:-1;
		var endpt=GlobalAPI.hitMgr.hitboltpt(this.boltpts,this.nowhurt,false,movedir,this);
		var tt=MapData.stageW/80>>0;
		switch(nameNum){
			case 0:
				this.shoot.visible=true;
				this.shoot.lineNode(tt);
				this.shoot.lightningTo(startPt,endpt,dx,dy);
				break ;
			case 1:
				this.shoot1.visible=true;
				this.shoot1.lineNode(tt);
				this.shoot1.lightningTo(startPt,endpt,dx,dy);
				break ;
			case 2:
				this.shoot2.visible=true;
				this.shoot2.lineNode(tt);
				this.shoot2.lightningTo(startPt,endpt,dx,dy);
				break ;
			case 3:
				this.shoot3.visible=true;
				this.shoot3.lineNode(tt);
				this.shoot3.lightningTo(startPt,endpt,dx,dy);
				break ;
			case 4:
				this.shoot4.visible=true;
				this.shoot4.lineNode(tt);
				this.shoot4.lightningTo(startPt,endpt,dx,dy);
				break ;
			}
		if(!this.nowbolt){
			this.shoot.visible=true;
			if(this.isshotgun){
				this.shoot1.visible=true;
				this.shoot2.visible=true;
				this.shoot3.visible=true;
				this.shoot4.visible=true;
			}
			this.nowbolt=true;
		};
		var mc=GlobalAPI.miniAniEffect.start(null,endpt.x,endpt.y,"touchboom");
		mc.rotation=ang;
	}

	__proto.disposelaserpts=function(){
		if(this.nowbolt){
			this.nowbolt=false;
			this.linepts.disposelaserPts();
			this.blotSkin.visible=false;
			this.bolt.visible=false;
			this.laser.visible=false;
			this.shoot.visible=false;
			if(this.isshotgun){
				this.shoot1.visible=false;
				this.shoot2.visible=false;
				this.shoot3.visible=false;
				this.shoot4.visible=false;
			}
		}
	}

	/*public function throwBom(startPt:Point,dir:int=1,distance:int=110,tpt:Point=null,
	speedframe:int=15,chgang:Boolean=false,hurt:int=1):void{
		var bom:ThrowBom;
		bom=Pool.getItem(PoolMgr.ThrowBom);
		var skin:Sprite;
		if(!bom){
			bom=new ThrowBom;
			skin=GlobalAPI.miniAniEffect.start(null,0,0,MiniAniEffect.futou,false);
		}
		bom.setHurt(hurt);
		bom.setLimitRect(moveView.viewRect);
		bom.setFrameOk(speedframe);
		bom.setChgAng(chgang);
		if(tpt){
			bom.throwBom(effect,startPt,tpt,skin);
		}else
		bom.throwBomPos(effect,startPt,distance*dir,skin);
	}*/

	__proto.dropboom=function(px,py,dir){
		var id=GlobalAPI.activeMgr.enemyid++;
		var vo=new EnemyRoleVO;
		vo.ai=405;
		vo.skin=108;
		vo.speed=3;
		vo.id=id;
		vo.dir=dir;
		vo.startX=px;
		vo.startY=py;
		vo.maxhp=vo.hp=30000;
		vo.hurt=0;
		vo.thing=3;
		GlobalAPI.sceneRoleMgr.addEnemy(vo);
	}

	/**
	*追踪武器
	*@param startPt
	*@param dir 射击方向(1右-1左)
	*
	*/
	__proto.followBom=function(startPt,rotation,skintype,hurt,aoe){
		var _$this=this;
		(rotation===void 0)&& (rotation=0);
		(skintype===void 0)&& (skintype=200);
		(hurt===void 0)&& (hurt=0);
		(aoe===void 0)&& (aoe=0);
		var bom;
		switch(skintype){
			case 200:
				bom=Pool.getItem("FollowBom1");
				if(bom){
					bom.setWaitStep(10000);
				}
				break ;
			case 202:
				bom=Pool.getItem("FollowBom2");
				if(bom){
					bom.setWaitStep(10000);
				}
				break ;
			case 10000:
				bom=Pool.getItem("FollowBom");
				if(bom){
					bom.setWaitStep(6);
				}
				break ;
			};
		var skin;
		if(!bom){
			switch(skintype){
				case 200:
					bom=new FollowBom1;
					skin=new Image("bulletskin/followbom1.png");
					bom.setWaitStep(10000);
					break ;
				case 202:
					bom=new FollowBom2;
					skin=new Image("bulletskin/followbom2.png");
					bom.setWaitStep(10000);
					break ;
				case 10000:
					bom=new FollowBom;
					skin=new Image("bulletskin/followbom.png");
					bom.setWaitStep(6);
					break ;
				}
			bom.setType(skintype);
		}
		if(bom.getid()==0){
			WeaponMgr.markid++;
			bom.setid(WeaponMgr.markid);
		}
		bom.setRoleid(this.roleid);
		bom.setHurt(hurt);
		bom.setAoe(aoe);
		bom.setStartAng(rotation);
		if(skintype==10000){
			bom.setSpeed(10);
			}else{
			bom.setSpeed(13);
		}
		bom.setFollowObj(null,this,followAct);
		bom.setFlyCirlOver(this,followAct);
		bom.setLimitRect(this.moveView.viewRect);
		bom.start(this.effect,startPt,null,skin);
		WeaponMgr.weapons[bom.getid()]=bom;
		function followAct (val){
			var enemy;
			var id=0;
			var enemyd;
			var ar=[];
			var vo;
			var $each_enemy;
			for($each_enemy in WeaponMgr.enemys){
				enemy=WeaponMgr.enemys[$each_enemy];
				vo=enemy.getData();
				id=vo.id;
				if(vo.thing==0 &&
					!vo.stronghp &&
				vo.hurt>0 &&
				!enemy._pause &&
				enemy._show){
					enemyd=enemy;
					if(!WeaponMgr.followList[id]){
						ar.push(enemy);
					}
				}
			}
			if(ar.length>0){
				_$this.ept.x=GlobalAPI.heropt.x;
				_$this.ept.y=GlobalAPI.heropt.y;
				var start=true;
				var old=0;
				var now=0;
				var $each_enemy;
				for($each_enemy in ar){
					enemy=ar[$each_enemy];
					_$this.pt.x=enemy.x;
					_$this.pt.y=enemy.y;
					if(start){
						enemyd=enemy;
						old=_$this.ept.distance(_$this.pt.x,_$this.pt.y);
						if(Math.abs(_$this.pt.y-_$this.ept.y)>150){
							old+=150;
						}
						start=false;
						}else{
						now=_$this.ept.distance(_$this.pt.x,_$this.pt.y);
						if(Math.abs(_$this.pt.y-_$this.ept.y)>150){
							now+=150;
						}
						if(now<old){
							old=now;
							enemyd=enemy;
						}
					}
				}
			}
			if(enemyd){
				WeaponMgr.followList[enemyd.getData().id]=enemyd;
				val.setFollowObj(enemyd,_$this,followAct);
				}else{
				val.moveOver();
			}
		}
	}

	__proto.dispose=function(){
		this.shoot.removeSelf();
		this.shoot1.removeSelf();
		this.shoot2.removeSelf();
		this.shoot3.removeSelf();
		this.shoot4.removeSelf();
		this.bolt.removeSelf();
		this.laser.removeSelf();
		this.disposelaserpts();
		this.lightSkin.visible=false;
		GlobalAPI.heartMgr.remove(this,this.step);
		this.buffVO.reset();
	}

	__proto.removeFollowEnemy=function(id){
		if(WeaponMgr.followList[id])
			delete WeaponMgr.followList[id];
	}

	WeaponMgr.start=function(){
		WeaponMgr.shootEnemyid=-1;
		WeaponMgr.weapons.length=0;
		WeaponMgr.followList.length=0;
		WeaponMgr.enemys=SceneRoleMgr.getInstance().getEnemys();
	}

	WeaponMgr.getShootPt=function(mypt,isNew){
		if(WeaponMgr.shootEnemyid>-1 && !isNew){
			return WeaponMgr.shootPt;
		}
		WeaponMgr.shootPt=null;
		var enemy;
		var vo;
		var ar=[];
		var $each_enemy;
		for($each_enemy in WeaponMgr.enemys){
			enemy=WeaponMgr.enemys[$each_enemy];
			vo=enemy.getData();
			if(vo.thing==0 &&
				!vo.stronghp &&
			enemy._show){
				WeaponMgr.shootEnemyid=vo.id;
				ar.push(enemy);
			}
		};
		var enemyd;
		if(ar.length>0){
			this.ept.x=mypt.x;
			this.ept.y=mypt.y;
			var start=true;
			var old=0;
			var now=0;
			var $each_enemy;
			for($each_enemy in ar){
				enemy=ar[$each_enemy];
				this.pt.x=enemy.x;
				this.pt.y=enemy.y;
				if(start){
					enemyd=enemy;
					old=this.ept.distance(this.pt.x,this.pt.y);
					if(Math.abs(this.pt.y-this.ept.y)>150){
						old+=150;
					}
					start=false;
					}else{
					now=this.ept.distance(this.pt.x,this.pt.y);
					if(Math.abs(this.pt.y-this.ept.y)>150){
						now+=150;
					}
					if(now<old){
						old=now;
						enemyd=enemy;
					}
				}
			}
		}
		if(enemyd){
			WeaponMgr.shootPt=enemyd.getShootpt();
			WeaponMgr.shootEnemyid=enemyd.getData().id;
		}
		return WeaponMgr.shootPt;
	}

	WeaponMgr.getWeapons=function(){
		return WeaponMgr.weapons;
	}

	WeaponMgr.dispose=function(){
		var i;
		var $each_i;
		for($each_i in WeaponMgr.weapons){
			i=WeaponMgr.weapons[$each_i];
			if(Laya.__typeof(i,'game.weapon.Iweapon')){
				i.setid(0);
				i.clear();
			}
		}
		WeaponMgr.markid=0;
		WeaponMgr.weapons.length=0;
		WeaponMgr.followList.length=0;
		WeaponMgr.enemys=null;
		WeaponMgr.shootEnemyid=-1;
	}

	WeaponMgr.removeShootEnemy=function(id){
		WeaponMgr.shootEnemyid=WeaponMgr.shootEnemyid==id ?-1 :WeaponMgr.shootEnemyid;
	}

	WeaponMgr.WEAPON_FOLLOWBOM=200;
	WeaponMgr.WEAPON_FOLLOWBOM1=201;
	WeaponMgr.WEAPON_FOLLOWBOM2=202;
	WeaponMgr.WEAPON_FOLLOWBOM100=10000;
	WeaponMgr.Mgr1=1;
	WeaponMgr.Mgr2=2;
	WeaponMgr.enemys=null;
	WeaponMgr.weapons=null;
	WeaponMgr.followList=null;
	WeaponMgr.shootEnemyid=0;
	WeaponMgr.shootPt=null;
	WeaponMgr.markid=0;
	__static(WeaponMgr,
	['ept',function(){return this.ept=new Point;},'pt',function(){return this.pt=new Point;}
	]);
	return WeaponMgr;
})()


/**
*地图数据
*@author guowc
*
*/
//class game.map.MapProxy
var MapProxy=(function(){
	function MapProxy(){
		this.moveBlock=null;
		this.moveBall=null;
		this.moveBlock=[];
		this.moveBall=[];
	}

	__class(MapProxy,'game.map.MapProxy');
	var __proto=MapProxy.prototype;
	Laya.imps(__proto,{"game.map.IMap":true})
	/**
	*添加移动方块
	*@param y
	*@param x
	*@param rect
	*@param type
	*
	*/
	__proto.addMoveBlock=function(){
		var obj;
		var $each_obj;
		for($each_obj in MapData.movePtData){
			obj=MapData.movePtData[$each_obj];
			var block=new MoveBlock;
			var box=MapData.moveBoxData[obj.type];
			box.x=obj.x*MapData.boxW;
			box.y=obj.y*MapData.boxH;
			this.moveBlock.push(block);
			block.start(GlobalAPI.moveViewPort.getLayerContainer(1),box);
		}
		ActiveMgr.getInstance().setMoveBlocks(this.moveBlock);
	}

	__proto.addmoveball=function(val){
		if(val){
			this.moveBall.push(val);
		}
	}

	__proto.getmoveball=function(){
		return this.moveBall;
	}

	__proto.getMoveBlock=function(){
		return this.moveBlock;
	}

	//销毁
	__proto.dispose=function(){
		var block;
		var $each_block;
		for($each_block in this.moveBlock){
			block=this.moveBlock[$each_block];
			block.dispose();
		}
		this.moveBlock.length=0;
		this.moveBall.length=0;
	}

	MapProxy.getInstance=function(){
		if(!MapProxy.instance)
			MapProxy.instance=new MapProxy;
		return MapProxy.instance;
	}

	MapProxy.instance=null;
	return MapProxy;
})()


//class game.modal.BaseRoleVO
var BaseRoleVO=(function(){
	function BaseRoleVO(){
		this.speed=1;
		//x移动速度
		this.id=0;
		//标识
		this.skin=0;
		//皮肤号
		this.startX=0;
		//起始位置X
		this.startY=0;
		//起始位置Y
		this.imgurl=null;
		//图象地址
		this.formaturl=null;
		//图象格式地址
		this.basehp=0;
		//基础血条
		this.hp=0;
		//血条
		this.mp=0;
		//蓝条
		this.maxhp=0;
		this.stronghp=false;
		//无敌
		this.gold=0;
		//金币
		this.score=0;
		//(眼睛帧/静态物随机位/动画时间)
		this.dir=0;
		//起始运动方向
		this.hurt=0;
		//伤害值
		this.sign=0;
		this.thing=0;
		//是否是动态物件(0否1,4,5是)
		this.config=false;
		this.shadow=false;
		//幻影
		this.jumphight=0;
		//跳跃高度 0 默认
		this.shellType=0;
		//弹壳类型
		this.bloodType=0;
		//炮灰类型
		this.hasdrop=true;
		//是否有重量(会掉下来)
		this.noMagnet=false;
		//无视磁铁
		this.unlockgold=0;
		//解锁钱
		this.basemiss=0;
		this.maxlev=0;
		this.maxexp=0;
		this.enemyexp=0;
		this.dis=0;
	}

	__class(BaseRoleVO,'game.modal.BaseRoleVO');
	return BaseRoleVO;
})()


/**
*食物数据
*@author guowc
*
*/
//class game.modal.data.FoodVO
var FoodVO=(function(){
	function FoodVO(){
		this.look=null;
		this.hp=0;
		this.gold=0;
		this.sign=0;
		this.type=0;
		this.skin=0;
		this.id=0;
		this.score=0;
		this.startX=0;
		this.startY=0;
		this.mapX=0;
		this.mapY=0;
		this.config=false;
		this.noMagnet=false;
		this.monsters=null;
	}

	__class(FoodVO,'game.modal.data.FoodVO');
	return FoodVO;
})()


/**
*绘图数据 配置
*@author guowc
*格式
*/
//class game.modal.DrawData
var DrawData=(function(){
	function DrawData(){
		this.dic=null;
		if(DrawData.instance)return;
		DrawData.instance=this;
	}

	__class(DrawData,'game.modal.DrawData');
	var __proto=DrawData.prototype;
	__proto.init=function(data,handler){
		this.dic=[];
		var obj;
		var box;
		var $each_obj;
		for($each_obj in data){
			obj=data[$each_obj];
			box=new BoxData;
			box.skin=obj.skin;
			box.sort=MapData.drawSort+"";
			box.drawData=obj.data;
			box.bitmapData=EnemyImg.getRectImg(box.skin);
			this.dic[box.skin]=box;
		}
		MapData.drawData=this.dic;
		handler.run();
	}

	__proto.init1=function(data,handler){
		this.dic=[];
		var obj;
		var box;
		var $each_obj;
		for($each_obj in data){
			obj=data[$each_obj];
			box=new BoxData;
			box.skin=obj.skin;
			box.sort=MapData.drawSort+"";
			box.drawData=obj.data1;
			box.drawData.shift();
			this.dic[box.skin]=box;
		}
		MapData.drawData1=this.dic;
		handler.run();
	}

	DrawData.getInstance=function(){
		if(!DrawData.instance)
			new DrawData;
		return DrawData.instance;
	}

	DrawData.instance=null;
	return DrawData;
})()


/**
*主角数据
*@author guowc
*
*/
//class game.modal.HeroProxy
var HeroProxy=(function(){
	function HeroProxy(){
		this._nowrevive=0;
		this.task={time:0,task:[]};
		//{time:天,task:[{id:任务id,now:当前数量,all:需要数量,getaward:是否拿了取奖励},...]}
		this.rank={time:0,ok:false,data:[]};
		//rank {time:天,ok:结算,data:[{id:排行id,num:当前数量,rank:排名,getaward:是否拿了奖励},...]}
		this.signtime={time:0,day:0};
		//签到时间{time:签到时间(天)，day:签 到第几天}
		this.revivetime=0;
		//复活过次数
		this.goldNum=0;
		//金币数
		this.gemNum=0;
		this.roleVO=null;
		//基本数据
		this.roleVO1=null;
		//基本数据
		this.double=false;
		this.basemaxhp=1000;
		this.reviveGem=600;
		//复活需要的金币
		this.weaponSkins=null;
		this.weaponlev=
		[1,0,0,0,0,
		0,0,0,0,0,
		0,0,0,0,0,
		0,0,0,0];
		//武器等级
		this.skillLev=[0,0,0,0,0,0,0,0];
		//技能等级/物品数量
		this.skillselect=[-1,-1,-1];
		this.mountlev=[0,0,0];
		this.mountselect=[-1,-1,-1,-1,-1,-1,-1];
		//当前坐骑选择
		this.weaponselect=[[0,-1,-1,-2,-2],[0,-1,-1,-2,-2],[0,-1,-1,-2,-2],[0,-1,-1,-2,-2],[0,-1,-1,-2,-2],[0,-1,-1,-2,-2],[0,-1,-1,-2,-2]];
		//[[0,10],[0,10]];//当前武器选择
		this.herolev=[1,1,0,0,0,0,0];
		this.heroSelect=[0,1];
		this.exps=[0,0,0,0,0,0,0];
		//经验
		this.awardtime=0;
		this.alivetime=0;
		this.awardCD=0;
		this.aliveCD=18000000;
		if(HeroProxy.instance)return;
		HeroProxy.instance=this;
		this.start();
		this.weaponSkins=[];
		this.weaponSkins[0]=GlobalAPI.weaponAni.start("handweapon");
		this.weaponSkins[1]=GlobalAPI.weaponAni.start("handweapon");
	}

	__class(HeroProxy,'game.modal.HeroProxy');
	var __proto=HeroProxy.prototype;
	__proto.start=function(){
		this.setHeroSelect(0,this.getHeroSelect(0));
		this.setHeroSelect(1,this.getHeroSelect(1));
	}

	__proto.setRoleVOSkin=function(id){
		this.roleVO=GlobalAPI.heroinfo.getRoleVO(id);
	}

	__proto.setRoleVO1Skin=function(id){
		this.roleVO1=GlobalAPI.heroinfo.getRoleVO(id);
	}

	__proto.getHeroSelect=function(ccid){
		return this.heroSelect[ccid];
	}

	__proto.setHeroSelect=function(ccid,roleid){
		this.heroSelect[ccid]=roleid;
		if(ccid==0){
			this.setRoleVOSkin(roleid);
			}else{
			this.setRoleVO1Skin(roleid);
		}
	}

	__proto.getWeaponSkin=function(cid){
		var mc=this.weaponSkins[cid];
		return mc;
	}

	__proto.setDouble=function(val){
		this.double=val;
	}

	__proto.getDouble=function(){
		return this.double;
	}

	__proto.getWeaponLev=function(idx){
		return this.weaponlev[idx];
	}

	__proto.setWeaponLev=function(idx,lev){
		this.weaponlev[idx]=lev;
	}

	__proto.getMountLev=function(idx){
		return this.mountlev[idx];
	}

	__proto.setMountLev=function(idx,lev){
		this.mountlev[idx]=lev;
	}

	__proto.getHeroLev=function(idx){
		return this.herolev[idx];
	}

	__proto.setHeroLev=function(idx,lev){
		this.herolev[idx]=lev;
	}

	__proto.getSkillLev=function(id){
		return this.skillLev[id];
	}

	__proto.setSkillLev=function(id,lev){
		this.skillLev[id]=lev;
	}

	__proto.addExp=function(vo,exp){
		var ep=0;
		ep=this.exps[vo.id]+exp;
		if(ep>vo.maxexp){
			ep=vo.maxexp;
		}
		this.exps[vo.id]=ep;
		return ep;
	}

	__proto.getExp=function(idx){
		return this.exps[idx];
	}

	__proto.reset=function(){
		this.roleVO1.hp=this.roleVO.hp=this.basemaxhp;
		this.roleVO1.maxhp=this.roleVO.maxhp=this.basemaxhp;
		this.roleVO1.stronghp=this.roleVO.stronghp=false;
		this.updateskill();
		this.revivetime=0;
	}

	__proto.sethp=function(val){
		this.roleVO1.hp=this.roleVO.hp=val;
		this.roleVO1.maxhp=this.roleVO.maxhp=val;
	}

	__proto.setmaxhp=function(val){
		this.roleVO1.maxhp=this.roleVO.maxhp=val;
	}

	__proto.checkDie=function(){
		return !this.double || (this.roleVO.hp<1 && this.roleVO1.hp<1);
	}

	/**
	*添加金币
	*@param num
	*@return
	*
	*/
	__proto.addGoldNum=function(num){
		var tmp=this.goldNum;
		tmp+=num;
		if(tmp<0){
			QuickMoveTip.show(StringInfo.getString("金币不足"));
			return false;
			}else{
			this.goldNum=tmp;
			if(num<0)GlobalAPI.moneyBar.updateGold();
		}
		return true;
	}

	__proto.addGemNum=function(num){
		var tmp=this.gemNum;
		tmp+=num;
		if(tmp<0){
			QuickMoveTip.show(StringInfo.getString("钻石不足"));
			return false;
			}else{
			this.gemNum=tmp;
			if(num<0)GlobalAPI.moneyBar.updateGem();
		}
		return true;
	}

	__proto.addMoney=function(num,ingame){
		(ingame===void 0)&& (ingame=true);
		SaveDataMgr.needsave=true;
		if(num>0){
			this.addGoldNum(num);
			if(ingame){
				GlobalAPI.levVO.levelgold+=num;
			}
			}else{
			this.addGemNum(-num);
		}
	}

	__proto.useMoney=function(num){
		SaveDataMgr.needsave=true;
		if(num>0){
			return this.addGoldNum(-num);
		}
		return this.addGemNum(num);
	}

	__proto.canBuy=function(gold){
		if(gold>0){
			return gold<=this.goldNum;
		}
		gold=-gold;
		return gold<=this.gemNum;
	}

	__proto.getGoldNum=function(){
		return this.goldNum;
	}

	__proto.getGemNum=function(){
		return this.gemNum;
	}

	__proto.getBaseRoleVO=function(){
		return this.roleVO;
	}

	__proto.getBaseRoleVO1=function(){
		return this.roleVO1;
	}

	__proto.updateskill=function(){
		GlobalAPI.skillinfo.updateskill(this.skillLev);
	}

	__proto.getWeaponSelect=function(roleid){
		return this.weaponselect[roleid];
	}

	__proto.getWeaponSelectOne=function(roleid){
		var weapons=this.weaponselect[roleid];
		var id=0;
		var $each_id;
		for($each_id in weapons){
			id=weapons[$each_id];
			if(id>-1){
				break ;
			}
		}
		return id;
	}

	__proto.killWeaponSelect=function(roleid,weaponidx){
		var weapons=this.weaponselect[roleid];
		var idx=weapons.indexOf(weaponidx);
		weapons[idx]=-1;
	}

	__proto.getWeaonSelectNum=function(roleid){
		var weapons=this.weaponselect[roleid];
		var i=0;
		var id=0;
		var $each_id;
		for($each_id in weapons){
			id=weapons[$each_id];
			if(id>-1){
				i++;
			}
		}
		return i;
	}

	__proto.getMountSelect=function(roleid){
		return this.mountselect[roleid];
	}

	__proto.setMountSelect=function(roleid,mountid){
		this.mountselect[roleid]=mountid;
	}

	__proto.getSkillSelect=function(idx){
		return this.skillselect[idx];
	}

	__proto.setSkillSelect=function(idx,id){
		this.skillselect[idx]=id;
	}

	__proto.hasSkillSelect=function(id){
		return this.skillselect.indexOf(id)>-1;
	}

	__proto.killSkillSelect=function(weaponidx){
		var idx=this.skillselect.indexOf(weaponidx);
		this.skillselect[idx]=-1;
	}

	__proto.setnowRevive=function(skin){
		this._nowrevive=skin;
	}

	__proto.getnowRevive=function(){
		return this._nowrevive;
	}

	__proto.addProp=function(idx,num){
		this.skillLev[idx]=this.skillLev[idx]+num;
	}

	/**
	*
	*@param val {time,day}
	*
	*/
	__proto.setSignTime=function(val){
		this.signtime=val;
	}

	__proto.getSignTime=function(){
		return this.signtime;
	}

	/**
	*
	*@param val {time:天,task:[{id:任务id,now:当前数量,all:需要数量,getaward:是否拿了取奖励},...]}
	*
	*/
	__proto.setTask=function(val){
		this.task=val;
	}

	__proto.getTask=function(){
		return this.task;
	}

	__proto.setRank=function(val){
		this.rank=val;
	}

	__proto.getRank=function(){
		return this.rank;
	}

	/**
	*解锁新武器槽
	*
	*/
	__proto.unlockweaponbox=function(){
		var arr=this.weaponselect[0];
		var idx=arr.indexOf(-2);
		if(idx>-1){
			var $each_arr;
			for($each_arr in this.weaponselect){
				arr=this.weaponselect[$each_arr];
				arr[idx]=-1;
			}
		}
	}

	HeroProxy.getInstance=function(){
		if(!HeroProxy.instance)
			new HeroProxy;
		return HeroProxy.instance;
	}

	HeroProxy.cid0=0;
	HeroProxy.cid2=1;
	HeroProxy.HERO_1=0;
	HeroProxy.HERO_2=1;
	HeroProxy.HERO_3=2;
	HeroProxy.instance=null;
	return HeroProxy;
})()


//class game.modal.LevelVO
var LevelVO=(function(){
	function LevelVO(){
		this.name="";
		this.foodNum=0;
		//食物数
		this.levelgold=0;
		//关卡金币
		this.levelgem=0;
		//关卡钻石
		this.killEnemys=0;
		//杀敌数
		this.getFoods=0;
		//收集的食物数
		this.passtime=0;
	}

	__class(LevelVO,'game.modal.LevelVO');
	var __proto=LevelVO.prototype;
	//过关时间
	__proto.reset=function(){
		this.levelgem=this.levelgold=this.foodNum=this.killEnemys=this.getFoods=0;
	}

	return LevelVO;
})()


//class game.modal.MountProxy
var MountProxy=(function(){
	function MountProxy(){
		this._mountnum=2;
		this._herobodyY=0;
		//英雄身体位置Y
		this._herolegY=0;
		//英雄腿部位置Y
		this._url=null;
		this._speed=0;
		this._mount=0;
		this._isblevel=false;
	}

	__class(MountProxy,'game.modal.MountProxy');
	var __proto=MountProxy.prototype;
	/**
	*设定坐骑
	*@param val
	*
	*/
	__proto.setMount=function(val){
		this._mount=val;
		switch(val){
			case 0:
				this._isblevel=true;
				this._speed=6;
				this._url=PathMgr.path_mount1;
				this._herobodyY=-20;
				this._herolegY=-5;
				break ;
			case 1:
				this._isblevel=false;
				this._speed=6;
				this._url=PathMgr.path_mount2;
				this._herobodyY=-25;
				this._herolegY=-10;
				break ;
			case 2:
				this._isblevel=false;
				this._speed=6;
				this._url=PathMgr.path_mount3;
				this._herobodyY=-35;
				this._herolegY=-20;
				break ;
			default :
				this._isblevel=false;
				this._speed=6;
				this._url="";
				this._herobodyY=0;
				this._herolegY=0;
				break ;
			}
	}

	__proto.getSpeed=function(){
		return this._speed;
	}

	__proto.getUrl=function(){
		return this._url;
	}

	__proto.getType=function(){
		return this._mount;
	}

	__proto.isblevel=function(){
		return this._isblevel;
	}

	__proto.getHerolegY=function(){
		return this._herolegY;
	}

	__proto.getHerobodyY=function(){
		return this._herobodyY;
	}

	__proto.getMountNum=function(){
		return this._mountnum;
	}

	MountProxy.MOUNT_GROUND=0;
	MountProxy.MOUNT_GROUND1=1;
	MountProxy.MOUNT_GROUND2=2;
	return MountProxy;
})()


//class game.modal.RankVO
var RankVO=(function(){
	function RankVO(){
		this.time=0;
		this.rank0=47;
		this.rank1=48;
		this.rank2=49;
		this.rank3=50;
		this.ranks=null;
		this.ranknum=0;
		this.killtime=0;
		this.awards=null;
		this.idx=0;
		this._handler=null;
		this.submitid=0;
		this.needgagin=true;
		this.nodata=false;
		this.comboNum=0;
		this.goldNum=0;
		this.timeNum=0;
		this.killZombie=0;
		this.time=3600*24*1000;
		this.ranks=[this.rank0,this.rank1,this.rank2,this.rank3];
		this.ranknum=this.ranks.length;
		this.awards=[0,0,0,0,0];
	}

	__class(RankVO,'game.modal.RankVO');
	var __proto=RankVO.prototype;
	__proto.getGem=function(rank){
		if(rank>50){
			return 0;
			}else if(rank>40){
			return-6;
			}else if(rank>30){
			return-12;
			}else if(rank>20){
			return-20;
			}else if(rank>10){
			return-30;
			}else if(rank>0){
			return-50;
		}
		return 0;
	}

	__proto.getAwardGem=function(idx){
		return this.awards[idx];
	}

	__proto.getOvertime=function(){
		return (this.killtime-Browser.now()+new Date().getTimezoneOffset()*60000)*0.001>>0;
	}

	__proto.getAward=function(idx,rank){
		var obj=rank.data[idx];
		obj.getaward=true;
		GlobalAPI.heroproxy.addMoney(this.awards[idx],false);
		SaveDataMgr.save(false);
		GlobalAPI.moneyBar.fly(this.awards[idx]);
		QuickMoveTip.show("获得"+(-this.awards[idx])+"颗钻石");
	}

	/**
	*
	*@param rank {time:天,ok:结算,data:[{id:排行id,num:当前数量,rank:排名,getaward:是否拿了奖励},...]}
	*
	*/
	__proto.setRank=function(rank){
		var tm=rank.time;
		var nowtm=(Browser.now()-new Date().getTimezoneOffset()*60000)/this.time>>0;
		this.killtime=nowtm*this.time+this.time-3600*4*1000+3600*0.5*1000;
		var data=rank.data;
		if(tm==nowtm){
			var idx=0;
			var obj;
			for(var $each_obj in data){
				obj=data[$each_obj];
				this.setRankId(obj.id,obj.num,obj);
				if(rank.ok==true){
					this.awards[idx]=this.getGem(obj.rank);
				}
				idx++;
			}
			}else{
			rank.time=nowtm;
			rank.ok=false;
			data.length=0;
			var i=0;
			for(i=0;i<this.ranknum;i++){
				this.awards[i]=0;
				data.push(this.setRankId(this.ranks[i],0));
			}
		}
	}

	__proto.setRankId=function(id,num,obj){
		if(obj==null){
			obj={id:id,rank:0,getaward:false};
		}
		switch(id){
			case this.rank0:
				this.killZombie=obj.num=num;
				break ;
			case this.rank1:
				this.goldNum=obj.num=num;
				break ;
			case this.rank2:
				this.comboNum=obj.num=num;
				break ;
			case this.rank3:
				this.timeNum=obj.num=num;
				break ;
			}
		return obj;
	}

	__proto.save=function(){
		var rank=GlobalAPI.heroproxy.getRank();
		if(rank.ok || this.getOvertime()<1){
			return;
		};
		var obj;
		var $each_obj;
		for($each_obj in rank.data){
			obj=rank.data[$each_obj];
			switch(obj.id){
				case this.rank0:
					obj.num=this.killZombie;
					break ;
				case this.rank1:
					obj.num=this.goldNum;
					break ;
				case this.rank2:
					obj.num=this.comboNum;
					break ;
				case this.rank3:
					obj.num=this.timeNum;
					break ;
				}
		}
	}

	//提交分数
	__proto.onSubmitScore=function(handler,again){
		(again===void 0)&& (again=false);
		if(GlobalAPI.ispackge || GlobalAPI.heroproxy.getRank().ok)return;
		this._handler=handler;
		var data=GlobalAPI.heroproxy.getRank().data;
		if(again==false){
			this.nodata=true;
			this.needgagin=false;
			this.submitid=0;
		}
		this.idx=0;
		var i=0;
		for(i=0;i<this.ranknum;i++){
			this.gorun(i,data[i]);
		}
	}

	__proto.gorun=function(i,obj){
		var _$this=this;
		if(obj.num<1){
			this.idx++;
			this.overCheck();
			return;
		}
		this.nodata=false;
		Browser.window.h5api.submitRankScore(this.ranks[i],obj.num,function(res){
			_$this.idx++;
			console.log('提交结果+序号：'+i,"score："+res.data.score,"rank："+res.data.rank);
			if(res.data.rank==obj.num){
				_$this.needgagin=true;
			}
			if(res.data.score>0){
				obj.rank=res.data.rank>>0;
				}else{
				obj.rank=0;
			}
			if(_$this.getOvertime()<1){
				_$this.awards[i]=_$this.getGem(obj.rank);
			}
			_$this.overCheck();
		});
	}

	__proto.overCheck=function(){
		if(this.idx==4 && !this.nodata){
			if(this.needgagin && this.submitid==0){
				this.submitid++;
				this.onSubmitScore(this._handler,true);
				console.log("needgagin submitid...");
				}else if(this._handler){
				this._handler.run();
				this._handler=null;
				if(this.getOvertime()<1){
					GlobalAPI.heroproxy.getRank().ok=true;
					SaveDataMgr.onlinesave(true);
				}
			}
		}
	}

	__proto.showRankList=function(){
		if(GlobalAPI.ispackge)return;
		Browser.window.h5api.showRankList();
	}

	__proto.getName=function(idx){
		var str="";
		switch(idx){
			case 0:
				str="战神榜 [杀尽量多的僵尸]";
				break ;
			case 1:
				str="财富榜 [收集金币]";
				break ;
			case 2:
				str="杀神榜 [单次连杀数]";
				break ;
			case 3:
				str="生存榜 [绝对求生中的生存时间]";
				break ;
			}
		return str;
	}

	__proto.getScoreTxt=function(idx){
		var str="";
		switch(idx){
			case 0:
				str="杀敌数：";
				break ;
			case 1:
				str="金币数：";
				break ;
			case 2:
				str="连杀数：";
				break ;
			case 3:
				str="时间：";
				break ;
			}
		return str;
	}

	return RankVO;
})()


//class game.modal.SaveDataMgr
var SaveDataMgr=(function(){
	function SaveDataMgr(){}
	__class(SaveDataMgr,'game.modal.SaveDataMgr');
	SaveDataMgr.start=function(handler){
		SaveDataMgr.okhandler=handler;
		if(GlobalAPI.ispackge){
			SaveDataMgr.downinit();
			}else{
			if(Browser.window.h5api.isLogin()){
				Browser.window.h5api.login(SaveDataMgr.logincallback);
				}else{
				SaveDataMgr.downinit();
			}
		}
	}

	SaveDataMgr.logincallback=function(res){
		SaveDataMgr.onlinedown();
	}

	SaveDataMgr.downinit=function(){
		SaveDataMgr.dataStr=LocalStorage.getItem(SaveDataMgr.saveName);
		if((typeof SaveDataMgr.dataStr=='string')){
			SaveDataMgr.data=JSON.parse(SaveDataMgr.dataStr);
			}else{
			SaveDataMgr.data=null;
		}
		SaveDataMgr.down();
		if(!GlobalAPI.ispackge){
			SaveDataMgr.onlinedown();
		}
	}

	SaveDataMgr.down=function(){
		if(!SaveDataMgr.data){
			SaveDataMgr.data={};
			SaveDataMgr.reset();
			SaveDataMgr.dataStr=JSON.stringify(SaveDataMgr.data);
			LocalStorage.setItem(SaveDataMgr.saveName,SaveDataMgr.dataStr);
		};
		var obj=SaveDataMgr.data;
		if(obj){
			SaveDataMgr.savetime=obj.savetime;
			var proxy=HeroProxy.getInstance();
			proxy.setTask(obj.task);
			proxy.setRank(obj.rank);
			proxy.setSignTime(obj.signtime);
			proxy.goldNum=obj.gold;
			proxy.gemNum=obj.gem;
			proxy.herolev=obj.herolev;
			proxy.heroSelect=obj.heroSelect;
			proxy.exps=obj.exps;
			proxy.weaponlev=obj.weaponlev;
			proxy.weaponselect=obj.weaponselect;
			proxy.skillLev=obj.skilllev;
			proxy.skillselect=obj.skillselect;
			proxy.mountlev=obj.mountlev;
			proxy.mountselect=obj.mountselect;
			proxy.awardtime=obj.awardtime;
			proxy.alivetime=obj.alivetime;
			SaveDataMgr.starnums=obj.starnums;
			SoundMgr.musicLock=obj.musiclock;
			SoundMgr.soundLock=obj.soundlock;
			GlobalAPI.shootTip=obj.shoottip;
			GlobalAPI.aliveWeaponNowuse=obj.aliveWeaponNowuse;
			if(GlobalAPI.isPC){
				MapData.stageW=obj.stagew;
				MapData.stageH=obj.stageh;
			}
			SaveDataMgr.stars=obj.stars;
			proxy.start();
		}
		if(SaveDataMgr.okhandler){
			SaveDataMgr.okhandler.run();
			SaveDataMgr.okhandler=null;
		}
	}

	SaveDataMgr.save=function(isstar){
		if(!SaveDataMgr.data){
			SaveDataMgr.reset();
		};
		var obj=SaveDataMgr.data;
		var proxy=HeroProxy.getInstance();
		obj.savetime=DateUtil.parseDateStr(new Date);
		obj.task=proxy.getTask();
		obj.rank=proxy.getRank();
		obj.signtime=proxy.getSignTime();
		obj.gold=proxy.getGoldNum();
		obj.gem=proxy.getGemNum();
		if(isstar){
			var star=SaveDataMgr.stars[GlobalAPI.levelMgr.sort+"-"+GlobalAPI.levelMgr.nowLev]>>0;
			star=Math.max(star,MapData.levelLev);
			SaveDataMgr.stars[GlobalAPI.levelMgr.sort+"-"+GlobalAPI.levelMgr.nowLev]=star;
			obj.stars=SaveDataMgr.stars;
			obj.starnums=SaveDataMgr.starnums=GlobalAPI.levelMgr.getStars();
		}
		obj.herolev=proxy.herolev;
		obj.heroSelect=proxy.heroSelect;
		obj.exps=proxy.exps;
		obj.weaponlev=proxy.weaponlev;
		obj.weaponselect=proxy.weaponselect;
		obj.skilllev=proxy.skillLev;
		obj.skillselect=proxy.skillselect;
		obj.mountlev=proxy.mountlev;
		obj.mountselect=proxy.mountselect;
		obj.awardtime=proxy.awardtime;
		obj.alivetime=proxy.alivetime;
		obj.musiclock=SoundMgr.musicLock;
		obj.soundlock=SoundMgr.soundLock;
		obj.shoottip=GlobalAPI.shootTip;
		obj.aliveWeaponNowuse=GlobalAPI.aliveWeaponNowuse;
		if(GlobalAPI.isPC){
			obj.stagew=MapData.stageW;
			obj.stageh=MapData.stageH;
		}
		GlobalAPI.taskVO.save();
		GlobalAPI.rankVO.save();
		SaveDataMgr.dataStr=JSON.stringify(SaveDataMgr.data)
		LocalStorage.setItem(SaveDataMgr.saveName,SaveDataMgr.dataStr);
		console.log("local保存数据....");
	}

	SaveDataMgr.onlinesave=function(must){
		(must===void 0)&& (must=false);
		if(GlobalAPI.ispackge)return;
		if(must==false && (SaveDataMgr.needsave==false || Browser.now()-SaveDataMgr.needsavetime<60000))return;
		SaveDataMgr.save(false);
		Browser.window.h5api.save({
			type:'write',
			more:false,
			title:'save1',
			data:SaveDataMgr.dataStr,
			callback:SaveDataMgr.savecallback
		});
	}

	SaveDataMgr.savecallback=function(res){
		if(res.code===1000){
			SaveDataMgr.needsave=false;
			SaveDataMgr.needsavetime=Browser.now();
			QuickMoveTip.show('存档成功');
			}else {
			console.log(res.msg);
		}
	}

	SaveDataMgr.onlinedown=function(){
		if(GlobalAPI.ispackge)return;
		if(Browser.window.h5api.isLogin()){
			SaveView.getInstance().down();
		}
		Browser.window.h5api.save({
			type:'read',
			more:false,
			callback:SaveDataMgr.downcallback
		});
	}

	SaveDataMgr.downcallback=function(res){
		SaveView.getInstance().show(false);
		if (res.code===1000){
			SaveDataMgr.dataStr=res.data;
			SaveDataMgr.data=JSON.parse(SaveDataMgr.dataStr);
			SaveDataMgr.down();
			}else {
			if(res.code==2001){
				SaveDataMgr.down();
				}else{
				console.log(res.msg);
			}
		}
	}

	SaveDataMgr.reset=function(){
		SaveDataMgr.data={
			savetime :"0",
			task :{time:0,task:[]},
			rank:{time:0,ok:false,data:[]},
			signtime :{time:0,day:0},
			gold :0,
			gem :0,
			stars :{"0-0":0},
			starnums :0,
			herolev :[1,1,0,0,0,0,0],
			heroSelect :[0,1],
			exps :[0,0,0,0,0,0,0],
			weaponlev :[1,0,0,0,0,
			0,0,0,0,0,
			0,0,0,0,0,
			0,0,0,0],
			weaponselect :[[0,-1,-1,-2,-2],[0,-1,-1,-2,-2],[0,-1,-1,-2,-2],[0,-1,-1,-2,-2],[0,-1,-1,-2,-2],[0,-1,-1,-2,-2],[0,-1,-1,-2,-2]],
			skilllev :[0,0,3,3,1,2,1,0],
			skillselect :[3,2],
			mountlev :[0,0,0],
			mountselect :[-1,-1,-1,-1,-1,-1,-1],
			awardtime :0,
			alivetime :0,
			musiclock :false,
			soundlock :false,
			shoottip :false,
			aliveWeaponNowuse :true,
			stagew :960,
			stageh :600
		};
	}

	SaveDataMgr.saveName="myshootgame_gwc";
	SaveDataMgr.savetime=null;
	SaveDataMgr.starnums=0;
	SaveDataMgr.needsave=false;
	SaveDataMgr.needsavetime=0;
	SaveDataMgr.okhandler=null;
	SaveDataMgr.dataStr=null;
	SaveDataMgr.data=null;
	__static(SaveDataMgr,
	['stars',function(){return this.stars={"0-0":0};}
	]);
	return SaveDataMgr;
})()


/**
*技能信息
*@author guowc
*
*/
//class game.modal.SkillInfo
var SkillInfo=(function(){
	function SkillInfo(){
		this.skillKey1=[49,50,51];
		//技能快捷键1
		this.skillKey2=[97,98,99];
		//技能快捷键2
		this.skillKey3=[32,70,86];
		//技能快捷键2 空格/F/V
		this.skillKeyName=["空格","F","V"];
		this.skillBarLen=3;
		this.skillLen=0;
		this.skillMaxLev=60;
		//技能最高等级
		this.skillEffect=[];
		//技能效果
		this.skillstartEffect=[];
		//技能初使效果
		this.skillInfo=null;
		this.skillInfo=[];
		this.skillInfo[0]={gold:-100 ,maxlev:60,skin:"skillskin/100.png" ,type:100,cd:15000 ,sound:""};
		this.skillInfo[7]={gold:-5 ,maxlev:60,skin:"skillskin/101.png" ,type:200,cd:(1200+3000)/MapData.frameRate*1000,sound:""};
		this.skillInfo[2]={gold:-3 ,maxlev:60,skin:"skillskin/102.png" ,type:200,cd:500,sound:""};
		this.skillInfo[3]={gold:800 ,maxlev:60,skin:"skillskin/107.png" ,type:200,cd:2700/MapData.frameRate*1000,sound:""};
		this.skillInfo[4]={gold:-8 ,maxlev:60,skin:"skillskin/105.png" ,type:200,cd:500,sound:""};
		this.skillInfo[5]={gold:-3 ,maxlev:60,skin:"skillskin/106.png" ,type:200,cd:3600/MapData.frameRate*1000,sound:""};
		this.skillInfo[1]={gold:-500 ,maxlev:60,skin:"skillskin/109.png" ,type:100,cd:60000,sound:""};
		this.skillInfo[6]={gold:-5 ,maxlev:60,skin:"skillskin/108.png" ,type:200,cd:500,sound:""};
		this.skillLen=this.skillInfo.length;
		this.skillstartEffect[0]=this.skillEffect[0]=800;
		this.skillstartEffect[1]=this.skillEffect[1]=2000;
	}

	__class(SkillInfo,'game.modal.SkillInfo');
	var __proto=SkillInfo.prototype;
	__proto.getSkillData=function(id){
		return this.skillInfo[id];
	}

	__proto.getSkillImgPath=function(id){
		if(this.skillInfo[id]){
			return this.skillInfo[id].skin;
			}else{
			return null;
		}
	}

	__proto.getCD=function(id){
		return this.skillInfo[id].cd;
	}

	__proto.getType=function(id){
		return this.skillInfo[id].type;
	}

	__proto.isSkillType=function(id){
		return this.skillInfo[id].type==100;
	}

	/**
	*
	*@param id 序号
	*@return
	*
	*/
	__proto.getSkillInfo=function(id){
		var str;
		switch(id){
			case 0:
				str="发射多发追踪弹,每个飞弹伤害值"+this.skillEffect[id]+"点,飞弹有溅射效果";
				break ;
			case 7:
				str="防护时间"+1200/60+"秒";
				break ;
			case 2:
				str="所有已装备武器补充100%弹药";
				break ;
			case 3:
				str="加速射击"+2700/60+"秒";
				break ;
			case 4:
				str="生命值加50%";
				break ;
			case 5:
				str="吸收双倍金币"+3600/60+"秒";
				break ;
			case 6:
				str="炸飞周围的敌人";
				break ;
			case 1:
				str="召唤狂暴光柱,每条光柱伤害值"+this.skillEffect[id]+"点";
				break ;
			}
		return str;
	}

	__proto.getSkillName=function(id){
		var str;
		switch(id){
			case 0:
				str="[技能] 热导追踪弹";
				break ;
			case 1:
				str="[技能] 狂暴光柱";
				break ;
			case 7:
				str="[道具] 防护罩";
				break ;
			case 2:
				str="[道具] 弹药包";
				break ;
			case 3:
				str="[道具] 兴奋剂";
				break ;
			case 4:
				str="[道具] 医药包";
				break ;
			case 5:
				str="[道具] 磁铁";
				break ;
			case 6:
				str="[道具] 手榴弹";
				break ;
			}
		return str;
	}

	__proto.uplevGold=function(lev,idx){
		var sgold=this.skillInfo[idx].gold;
		if(lev==0 || this.getType(idx)==200){
			return sgold;
		};
		var gold=0;
		gold=sgold*0.1;
		var num=1+(lev-1)*1;
		gold=gold*num;
		gold=gold<sgold ? sgold :gold;
		return gold;
	}

	/**
	*
	*@param skills 技能等级
	*
	*/
	__proto.updateskill=function(skills){
		var i=0;
		for(i=0;i<this.skillLen;i++){
			var num=skills[i];
			num=num-1<0 ? 0 :num-1;
			switch(i){
				case 0:
					this.skillEffect[i]=num*80+this.skillstartEffect[0];
					break ;
				case 1:
					this.skillEffect[i]=num*160+this.skillstartEffect[1];
					break ;
				}
		}
	}

	__proto.getSkillEffect=function(type){
		return this.skillEffect[type];
	}

	SkillInfo.TYPE_SKILL=100;
	SkillInfo.TYPE_ITEM=200;
	SkillInfo.skill_bom=0;
	SkillInfo.skill_bolt=1;
	SkillInfo.skill_ammo=2;
	SkillInfo.skill_speed=3;
	SkillInfo.skill_hp=4;
	SkillInfo.skill_magnet=5;
	SkillInfo.skill_grenade=6;
	SkillInfo.skill_shield=7;
	return SkillInfo;
})()


//class game.modal.TaskVO
var TaskVO=(function(){
	function TaskVO(){
		this.time=0;
		this.comboNum=0;
		this.goldNum=0;
		this.propNum=0;
		this.usePropNum=0;
		this.gemboxNum=0;
		//宝箱
		this.ammoNum=0;
		this.critNum=0;
		this.levelNum=0;
		this.fireZombie=0;
		this.awardNum=0;
		this.killZombie=0;
		this.goldOne=0;
		this.bossOne=0;
		this.watchad=0;
		this.tasknum=6;
		this.awards=[[600,600,800,600,600,600,600,960,600],[1600,1800,2000,1800],[-5,-5],[-5]];
		this.time=3600*24*1000;
	}

	__class(TaskVO,'game.modal.TaskVO');
	var __proto=TaskVO.prototype;
	__proto.getAward=function(idx,task,gem){
		var obj=task.task[idx];
		obj.getaward=true;
		if(obj.id==300){
			gem=gem*2;
		}
		GlobalAPI.heroproxy.addMoney(gem,false);
		SaveDataMgr.save(false);
	}

	/**
	*
	*@param task {time:天,task:[{id:任务id,now:当前数量,all:需要数量,getaward:是否拿了取奖励},...]}
	*
	*/
	__proto.setTask=function(task){
		var tm=task.time;
		var tim=new Date().getTimezoneOffset()*60000;
		var nowtm=(Browser.now()-tim)/this.time>>0;
		var tasks=task.task;
		if(tm==nowtm){
			var obj;
			for(var $each_obj in tasks){
				obj=tasks[$each_obj];
				this.setTaskId(obj.id,obj.now,obj.all,obj);
			}
			}else{
			task.time=nowtm;
			tasks.length=0;
			var ar;
			var i=0;
			var j=0;
			var ran=0;
			var id=0;
			var t=0;
			for(i=0;i<this.tasknum;i++){
				if(i>2){
					t++;
				}
			}
			t=0;
			var ids=[];
			for(i=0;i<this.tasknum;i++){
				if(i>2){
					t++;
				}
				ar=this.awards[t];
				while(true){
					ran=Math.random()*ar.length>>0;
					id=t*100+ran;
					if(ids.indexOf(id)<0){
						tasks.push(this.setTaskId(id,0,0));
						ids.push(id);
						break ;
					}
				}
			}
			SaveDataMgr.save(false);
		}
	}

	__proto.getTaskFinish=function(idx,task){
		var obj=task.task[idx];
		switch(obj.id){
			case 0:
				return this.goldNum >=obj.all;
				break ;
			case 1:
				return this.comboNum >=obj.all;
				break ;
			case 2:
				return this.propNum >=obj.all;
				break ;
			case 3:
				return this.gemboxNum >=obj.all;
				break ;
			case 4:
				return this.ammoNum >=obj.all;
				break ;
			case 5:
				return this.critNum >=obj.all;
				break ;
			case 6:
				return this.fireZombie >=obj.all;
				break ;
			case 7:
				return this.awardNum >=obj.all;
				break ;
			case 8:
				return this.killZombie >=obj.all;
				break ;
			case 100:
				return this.goldNum >=obj.all;
				break ;
			case 101:
				return this.goldOne >=obj.all;
				break ;
			case 102:
				return this.usePropNum >=obj.all;
				break ;
			case 103:
				return this.levelNum >=obj.all;
				break ;
			case 200:
				return this.comboNum >=obj.all;
				break ;
			case 201:
				return this.bossOne >=obj.all;
				break ;
			case 300:
				return this.watchad >=obj.all;
				break ;
			}
		return false;
	}

	__proto.setTaskId=function(id,now,all,obj){
		if(obj==null){
			obj={id:id,getaward:false};
		}
		switch(id){
			case 0:
				this.goldNum=obj.now=now;
				if(all==0){
					obj.all=Math.random()*500+1200>>0;
				}
				break ;
			case 1:
				this.comboNum=obj.now=now;
				if(all==0){
					obj.all=Math.random()*10+30>>0;
				}
				break ;
			case 2:
				this.propNum=obj.now=now;
				if(all==0){
					obj.all=Math.random()*2+2>>0;
				}
				break ;
			case 3:
				this.gemboxNum=obj.now=now;
				if(all==0){
					obj.all=Math.random()*2+1>>0;
				}
				break ;
			case 4:
				this.ammoNum=obj.now=now;
				if(all==0){
					obj.all=Math.random()*2000+3000>>0;
				}
				break ;
			case 5:
				this.critNum=obj.now=now;
				if(all==0){
					obj.all=Math.random()*30+50>>0;
				}
				break ;
			case 6:
				this.fireZombie=obj.now=now;
				if(all==0){
					obj.all=Math.random()*10+15>>0;
				}
				break ;
			case 7:
				this.awardNum=obj.now=now;
				if(all==0){
					obj.all=Math.random()*2+3>>0;
				}
				break ;
			case 8:
				this.killZombie=obj.now=now;
				if(all==0){
					obj.all=Math.random()*150+300>>0;
				}
				break ;
			case 100:
				this.goldNum=obj.now=now;
				if(all==0){
					obj.all=Math.random()*2000+6000>>0;
				}
				break ;
			case 101:
				this.goldOne=obj.now=now;
				if(all==0){
					obj.all=Math.random()*50+300>>0;
				}
				break ;
			case 102:
				this.usePropNum=obj.now=now;
				if(all==0){
					obj.all=Math.random()*2+2>>0;
				}
				break ;
			case 103:
				this.levelNum=obj.now=now;
				if(all==0){
					obj.all=Math.random()*3+5>>0;
				}
				break ;
			case 200:
				this.comboNum=obj.now=now;
				if(all==0){
					obj.all=Math.random()*30+80>>0;
				}
				break ;
			case 201:
				this.bossOne=obj.now=now;
				if(all==0){
					obj.all=1;
				}
				break ;
			case 300:
				this.watchad=obj.now=now;
				if(all==0){
					obj.all=1;
				}
				break ;
			}
		return obj;
	}

	__proto.getInfo=function(id,all){
		var str="";
		switch(id){
			case 0:
				str="游戏中收集"+all+"个金币";
				break ;
			case 1:
				str="连杀"+all+"次";
				break ;
			case 2:
				str="游戏中取得道具"+all+"次";
				break ;
			case 3:
				str="获得"+all+"个宝箱";
				break ;
			case 4:
				str="射击"+all+"颗子弹";
				break ;
			case 5:
				str="暴击"+all+"次";
				break ;
			case 6:
				str="点燃"+all+"只僵尸";
				break ;
			case 7:
				str="抽奖"+all+"次";
				break ;
			case 8:
				str="消灭"+all+"只僵尸";
				break ;
			case 9:
				str="破坏"+all+"个路障";
				break ;
			case 100:
				str="游戏中收集"+all+"个金币";
				break ;
			case 101:
				str="在一次任务中收集"+all+"个金币";
				break ;
			case 102:
				str="使用道具"+all+"次";
				break ;
			case 103:
				str="完成"+all+"次关卡";
				break ;
			case 200:
				str="连杀"+all+"次";
				break ;
			case 201:
				str="消灭一个BOSS";
				break ;
			case 300:
				str="观看一个广告[可获得10颗钻石]";
				break ;
			}
		return str;
	}

	__proto.save=function(){
		var task=GlobalAPI.heroproxy.getTask();
		var obj;
		var $each_obj;
		for($each_obj in task.task){
			obj=task.task[$each_obj];
			switch(obj.id){
				case 0:
					obj.now=this.goldNum;
					break ;
				case 1:
					obj.now=this.comboNum;
					break ;
				case 2:
					obj.now=this.propNum;
					break ;
				case 3:
					obj.now=this.gemboxNum;
					break ;
				case 4:
					obj.now=this.ammoNum;
					break ;
				case 5:
					obj.now=this.critNum;
					break ;
				case 6:
					obj.now=this.fireZombie;
					break ;
				case 7:
					obj.now=this.awardNum;
					break ;
				case 8:
					obj.now=this.killZombie;
					break ;
				case 100:
					obj.now=this.goldNum;
					break ;
				case 101:
					obj.now=this.goldOne;
					break ;
				case 102:
					obj.now=this.usePropNum;
					break ;
				case 103:
					obj.now=this.levelNum;
					break ;
				case 200:
					obj.now=this.comboNum;
					break ;
				case 201:
					obj.now=this.bossOne;
					break ;
				case 300:
					obj.now=this.watchad;
					break ;
				}
		}
	}

	__proto.getIdxInfo=function(idx){
		var task=GlobalAPI.heroproxy.getTask();
		var obj=task.task[idx];
		return this.getInfo(obj.id,obj.all);
	}

	__proto.getAwardGem=function(id){
		var i=id/100>>0;
		var j=id%100;
		return this.awards[i][j];
	}

	return TaskVO;
})()


/**
*场景层
*@author guowc
*
*/
//class game.moveview.LayerManager
var LayerManager=(function(){
	function LayerManager(){}
	__class(LayerManager,'game.moveview.LayerManager');
	LayerManager.getLayers=function(){
		return LayerManager._layers;
	}

	LayerManager.getMouseEnableds=function(){
		return LayerManager._mouseEnableds;
	}

	LayerManager.MAPLAYER=0;
	LayerManager.MAPMOVELAYER=1;
	LayerManager.SCENEOBJLAYER=2;
	LayerManager.CONTROLLER=3;
	LayerManager.EFFECT=4;
	LayerManager.TOP=5;
	__static(LayerManager,
	['_layers',function(){return this._layers=[0,1,2,3,4,5];},'_mouseEnableds',function(){return this._mouseEnableds=[false,false,false,false,false,false];}
	]);
	return LayerManager;
})()


/**
*结束位置
*@author guowc
*
*/
//class game.role.EndDoor
var EndDoor=(function(){
	function EndDoor(){
		this.isShow=false;
		this.enddoor=null;
		this.view=null;
		if(EndDoor.instance)return;
		EndDoor.instance=this;
		this.view=GlobalAPI.moveViewPort.getLayerContainer(1);
		this.enddoor=new AniMc;
		this.enddoor.interval=90;
		this.enddoor.loadResource(PathMgr.path_miniani+"miniani.json",PathMgr.path_miniani+"miniani"+".ani");
	}

	__class(EndDoor,'game.role.EndDoor');
	var __proto=EndDoor.prototype;
	__proto.setEndDoor=function(x,y){
		this.enddoor.x=x;
		this.enddoor.y=y;
	}

	__proto.show=function(val,container){
		if(this.isShow==val)return;
		this.isShow=val;
		if(!this.isShow){
			this.enddoor.stop();
			this.enddoor.removeSelf();
			}else{
			this.enddoor.setPlay(0,true,"door");
			if(container){
				container.addChildAt(this.enddoor,0);
				}else{
				this.view.addChildAt(this.enddoor,0);
			}
		}
	}

	EndDoor.getInstance=function(){
		if(!EndDoor.instance)
			new EndDoor;
		return EndDoor.instance;
	}

	EndDoor.instance=null;
	return EndDoor;
})()


/**
*结束位置
*@author guowc
*
*/
//class game.role.TipArrow
var TipArrow=(function(){
	function TipArrow(){
		this.isShow=false;
		this.arrow=null;
		this.viewrect=null;
		this._dis=NaN;
		if(TipArrow.instance)return;
		TipArrow.instance=this;
		this.arrow=new AniMc;
		this.arrow.interval=30;
		this.arrow.loadResource(PathMgr.path_miniani+"miniani.json",PathMgr.path_miniani+"miniani"+".ani");
	}

	__class(TipArrow,'game.role.TipArrow');
	var __proto=TipArrow.prototype;
	__proto.setarrow=function(x,y){
		this.arrow.x=x;
		this.arrow.y=y;
	}

	__proto.show=function(val,container,dis){
		(dis===void 0)&& (dis=0);
		if(this.isShow==val)return;
		this.isShow=val;
		if(!this.isShow){
			this.arrow.stop();
			this.arrow.removeSelf();
			GlobalAPI.heartMgr.remove(this,this.over);
			}else{
			this.arrow.setPlay(0,true,"tiparrow");
			if(container){
				container.addChild(this.arrow);
			}
			this._dis=dis;
			this.viewrect=GlobalAPI.moveViewPort.viewRect;
			GlobalAPI.heartMgr.add(this,this.over);
			GlobalAPI.soundMgr.playbtn();
		}
	}

	__proto.over=function(){
		if(this.viewrect.x+this.viewrect.width*0.5>this._dis){
			this.show(false,null);
		}
	}

	TipArrow.getInstance=function(){
		if(!TipArrow.instance)
			new TipArrow;
		return TipArrow.instance;
	}

	TipArrow.instance=null;
	return TipArrow;
})()


//class game.view.equipview.WeaponListVO
var WeaponListVO=(function(){
	function WeaponListVO(){
		this.weaponid=0;
		//武器id
		this.lev=0;
		//武器等级
		this.isEquip=false;
	}

	__class(WeaponListVO,'game.view.equipview.WeaponListVO');
	return WeaponListVO;
})()


/**
*控制类
*@author guowc
*
*/
//class game.view.MoveView
var MoveView=(function(){
	function MoveView(){
		this.act=null;
		this.actpt=null;
		this.act2=null;
		this.actpt2=null;
		this.movefast=false;
		this.mapview=null;
		this.baseView=null;
		this.scrollMap=null;
		this.baseMap=null;
		this.viewRect=null;
		this.viewRectx=null;
		this.maxRect=null;
		this.focuspt=new Point;
		this.singlept=new Point(50,50);
		this.tempviewrect=new Rectangle;
		MapData.mapRect=new Rectangle();
		this.baseView=MoveViewPort.getInstance();
		this.mapview=this.baseView.getLayerContainer(0);
		this.updateViewRect();
		this.scrollMap=GlobalAPI.scrollMap;
		this.baseMap=new BaseMap;
		GlobalAPI.hero=this.act=new Hero;
		GlobalAPI.hero2=this.act2=new Hero2;
		this.act.reset();
		this.act2.reset();
		GlobalAPI.heropt=this.actpt=this.act.getPt();
		GlobalAPI.heroGroundPt=this.act.getGroundPt();
		this.actpt=this.act.getPt();
		GlobalAPI.heropt2=this.actpt2=this.act2.getPt();
		GlobalAPI.heroGroundPt2=this.act2.getGroundPt();
		GlobalAPI.heros=[];
	}

	__class(MoveView,'game.view.MoveView');
	var __proto=MoveView.prototype;
	__proto.updateViewRect=function(){
		if(this.viewRect){
			this.viewRect.x=this.baseView.viewRect.x;
			this.viewRect.y=this.baseView.viewRect.y;
			this.viewRect.width=MapData.stageW;
			this.viewRect.height=MapData.stageH;
			}else{
			this.viewRect=new Rectangle(0,0,MapData.stageW,MapData.stageH);
		}
		this.baseView.setFast(true,true);
		this.baseView.viewRect=this.viewRect;
		this.baseView.movableRect=new Rectangle(this.viewRect.width/2,this.viewRect.height/2,0,0);
	}

	__proto.init=function(){
		BornBigMapTiles.getInstance().startBorn(MapData.mapData);
		EffectShake.deleteMe();
		GlobalAPI.nowdouble=GlobalAPI.heroproxy.getDouble();
		GlobalAPI.shootpt=GlobalAPI.heropt;
		GlobalAPI.shootGroundpt=GlobalAPI.heroGroundPt;
		GlobalAPI.propMgr.start();
		var dx=MapData.boxW*MapData.mapData[0].length;
		var dy=MapData.boxH*MapData.mapData.length;
		MapData.mapRect.width=dx;
		MapData.mapRect.height=dy;
		this.maxRect=this.baseView.maxRect=new Rectangle(0,0,dx,dy);
		this.viewRect.x=this.viewRect.y=0;
		this.baseView.viewRect=this.viewRect;
		this.viewRectx=this.baseView.viewRect;
		this.movefast=true;
		this.baseView.setFast(this.movefast);
		this.baseView.updateFun(this,this.render);
		this.baseView.pause(false);
		EndDoor.getInstance().setEndDoor(MapData.mapEndRt.x,MapData.mapEndRt.y);
		MapProxy.getInstance().addMoveBlock();
		GlobalAPI.activeMgr.start();
		GlobalAPI.activeMgr.setEnemys(MapData.enemyPtData);
		GlobalAPI.activeMgr.setFoods(MapData.foodPtData);
		GlobalAPI.sceneRoleMgr.start();
		GlobalAPI.weaponEnemyMgr.start();
		WeaponMgr.start();
		MapData.isStart=true;
		this.render();
		GlobalAPI.heros.length=0;
		ClipBarAll.getInstance().setDouble(HeroProxy.getInstance().getDouble());
		if(HeroProxy.getInstance().getDouble()){
			GlobalAPI.heros.push(this.act,this.act2);
			var h;
			var $each_h;
			for($each_h in GlobalAPI.heros){
				h=GlobalAPI.heros[$each_h];
				h.reset();
				h.start();
			}
			if(GlobalAPI.heros.length>1)
				this.setFocusPt(null);
			else{
				if(this.act.getData().hp>0){
					this.setFocusPt(this.act.getPt());
					}else{
					this.setFocusPt(this.act2.getPt());
				}
			}
			}else{
			GlobalAPI.heros.push(this.act);
			this.act.reset();
			this.act.start();
			this.setFocusPt(this.actpt);
		}
		GlobalAPI.hitMgr.start(GlobalAPI.heros);
		this.chgMove();
		GlobalAPI.heartMgr.add(this,this.chgMove);
	}

	__proto.show=function(){
		GlobalAPI.root.addChildAt(this.baseView,2);
		GlobalAPI.levelMgr.playBgMusic(MapData.music);
		this.init();
	}

	__proto.chgMove=function(){
		if(!this.singlept){
			var dy=0;
			if(this.actpt.x<this.actpt2.x){
				this.focuspt.x=(this.actpt2.x-this.actpt.x>>1)+this.actpt.x;
				this.focuspt.y=(this.actpt.y-this.actpt2.y>>1)+this.actpt2.y;
				dy=this.actpt2.y-this.actpt.y;
				if(dy<this.viewRect.height-MapData.boxH22){
					this.focuspt.y=(dy>>1)+this.actpt.y;
				}
				}else{
				this.focuspt.x=(this.actpt.x-this.actpt2.x>>1)+this.actpt2.x;
				this.focuspt.y=(this.actpt.y-this.actpt2.y>>1)+this.actpt2.y;
				dy=this.actpt.y-this.actpt2.y;
				if(dy<this.viewRect.height-MapData.boxH22){
					this.focuspt.y=(dy>>1)+this.actpt2.y;
				}
			}
			this.baseView.focusPoint=this.focuspt;
			}else{
			this.baseView.focusPoint=this.singlept;
		}
		if(this.movefast){
			this.movefast=false;
			this.baseView.setFast(this.movefast);
		}
	}

	__proto.setFocusPt=function(pt){
		this.singlept=pt;
	}

	__proto.render=function(){
		this.tempviewrect.x=this.baseView.viewRect.x-MapData.boxW3;
		this.tempviewrect.y=this.baseView.viewRect.y;
		this.tempviewrect.width=this.baseView.viewRect.width+MapData.boxW3*2;
		this.tempviewrect.height=this.baseView.viewRect.height;
		if(this.tempviewrect.x<0)this.tempviewrect.x=0;
		if(this.tempviewrect.x+this.tempviewrect.width>this.baseView.maxRect.width){
			this.tempviewrect.width=this.baseView.viewRect.width;
		}
		this.scrollMap.fillRect(this.mapview,this.tempviewrect);
		this.baseMap.fillRect(this.mapview,this.baseView.viewRect);
		GlobalAPI.bgMove.fillRect(this.baseView.viewRect,0.2);
	}

	__proto.reset=function(){
		EndDoor.getInstance().show(false);
		this.baseView.updateFun(null,null);
		this.baseView.pause(true);
		this.act.reset();
		this.act2.reset();
		this.scrollMap.reset();
		this.scrollMap.setBoxRect(MapData.boxW,MapData.boxH);
		this.baseMap.clear();
		GlobalAPI.activeMgr.dispose();
		GlobalAPI.hitMgr.dispose();
		GlobalAPI.sceneRoleMgr.dispose();
		WeaponMgr.dispose();
		GlobalAPI.weaponEnemyMgr.dispose();
		MapProxy.getInstance().dispose();
		MapData.reset();
		GlobalAPI.heartMgr.remove(this,this.chgMove);
		MapData.isStart=false;
		AddGolds.dispose();
		AddGoldsBox.dispose();
	}

	MoveView.getInstance=function(){
		if(!MoveView.instance)
			MoveView.instance=new MoveView;
		return MoveView.instance;
	}

	MoveView.instance=null;
	return MoveView;
})()


//class game.view.StringInfo
var StringInfo=(function(){
	function StringInfo(){}
	__class(StringInfo,'game.view.StringInfo');
	StringInfo.init=function(lang){
		(lang===void 0)&& (lang=0);
		StringInfo.language=lang;
		StringInfo.obj={};
		StringInfo.obj["装备"]="Equip";
		StringInfo.obj["已装备"]="Equiped";
		StringInfo.obj["解锁"]="Unlock";
		StringInfo.obj["满级"]="Maxlev";
		StringInfo.obj["升级"]="Uplev";
		StringInfo.obj["选择"]="Select";
		StringInfo.obj["已选中"]="Selected";
		StringInfo.obj["当前：单人模式"]="NOW：single";
		StringInfo.obj["当前：双人模式"]="NOW：multiplayer";
		StringInfo.obj["出战"]="Fight";
		StringInfo.obj["已出战"]="Fighted";
		StringInfo.obj["金币不足"]="Need more gold";
		StringInfo.obj["钻石不足"]="Need more gem";
		StringInfo.obj["购买"]="Buy";
		StringInfo.obj["没有弹药了"]="not ammo";
		StringInfo.obj["一大波僵尸来袭..."]="A wave of zombies...";
		StringInfo.obj["免费复活"]="Revive";
		StringInfo.obj["任务失败"]="Task fail";
	}

	StringInfo.getString=function(name){
		if(StringInfo.language==0)return name;
		return StringInfo.obj[name];
	}

	StringInfo.obj=null;
	StringInfo.language=0;
	StringInfo.cn=0;
	StringInfo.en=1;
	StringInfo.equip="装备";
	StringInfo.equiped="已装备";
	StringInfo.unlock="解锁";
	StringInfo.maxlev="满级";
	StringInfo.uplev="升级";
	StringInfo.select="选择";
	StringInfo.selected="已选中";
	StringInfo.single="当前：单人模式";
	StringInfo.double="当前：双人模式";
	StringInfo.fight="出战";
	StringInfo.fighted="已出战";
	StringInfo.notEnoughGold="金币不足";
	StringInfo.notEnoughGem="钻石不足";
	StringInfo.buy="购买";
	StringInfo.noAmmo="没有弹药了";
	StringInfo.warnNormal="一大波僵尸来袭...";
	StringInfo.freeRevive="免费复活";
	StringInfo.taskfail="任务失败";
	StringInfo.equipEN="Equip";
	StringInfo.equipedEN="Equiped";
	StringInfo.unlockEN="Unlock";
	StringInfo.maxlevEN="Maxlev";
	StringInfo.uplevEN="Uplev";
	StringInfo.selectEN="Select";
	StringInfo.selectedEN="Selected";
	StringInfo.singleEN="NOW：single";
	StringInfo.doubleEN="NOW：multiplayer";
	StringInfo.fightEN="Fight";
	StringInfo.fightedEN="Fighted";
	StringInfo.notEnoughGoldEN="Need more gold";
	StringInfo.notEnoughGemEN="Need more gem";
	StringInfo.buyEN="Buy";
	StringInfo.noAmmoEN="not ammo";
	StringInfo.warnNormalEN="A wave of zombies...";
	StringInfo.freeReviveEN="Revive";
	StringInfo.taskfailEN="Task fail";
	return StringInfo;
})()


/**
*特效基类
*@author guowc
*
*/
//class mylaya.effects.BaseEffect
var BaseEffect=(function(){
	function BaseEffect(){
		this._disposeCheck=false;
		this._dispose=false;
		this.limitRect=null;
		this.disposeHandler=null;
		this.disposeHandlercaller=null;
	}

	__class(BaseEffect,'mylaya.effects.BaseEffect');
	var __proto=BaseEffect.prototype;
	__proto.dispose=function(){
		if(this.disposeHandler!=null){
			this.disposeHandler.apply(this.disposeHandlercaller,[this]);
		}
		this.disposeHandler=null;
		this.limitRect=null;
		this._dispose=true;
	}

	__proto.setDisposeHandler=function(caller,val){
		this.disposeHandler=val;
		this.disposeHandlercaller=caller;
	}

	/**
	*设定限制区域,超出消除
	*@param rect
	*
	*/
	__proto.setLimitRect=function(rect){
		this.limitRect=rect;
	}

	return BaseEffect;
})()


//class Main
var Main=(function(){
	function Main(){
		//Browser.document.documentElement.style.overflow='auto';
		this.canvas=null;
		this.checkbool=true;
		this.isError=false;
		this.canvas=Laya.init(MapData.stageW,MapData.stageH,WebGL);
		GlobalAPI.isPC=Browser.onPC && !Browser.onAndriod && !Browser.onIOS;
		if(GlobalAPI.isPC==false){
			Laya.stage.size(800,500);
			Laya.stage.scaleMode="fixedheight";
			Laya.stage.screenAdaptationEnabled=true;
			Laya.stage.screenMode="horizontal";
			}else{
			Laya.stage.scaleMode="showall";
		}
		Laya.stage.alignV="middle";
		Laya.stage.alignH="center";
		Laya.stage.bgColor="#000000";
		Laya.stage.frameRate="fast";
		if(GlobalAPI.ispackge){
			this.loadinit();
			}else{
			this.start();
		}
	}

	__class(Main,'Main');
	var __proto=Main.prototype;
	__proto.start=function(){
		Laya.timer.loop(1000,this,this.check);
	}

	__proto.check=function(){
		if(this.checkbool==false)return;
		if(Browser.window.h5api !=undefined){
			console.log("start game++--");
			this.checkbool=false;
			Laya.timer.clear(this,this.check);
			this.loadinit();
			}else{
			console.log("waiting....");
		}
	}

	__proto.loadinit=function(){
		Laya.loader.load([
		{url:"t44sd/atlas/comp.json",type:"atlas"},],
		Handler.create(this,this.onLoaded));
		Laya.loader.on("error",this,this.onError);
	}

	__proto.onLoaded=function(){
		Laya.loader.off("error",this,this.onError);
		if(this.isError){
			throw "error..加载失败";
			return;
		}
		GlobalAPI.root=new Sprite;
		Laya.stage.addChild(GlobalAPI.root);
		GlobalAPI.root.addChild(LoadView.getInstance());
		if(!GlobalAPI.isPC){
			Laya.stage.on("resize",this,Main.onResize);
		}
		this.resize();
		ResData.getInstance().init(Handler.create(this,this.resload));
	}

	__proto.resload=function(){
		LoadAsset.getInstance().putPic("",Handler.create(this,this.loadres));
	}

	__proto.loadres=function(){
		var view=new MoveViewPort(MapData.boxW*MapData.maplenx,MapData.boxH*MapData.mapleny,0,0,0,0,100,100);
		view.pause(true);
		Main.loaded=true;
		GlobalAPI.init();
		SaveDataMgr.start(Handler.create(this,this.downok));
	}

	//new Network_POST;
	__proto.downok=function(){
		LoadView.getInstance().dispose();
		GlobalAPI.rankVO.setRank(GlobalAPI.heroproxy.getRank());
		GlobalAPI.taskVO.setTask(GlobalAPI.heroproxy.getTask());
		StartView.getInstance().show(true);
		Laya.stage.size(MapData.stageW,MapData.stageH);
		Main.onResize();
	}

	__proto.resize=function(){
		if(GlobalAPI.isPC){
			MapData.para=MapData.stageW/MapData.stageH;
			}else{
			MapData.stageW=Laya.stage.width;
			MapData.stageH=500;
			MapData.para=MapData.stageW/MapData.stageH;
			while(true){
				if(MapData.stageW<800){
					MapData.stageH+=2;
					MapData.stageW=MapData.para*MapData.stageH;
					MapData.baseStageH=MapData.stageH;
					}else{
					break ;
				}
			}
			if(Browser.onIPad || Browser.onWP){
				if(MapData.stageH<600){
					MapData.stageW=MapData.para*MapData.stageH;
					MapData.stageH=600;
				}
				}else{
				if(MapData.stageH<560){
					MapData.stageW=MapData.para*MapData.stageH;
					MapData.stageH=560;
				}
			}
			Laya.stage.size(MapData.stageW,MapData.stageH);
			Main.onResize();
		}
	}

	__proto.onError=function(err){
		console.log("加载失败: "+err);
		this.isError=true;
	}

	Main.onResize=function(){
		MapData.stageW=Laya.stage.width;
		if(GlobalAPI.bg && GlobalAPI.bg.texture && MapData.stageW>GlobalAPI.bg.texture.width){
			GlobalAPI.bg.scaleX=MapData.stageW/GlobalAPI.bg.texture.width;
		}
		if(GlobalAPI.bg && GlobalAPI.bg.texture && MapData.stageH>GlobalAPI.bg.texture.height){
			GlobalAPI.bg.scaleY=MapData.stageH/GlobalAPI.bg.texture.height;
		}
		if(GlobalAPI.bgMove){
			GlobalAPI.bgMove.updatebgwh();
		}
		QuickMoveTip.QUICK_WIDTH=MapData.stageW;
		if(GlobalAPI.isStart){
			MoveView.getInstance().updateViewRect();
			GlobalAPI.updatesize();
		}
		if(Main.loaded){
			StartView.getInstance().updatesize();
			LevelView.getInstance().updatesize();
			}else{
			LoadView.getInstance().update();
		}
	}

	Main.loaded=false;
	return Main;
})()


/**
*格子数据
*@author guowc
*
*/
//class modal.BoxData
var BoxData=(function(){
	function BoxData(){
		this.sort=null;
		this.type=0;
		this.url=null;
		this.bitmapData=null;
		//运动物体
		this.skin=0;
		this.x=0;
		this.y=0;
		this.xdir=1;
		this.ydir=1;
		this.rw=0;
		//运动宽度范围
		this.rh=0;
		//敌人
		this.speed=0;
		//速度
		this.ai=0;
		//ai类型
		this.dir=0;
		//起始运动方向
		this.hurt=0;
		//伤害值
		this.thing=0;
		//food
		this.score=0;
		this.gold=0;
		this.hp=0;
		this.drawData=null;
		this.monsters=null;
	}

	__class(BoxData,'modal.BoxData');
	return BoxData;
})()


//class modal.BuffVO
var BuffVO=(function(){
	function BuffVO(){
		this.hp=NaN;
		/**
		*步枪
		*/
		this.damage0=0;
		/**
		*散弹枪
		*/
		this.damage1=0;
		/**
		*火枪
		*/
		this.damage2=0;
		/**
		*炮枪
		*/
		this.damage3=0;
		this.clip=NaN;
		this.crit=NaN;
		this.miss=NaN;
		this.jumpnum=NaN;
	}

	__class(BuffVO,'modal.BuffVO');
	var __proto=BuffVO.prototype;
	__proto.reset=function(){
		this.jumpnum=1;
		this.hp=this.damage0=this.damage1=this.damage2=this.damage3=this.clip=this.crit=this.miss=0;
	}

	return BuffVO;
})()


//class modal.config.BaseIconData
var BaseIconData=(function(){
	function BaseIconData(){
		this.isError=false;
		if(BaseIconData.instance)return;
		BaseIconData.instance=this;
	}

	__class(BaseIconData,'modal.config.BaseIconData');
	var __proto=BaseIconData.prototype;
	/**
	*
	*@param data
	*格式[{url:地址,sort:类型},...]
	*/
	__proto.init=function(data,handler){
		var _$this=this;
		var len=data.length;
		var url;
		var sort;
		var loadlist=[];
		var belveObj;
		load();
		function load (){
			for(var i=0;i<len;i++){
				url=PathMgr.path+data[i].url;
				sort=data[i].sort;
				if(sort=="100"){
					belveObj=data[i];
				}
				loadlist.push({url:url+sort+".json",type:"atlas"});
			}
			Laya.loader.load(loadlist,Handler.create(_$this,loaded),
			Handler.create(LoadView.getInstance(),LoadView.getInstance().loading,null,false));
			Laya.loader.on("error",_$this,_$this.onError);
		}
		function loaded (){
			Laya.loader.off("error",_$this,_$this.onError);
			for(var i=0;i<len;i++){
				url=PathMgr.path+data[i].url+sort+".json";
				sort=data[i].sort;
				paseData(Loader.getRes(url));
			}
			handler.run();
		}
		function paseData (jsonObj){
			var texture;
			Laya.loader.off("error",_$this,_$this.onError);
			if(_$this.isError){
				return;
			};
			var frames=jsonObj.frames;
			var headurl=jsonObj.meta.prefix;
			var frameStr;
			var frameObj;
			for(frameStr in frames){
				frameObj=frames[frameStr];
				var type=parseInt(frameStr.substr(0,frameStr.indexOf(".")));
				setData(frameObj.frame,type,Loader.getRes(headurl+frameStr));
				if(type==10011){
					for(var i=1;i<30;i++){
						setData(frameObj.frame,type+i,Loader.getRes(headurl+frameStr));
					}
				}
			}
		}
		function setData (obj,type,texture){
			var wid=texture.width;
			var hei=texture.height;
			var x=wid-MapData.boxW >> 1;
			var y=hei-MapData.boxH >> 1;
			wid=MapData.boxW+2;
			hei=MapData.boxH+2;
			var bd=Texture.createFromTexture(texture,x,y,wid,hei);
			bd.repeat=true;
			var boxdata=new BoxData;
			boxdata.sort=sort;
			boxdata.type=type;
			boxdata.bitmapData=bd;
			MapData.boxDatas[boxdata.type]=boxdata;
			if(type<MapData.bevel){
				var myobj;
				var rect;
				var rects=[];
				var $each_myobj;
				for($each_myobj in belveObj.rects[type]){
					myobj=belveObj.rects[type][$each_myobj];
					if((typeof myobj=='object')){
						rect=new Rectangle;
						rect.x=myobj.x;
						rect.y=myobj.y;
						rect.width=myobj.wid;
						rect.height=myobj.hei;
						rects.push(rect);
						}else{
						rects.push(0);
					}
				}
				MapData.blevelRects[type]=rects;
			}
		}
	}

	__proto.onError=function(err){
		console.log("加载失败: "+err);
		this.isError=true;
	}

	BaseIconData.getInstance=function(){
		if(!BaseIconData.instance)
			new BaseIconData;
		return BaseIconData.instance;
	}

	BaseIconData.instance=null;
	return BaseIconData;
})()


/**
*敌人数据 配置
*@author guowc
*格式[{type:敌人类型,skin:敌人皮肤id,ai:敌人ai},...]
*/
//class modal.config.EnemyData
var EnemyData=(function(){
	function EnemyData(){
		this.dic=null;
		if(EnemyData.instance)return;
		EnemyData.instance=this;
	}

	__class(EnemyData,'modal.config.EnemyData');
	var __proto=EnemyData.prototype;
	__proto.init=function(data,handler){
		this.dic=[];
		var obj;
		var box;
		var $each_obj;
		for($each_obj in data){
			obj=data[$each_obj];
			box=new BoxData;
			box.skin=obj.skin;
			box.type=obj.type;
			box.sort=MapData.enemySort+"";
			box.ai=obj.ai;
			box.speed=obj.speed;
			box.dir=obj.dir;
			box.rw=obj.rw;
			box.rh=obj.rh;
			box.hp=obj.hp;
			box.gold=obj.gold;
			box.score=obj.score;
			box.hurt=obj.hurt;
			box.thing=obj.thing;
			box.bitmapData=EnemyImg.getRectImg(box.type);
			this.dic[box.type]=box;
		}
		MapData.enemyData=this.dic;
		handler.run();
	}

	__proto.getData=function(){
		return this.dic;
	}

	EnemyData.getInstance=function(){
		if(!EnemyData.instance)
			new EnemyData;
		return EnemyData.instance;
	}

	EnemyData.instance=null;
	return EnemyData;
})()


//class modal.config.FmData
var FmData=(function(){
	function FmData(){
		this.skin=null;
		//运动图块皮肤
		this.data=null;
		this.handler=null;
		this.isError=false;
	}

	__class(FmData,'modal.config.FmData');
	var __proto=FmData.prototype;
	__proto.init=function(data,handler){
		var _$this=this;
		this.data=data;
		this.handler=handler;
		var dataAr=data[0];
		this.skin={};
		var len=dataAr.length;
		var url;
		var sort;
		var loadlist=[];
		load();
		function load (){
			for(var i=0;i<len;i++){
				url=PathMgr.path+dataAr[i].url;
				sort=dataAr[i].sort;
				loadlist.push({url:url+sort+".json",type:"atlas"});
			}
			Laya.loader.load(loadlist,Handler.create(_$this,loaded),
			Handler.create(LoadView.getInstance(),LoadView.getInstance().loading,null,false));
			Laya.loader.on("error",_$this,_$this.onError);
		}
		function loaded (){
			Laya.loader.off("error",_$this,_$this.onError);
			for(var i=0;i<len;i++){
				url=PathMgr.path+dataAr[i].url+sort+".json";
				sort=dataAr[i].sort;
				paseData(Loader.getRes(url));
			}
			_$this.start();
		}
		function paseData (jsonObj){
			var texture;
			Laya.loader.off("error",_$this,_$this.onError);
			if(_$this.isError){
				return;
			};
			var frames=jsonObj.frames;
			var headurl=jsonObj.meta.prefix;
			var frameStr;
			var frameObj;
			for(frameStr in frames){
				frameObj=frames[frameStr];
				setData(frameObj.frame,
				parseInt(frameStr.substr(0,frameStr.indexOf("."))),
				Loader.getRes(headurl+frameStr));
			}
		}
		function setData (obj,type,texture){
			var boxdata=new BoxData;
			boxdata.sort=sort;
			boxdata.type=type;
			boxdata.bitmapData=texture;
			_$this.skin[boxdata.type]=boxdata;
		}
	}

	//==========================数据
	__proto.start=function(){}
	__proto.onError=function(err){
		console.log("加载失败: "+err);
		this.isError=true;
	}

	return FmData;
})()


/**
*地图背景图
*@author guowc
*
*/
//class modal.config.MapBgData
var MapBgData=(function(){
	function MapBgData(){
		if(MapBgData.instance)return;
		MapBgData.instance=this;
	}

	__class(MapBgData,'modal.config.MapBgData');
	var __proto=MapBgData.prototype;
	/**
	*
	*@param data
	*格式[{url:地址},...]
	*/
	__proto.init=function(data,handler){
		var len=data.length;
		var url;
		var id;
		var ar=[];
		for(var i=0;i<len;i++){
			id=data[i].url;
			url=PathMgr.path+id;
			ar.push({url:url,type:"image"});
			MapData.bgData[id]=url;
		}
		Laya.loader.load(ar,Handler.create(this,loaded),
		Handler.create(LoadView.getInstance(),LoadView.getInstance().loading,null,false));
		function loaded (){
			handler.run();
		}
	}

	MapBgData.getInstance=function(){
		if(!MapBgData.instance)
			new MapBgData;
		return MapBgData.instance;
	}

	MapBgData.instance=null;
	return MapBgData;
})()


/**
*初使资源预加载
*@author guowc
*
*/
//class modal.config.ResData
var ResData=(function(){
	function ResData(){
		this._handler=null;
		if(ResData.instance)return;
		ResData.instance=this;
	}

	__class(ResData,'modal.config.ResData');
	var __proto=ResData.prototype;
	__proto.init=function(handler){
		SoundMgr.getInstance();
		this._handler=handler;
		Laya.loader.load([
		{url:PathMgr.path_img+"bg.jpg",type:"image"},
		{url:PathMgr.path+"atlas/bulletskin.json",type:"atlas"},
		{url:PathMgr.path+"atlas/othericon.json",type:"atlas"},
		{url:PathMgr.path+"atlas/skillskin.json",type:"atlas"},
		{url:PathMgr.path+"asset.dat",type:"arraybuffer"},
		{url:PathMgr.path_miniani+"miniani.json",type:"atlas"},
		{url:PathMgr.path_miniani+"miniani"+".ani",type:"json"},
		{url:PathMgr.path_miniani+"number.json",type:"atlas"},
		{url:PathMgr.path_miniani+"number"+".ani",type:"json"},
		{url:PathMgr.path_miniani+"roleani.json",type:"atlas"},
		{url:PathMgr.path_miniani+"roleani"+".ani",type:"json"},
		{url:PathMgr.path_miniani+"weapon.json",type:"atlas"},
		{url:PathMgr.path_miniani+"weapon"+".ani",type:"json"},
		{url:PathMgr.path_miniani+"imgani"+".ani",type:"json"},
		{url:PathMgr.path_sound+"buttonsound"+SoundMgr.soundformat,type:"sound"},
		{url:PathMgr.path_sound+"goldsound"+SoundMgr.soundformat,type:"sound"},
		{url:PathMgr.path_sound+"atreadsound"+SoundMgr.soundformat,type:"sound"},
		{url:PathMgr.path_sound+"bomsound"+SoundMgr.soundformat,type:"sound"},
		{url:PathMgr.path_sound+"boxobjectflysound"+SoundMgr.soundformat,type:"sound"},
		{url:PathMgr.path_sound+"blocksound"+SoundMgr.soundformat,type:"sound"},
		{url:PathMgr.path_sound+"springsound"+SoundMgr.soundformat,type:"sound"},
		{url:PathMgr.path_sound+"propsound"+SoundMgr.soundformat,type:"sound"},
		{url:PathMgr.path_sound+"magnetsound"+SoundMgr.soundformat,type:"sound"},
		{url:PathMgr.path_sound+"speedsound"+SoundMgr.soundformat,type:"sound"},
		{url:PathMgr.path_sound+"hurtsound"+SoundMgr.soundformat,type:"sound"},
		{url:PathMgr.path_sound+"shootsound"+SoundMgr.soundformat,type:"sound"},
		{url:PathMgr.path_sound+"summonsound"+SoundMgr.soundformat,type:"sound"},
		{url:PathMgr.path_sound+"wooddropsound"+SoundMgr.soundformat,type:"sound"},
		{url:PathMgr.path_sound+"starsound"+SoundMgr.soundformat,type:"sound"},
		{url:PathMgr.path_sound+"failsound"+SoundMgr.soundformat,type:"sound"},
		{url:PathMgr.path_sound+"chgweaponsound"+SoundMgr.soundformat,type:"sound"},
		{url:PathMgr.path_sound+"zombiediesound"+SoundMgr.soundformat,type:"sound"},
		{url:PathMgr.path_sound+"jizhongsound"+SoundMgr.soundformat,type:"sound"},
		{url:PathMgr.path_sound+"shellsound"+SoundMgr.soundformat,type:"sound"},
		{url:PathMgr.path_sound+"rocketsound"+SoundMgr.soundformat,type:"sound"},
		{url:PathMgr.path_sound+"patsound"+SoundMgr.soundformat,type:"sound"},
		{url:PathMgr.path_sound+"warnsound"+SoundMgr.soundformat,type:"sound"},
		{url:PathMgr.path_sound+"uplevelsound"+SoundMgr.soundformat,type:"sound"},
		{url:PathMgr.path_sound+"transform"+SoundMgr.soundformat,type:"sound"},
		{url:PathMgr.path_sound+"bullthit0"+SoundMgr.soundformat,type:"sound"},
		{url:PathMgr.path_sound+"bullthit1"+SoundMgr.soundformat,type:"sound"},
		{url:PathMgr.path_sound+"bgsound"+SoundMgr.soundformat,type:"sound"},
		{url:PathMgr.path_sound+"addbulletsound"+SoundMgr.soundformat,type:"sound"}],
		Handler.create(this,this.onLoaded),
		Handler.create(LoadView.getInstance(),LoadView.getInstance().loading,null,false));
		Laya.loader.on("error",this,this.onError);
	}

	//+loading
	__proto.onLoaded=function(){
		Laya.loader.off("error",this,this.onError);
		if(this._handler){
			this._handler.run();
		}
	}

	__proto.onError=function(err){
		Laya.loader.off("error",this,this.onError);
		console.log("加载失败: "+err);
	}

	ResData.getInstance=function(){
		if(!ResData.instance)
			new ResData;
		return ResData.instance;
	}

	ResData.instance=null;
	return ResData;
})()


/**
*皮肤资源
*@author guowc
*
*/
//class modal.config.RoleImgData
var RoleImgData=(function(){
	function RoleImgData(){
		if(RoleImgData.instance)return;
		RoleImgData.instance=this;
	}

	__class(RoleImgData,'modal.config.RoleImgData');
	var __proto=RoleImgData.prototype;
	/**
	*
	*@param data
	*格式 [{url:地址},...]
	*/
	__proto.init=function(data,handler){
		var len=data.length;
		var url;
		var id;
		var ar=[];
		for(var i=0;i<len;i++){
			id=data[i].url;
			url=PathMgr.path+id;
			ar.push({url:url+"base.json",type:"atlas"});
			ar.push({url:url+"base"+".ani",type:"json"});
			MapData.roleData[id]=url;
		}
		Laya.loader.load(ar,Handler.create(this,loaded),
		Handler.create(LoadView.getInstance(),LoadView.getInstance().loading,null,false));
		function loaded (){
			handler.run();
		}
	}

	RoleImgData.getInstance=function(){
		if(!RoleImgData.instance)
			new RoleImgData;
		return RoleImgData.instance;
	}

	RoleImgData.instance=null;
	return RoleImgData;
})()


/**
*敌人AI
*@author guowc
*
*/
//class modal.EnemyAI
var EnemyAI=(function(){
	function EnemyAI(){}
	__class(EnemyAI,'modal.EnemyAI');
	EnemyAI.Thing_0=0;
	EnemyAI.Thing_1=1;
	EnemyAI.Thing_2=2;
	EnemyAI.Thing_3=3;
	EnemyAI.Thing_4=4;
	EnemyAI.Thing_5=5;
	EnemyAI.Thing_6=6;
	EnemyAI.AI100=100;
	EnemyAI.AI102=102;
	EnemyAI.AI103=103;
	EnemyAI.AI105=105;
	EnemyAI.AI108=108;
	EnemyAI.AI109=109;
	EnemyAI.AI115=115;
	EnemyAI.AI119=119;
	EnemyAI.AI201=201;
	EnemyAI.AI202=202;
	EnemyAI.AI301=301;
	EnemyAI.AI302=302;
	EnemyAI.AI303=303;
	EnemyAI.AI305=305;
	EnemyAI.AI405=405;
	EnemyAI.AI407=407;
	EnemyAI.AI408=408;
	EnemyAI.AI410=410;
	EnemyAI.AI412=412;
	EnemyAI.AI413=413;
	EnemyAI.AI421=421;
	EnemyAI.AI422=422;
	EnemyAI.AI406=406;
	return EnemyAI;
})()


/**
*敌人标志图
*@author guowc
*
*/
//class modal.EnemyImg
var EnemyImg=(function(){
	function EnemyImg(){}
	__class(EnemyImg,'modal.EnemyImg');
	EnemyImg.getRectImg=function(type){
		if(!EnemyImg.tf){
			EnemyImg.tf=new Text;
			EnemyImg.tf.color="#ffffff";
		}
		return new Texture;
	}

	EnemyImg.tf=null;
	EnemyImg.dic=null;
	return EnemyImg;
})()


//class modal.HeroInfo
var HeroInfo=(function(){
	function HeroInfo(){
		this.roleInfo=null;
		this.heroNum=7;
		this.obj={};
		this.maxlev=99;
		this.roleInfo=[];
		var dislist=[5,5,5,15,5,5,15];
		var unlockgold=[0,0,80000,-800,-1200,-1800,-2500];
		var hp=[800,1000,1500,3000,2500,3000,5000];
		var miss=[2,2,4,4,6,10,6];
		for(var i=0;i<this.heroNum;i++){
			var vo=new BaseRoleVO;
			vo.id=i;
			vo.skin=(i+1)*100;
			vo.formaturl=PathMgr.path_role+vo.skin+"/";
			vo.imgurl=PathMgr.path_role+vo.skin+"/";
			vo.speed=5;
			vo.unlockgold=unlockgold[i];
			vo.maxlev=this.maxlev;
			vo.hp=vo.basehp=vo.maxhp=hp[i];
			vo.maxexp=this.getExpLev(vo.maxlev-1);
			vo.basemiss=miss[i];
			vo.dis=dislist[i];
			this.roleInfo[i]=vo;
		}
	}

	__class(HeroInfo,'modal.HeroInfo');
	var __proto=HeroInfo.prototype;
	__proto.setBuff=function(roleid,vo){
		switch(roleid){
			case 0:
				vo.jumpnum=2;
				break ;
			case 1:
				vo.clip+=5;
				break ;
			case 2:
				vo.damage0+=15;
				vo.jumpnum=2;
				break ;
			case 3:
				vo.damage1+=20;
				vo.clip+=10;
				break ;
			case 4:
				vo.damage2+=20;
				vo.crit+=5;
				vo.jumpnum=2;
				break ;
			case 5:
				vo.damage0+=30;
				vo.crit+=15;
				vo.jumpnum=2;
				break ;
			case 6:
				vo.damage1+=15;
				vo.damage3+=30;
				vo.clip+=25;
				break ;
			};
		var str="";
		if(vo.damage0>0){
			str+="所有步枪杀伤力+"+vo.damage0+"%\n";
		}
		if(vo.damage1>0){
			str+="所有散弹枪杀伤力+"+vo.damage1+"%\n";
		}
		if(vo.damage2>0){
			str+="所有火枪杀伤力+"+vo.damage2+"%\n";
		}
		if(vo.damage3>0){
			str+="爆破武器杀伤力+"+vo.damage3+"%\n";
		}
		if(vo.clip>0){
			str+="弹药量+"+vo.clip+"%\n";
		}
		if(vo.crit>0){
			str+="爆击率+"+vo.crit+"%\n";
		}
		if(vo.jumpnum==2){
			str+="可以连跳";
		}
		if(str==""){
			str+="无";
		}
		return str;
	}

	__proto.getRoleVO=function(id){
		return this.roleInfo[id];
	}

	__proto.uplevGold=function(lev,idx){
		var info=this.roleInfo[idx];
		var sgold=info.unlockgold;
		if(lev==0){
			return sgold;
		};
		var gold=0;
		if(sgold>0){
			gold=sgold*0.1;
			if(gold<100){
				gold=100;
			}
			gold=gold*lev;
			gold=gold>sgold ? sgold :gold;
			}else{
			gold=sgold*0.05;
			var num=1+(lev-1)*0.5;
			gold=gold*num;
			gold=gold<sgold ? sgold :gold;
		}
		return gold;
	}

	/**
	*等级取得经验
	*@param lev
	*@return
	*
	*/
	__proto.getExpLev=function(lev){
		var exp=500;
		var i=0;
		var texp=0;
		while(true){
			i++;
			if(i>lev){
				break ;
			}
			if(exp>15000000){
				texp=600000;
				}if(exp>8000000){
				texp=500000;
				}else if(exp>4000000){
				texp=400000;
				}else if(exp>500000){
				texp=300000;
				}else if(i>=3){
				texp=exp;
				}else{
				texp=exp*2;
			}
			exp+=texp;
		}
		return exp;
	}

	/**
	*经验取得等级
	*@param hexp 经验值
	*@return {lev:等级 exp:当前等级的经验 texp:当前等级升级需要经验}
	*
	*/
	__proto.getLevAndExp=function(hexp){
		var exp=500;
		var i=0;
		var levexp=hexp;
		var texp=0;
		while(true){
			i++;
			if(exp>15000000){
				texp=600000;
				}else if(exp>8000000){
				texp=500000;
				}else if(exp>4000000){
				texp=400000;
				}else if(exp>500000){
				texp=300000;
				}else if(i>=3){
				texp=exp;
				}else{
				texp=exp*2;
			}
			exp+=texp;
			if(hexp-exp<0){
				this.obj.lev=i;
				this.obj.exp=levexp;
				if(i==1){
					this.obj.texp=texp+500;
					}else{
					this.obj.texp=texp;
				}
				break ;
				}else{
				levexp=hexp-exp;
			}
		}
		return this.obj;
	}

	__proto.getHP=function(lev,roleid){
		var hp=this.getRoleVO(roleid).basehp;
		hp+=lev*hp*0.1;
		return hp;
	}

	__proto.getMiss=function(lev,roleid){
		var miss=this.getRoleVO(roleid).basemiss;
		miss+=(lev-1)>>2;
		return miss;
	}

	return HeroInfo;
})()


/**
*加载资源
*@author guowc
*
*/
//class modal.LoadAsset
var LoadAsset=(function(){
	function LoadAsset(){
		this.handler=null;
		this.loader=null;
		this.data=null;
	}

	__class(LoadAsset,'modal.LoadAsset');
	var __proto=LoadAsset.prototype;
	__proto.putPic=function(path,callBack){
		this.handler=callBack;
		this.next();
	}

	__proto.onError=function(err){
		console.log("load fail",err);
	}

	__proto.removeLoad=function(){
		this.loader.offAll("complete");
		this.loader.offAll("error");
	}

	__proto.next=function(){
		this.loader=new Loader();
		this.loader.on("complete",this,this.loaded);
		this.loader.on("error",this,this.onError);
		this.loader.load(PathMgr.path+"asset.dat","arraybuffer");
	}

	__proto.loaded=function(){
		this.removeLoad();
		var byte=this.loader.data;
		this.start(byte);
	}

	__proto.start=function(byte){
		var by=new ByteArray;
		by.writeArrayBuffer(byte);
		by.endian="bigEndian";
		by.position=0;
		this.data=by.readObject();
		PCData.getInstance().initData(this,this.over);
		PCData.getInstance().pcData(this.data);
	}

	__proto.over=function(){
		if(this.handler)
			this.handler.run();
		this.handler=null;
	}

	LoadAsset.getInstance=function(){
		if(!LoadAsset.instance)
			LoadAsset.instance=new LoadAsset;
		return LoadAsset.instance;
	}

	LoadAsset.instance=null;
	return LoadAsset;
})()


/**
*数据
*@author guowc
*
*/
//class modal.MapData
var MapData=(function(){
	function MapData(){}
	__class(MapData,'modal.MapData');
	MapData.downMapData=function(arr){
		MapData.mapData=arr;
		MapData.mapleny=MapData.mapData.length;
		MapData.maplenx=MapData.mapData[0].length;
		MapData.rect=new Rectangle(0,0,MapData.boxW,MapData.boxH);
	}

	MapData.isHitblock=function(val){
		return (val>MapData.hitblock && val<MapData.jumpWallSort);
	}

	MapData.isScrollMapDraw=function(val){
		return val==MapData.waterSort || val>MapData.hitblock && val<MapData.jumpWallSort || val==1201;
	}

	MapData.newMap=function(dx,dy,boxw,boxh){
		MapData.boxW=boxw;
		MapData.boxH=boxh;
		MapData.boxW2=boxw>>1;
		MapData.boxH2=boxh>>1;
		MapData.rboxW=1/boxw;
		MapData.rboxH=1/boxh;
		var y=0;
		var x=0;
		var data=[];
		modal.MapData.mapData=data;
		for(y=0;y < dy;y++){
			data[y]=[];
			for(x=0;x<dx;x++){
				data[y][x]=0;
			}
		}
	}

	MapData.getType=function(x,y){
		if(!MapData.mapData || x<0 || y<0)return 0;
		var dx=x*MapData.rboxW>>0;
		var dy=y*MapData.rboxH>>0;
		if(dx>MapData.maplenx-1 || dy>MapData.mapleny-1)return 0;
		var val=MapData.mapData[dy][dx];
		if(val<MapData.bgboxSort)return val;
		return 0;
	}

	MapData.getType1=function(dx,dy){
		if(!MapData.mapData)return 0;
		if(dx<0 || dy<0 || dx>MapData.maplenx-1 || dy>MapData.mapleny-1)return 0;
		var val=MapData.mapData[dy][dx];
		if(val<MapData.bgboxSort)return val;
		return 0;
	}

	MapData.isHurt=function(x,y){
		if(!MapData.mapData)return 0;
		var dx=x*MapData.rboxW>>0;
		var dy=y*MapData.rboxH>>0;
		if(dx<0 || dy<0 || dx>MapData.maplenx-1 || dy>MapData.mapleny-1)return 0;
		var type=MapData.mapData[dy][dx];
		if(type>MapData.hurtboxSort)return type;
		return 0;
	}

	MapData.getIsWall=function(x,y){
		if(!MapData.mapData)return false;
		var dx=x*MapData.rboxW>>0;
		var dy=y*MapData.rboxH>>0;
		if(dx<0 || dy<0 || dx>MapData.maplenx-1 || dy>MapData.mapleny-1)return false;
		var val=MapData.mapData[dy][dx];
		if(val>0 && val<MapData.bgboxSort)return true;
		return false;
	}

	MapData.isJumpWall=function(x,y){
		if(!MapData.mapData)return false;
		var dx=x*MapData.rboxW>>0;
		var dy=y*MapData.rboxH>>0;
		if(dx<0 || dy<0 || dx>MapData.maplenx-1 || dy>MapData.mapleny-1)return false;
		var val=MapData.mapData[dy][dx];
		if(val>=MapData.jumpWallSort && val<30000)return true;
		return false;
	}

	MapData.isJumpWallType=function(type){
		return (type>=MapData.jumpWallSort && type<30000);
	}

	MapData.getBitmapData=function(type){
		if(type==0){
			return null;
			}else{
			var boxData=MapData.boxDatas[type];
			if(boxData)
				return boxData.bitmapData;
		}
		return null;
	}

	MapData.getMoveBoxImg=function(type){
		var data=MapData.moveBoxData[type].bitmapData;
		return data;
	}

	MapData.getEnemyImg=function(type){
		return MapData.enemyData[type].bitmapData;
	}

	MapData.getFoodImg=function(type){
		if(!MapData.foodData[type])
			return null;
		return MapData.foodData[type].bitmapData;
	}

	MapData.getFoodData=function(type){
		return MapData.foodData[type];
	}

	MapData.reset=function(){
		MapData.mapData=null;
		MapData.movePtData={};
		MapData.enemyPtData={};
		MapData.foodPtData={};
		MapData.selectedData=null;
	}

	MapData.mapData=null;
	MapData.maplenx=0;
	MapData.mapleny=0;
	MapData.mapName="地图名";
	MapData.sign=1000;
	MapData.isBoss=false;
	MapData.music=0;
	MapData.mapLevel=0;
	MapData.levelLev=1;
	MapData.mapRect=null;
	MapData.mapStartSort="start";
	MapData.mapEndSort="end";
	MapData.boxDatas=[];
	MapData.blevelRects=[];
	MapData.bevel=200;
	MapData.hitblock=10000;
	MapData.jumpWallSort=20000;
	MapData.jumpWallClearSort=21000;
	MapData.moveSortL=998;
	MapData.moveSortR=999;
	MapData.bgboxSort=50000;
	MapData.hurtboxSort=60000;
	MapData.waterSort=50001;
	MapData.magmaSort=60007;
	MapData.springSort=1260;
	MapData.barrierSort=1000;
	MapData.notfood=200;
	MapData.foodGuideSkin=300;
	MapData.drawSort="drawsort";
	MapData.drawData=[];
	MapData.drawData1=[];
	MapData.moveBoxData=null;
	MapData.moveBoxSort="moveblock";
	MapData.foodSort="food";
	MapData.foodSortId=5000;
	MapData.foodData=null;
	MapData.enemySort="enemy";
	MapData.enemyData=null;
	MapData.movePtData={};
	MapData.enemyPtData={};
	MapData.foodPtData={};
	MapData.droppts=[];
	MapData.dropptsLen=0;
	MapData.jumppts=[];
	MapData.jumpptsLen=0;
	MapData.enemypts=[];
	MapData.enemyptsLen=0;
	MapData.monsters=null;
	MapData.monsterslen=0;
	MapData.monsterLen=0;
	MapData.monsterNum=0;
	MapData.selectedData=null;
	MapData.up=5201;
	MapData.down=5202;
	MapData.enemypt=5203;
	MapData.door=5204;
	MapData.foodMonsterSkin=400;
	MapData.stageW=960;
	MapData.stageH=600;
	MapData.baseStageH=500;
	MapData.stagewid=960;
	MapData.stagehei=600;
	MapData.minStageW=800;
	MapData.minStageH=500;
	MapData.para=NaN;
	MapData.boxW=32;
	MapData.boxH=32;
	MapData.boxW2=16;
	MapData.boxH2=16;
	MapData.boxW22=64;
	MapData.boxH22=64;
	MapData.boxW3=96;
	MapData.boxH3=96;
	MapData.boxW4=128;
	MapData.boxH4=128;
	MapData.boxW5=160;
	MapData.boxH5=160;
	MapData.mapbgName="";
	MapData.frameRate=60;
	MapData.rect=null;
	MapData.isStart=false;
	MapData.mapfbgNames=null;
	MapData.tryweapon=0;
	MapData.monsterSortlen=0;
	__static(MapData,
	['draw',function(){return this.draw=[[]];},'mapStartRt',function(){return this.mapStartRt=new Rectangle(0,0,0,0);},'mapEndRt',function(){return this.mapEndRt=new Rectangle(0,0,30,10);},'roleData',function(){return this.roleData=new Dictionary;},'bgData',function(){return this.bgData=new Dictionary;},'rboxW',function(){return this.rboxW=1/32;},'rboxH',function(){return this.rboxH=1/32;},'rectpix',function(){return this.rectpix=new Rectangle(0,0,1,1);}
	]);
	return MapData;
})()


//class modal.MountInfo
var MountInfo=(function(){
	function MountInfo(){
		this.mountInfo=null;
		this.mountnum=3;
		this.mountInfo=[
		{hp:5,hpstep:1,clipstart:10,clipstep:1 ,speed:6 ,gold:120000 ,maxlev:20,skin:1 ,type:0},
		{hp:10,hpstep:2,clipstart:15,clipstep:1.5,speed:6,gold:-600 ,maxlev:24,skin:2 ,type:0},
		{hp:20,hpstep:2.5,clipstart:20,clipstep:2 ,speed:6,gold:-1500 ,maxlev:28,skin:3 ,type:0}];
	}

	__class(MountInfo,'modal.MountInfo');
	var __proto=MountInfo.prototype;
	__proto.uplevGold=function(lev,idx){
		var sgold=this.mountInfo[idx].gold;
		var maxlev=this.mountInfo[idx].maxlev;
		if(lev==0){
			return sgold;
		};
		var gold=0;
		if(sgold>0){
			gold=sgold/maxlev>>0;
			if(gold<100){
				gold=100;
			}
			gold=gold*lev;
			gold=gold>sgold ? sgold :gold;
			}else{
			gold=sgold/maxlev>>0;
			var num=1+(lev-1)*0.5;
			gold=gold*num>>0;
			gold=gold<sgold ? sgold :gold;
		}
		return gold;
	}

	__proto.getClip=function(idx,lev){
		var obj=this.mountInfo[idx];
		if(!obj)return 0;
		var clip=obj.clipstart;
		var hstep=obj.clipstep;
		for(var i=0;i<lev-1;i++){
			clip+=hstep;
		}
		return clip>>0;
	}

	__proto.getHp=function(idx,lev){
		var obj=this.mountInfo[idx];
		if(!obj)return 0;
		var hp=obj.hp;
		var hstep=obj.hpstep;
		for(var i=0;i<lev-1;i++){
			hp+=hstep;
		}
		return hp>>0;
	}

	MountInfo.mountType0=0;
	return MountInfo;
})()


/**
*解析数据
*@author guowc
*
*/
//class modal.PCData
var PCData=(function(){
	function PCData(){
		this.idx=0;
		this.len=0;
		this.fun=null;
		this._caller=null;
		this.datas=null;
		if(PCData.instance)return;
		PCData.instance=this;
	}

	__class(PCData,'modal.PCData');
	var __proto=PCData.prototype;
	__proto.initData=function(caller,ok){
		this._caller=caller;
		this.fun=ok;
	}

	__proto.pcData=function(ar){
		this.idx=0;
		this.datas=ar;
		this.len=ar.length;
		this.next();
	}

	__proto.next=function(){
		var mydata=this.datas[this.idx];
		var data=mydata.data;
		var name=mydata.name;
		switch(name){
			case "mapbaseicon.dat":
				BaseIconData.getInstance().init(data,Handler.create(this,this.over));
				break ;
			case "mapmoveicon.dat":
				MoveIconData.getInstance().init(data,Handler.create(this,this.over));
				break ;
			case "enemydata.dat":
				EnemyData.getInstance().init(data,Handler.create(this,this.over));
				break ;
			case "fooddata.dat":
				FoodData.getInstance().init(data,Handler.create(this,this.over));
				break ;
			case "mapbgimg.dat":
				MapBgData.getInstance().init(data,Handler.create(this,this.over));
				break ;
			case "mountimg.dat":
			case "enemyimg.dat":
			case "roleimg.dat":
				RoleImgData.getInstance().init(data,Handler.create(this,this.over));
				break ;
			case "map.dat":
				LevelMgr.getInstance().setData(data);
				this.over(null);
				break ;
			case "drawrect.dat":
				DrawData.getInstance().init1(data,Handler.create(this,this.over));
				break ;
			case "draw":
				break
			}
	}

	__proto.over=function(pa){
		this.idx++;
		if(this.idx>=this.len){
			this.fun.apply(this._caller);
			}else{
			this.next();
		}
	}

	PCData.getInstance=function(){
		if(!PCData.instance)
			new PCData;
		return PCData.instance;
	}

	PCData.instance=null;
	return PCData;
})()


/**
*武器信息
*@author guowc
*
*/
//class modal.WeaponInfo
var WeaponInfo=(function(){
	function WeaponInfo(){
		this.weaponnum=0;
		this.weaponInfo=null;
		this.infoObj=null;
		this.weaponInfo=[
		{add:1 ,hurtstart:30,hurtstep:3 ,gay:5 ,gold:2000 ,maxlev:20,skin:0 ,ang:5 ,firenum:1 ,type:0,sound:"gunm4a1sound" ,aoe:0,clip:90,allclip:-1,crit:5},
		{add:2 ,hurtstart:60,hurtstep:5 ,gay:5 ,gold:3000 ,maxlev:20,skin:1 ,ang:5 ,firenum:1 ,type:0,sound:"gunmgsound" ,aoe:0,clip:90,allclip:350,crit:5},
		{add:4 ,hurtstart:250,hurtstep:10,gay:59,gold:6000 ,maxlev:20,skin:2 ,ang:8 ,firenum:5 ,type:1,sound:"gunshotsound" ,aoe:0,clip:1,allclip:38,crit:10},
		{add:3 ,hurtstart:120,hurtstep:6 ,gay:4 ,gold:10000 ,maxlev:20,skin:3 ,ang:5 ,firenum:1 ,type:0,sound:"gunm16sound" ,aoe:0,clip:120,allclip:400,crit:6},
		{add:4 ,hurtstart:240,hurtstep:10,gay:4 ,gold:30000 ,maxlev:20,skin:4 ,ang:5 ,firenum:1 ,type:0,sound:"gun6sound" ,aoe:0,clip:90,allclip:350,crit:6},
		{add:18,hurtstart:3000,hurtstep:100,gay:59,gold:50000 ,maxlev:20,skin:5,ang:0,firenum:1 ,type:7,sound:"rocketsound",aoe:0.2,clip:1,allclip:30,crit:10},
		{add:10,hurtstart:428,hurtstep:30,gay:25,gold:80000 ,maxlev:20,skin:6 ,ang:3 ,firenum:5 ,type:1,sound:"gunshotsound" ,aoe:0,clip:3,allclip:60,crit:10},
		{add:6 ,hurtstart:380,hurtstep:16,gay:2 ,gold:120000 ,maxlev:20,skin:7 ,ang:3 ,firenum:1 ,type:0,sound:"gun3sound" ,aoe:0,clip:120,allclip:500,crit:6},
		{add:3 ,hurtstart:80,hurtstep:8,gay:5 ,gold:-360 ,maxlev:20,skin:8,ang:0 ,firenum:5,type:6,sound:"flamesound",aoe:1,clip:60,allclip:120,crit:8},
		{add:36,hurtstart:3000,hurtstep:100,gay:59,gold:-680,maxlev:20,skin:9 ,ang:0 ,firenum:3 ,type:9,sound:"rocketsound" ,aoe:0.2,clip:1,allclip:30,crit:10},
		{add:8 ,hurtstart:680,hurtstep:20,gay:3 ,gold:220000 ,maxlev:25,skin:10 ,ang:3 ,firenum:1 ,type:0,sound:"gunm17sound" ,aoe:0,clip:90,allclip:400,crit:5},
		{add:4 ,hurtstart:500,hurtstep:9 ,gay:1 ,gold:-1000,maxlev:25,skin:11,ang:0 ,firenum:1 ,type:3,sound:"diansound",aoe:0,clip:120,allclip:500,crit:2},
		{add:10,hurtstart:800,hurtstep:30,gay:2,gold:350000 ,maxlev:25,skin:12,ang:3,firenum:1 ,type:0,sound:"gun8sound",aoe:0,clip:120,allclip:500,crit:8},
		{add:10,hurtstart:1200,hurtstep:30,gay:25,gold:500000 ,maxlev:25,skin:13,ang:3 ,firenum:5 ,type:1,sound:"gunshotsound" ,aoe:0,clip:3,allclip:80,crit:10},
		{add:30,hurtstart:12000,hurtstep:80,gay:59,gold:800000 ,maxlev:25,skin:14,ang:0,firenum:1 ,type:8,sound:"rocketsound",aoe:0.2,clip:1,allclip:32,crit:10},
		{add:6,hurtstart:380,hurtstep:16,gay:5 ,gold:-1500 ,maxlev:28,skin:15,ang:0 ,firenum:5,type:6,sound:"flamesound",aoe:1,clip:80,allclip:200,crit:10},
		{add:18,hurtstart:1600,hurtstep:50,gay:3 ,gold:-2000 ,maxlev:30,skin:16 ,ang:3 ,firenum:1 ,type:0,sound:"riflesound" ,aoe:0,clip:90,allclip:380,crit:10},
		{add:6 ,hurtstart:888 ,hurtstep:38,gay:1 ,gold:-2500,maxlev:30,skin:17,ang:0 ,firenum:1 ,type:4,sound:"diansound",aoe:0,clip:120,allclip:600,crit:8},
		{add:50,hurtstart:20000,hurtstep:250,gay:59,gold:-3000 ,maxlev:30,skin:18,ang:0,firenum:2 ,type:10,sound:"rocketsound",aoe:0.2,clip:1,allclip:35,crit:10}];
		this.weaponnum=this.weaponInfo.length;
		this.infoObj=[];
		this.infoObj[0]={name:"步枪",info:""};
		this.infoObj[1]={name:"散弹枪",info:""};
		this.infoObj[3]={name:"激光枪",info:"(烛热)"};
		this.infoObj[4]={name:"电枪",info:"(过载电流)"};
		this.infoObj[6]={name:"火焰枪",info:"(燃烧 穿透 群伤)"};
		this.infoObj[7]={name:"火箭筒",info:"(爆炸 溅射)"};
		this.infoObj[8]={name:"榴弹",info:"(爆炸 溅射)"};
		this.infoObj[9]={name:"火箭筒",info:"(多发飞弹 爆炸 溅射)"};
		this.infoObj[10]={name:"火焰炮",info:"(爆炸 溅射 追踪 必杀)"};
	}

	__class(WeaponInfo,'modal.WeaponInfo');
	var __proto=WeaponInfo.prototype;
	__proto.uplevGold=function(lev,idx){
		var sgold=this.weaponInfo[idx].gold;
		var maxlev=this.weaponInfo[idx].maxlev;
		if(lev==0){
			return sgold;
		};
		var gold=0;
		if(sgold>0){
			gold=sgold/maxlev>>0;
			if(gold<100){
				gold=100;
			}
			gold=gold*lev;
			gold=gold>sgold ? sgold :gold;
			}else{
			gold=sgold/maxlev>>0;
			var num=1+(lev-1)*0.5;
			gold=gold*num>>0;
			gold=gold<sgold ? sgold :gold;
		}
		return gold;
	}

	__proto.getCrit=function(weaponidx,lev,buffVO){
		var obj=this.weaponInfo[weaponidx];
		var crit=obj.crit;
		var s=(lev-1>>1)<0 ? 0:(lev-1>>1);
		crit+=s;
		if(buffVO){
			crit=crit+buffVO.crit;
		}
		return crit;
	}

	/**
	*
	*@param weaponidx 武器序号
	*@param maxlev
	*@return
	*
	*/
	__proto.getDamage=function(weaponidx,lev,buffVO){
		var obj=this.weaponInfo[weaponidx];
		var damage=obj.hurtstart;
		var add=obj.add;
		var hstep=obj.hurtstep;
		for(var i=0;i<lev-1;i++){
			damage+=hstep+add*i;
		}
		if(buffVO){
			switch(obj.type){
				case 0:
					damage+=damage*buffVO.damage0*0.01;
					break ;
				case 1:
					damage+=damage*buffVO.damage1*0.01;
					break ;
				case 6:
					damage+=damage*buffVO.damage2*0.01;
					break ;
				case 7:
				case 8:
				case 9:
				case 10:
					damage+=damage*buffVO.damage3*0.01;
					break ;
				}
		}
		return damage>>0;
	}

	__proto.getSkin=function(weaponidx){
		if(weaponidx<0)return 0;
		return this.weaponInfo[weaponidx].skin;
	}

	__proto.getType=function(weaponidx){
		return this.weaponInfo[weaponidx].type;
	}

	/**
	*取得武器类型
	*@param idx　
	*@return
	*
	*/
	__proto.getWeaponType=function(idx){
		return this.weaponInfo[idx].type;
	}

	__proto.getWeaponAoe=function(idx){
		return this.weaponInfo[idx].aoe;
	}

	__proto.getTypeInfo=function(idx){
		var obj=this.weaponInfo[idx];
		return this.infoObj[obj.type].name+this.infoObj[obj.type].info;
	}

	/**
	*取得当前子弹夹最大容量
	*@param idx
	*@return
	*
	*/
	__proto.getclip=function(idx){
		return this.weaponInfo[idx].clip;
	}

	/**
	*取得总弹夹
	*@param idx
	*@return
	*
	*/
	__proto.getallclip=function(idx,lev,buffVO){
		var allclip=this.weaponInfo[idx].allclip;
		var type=this.weaponInfo[idx].type;
		if(allclip==-1){
			return-1;
		}
		if(type==0 || type==3 || type==4){
			allclip=lev>1 ? allclip+(lev-1)*4 :allclip;
			}else if(type==7 || type==9 || type==10){
			allclip=allclip+lev*0.5>>0;
			}else if(type==6){
			allclip=lev>1 ? allclip+(lev-1)*2 :allclip;
			}else{
			allclip=lev>1 ? allclip+lev-1 :allclip;
		}
		if(buffVO){
			allclip=allclip+allclip*buffVO.clip*0.01>>0;
		}
		return allclip;
	}

	__proto.getClipInfo=function(weaponidx){
		var allclip=this.getallclip(weaponidx,GlobalAPI.heroproxy.getWeaponLev(weaponidx))+"";
		if(allclip=="-1"){
			allclip="∞";
		}
		return this.getclip(weaponidx)+"/"+allclip;
	}

	WeaponInfo.weaponType0=0;
	WeaponInfo.weaponType1=1;
	WeaponInfo.weaponType2=2;
	WeaponInfo.weaponType3=3;
	WeaponInfo.weaponType4=4;
	WeaponInfo.weaponType6=6;
	WeaponInfo.weaponType7=7;
	WeaponInfo.weaponType8=8;
	WeaponInfo.weaponType9=9;
	WeaponInfo.weaponType10=10;
	return WeaponInfo;
})()


//class modal.WeaponPtInfo
var WeaponPtInfo=(function(){
	function WeaponPtInfo(){
		this.weaponShellPts=null;
		//弹壳落出坐标
		this.pts=null;
		//英雄拿枪坐标
		this.weaponFirePts=null;
		this.pts=[];
		this.pts[0]=[
		new Point(70,-48),
		new Point(73,-48),
		new Point(65,-48),
		new Point(73,-48),
		new Point(55,-48),
		new Point(55,-48),
		new Point(70,-48),
		new Point(85,-48),
		new Point(88,-48),
		new Point(70,-48),
		new Point(73,-48),
		new Point(65,-48),
		new Point(95,-48),
		new Point(65,-48),
		new Point(65,-48),
		new Point(80,-48),
		new Point(75,-48),
		new Point(60,-48),
		new Point(80,-48)];
		this.pts[1]=[
		new Point(70,-45),
		new Point(73,-45),
		new Point(65,-45),
		new Point(73,-42),
		new Point(55,-42),
		new Point(55,-42),
		new Point(70,-42),
		new Point(85,-42),
		new Point(88,-42),
		new Point(70,-42),
		new Point(73,-42),
		new Point(65,-42),
		new Point(95,-42),
		new Point(65,-42),
		new Point(65,-42),
		new Point(80,-42),
		new Point(75,-42),
		new Point(60,-42),
		new Point(70,-42)];
		this.pts[2]=[
		new Point(70,-52),
		new Point(73,-52),
		new Point(65,-52),
		new Point(73,-52),
		new Point(55,-52),
		new Point(55,-52),
		new Point(70,-52),
		new Point(85,-52),
		new Point(88,-52),
		new Point(70,-52),
		new Point(73,-52),
		new Point(65,-52),
		new Point(95,-52),
		new Point(65,-52),
		new Point(65,-52),
		new Point(80,-52),
		new Point(75,-52),
		new Point(60,-52),
		new Point(70,-52)];
		this.pts[3]=[
		new Point(70,-48),
		new Point(73,-48),
		new Point(65,-48),
		new Point(73,-48),
		new Point(55,-48),
		new Point(55,-48),
		new Point(70,-48),
		new Point(85,-48),
		new Point(88,-48),
		new Point(70,-48),
		new Point(73,-48),
		new Point(65,-48),
		new Point(95,-48),
		new Point(65,-48),
		new Point(65,-48),
		new Point(80,-42),
		new Point(75,-48),
		new Point(60,-48),
		new Point(70,-48)];
		this.pts[4]=[
		new Point(70,-52),
		new Point(73,-52),
		new Point(65,-52),
		new Point(73,-52),
		new Point(55,-52),
		new Point(55,-52),
		new Point(70,-52),
		new Point(85,-52),
		new Point(88,-52),
		new Point(70,-52),
		new Point(73,-52),
		new Point(65,-52),
		new Point(95,-52),
		new Point(65,-52),
		new Point(65,-52),
		new Point(80,-52),
		new Point(75,-52),
		new Point(60,-52),
		new Point(70,-52)];
		this.pts[5]=[
		new Point(70,-52),
		new Point(73,-52),
		new Point(65,-52),
		new Point(73,-52),
		new Point(55,-52),
		new Point(55,-52),
		new Point(70,-52),
		new Point(85,-52),
		new Point(88,-52),
		new Point(70,-52),
		new Point(73,-52),
		new Point(65,-52),
		new Point(95,-52),
		new Point(65,-52),
		new Point(65,-52),
		new Point(80,-52),
		new Point(75,-52),
		new Point(60,-52),
		new Point(70,-52)];
		this.pts[6]=[
		new Point(70,-52),
		new Point(73,-52),
		new Point(65,-52),
		new Point(73,-52),
		new Point(55,-52),
		new Point(55,-52),
		new Point(70,-52),
		new Point(85,-52),
		new Point(88,-52),
		new Point(70,-52),
		new Point(73,-52),
		new Point(65,-52),
		new Point(95,-52),
		new Point(65,-52),
		new Point(65,-52),
		new Point(80,-52),
		new Point(75,-52),
		new Point(60,-52),
		new Point(70,-52)];
		this.weaponShellPts=[
		new Point(10,10),
		new Point(10,10),
		new Point(10,10),
		new Point(10,10),
		new Point(10,10),
		new Point(10,10),
		new Point(10,10),
		new Point(10,10),
		new Point(10,10),
		new Point(10,10),
		new Point(10,10),
		new Point(10,10),
		new Point(10,10),
		new Point(10,10),
		new Point(10,10),
		new Point(10,10),
		new Point(10,10),
		new Point(10,10),
		new Point(10,10)];
		this.weaponFirePts=[
		new Point(32,-5),
		new Point(35,-5),
		new Point(32,-5),
		new Point(35,-2),
		new Point(32,-5),
		new Point(32,-5),
		new Point(32,-5),
		new Point(32,16),
		new Point(46,5),
		new Point(32,0),
		new Point(35,-2),
		new Point(32,-5),
		new Point(42,15),
		new Point(32,-5),
		new Point(32,-5),
		new Point(46,5),
		new Point(48,-5),
		new Point(32,-5),
		new Point(48,5)];
	}

	__class(WeaponPtInfo,'modal.WeaponPtInfo');
	var __proto=WeaponPtInfo.prototype;
	__proto.getFirePt=function(weaponidx){
		return this.weaponFirePts[weaponidx];
	}

	__proto.getWeaponPts=function(roleid){
		return this.pts[roleid];
	}

	__proto.getWeaponPt=function(roleid,weaponidx){
		return this.pts[roleid][weaponidx];
	}

	__proto.getWeaponShellPts=function(){
		return this.weaponShellPts;
	}

	return WeaponPtInfo;
})()


/**
*屏幕自动缩放
*@author guowc
*
*/
//class mylaya.AutoScale
var AutoScale=(function(){
	function AutoScale(){}
	__class(AutoScale,'mylaya.AutoScale');
	AutoScale.getScale=function(screenwid,screenhei,wid,hei){
		var scaleX=screenwid / wid;
		var scaleY=screenhei / hei;
		AutoScale.isHeiSmall=scaleX>scaleY;
		scaleX=scaleY=Math.min(scaleX,scaleY);
		return scaleX;
	}

	AutoScale.autoScale=function(screenwid,screenhei,wid,hei,container){
		var scale=AutoScale.getScale(screenwid,screenhei,wid,hei);
		container.scale(scale,scale,true);
		return scale;
	}

	AutoScale.isHeiSmall=false;
	return AutoScale;
})()


/**
*心跳
*@author guowc
*
*/
//class mylaya.common.heartbeat.HeartManager
var HeartManager=(function(){
	function HeartManager(){
		this.funcHeartLst=null;
		this.startTim=0;
		this._time=0;
		this.timeLst=null;
		this.timeLen=0;
		//定时器执行个数
		this.heartLen=0;
		//心跳执行个数
		this._pause=false;
		this._hastim=false;
		this.k=null;
		this.obj=null;
		this.funcHeartLst=[];
		this.timeLst=[];
		HeartManager.frameDelay=Laya.stage.frameRate=="fast" ? 1000/60 :1000/30;
	}

	__class(HeartManager,'mylaya.common.heartbeat.HeartManager');
	var __proto=HeartManager.prototype;
	__proto.hasTim=function(val){
		this._hastim=val;
	}

	/**
	*
	*@param func
	*@param head 前置执行
	*
	*/
	__proto.add=function(caller,func,head){
		(head===void 0)&& (head=false);
		var obj;
		var $each_obj;
		for($each_obj in this.funcHeartLst){
			obj=this.funcHeartLst[$each_obj];
			if(obj["caller"]==caller && obj["func"]==func)
				return;
		}
		if(head){
			this.funcHeartLst.unshift({caller:caller,func:func});
			}else{
			this.funcHeartLst[this.heartLen]={caller:caller,func:func};
		}
		if(this.heartLen < 1 && this.timeLen < 1){
			this.startTim=Browser.now();
			Laya.timer.frameLoop(1,this,this.heartHandler);
		}
		this.heartLen++;
	}

	__proto.remove=function(caller,func){
		var i=0;
		var len=this.funcHeartLst.length;
		for(i=0;i<len;i++){
			if(this.funcHeartLst[i]["caller"]==caller && this.funcHeartLst[i]["func"]==func){
				this.funcHeartLst.splice(i,1);
				this.heartLen--;
				if(this.heartLen<1 && this.timeLen<1)
					Laya.timer.clear(this,this.heartHandler);
				break ;
			}
		}
	}

	__proto.removeAll=function(){
		this.heartLen=this.timeLen=0;
		this.timeLst.length=this.funcHeartLst.length=0;
		Laya.timer.clear(this,this.heartHandler);
	}

	/**
	*时间以帧率倍数计算为宜
	*@param delay
	*@param func
	*
	*/
	__proto.addTime=function(delay,caller,func){
		var obj;
		var $each_obj;
		for($each_obj in this.timeLst){
			obj=this.timeLst[$each_obj];
			if(obj["caller"]==caller && obj["func"]==func){
				return;
			}
		}
		this.timeLst[this.timeLen]=({cdelay:Browser.now(),delay:delay,caller:caller,func:func});
		if(this.heartLen < 1 && this.timeLen < 1){
			this.startTim=Browser.now();
			Laya.timer.frameLoop(1,this,this.heartHandler);
		}
		this.timeLen++;
	}

	__proto.removeTime=function(caller,func){
		var i=0;
		var len=this.timeLst.length;
		for(i=0;i<len;i++){
			if(this.timeLst[i]["caller"]==caller && this.timeLst[i]["func"]==func){
				this.timeLst.splice(i,1);
				this.timeLen--;
				if(this.heartLen<1 && this.timeLen<1)
					Laya.timer.clear(this,this.heartHandler);
				break ;
			}
		}
	}

	__proto.pause=function(){
		this._pause=true;
	}

	__proto.play=function(){
		this._pause=false;
	}

	__proto.heartHandler=function(){
		if(this._pause)return;
		var len=this.heartLen;
		var i=0;
		var ar=this.funcHeartLst.concat();
		if(this._hastim){
			var tmpTim=this.startTim;
			this.startTim=Browser.now();
			var delayTim=this.startTim-tmpTim;
			var time=delayTim/HeartManager.frameDelay+this._time;
			var curTime=time;
			curTime=curTime<1 ? 0 :curTime;
			this._time=time-curTime;
			for(i=0;i<len;i++){
				this.obj=ar[i];
				this.k=this.obj.func;
				if(this.k !=null){
					switch(this.k.length){
						case 1:
							this.k.apply(this.obj.caller,[delayTim]);
							break ;
						case 2:
							this.k.apply(this.obj.caller,[delayTim,curTime]);
							break ;
						default :
							this.k.apply(this.obj.caller);
						}
				}
			}
			if(this.timeLen>0){
				len=this.timeLen;
				var delay=0;
				for(i=0;i<len;i++){
					this.obj=this.timeLst[i];
					if(!this.obj)continue ;
					delayTim=this.startTim-this.obj.cdelay;
					delay=this.obj.delay;
					if(delayTim >=delay){
						this.obj.cdelay=this.startTim;
						this.k=this.obj.func;
						switch(this.k.length){
							case 1:
								this.k.apply(this.obj.caller,[delayTim]);
								break ;
							default :
								this.k.apply(this.obj.caller);
							}
					}
				}
			}
			}else{
			for(i=0;i<len;i++){
				this.obj=ar[i];
				this.k=this.obj.func;
				if(this.k !=null){
					this.k.apply(this.obj.caller);
				}
			}
		}
	}

	HeartManager.getInstance=function(){
		if(HeartManager._instance==null){
			HeartManager._instance=new HeartManager;
		}
		return HeartManager._instance;
	}

	HeartManager._instance=null;
	HeartManager.frameDelay=NaN;
	return HeartManager;
})()


/**
*角色方向
*@author guowc
*
*/
//class mylaya.common.skin.DirectType
var DirectType=(function(){
	function DirectType(){}
	__class(DirectType,'mylaya.common.skin.DirectType');
	DirectType.GetDir=function(dir){
		switch(dir){
			case 1:
			case 5:
				return "R_";
			case 3:
				return "T_";
			case 2:
			case 4:
				return "TR_";
			case 0:
			case 6:
				return "BR_";
			case 7:
				return "B_";
			default :
				return "";
			}
	}

	DirectType.GetDirAll=function(dir){
		switch(dir){
			case 1:
				return "L_";
			case 5:
				return "R_";
			case 3:
				return "T_";
			case 2:
				return "TL_";
			case 4:
				return "TR_";
			case 0:
				return "BL_";
			case 6:
				return "BR_";
			case 7:
				return "B_";
			default :
				return "";
			}
	}

	DirectType.checkDir=function(x1,y1,x2,y2){
		var dx=x2-x1;
		var dy=y2-y1;
		var t=Math.atan2(dy,dx)*180.0/Math.PI;
		if(t >-112.5 && t <-67.5)return 3;
		else if(t >=-67.5 && t <=-22.5)return 4;
		else if(t >-22.5 && t < 22.5)return 5;
		else if(t >=22.5 && t <=67.5)return 6;
		else if(t > 67.5 && t < 112.5)return 7;
		else if(t >=112.5 && t <=157.5)return 0;
		else if(t > 157.5 && t <=180)return 1;
		else if(t <-157.5)return 1;
		else if(t >=-157.5 && t <=-112.5)return 2;
		return 3;
	}

	DirectType.getDegreeByDir=function(dir){
		switch (dir){
			case 3:
				return-90;
			case 4:
				return-45;
			case 5:
				return 0;
			case 6:
				return 45;
			case 7:
				return 90;
			case 0:
				return 135;
			case 1:
				return 180;
			case 2:
				return-135;
			}
		return 0;
	}

	DirectType.TOP_LEFT=2;
	DirectType.TOP_RIGHT=4;
	DirectType.BOTTOM_LEFT=0;
	DirectType.BOTTOM_RIGHT=6;
	DirectType.BOTTOM=7;
	DirectType.TOP=3;
	DirectType.LEFT=1;
	DirectType.RIGHT=5;
	__static(DirectType,
	['DirList',function(){return this.DirList={
			3:1,
			7:2,
			5:3,
			4:4,
			6:5,
			1:3,
			2:4,
			0:5
			};},'DirListAll',function(){return this.DirListAll={
			3:1,
			7:2,
			5:3,
			4:4,
			6:5,
			1:6,
			2:7,
			0:8
	};}

	]);
	return DirectType;
})()


/**
*状态
*@author guowc
*
*/
//class mylaya.common.skin.RoleStatus
var RoleStatus=(function(){
	function RoleStatus(){}
	__class(RoleStatus,'mylaya.common.skin.RoleStatus');
	RoleStatus.STATUS_STATIC="S_";
	RoleStatus.STATUS_RUN="R_";
	RoleStatus.STATUS_JUMP="J_";
	RoleStatus.STATUS_AIRJUMP="AJ_";
	RoleStatus.STATUS_ATTACK="A_";
	RoleStatus.STATUS_MOUNT="M_";
	RoleStatus.STATUS_DROP="D_";
	RoleStatus.STATUS_WATER="W_";
	RoleStatus.STATUS_OVER="O_";
	RoleStatus.STATUS_PUSH="P_";
	RoleStatus.STATUS_HURT="H_";
	RoleStatus.STATUS_GOOD="G_";
	RoleStatus.STATUS_TRANSFORM="T_";
	RoleStatus.STATUS_FALL="F_";
	return RoleStatus;
})()


/**
*步进数动画
*@author guowc
*
*/
//class mylaya.common.StepNumAni
var StepNumAni=(function(){
	function StepNumAni(){
		this.shp=0;
		this.hp=0;
		this.oldhp=0;
		this._handler=null;
	}

	__class(StepNumAni,'mylaya.common.StepNumAni');
	var __proto=StepNumAni.prototype;
	/**
	*
	*@param val 数字
	*@param handler
	*@param fast 直接到达
	*@param step 递值/step
	*
	*/
	__proto.setData=function(val,handler,fast,stepnum){
		(fast===void 0)&& (fast=false);
		(stepnum===void 0)&& (stepnum=20);
		this.hp=val;
		this._handler=handler;
		if(fast){
			this.oldhp=this.hp;
			this.step();
			return;
		}
		this.shp=Math.ceil(Math.abs((this.hp-this.oldhp)/stepnum));
		this.shp=this.shp<1 ? 1 :this.shp;
		this.shp=this.hp<this.oldhp ?-this.shp :this.shp;
		Laya.timer.loop(20,this,this.step);
	}

	__proto.step=function(){
		if((this.shp>0 && this.oldhp>=this.hp)|| (this.shp<0 && this.oldhp<=this.hp)){
			this.oldhp=this.hp;
			if(this._handler){
				this._handler.runWith(this.oldhp);
				this._handler.recover();
			}
			Laya.timer.clear(this,this.step);
			}else{
			this.oldhp+=this.shp;
		}
		if(this._handler){
			this._handler.runWith(this.oldhp);
		}
	}

	return StepNumAni;
})()


//class mylaya.common.util.Base64
var Base64=(function(){
	function Base64(){
		throw new Error("Base64 class is static container only");
	}

	__class(Base64,'mylaya.common.util.Base64');
	Base64.encode=function(data){
		var bytes=new ByteArray();
		bytes.writeUTFBytes(data);
		return Base64.encodeByteArray(bytes);
	}

	Base64.encodeByteArray=function(data){
		var output="";
		var dataBuffer;
		var outputBuffer=new Array(4);
		data.position=0;
		while (data.bytesAvailable > 0){
			dataBuffer=[];
			for (var i=0;i < 3 && data.bytesAvailable > 0;i++){
				dataBuffer[i]=data.readUnsignedByte();
			}
			outputBuffer[0]=(dataBuffer[0] & 0xfc)>> 2;
			outputBuffer[1]=((dataBuffer[0] & 0x03)<< 4)| ((dataBuffer[1])>> 4);
			outputBuffer[2]=((dataBuffer[1] & 0x0f)<< 2)| ((dataBuffer[2])>> 6);
			outputBuffer[3]=dataBuffer[2] & 0x3f;
			for (var j=dataBuffer.length;j < 3;j++){
				outputBuffer[j+1]=64;
			}
			for (var k=0;k < outputBuffer.length;k++){
				output+=Base64.BASE64_CHARS.charAt(outputBuffer[k]);
			}
		}
		return output;
	}

	Base64.decode=function(data){
		var bytes=Base64.decodeToByteArray(data);
		return bytes.readUTFBytes(bytes.length);
	}

	Base64.decodeToByteArray=function(data){
		var output=new ByteArray();
		var dataBuffer=new Array(4);
		var outputBuffer=new Array(3);
		for (var i=0;i < data.length;i+=4){
			for (var j=0;j < 4 && i+j < data.length;j++){
				dataBuffer[j]=Base64.BASE64_CHARS.indexOf(data.charAt(i+j));
			}
			outputBuffer[0]=(dataBuffer[0] << 2)+((dataBuffer[1] & 0x30)>> 4);
			outputBuffer[1]=((dataBuffer[1] & 0x0f)<< 4)+((dataBuffer[2] & 0x3c)>> 2);
			outputBuffer[2]=((dataBuffer[2] & 0x03)<< 6)+dataBuffer[3];
			for (var k=0;k < outputBuffer.length;k++){
				if (dataBuffer[k+1]==64)break ;
				output.writeByte(outputBuffer[k]);
			}
		}
		output.position=0;
		return output;
	}

	Base64.BASE64_CHARS="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
	Base64.version="1.0.0";
	return Base64;
})()


/**
*<p> <code>Byte</code> 类提供用于优化读取、写入以及处理二进制数据的方法和属性。</p>
*<p><b>注意：</b> <code>Byte</code> 类适用于需要在字节层访问数据的高级开发人员。</p>
*/
//class laya.utils.Byte
var Byte=(function(){
	function Byte(data){
		/**
		*@private
		*是否为小端数据。
		*/
		this._xd_=true;
		this._allocated_=8;
		/**
		*@private
		*原始数据。
		*/
		//this._d_=null;
		/**
		*@private
		*DataView
		*/
		//this._u8d_=null;
		/**@private */
		this._pos_=0;
		/**@private */
		this._length=0;
		if (data){
			this._u8d_=new Uint8Array(data);
			this._d_=new DataView(this._u8d_.buffer);
			this._length=this._d_.byteLength;
			}else {
			this.___resizeBuffer(this._allocated_);
		}
	}

	__class(Byte,'laya.utils.Byte');
	var __proto=Byte.prototype;
	/**@private */
	__proto.___resizeBuffer=function(len){
		try {
			var newByteView=new Uint8Array(len);
			if (this._u8d_ !=null){
				if (this._u8d_.length <=len)newByteView.set(this._u8d_);
				else newByteView.set(this._u8d_.subarray(0,len));
			}
			this._u8d_=newByteView;
			this._d_=new DataView(newByteView.buffer);
			}catch (err){
			throw "___resizeBuffer err:"+len;
		}
	}

	/**
	*<p>常用于解析固定格式的字节流。</p>
	*<p>先从字节流的当前字节偏移位置处读取一个 <code>Uint16</code> 值，然后以此值为长度，读取此长度的字符串。</p>
	*@return 读取的字符串。
	*/
	__proto.getString=function(){
		return this.rUTF(this.getUint16());
	}

	/**
	*从字节流中 <code>start</code> 参数指定的位置开始，读取 <code>len</code> 参数指定的字节数的数据，用于创建一个 <code>Float32Array</code> 对象并返回此对象。
	*@param start 开始位置。
	*@param len 需要读取的字节长度。如果要读取的长度超过可读取范围，则只返回可读范围内的值。
	*@return 读取的 Float32Array 对象。
	*/
	__proto.getFloat32Array=function(start,len){
		var end=start+len;
		end=(end > this._length)? this._length :end;
		var v=new Float32Array(this._d_.buffer.slice(start,end));
		this._pos_=end;
		return v;
	}

	/**
	*从字节流中 <code>start</code> 参数指定的位置开始，读取 <code>len</code> 参数指定的字节数的数据，用于创建一个 <code>Uint8Array</code> 对象并返回此对象。
	*@param start 开始位置。
	*@param len 需要读取的字节长度。如果要读取的长度超过可读取范围，则只返回可读范围内的值。
	*@return 读取的 Uint8Array 对象。
	*/
	__proto.getUint8Array=function(start,len){
		var end=start+len;
		end=(end > this._length)? this._length :end;
		var v=new Uint8Array(this._d_.buffer.slice(start,end));
		this._pos_=end;
		return v;
	}

	/**
	*从字节流中 <code>start</code> 参数指定的位置开始，读取 <code>len</code> 参数指定的字节数的数据，用于创建一个 <code>Int16Array</code> 对象并返回此对象。
	*@param start 开始读取的字节偏移量位置。
	*@param len 需要读取的字节长度。如果要读取的长度超过可读取范围，则只返回可读范围内的值。
	*@return 读取的 Uint8Array 对象。
	*/
	__proto.getInt16Array=function(start,len){
		var end=start+len;
		end=(end > this._length)? this._length :end;
		var v=new Int16Array(this._d_.buffer.slice(start,end));
		this._pos_=end;
		return v;
	}

	/**
	*从字节流的当前字节偏移位置处读取一个 IEEE 754 单精度（32 位）浮点数。
	*@return 单精度（32 位）浮点数。
	*/
	__proto.getFloat32=function(){
		if (this._pos_+4 > this._length)throw "getFloat32 error - Out of bounds";
		var v=this._d_.getFloat32(this._pos_,this._xd_);
		this._pos_+=4;
		return v;
	}

	/**
	*从字节流的当前字节偏移量位置处读取一个 IEEE 754 双精度（64 位）浮点数。
	*@return 双精度（64 位）浮点数。
	*/
	__proto.getFloat64=function(){
		if (this._pos_+8 > this._length)throw "getFloat64 error - Out of bounds";
		var v=this._d_.getFloat64(this._pos_,this._xd_);
		this._pos_+=8;
		return v;
	}

	/**
	*在字节流的当前字节偏移量位置处写入一个 IEEE 754 单精度（32 位）浮点数。
	*@param value 单精度（32 位）浮点数。
	*/
	__proto.writeFloat32=function(value){
		this.ensureWrite(this._pos_+4);
		this._d_.setFloat32(this._pos_,value,this._xd_);
		this._pos_+=4;
	}

	/**
	*在字节流的当前字节偏移量位置处写入一个 IEEE 754 双精度（64 位）浮点数。
	*@param value 双精度（64 位）浮点数。
	*/
	__proto.writeFloat64=function(value){
		this.ensureWrite(this._pos_+8);
		this._d_.setFloat64(this._pos_,value,this._xd_);
		this._pos_+=8;
	}

	/**
	*从字节流的当前字节偏移量位置处读取一个 Int32 值。
	*@return Int32 值。
	*/
	__proto.getInt32=function(){
		if (this._pos_+4 > this._length)throw "getInt32 error - Out of bounds";
		var float=this._d_.getInt32(this._pos_,this._xd_);
		this._pos_+=4;
		return float;
	}

	/**
	*从字节流的当前字节偏移量位置处读取一个 Uint32 值。
	*@return Uint32 值。
	*/
	__proto.getUint32=function(){
		if (this._pos_+4 > this._length)throw "getUint32 error - Out of bounds";
		var v=this._d_.getUint32(this._pos_,this._xd_);
		this._pos_+=4;
		return v;
	}

	/**
	*在字节流的当前字节偏移量位置处写入指定的 Int32 值。
	*@param value 需要写入的 Int32 值。
	*/
	__proto.writeInt32=function(value){
		this.ensureWrite(this._pos_+4);
		this._d_.setInt32(this._pos_,value,this._xd_);
		this._pos_+=4;
	}

	/**
	*在字节流的当前字节偏移量位置处写入 Uint32 值。
	*@param value 需要写入的 Uint32 值。
	*/
	__proto.writeUint32=function(value){
		this.ensureWrite(this._pos_+4);
		this._d_.setUint32(this._pos_,value,this._xd_);
		this._pos_+=4;
	}

	/**
	*从字节流的当前字节偏移量位置处读取一个 Int16 值。
	*@return Int16 值。
	*/
	__proto.getInt16=function(){
		if (this._pos_+2 > this._length)throw "getInt16 error - Out of bounds";
		var us=this._d_.getInt16(this._pos_,this._xd_);
		this._pos_+=2;
		return us;
	}

	/**
	*从字节流的当前字节偏移量位置处读取一个 Uint16 值。
	*@return Uint16 值。
	*/
	__proto.getUint16=function(){
		if (this._pos_+2 > this._length)throw "getUint16 error - Out of bounds";
		var us=this._d_.getUint16(this._pos_,this._xd_);
		this._pos_+=2;
		return us;
	}

	/**
	*在字节流的当前字节偏移量位置处写入指定的 Uint16 值。
	*@param value 需要写入的Uint16 值。
	*/
	__proto.writeUint16=function(value){
		this.ensureWrite(this._pos_+2);
		this._d_.setUint16(this._pos_,value,this._xd_);
		this._pos_+=2;
	}

	/**
	*在字节流的当前字节偏移量位置处写入指定的 Int16 值。
	*@param value 需要写入的 Int16 值。
	*/
	__proto.writeInt16=function(value){
		this.ensureWrite(this._pos_+2);
		this._d_.setInt16(this._pos_,value,this._xd_);
		this._pos_+=2;
	}

	/**
	*从字节流的当前字节偏移量位置处读取一个 Uint8 值。
	*@return Uint8 值。
	*/
	__proto.getUint8=function(){
		if (this._pos_+1 > this._length)throw "getUint8 error - Out of bounds";
		return this._d_.getUint8(this._pos_++);
	}

	/**
	*在字节流的当前字节偏移量位置处写入指定的 Uint8 值。
	*@param value 需要写入的 Uint8 值。
	*/
	__proto.writeUint8=function(value){
		this.ensureWrite(this._pos_+1);
		this._d_.setUint8(this._pos_,value);
		this._pos_++;
	}

	/**
	*@private
	*从字节流的指定字节偏移量位置处读取一个 Uint8 值。
	*@param pos 字节读取位置。
	*@return Uint8 值。
	*/
	__proto._getUInt8=function(pos){
		return this._d_.getUint8(pos);
	}

	/**
	*@private
	*从字节流的指定字节偏移量位置处读取一个 Uint16 值。
	*@param pos 字节读取位置。
	*@return Uint16 值。
	*/
	__proto._getUint16=function(pos){
		return this._d_.getUint16(pos,this._xd_);
	}

	/**
	*@private
	*使用 getFloat32()读取6个值，用于创建并返回一个 Matrix 对象。
	*@return Matrix 对象。
	*/
	__proto._getMatrix=function(){
		var rst=new Matrix(this.getFloat32(),this.getFloat32(),this.getFloat32(),this.getFloat32(),this.getFloat32(),this.getFloat32());
		return rst;
	}

	/**
	*@private
	*读取指定长度的 UTF 型字符串。
	*@param len 需要读取的长度。
	*@return 读取的字符串。
	*/
	__proto.rUTF=function(len){
		var v="",max=this._pos_+len,c=0,c2=0,c3=0,f=String.fromCharCode;
		var u=this._u8d_,i=0;
		while (this._pos_ < max){
			c=u[this._pos_++];
			if (c < 0x80){
				if (c !=0){
					v+=f(c);
				}
				}else if (c < 0xE0){
				v+=f(((c & 0x3F)<< 6)| (u[this._pos_++] & 0x7F));
				}else if (c < 0xF0){
				c2=u[this._pos_++];
				v+=f(((c & 0x1F)<< 12)| ((c2 & 0x7F)<< 6)| (u[this._pos_++] & 0x7F));
				}else {
				c2=u[this._pos_++];
				c3=u[this._pos_++];
				v+=f(((c & 0x0F)<< 18)| ((c2 & 0x7F)<< 12)| ((c3 << 6)& 0x7F)| (u[this._pos_++] & 0x7F));
			}
			i++;
		}
		return v;
	}

	/**
	*@private
	*读取 <code>len</code> 参数指定的长度的字符串。
	*@param len 要读取的字符串的长度。
	*@return 指定长度的字符串。
	*/
	__proto.getCustomString=function(len){
		var v="",ulen=0,c=0,c2=0,f=String.fromCharCode;
		var u=this._u8d_,i=0;
		while (len > 0){
			c=u[this._pos_];
			if (c < 0x80){
				v+=f(c);
				this._pos_++;
				len--;
				}else {
				ulen=c-0x80;
				this._pos_++;
				len-=ulen;
				while (ulen > 0){
					c=u[this._pos_++];
					c2=u[this._pos_++];
					v+=f((c2 << 8)| c);
					ulen--;
				}
			}
		}
		return v;
	}

	/**
	*清除字节数组的内容，并将 length 和 pos 属性重置为 0。调用此方法将释放 Byte 实例占用的内存。
	*/
	__proto.clear=function(){
		this._pos_=0;
		this.length=0;
	}

	/**
	*@private
	*获取此对象的 ArrayBuffer 引用。
	*@return
	*/
	__proto.__getBuffer=function(){
		return this._d_.buffer;
	}

	/**
	*<p>将 UTF-8 字符串写入字节流。类似于 writeUTF()方法，但 writeUTFBytes()不使用 16 位长度的字为字符串添加前缀。</p>
	*<p>对应的读取方法为： getUTFBytes 。</p>
	*@param value 要写入的字符串。
	*/
	__proto.writeUTFBytes=function(value){
		value=value+"";
		for (var i=0,sz=value.length;i < sz;i++){
			var c=value.charCodeAt(i);
			if (c <=0x7F){
				this.writeByte(c);
				}else if (c <=0x7FF){
				this.ensureWrite(this._pos_+2);
				this._u8d_.set([0xC0 | (c >> 6),0x80 | (c & 0x3F)],this._pos_);
				this._pos_+=2;
				}else if (c <=0xFFFF){
				this.ensureWrite(this._pos_+3);
				this._u8d_.set([0xE0 | (c >> 12),0x80 | ((c >> 6)& 0x3F),0x80 | (c & 0x3F)],this._pos_);
				this._pos_+=3;
				}else {
				this.ensureWrite(this._pos_+4);
				this._u8d_.set([0xF0 | (c >> 18),0x80 | ((c >> 12)& 0x3F),0x80 | ((c >> 6)& 0x3F),0x80 | (c & 0x3F)],this._pos_);
				this._pos_+=4;
			}
		}
	}

	/**
	*<p>将 UTF-8 字符串写入字节流。先写入以字节表示的 UTF-8 字符串长度（作为 16 位整数），然后写入表示字符串字符的字节。</p>
	*<p>对应的读取方法为： getUTFString 。</p>
	*@param value 要写入的字符串值。
	*/
	__proto.writeUTFString=function(value){
		var tPos=this.pos;
		this.writeUint16(1);
		this.writeUTFBytes(value);
		var dPos=this.pos-tPos-2;
		if (dPos >=65536){
			throw "writeUTFString byte len more than 65536";
		}
		this._d_.setUint16(tPos,dPos,this._xd_);
	}

	/**
	*@private
	*读取 UTF-8 字符串。
	*@return 读取的字符串。
	*/
	__proto.readUTFString=function(){
		return this.readUTFBytes(this.getUint16());
	}

	/**
	*<p>从字节流中读取一个 UTF-8 字符串。假定字符串的前缀是一个无符号的短整型（以此字节表示要读取的长度）。</p>
	*<p>对应的写入方法为： writeUTFString 。</p>
	*@return 读取的字符串。
	*/
	__proto.getUTFString=function(){
		return this.readUTFString();
	}

	/**
	*@private
	*读字符串，必须是 writeUTFBytes 方法写入的字符串。
	*@param len 要读的buffer长度，默认将读取缓冲区全部数据。
	*@return 读取的字符串。
	*/
	__proto.readUTFBytes=function(len){
		(len===void 0)&& (len=-1);
		if (len==0)return "";
		var lastBytes=this.bytesAvailable;
		if (len > lastBytes)throw "readUTFBytes error - Out of bounds";
		len=len > 0 ? len :lastBytes;
		return this.rUTF(len);
	}

	/**
	*<p>从字节流中读取一个由 length 参数指定的长度的 UTF-8 字节序列，并返回一个字符串。</p>
	*<p>一般读取的是由 writeUTFBytes 方法写入的字符串。</p>
	*@param len 要读的buffer长度，默认将读取缓冲区全部数据。
	*@return 读取的字符串。
	*/
	__proto.getUTFBytes=function(len){
		(len===void 0)&& (len=-1);
		return this.readUTFBytes(len);
	}

	/**
	*<p>在字节流中写入一个字节。</p>
	*<p>使用参数的低 8 位。忽略高 24 位。</p>
	*@param value
	*/
	__proto.writeByte=function(value){
		this.ensureWrite(this._pos_+1);
		this._d_.setInt8(this._pos_,value);
		this._pos_+=1;
	}

	/**
	*@private
	*从字节流中读取带符号的字节。
	*/
	__proto.readByte=function(){
		if (this._pos_+1 > this._length)throw "readByte error - Out of bounds";
		return this._d_.getInt8(this._pos_++);
	}

	/**
	*<p>从字节流中读取带符号的字节。</p>
	*<p>返回值的范围是从-128 到 127。</p>
	*@return 介于-128 和 127 之间的整数。
	*/
	__proto.getByte=function(){
		return this.readByte();
	}

	/**
	*<p>保证该字节流的可用长度不小于 <code>lengthToEnsure</code> 参数指定的值。</p>
	*@param lengthToEnsure 指定的长度。
	*/
	__proto.ensureWrite=function(lengthToEnsure){
		if (this._length < lengthToEnsure)this._length=lengthToEnsure;
		if (this._allocated_ < lengthToEnsure)this.length=lengthToEnsure;
	}

	/**
	*<p>将指定 arraybuffer 对象中的以 offset 为起始偏移量， length 为长度的字节序列写入字节流。</p>
	*<p>如果省略 length 参数，则使用默认长度 0，该方法将从 offset 开始写入整个缓冲区；如果还省略了 offset 参数，则写入整个缓冲区。</p>
	*<p>如果 offset 或 length 小于0，本函数将抛出异常。</p>
	*$NEXTBIG 由于没有判断length和arraybuffer的合法性，当开发者填写了错误的length值时，会导致写入多余的空白数据甚至内存溢出，为了避免影响开发者正在使用此方法的功能，下个重大版本会修复这些问题。
	*@param arraybuffer 需要写入的 Arraybuffer 对象。
	*@param offset Arraybuffer 对象的索引的偏移量（以字节为单位）
	*@param length 从 Arraybuffer 对象写入到 Byte 对象的长度（以字节为单位）
	*/
	__proto.writeArrayBuffer=function(arraybuffer,offset,length){
		(offset===void 0)&& (offset=0);
		(length===void 0)&& (length=0);
		if (offset < 0 || length < 0)throw "writeArrayBuffer error - Out of bounds";
		if (length==0)length=arraybuffer.byteLength-offset;
		this.ensureWrite(this._pos_+length);
		var uint8array=new Uint8Array(arraybuffer);
		this._u8d_.set(uint8array.subarray(offset,offset+length),this._pos_);
		this._pos_+=length;
	}

	/**
	*获取此对象的 ArrayBuffer 数据，数据只包含有效数据部分。
	*/
	__getset(0,__proto,'buffer',function(){
		var rstBuffer=this._d_.buffer;
		if (rstBuffer.byteLength==this.length)return rstBuffer;
		return rstBuffer.slice(0,this.length);
	});

	/**
	*<p> <code>Byte</code> 实例的字节序。取值为：<code>BIG_ENDIAN</code> 或 <code>BIG_ENDIAN</code> 。</p>
	*<p>主机字节序，是 CPU 存放数据的两种不同顺序，包括小端字节序和大端字节序。通过 <code>getSystemEndian</code> 可以获取当前系统的字节序。</p>
	*<p> <code>BIG_ENDIAN</code> ：大端字节序，地址低位存储值的高位，地址高位存储值的低位。有时也称之为网络字节序。<br/>
	*<code>LITTLE_ENDIAN</code> ：小端字节序，地址低位存储值的低位，地址高位存储值的高位。</p>
	*/
	__getset(0,__proto,'endian',function(){
		return this._xd_ ? "littleEndian" :"bigEndian";
		},function(endianStr){
		this._xd_=(endianStr=="littleEndian");
	});

	/**
	*<p> <code>Byte</code> 对象的长度（以字节为单位）。</p>
	*<p>如果将长度设置为大于当前长度的值，则用零填充字节数组的右侧；如果将长度设置为小于当前长度的值，将会截断该字节数组。</p>
	*<p>如果要设置的长度大于当前已分配的内存空间的字节长度，则重新分配内存空间，大小为以下两者较大者：要设置的长度、当前已分配的长度的2倍，并将原有数据拷贝到新的内存空间中；如果要设置的长度小于当前已分配的内存空间的字节长度，也会重新分配内存空间，大小为要设置的长度，并将原有数据从头截断为要设置的长度存入新的内存空间中。</p>
	*/
	__getset(0,__proto,'length',function(){
		return this._length;
		},function(value){
		if (this._allocated_ < value)
			this.___resizeBuffer(this._allocated_=Math.floor(Math.max(value,this._allocated_ *2)));
		else if (this._allocated_ > value)
		this.___resizeBuffer(this._allocated_=value);
		this._length=value;
	});

	/**
	*移动或返回 Byte 对象的读写指针的当前位置（以字节为单位）。下一次调用读取方法时将在此位置开始读取，或者下一次调用写入方法时将在此位置开始写入。
	*/
	__getset(0,__proto,'pos',function(){
		return this._pos_;
		},function(value){
		this._pos_=value;
	});

	/**
	*可从字节流的当前位置到末尾读取的数据的字节数。
	*/
	__getset(0,__proto,'bytesAvailable',function(){
		return this._length-this._pos_;
	});

	Byte.getSystemEndian=function(){
		if (!Byte._sysEndian){
			var buffer=new ArrayBuffer(2);
			new DataView(buffer).setInt16(0,256,true);
			Byte._sysEndian=(new Int16Array(buffer))[0]===256 ? "littleEndian" :"bigEndian";
		}
		return Byte._sysEndian;
	}

	Byte.BIG_ENDIAN="bigEndian";
	Byte.LITTLE_ENDIAN="littleEndian";
	Byte._sysEndian=null;
	return Byte;
})()


//class mylaya.common.util.DateUtil
var DateUtil=(function(){
	function DateUtil(){}
	__class(DateUtil,'mylaya.common.util.DateUtil');
	DateUtil.getDaysInMonth=function(year,month){
		return new Date(year,++month,0).getDate();
	}

	DateUtil.deltaDay=function(start,end){
		var dtday=DateUtil.getDayOfTheYear(end)-DateUtil.getDayOfTheYear(start);
		var t=end.getFullYear()-start.getFullYear();
		if(t > 0){
			for(var i=0;i < t;i++){
				dtday+=DateUtil.isLeapYear(start.getFullYear()+i)? 366 :365;
			}
		}
		return dtday;
	}

	DateUtil.getDayOfTheYear=function(d){
		var firstDay=new Date(d.getFullYear(),0,1);
		return (d.getTime()-firstDay.getTime())/ 86400000;
	}

	DateUtil.getTimeBetween=function(start,end){
		return end.getTime()-start.getTime();
	}

	DateUtil.isLeapYear=function(year){
		return DateUtil.getDaysInMonth(year,1)==29;
	}

	DateUtil.millisecondsToDays=function(milliseconds){
		return DateUtil.hoursToDays(DateUtil.minutesToHours(DateUtil.secondsToMinutes(DateUtil.millsecondsToSecond(milliseconds))));
	}

	DateUtil.millisecondsToHours=function(milliseconds){
		return DateUtil.minutesToHours(DateUtil.secondsToMinutes(DateUtil.millsecondsToSecond(milliseconds)));
	}

	DateUtil.millsecondsToSecond=function(millseconds){
		return millseconds / 1000;
	}

	DateUtil.secondsToMinutes=function(seconds){
		return seconds / 60;
	}

	DateUtil.minutesToHours=function(minutes){
		return minutes / 60;
	}

	DateUtil.hoursToDays=function(hours){
		return hours / 24;
	}

	DateUtil.daysToHours=function(days){
		return days *24;
	}

	DateUtil.hoursToMinutes=function(hours){
		return hours *60;
	}

	DateUtil.minutesToSeconds=function(minutes){
		return minutes *60;
	}

	DateUtil.secondsToMillSeconds=function(seconds){
		return seconds *1000;
	}

	DateUtil.getTimeString=function(secCount,type){
		(type===void 0)&& (type=100);
		if(secCount<0)secCount=0;
		var hour=secCount/3600>>0;
		var minute=secCount%3600/60>>0;
		var seconds=secCount%60>>0;
		var hourStr=hour > 0 ? String(hour)+" : " :"00 : ";
		var minuteStr=minute > 0 ? String(minute)+" : " :"00 : ";
		var secondsStr=seconds > 0 ? String(seconds):"00";
		var str="";
		hourStr=hourStr.length==4 ? "0"+hourStr :hourStr;
		minuteStr=minuteStr.length==4 ? "0"+minuteStr :minuteStr;
		secondsStr=secondsStr.length==1 ? "0"+secondsStr :secondsStr;
		switch(type){
			case 200:
				str=hourStr+minuteStr+secondsStr;
				break ;
			case 100:
				if(hour>0)
					str+=hourStr;
				if(minute>0 || hour>0)
					str+=minuteStr;
				str+=secondsStr;
				break ;
			}
		return str;
	}

	DateUtil.parseDate=function(date){
		var d=date.split(" ");
		if(d.length < 2)return null;
		var y=d[0].split("-");
		if(y.length < 3)return null;
		var t=d[1].split(":");
		if(t.length < 3)return null;
		return new Date(parseInt(y[0]),parseInt(y[1])-1,parseInt(y[2]),parseInt(t[0]),parseInt(t[1]),parseInt(t[2]));
	}

	DateUtil.parseDateStr=function(date){
		return date.getFullYear()+"-"+(date.getMonth()+1)+"-"+date.getDate()+" "+date.getHours()+":"+date.getMinutes()+":"+date.getSeconds();
	}

	DateUtil.TYPE_EASY=100;
	DateUtil.TYPE_ALL=200;
	return DateUtil;
})()


/**
*DepthManager to manage the depth of display objects.
*
*@author iiley
*/
//class mylaya.common.util.DepthManager
var DepthManager=(function(){
	function DepthManager(){}
	__class(DepthManager,'mylaya.common.util.DepthManager');
	DepthManager.bringToBottom=function(mc){
		var parent=mc.parent;
		if(parent==null){return;}
			if(parent.getChildIndex(mc)!=0){
			parent.setChildIndex(mc,0);
		}
	}

	DepthManager.bringToTop=function(mc){
		var parent=mc.parent;
		if(parent==null)return;
		var maxIndex=parent.numChildren-1;
		if(parent.getChildIndex(mc)!=maxIndex){
			parent.setChildIndex(mc,maxIndex);
		}
	}

	DepthManager.isTop=function(mc){
		var parent=mc.parent;
		if(parent==null)return true;
		return (parent.numChildren-1)==parent.getChildIndex(mc);
	}

	DepthManager.isBottom=function(mc){
		var parent=mc.parent;
		if(parent==null)return true;
		var depth=parent.getChildIndex(mc);
		if(depth==0){
			return true;
		}
		return false;
	}

	DepthManager.isJustBelow=function(mc,aboveMC){
		var parent=mc.parent;
		if(parent==null)return false;
		if(aboveMC.parent !=parent)return false;
		return parent.getChildIndex(mc)==parent.getChildIndex(aboveMC)-1;
	}

	DepthManager.isJustAbove=function(mc,belowMC){
		return DepthManager.isJustBelow(belowMC,mc);
	}

	return DepthManager;
})()


//class mylaya.common.util.FiltersColor
var FiltersColor=(function(){
	function FiltersColor(){}
	__class(FiltersColor,'mylaya.common.util.FiltersColor');
	FiltersColor.init=function(){
		var redMat=
		[
		1,0,0,0,0,
		0,0,0,0,0,
		0,0,0,0,0,
		0,0,0,1,0,];
		FiltersColor.redFilter=[new ColorFilter(redMat)];
		var grayscaleMat=[
		0.3086,0.6094,0.0820,0,0,
		0.3086,0.6094,0.0820,0,0,
		0.3086,0.6094,0.0820,0,0,
		0,0,0,1,0];
		FiltersColor.grayFilter=[new ColorFilter(grayscaleMat)];
	}

	FiltersColor.redFilter=null;
	FiltersColor.grayFilter=null;
	return FiltersColor;
})()


/**
*碰撞检测 效率bitmapData像索碰撞>hitTestPoint>hitTestObject
*@author guowc
*
*/
//class mylaya.common.util.HitTestUtil
var HitTestUtil=(function(){
	function HitTestUtil(){}
	__class(HitTestUtil,'mylaya.common.util.HitTestUtil');
	HitTestUtil.hitTest=function(rectA,rectB){
		if(rectA.x+rectA.width >=rectB.x && rectA.x <=rectB.x+rectB.width &&
			rectA.y+rectA.height >=rectB.y && rectA.y <=rectB.y+rectB.height){
			return true;
		}
		return false;
	}

	HitTestUtil.hitTestPointPix=function(x,y,bd){
		var ar=bd.getPixels(x,y,1,1);
		var i;
		for(var $each_i in ar){
			i=ar[$each_i];
			if(i>0)return true;
		}
		return false;
	}

	return HitTestUtil;
})()


/**
*按键设置
*@author guowc
*
*/
//class mylaya.common.util.KeyUtil
var KeyUtil=(function(){
	function KeyUtil(){}
	__class(KeyUtil,'mylaya.common.util.KeyUtil');
	KeyUtil.init=function(){
		KeyUtil.down=[];
		Laya.stage.on("keydown",null,KeyUtil.keydownHandler);
		Laya.stage.on("keyup",null,KeyUtil.keyupHandler);
		Laya.stage.on("blur",null,KeyUtil.deactivate);
	}

	KeyUtil.initMouse=function(){
		Laya.stage.on("mousedown",null,KeyUtil.mouseHandler);
		Laya.stage.on("mouseup",null,KeyUtil.mouseHandler);
	}

	KeyUtil.allup=function(){
		KeyUtil.down.length=0;
		KeyUtil.mousedown=false;
	}

	KeyUtil.isDown=function(key){
		return(KeyUtil.down[key] ? true :false);
	}

	KeyUtil.keydownHandler=function(evt){
		KeyUtil.down[evt.keyCode]=true;
	}

	KeyUtil.keyupHandler=function(evt){
		KeyUtil.down[evt.keyCode]=false;
	}

	KeyUtil.mouseHandler=function(evt){
		KeyUtil.mousedown=Boolean(evt.type=="mousedown");
	}

	KeyUtil.deactivate=function(evt){
		KeyUtil.allup();
	}

	KeyUtil.down=null;
	KeyUtil.mousedown=false;
	return KeyUtil;
})()


/**
*绘制直线点
*@author guowc
*
*/
//class mylaya.common.util.LinePts
var LinePts=(function(){
	function LinePts(){
		this.poolpts=null;
		this.laserpts=null;
		this.poolpts=[];
		this.laserpts=[];
	}

	__class(LinePts,'mylaya.common.util.LinePts');
	var __proto=LinePts.prototype;
	/**
	*
	*@param sx 起始点
	*@param sy
	*@param ang 角度
	*@param len 节点数
	*@param step 节点距离
	*@return
	*
	*/
	__proto.getlaserPt=function(sx,sy,ang,len,step){
		(step===void 0)&& (step=10);
		this.disposelaserPts();
		ang=ang%360;
		var dx=MathUtil.coss[ang]*step;
		var dy=MathUtil.sins[ang]*step;
		var pt;
		var i=0;
		while(true){
			if(this.poolpts.length>0){
				pt=this.poolpts.pop();
				}else{
				pt=new Point;
			}
			sx+=dx;
			sy+=dy;
			pt.x=sx;
			pt.y=sy;
			this.laserpts[i]=pt;
			i++;
			if(i>len){
				break ;
			}
		}
		return this.laserpts;
	}

	/**
	*
	*@param sx 起始点
	*@param sy
	*@param ang 角度
	*@param rect 节点区域
	*@param step 节点距离
	*@return
	*
	*/
	__proto.getlaserRectPt=function(sx,sy,ang,rect,step){
		(step===void 0)&& (step=10);
		this.disposelaserPts();
		ang=ang%360>>0;
		var dx=MathUtil.coss[ang]*step>>0;
		var dy=MathUtil.sins[ang]*step>>0;
		var pt;
		var i=0;
		if(this.poolpts.length>0){
			pt=this.poolpts.pop();
			}else{
			pt=new Point;
		}
		pt.x=sx;
		pt.y=sy;
		this.laserpts[i]=pt;
		i++;
		while(true){
			if(this.poolpts.length>0){
				pt=this.poolpts.pop();
				}else{
				pt=new Point;
			}
			sx+=dx;
			sy+=dy;
			pt.x=sx;
			pt.y=sy;
			this.laserpts[i]=pt;
			i++;
			if(rect.contains(sx,sy)==false){
				break ;
			}
		}
		return this.laserpts;
	}

	__proto.getlaserRectPt1=function(sx,sy,dx,dy,rect){
		this.disposelaserPts();
		var pt;
		var i=0;
		if(this.poolpts.length>0){
			pt=this.poolpts.pop();
			}else{
			pt=new Point;
		}
		pt.x=sx;
		pt.y=sy;
		this.laserpts[i]=pt;
		i++;
		while(true){
			if(this.poolpts.length>0){
				pt=this.poolpts.pop();
				}else{
				pt=new Point;
			}
			sx+=dx;
			sy+=dy;
			pt.x=sx;
			pt.y=sy;
			this.laserpts[i]=pt;
			i++;
			if(rect.contains(sx,sy)==false){
				break ;
			}
		}
		return this.laserpts;
	}

	__proto.disposelaserPts=function(){
		var len=this.laserpts.length;
		var i=0;
		for(i=0;i<len;i++){
			this.poolpts.push(this.laserpts[i]);
		}
		this.laserpts.length=0;
	}

	return LinePts;
})()


/**
*常用数学计算
*@author guowc
*
*/
//class mylaya.common.util.MathUtil
var MathUtil=(function(){
	function MathUtil(){}
	__class(MathUtil,'mylaya.common.util.MathUtil');
	MathUtil.init=function(){
		if(MathUtil.isInit)return;
		MathUtil.isInit=true;
		MathUtil.sins=[];
		MathUtil.coss=[];
		var i=0;
		for(i=-360;i<361;i++){
			MathUtil.sins[i]=Math.sin(i*MathUtil.radian);
			MathUtil.coss[i]=Math.cos(i*MathUtil.radian);
		}
	}

	MathUtil.getAngPoint=function(spt,ept,isRadian){
		(isRadian===void 0)&& (isRadian=false);
		var dy=ept.y-spt.y;
		var dx=ept.x-spt.x;
		var ang=NaN;
		ang=isRadian ? Math.atan2(dy,dx):Math.atan2(dy,dx)*MathUtil.rotation;
		return ang;
	}

	MathUtil.randomArray=function(list,num){
		var ar=[];
		var len=list.length;
		var ran;
		var i=0;
		while(true){
			ran=list[int(Math.random()*len)];
			if(ar.indexOf(ran)<0){
				ar.push(ran);
				i++;
				if(i>=num)
					break ;
			}
		}
		return ar;
	}

	MathUtil.getrandomArray=function(list){
		if(list.length<1)return list;
		var _list=list.concat();
		var ar=[];
		var ran=0;
		var obj;
		var nowid=0;
		while(true){
			if(nowid==0 && _list.length>1){
				var len=_list.length-1;
				ran=Math.random()*len+1>>0;
				}else{
				ran=Math.random()*_list.length>>0;
			}
			ar.push(_list[ran]);
			_list.splice(ran,1);
			if(_list.length<1){
				break ;
			}
			nowid++;
		}
		return ar;
	}

	MathUtil.getCirlPoint=function(arcAng,radius,startAng,endAng){
		(arcAng===void 0)&& (arcAng=18);
		(radius===void 0)&& (radius=160);
		(startAng===void 0)&& (startAng=-90);
		(endAng===void 0)&& (endAng=270);
		var ang=startAng;
		var cirlPointList=new Array;
		while(ang<endAng){
			ang+=arcAng;
			var dx=Math.cos(ang*MathUtil.radian)*radius;
			var dy=Math.sin(ang*MathUtil.radian)*radius;
			cirlPointList[cirlPointList.length]=new Point(dx,dy);
		}
		return cirlPointList;
	}

	MathUtil.limitAng=function(startang,bevelang,maxdown,maxup){
		var ang=startang;
		var angg=ang-bevelang;
		if(angg>90 && angg<270){
			if(angg<180-maxdown){
				ang=180-maxdown+bevelang;
				}else if(angg>180+maxup){
				ang=180+maxup+bevelang;
			}
			}else{
			if(angg>0){
				if(angg<90 || angg>360){
					if(angg>360+maxdown){
						ang=360+maxdown+bevelang;
						}else if(angg>maxdown && angg<360){
						ang=0+maxdown+bevelang;
					}
					}else if(angg<360-maxup){
					ang=360-maxup+bevelang;
				}
			}
		}
		return ang;
	}

	MathUtil.drawBrokenLine=function(g,fp,tp,lineWidth,lineColor,gap){
		(lineWidth===void 0)&& (lineWidth=1);
		(lineColor===void 0)&& (lineColor="#000000");
		(gap===void 0)&& (gap=10);
		var angle=Math.atan2(tp.y-fp.y,tp.x-fp.x);
		var xGap=gap*Math.cos(angle);
		var yGap=gap*Math.sin(angle);
		var nextP=fp;
		var node=fp.distance(tp.x,tp.y)/(gap*2)>>0;
		var i=0;
		for(i=0;i<node;i++){
			g.drawLine(nextP.x,nextP.y,nextP.x+xGap,nextP.y+yGap,lineColor,lineWidth);
			nextP=new Point(nextP.x+2*xGap,nextP.y+2*yGap);
		}
	}

	MathUtil.sins=null;
	MathUtil.coss=null;
	MathUtil.isInit=false;
	__static(MathUtil,
	['radian',function(){return this.radian=Math.PI/180;},'rotation',function(){return this.rotation=180/Math.PI;}
	]);
	return MathUtil;
})()


/**
*移动至某一物体
*@author guowc
*
*/
//class mylaya.common.util.MoveToThing
var MoveToThing=(function(){
	function MoveToThing(){
		this._x=0;
		this._y=0;
		this.cosVal=NaN;
		this.sinVal=NaN;
		this._show=false;
		this._completeMove=null;
		this.ang=NaN;
		this.step=15;
		//速度
		this._waitTime=0;
		this._disObj=null;
		this._point=null;
	}

	__class(MoveToThing,'mylaya.common.util.MoveToThing');
	var __proto=MoveToThing.prototype;
	__proto.setMoveToThing=function(disObj,point,waitTime,completeMove,step){
		(waitTime===void 0)&& (waitTime=0);
		(step===void 0)&& (step=20);
		this.step=step;
		this._completeMove=completeMove;
		this._waitTime=waitTime;
		this._disObj=disObj;
		this._point=point;
		HeartManager.getInstance().add(this,this.update);
	}

	__proto.offsetXY=function(x,y){
		this._x=x;
		this._y=y;
	}

	__proto.update=function(){
		if(!this._point)return;
		var dx=(this._point.x+this._x-this._disObj.x)/this.step;
		var dy=(this._point.y+this._y-this._disObj.y)/this.step;
		this.ang=Math.atan2(dy,dx);
		this.cosVal=Math.cos(this.ang);
		this.sinVal=Math.sin(this.ang);
		var tmp=0;
		if(this._point){
			var b=true;
			var tt=0;
			tmp=this._disObj.x-this._point.x-this._x;
			tmp=tmp<0 ?-tmp :tmp;
			if(tmp > this.step){
				if(this.cosVal<0){
					tt=(this.cosVal*this.step-0.5)|0;
					tt=tt==0 ?-1 :tt;
					}else{
					tt=(this.cosVal*this.step+0.5)|0;
					tt=tt==0 ? 1 :tt;
				}
				this._disObj.x+=tt;
				b=false;
			}
			tmp=this._disObj.y-this._point.y-this._y;
			tmp=tmp<0 ?-tmp :tmp;
			if(tmp > this.step){
				if(this.sinVal<0){
					tt=(this.sinVal*this.step-0.5)|0;
					tt=tt==0 ?-1 :tt;
					}else{
					tt=(this.sinVal*this.step+0.5)|0;
					tt=tt==0 ? 1 :tt;
				}
				this._disObj.y+=tt;
				b=false;
			}
			if(b){
				this._disObj.x=this._point.x+this._x;
				this._disObj.y=this._point.y+this._y;
				this.onComplete();
			}
		}
	}

	//}
	__proto.setShow=function(val){
		this._show=val;
	}

	__proto.onComplete=function(){
		HeartManager.getInstance().remove(this,this.update);
		if(!this._show){
			if(this._disObj && this._disObj.parent){
				this._disObj.parent.removeChild(this._disObj);
			}
		}
		if(this._completeMove)
			this._completeMove.run();
		this._completeMove=null;
		this._disObj=null;
		this._point=null;
	}

	__proto.dispose=function(){
		this._completeMove=null;
		this.onComplete();
	}

	MoveToThing.add=function(disObj,point,completeMove,step){
		(step===void 0)&& (step=20);
		if(!disObj || !point)return null;
		var instance=new MoveToThing;
		instance.setMoveToThing(disObj,point,0,completeMove,step);
		return instance;
	}

	return MoveToThing;
})()


//class mylaya.common.util.MRandom
var MRandom=(function(){
	function MRandom(){
		this.id=NaN;
		this.num=NaN;
		this._ran=NaN;
		this._all=NaN;
	}

	__class(MRandom,'mylaya.common.util.MRandom');
	var __proto=MRandom.prototype;
	__proto.setRandom=function(ran,all){
		if(ran>all)throw "ran > all";
		this._ran=ran;
		this.id=this._all=all;
		this.num=this._ran;;
	}

	__proto.getRan=function(){
		if(this.id<1){
			this.id=this._all;
			this.num=this._ran;
		}
		if(this.num>0 && Math.random()*this.id<this.num){
			this.num-=1;
			this.id--;
			return true;
		}
		this.id--;
		return false;
	}

	return MRandom;
})()


/**
*页码数据处理
*@author guowc
*
*/
//class mylaya.common.util.PageVO
var PageVO=(function(){
	function PageVO(page,allPage,pageNum,data){
		this._page=0;
		this._allPage=0;
		this._data=null;
		this._pageNum=0;
		this._page=page;
		this._allPage=allPage;
		this._data=data;
		this._pageNum=pageNum;
	}

	__class(PageVO,'mylaya.common.util.PageVO');
	var __proto=PageVO.prototype;
	/**
	*当前页
	*@return
	*
	*/
	__proto.getPage=function(){
		return this._page;
	}

	/**
	*总页
	*@return
	*
	*/
	__proto.getAllPage=function(){
		return this._allPage;
	}

	/**
	*每页最多记录数
	*@return
	*
	*/
	__proto.getPageNum=function(){
		return this._pageNum;
	}

	/**
	*当前页数据
	*@return
	*
	*/
	__proto.getData=function(){
		return this._data;
	}

	PageVO.getAllPage=function(amount,pageNum){
		(pageNum===void 0)&& (pageNum=10);
		var allPage=Math.ceil(amount/pageNum);
		return allPage;
	}

	PageVO.getIdx=function(page,pageNum){
		(pageNum===void 0)&& (pageNum=10);
		return (page-1)*pageNum;
	}

	PageVO.getPage=function(idx,pageNum){
		(pageNum===void 0)&& (pageNum=10);
		var page=uint(idx/pageNum)+1;
		return page;
	}

	PageVO.getPageDatanum=function(page,amount,pageNum){
		var allPage=Math.ceil(amount/pageNum);
		var num=0;
		if(page<allPage){
			num=pageNum;
			}else{
			num=amount-(page-1)*pageNum;
		}
		return num;
	}

	return PageVO;
})()


//class mylaya.effects.shake.ArrayObject
var ArrayObject=(function(){
	function ArrayObject(){}
	__class(ArrayObject,'mylaya.effects.shake.ArrayObject');
	ArrayObject.isIndex=function(array,value,__rest){
		var rest=[];for(var i=2,sz=arguments.length;i<sz;i++)rest.push(arguments[i]);
		var result=-1;
		var select;
		var memory;
		var index=NaN;
		var seach=rest;
		var indexSeach=NaN;
		for(index=0;index < array.length;index++){
			select=array[index];
			for(indexSeach=0;indexSeach < seach.length;indexSeach++){
				if(seach.length !=indexSeach+1)
					select=select[seach[indexSeach]];
				else
				memory=select[seach[indexSeach]];
			}
			if((value instanceof Array)){
				if(value.toString()==memory.toString())
					result=index;
				}else{
				if(value==memory)
					result=index;
			}
			if(-1 !=result)
				break ;
		}
		return result;
	}

	return ArrayObject;
})()


//class mylaya.effects.shake.EffectShake
var EffectShake=(function(){
	function EffectShake(){}
	__class(EffectShake,'mylaya.effects.shake.EffectShake');
	EffectShake.update=function(){
		var index=NaN;
		var len=EffectShake._shake.length;
		for(index=len-1;index >=0;index--){
			EffectShake.shake(index);
		}
		return len;
	}

	EffectShake.addShake=function(cont,xspeed,yspeed,xsteps,ysteps,addTheLast){
		(ysteps===void 0)&& (ysteps=NaN);
		(addTheLast===void 0)&& (addTheLast=false);
		if(cont){
			EffectShake.startX=cont.x;
			EffectShake.startY=cont.y;
			var index=ArrayObject.isIndex(EffectShake._shake,cont,0);
			if(-1==index){
				EffectShake._shake.push([cont,[xspeed,yspeed,xsteps,ysteps]]);
				}else {
				if(addTheLast){
					EffectShake._shake[index].push([xspeed,yspeed,xsteps,ysteps]);
					}else {
					if(EffectShake._shake[index][1][0]+EffectShake._shake[index][1][1] <=xspeed+yspeed){
						EffectShake._shake[index][1]=[xspeed,yspeed,xsteps,ysteps];
					}
				}
			}
		}
	}

	EffectShake.setStartXY=function(dx,dy){
		EffectShake.startX=dx;
		EffectShake.startY=dy;
	}

	EffectShake.removeIndex=function(index){
		EffectShake._shake[index].splice(1,1);
		EffectShake._shake[index][0].x=EffectShake.startX;
		EffectShake._shake[index][0].y=EffectShake.startY;
		if(EffectShake._shake[index].length < 2)
			EffectShake._shake.splice(index,1);
	}

	EffectShake.shake=function(index){
		var value=EffectShake._shake[index];
		var spt=value[0];
		var data=value[1];
		var isShake=false;
		if(!isNaN(data[2])&& data[2] > 0){
			if(spt.x !=EffectShake.startX)
				spt.x=EffectShake.startX;
			else
			spt.x=NumberObject.random(1,-1)*data[0]+EffectShake.startX;
			data[2]--;
			isShake=true;
		}
		if(!isNaN(data[3])&& data[3] > 0){
			if(spt.y !=EffectShake.startY)
				spt.y=EffectShake.startY;
			else
			spt.y=NumberObject.random(1,-1)*data[1]+EffectShake.startY;
			data[3]--;
			isShake=true;
		}
		if(!isShake)
			EffectShake.removeIndex(index);
	}

	EffectShake.deleteMe=function(){
		var index=EffectShake._shake.length-1;
		for(index;index >=0;index--){
			EffectShake._shake[index].splice(2);
			EffectShake.removeIndex(index);
		}
	}

	EffectShake._shake=[];
	EffectShake.startX=0;
	EffectShake.startY=0;
	return EffectShake;
})()


//class mylaya.effects.shake.NumberObject
var NumberObject=(function(){
	function NumberObject(){}
	__class(NumberObject,'mylaya.effects.shake.NumberObject');
	NumberObject.random=function(__rest){
		var rest=arguments;
		return rest[Math.floor(Math.random()*rest.length)];
	}

	return NumberObject;
})()


//class test
var test=(function(){
	function test(){
		this.txt=null;
		Laya.init(Browser.clientWidth,Browser.clientHeight,WebGL);
		Laya.stage.alignV="middle";
		Laya.stage.alignH="center";
		Laya.stage.scaleMode="full";
		Laya.stage.screenAdaptationEnabled=true;
		Laya.stage.bgColor="#232628";
	}

	__class(test,'test');
	var __proto=test.prototype;
	//Mouse.cursor="hand";
	__proto.loadinit=function(){
		Laya.loader.load([
		{url:"t44sd/atlas/comp.png",type:"image"},],
		Handler.create(this,this.onLoaded));
	}

	__proto.onLoaded=function(){
		return;
		var sp=new Sprite;
		sp.loadImage("t44sd/atlas/comp.png");
		var htmlC=sp.drawToCanvas(100,100,0,0);
		var canvas=htmlC.getCanvas();
		var base64Data=canvas.toDataURL();
		console.log("base",base64Data);
		var imgg=new Image;
		imgg.loadImage(base64Data);
		Laya.stage.addChild(imgg);
		this.setup();
	}

	__proto.setup=function(){
		var loader=new Loader();
		loader.on("complete",this,loadedmap);
		loader.load("t44sd/test.dat","arraybuffer");
		function loadedmap (data){
			var by=new ByteArray;
			by.writeArrayBuffer(data);
			by.endian="bigEndian";
			by.position=0;
			var ar=by.readObject();
			var data=ar[0];
			console.log(ar.length,data);
			var img=data[0].img;
			console.log("img",img);
			var imgg=new Image;
			imgg.skin="data:image/png;base64,"+Base64.encodeByteArray(img);
			Laya.stage.addChild(imgg);
			console.log("TT",Base64.encodeByteArray(img));
		}
	}

	__proto.createInteractiveTarget=function(){
		var rect=new Sprite();
		rect.graphics.drawRect(0,0,200,200,"#D2691E");
		rect.size(200,200);
		rect.x=(Laya.stage.width-200)/ 2;
		rect.y=(Laya.stage.height-200)/ 2;
		Laya.stage.addChild(rect);
		this.createLogger();
		rect.on("mousedown",this,this.mouseHandler);
		rect.on("mouseup",this,this.mouseHandler);
		rect.on("click",this,this.mouseHandler);
		rect.on("rightmousedown",this,this.mouseHandler);
		rect.on("rightmouseup",this,this.mouseHandler);
		rect.on("rightclick",this,this.mouseHandler);
		rect.on("mousemove",this,this.mouseHandler);
		rect.on("mouseover",this,this.mouseHandler);
		rect.on("mouseout",this,this.mouseHandler);
		rect.on("doubleclick",this,this.mouseHandler);
		rect.on("mousewheel",this,this.mouseHandler);
	}

	/**
	*鼠标响应事件处理
	*/
	__proto.mouseHandler=function(e){
		switch (e.type){
			case "mousedown":
				this.appendText("\n————————\n左键按下");
				this.downloadCanvasIamge('图片名称');
				break ;
			case "mouseup":
				this.appendText("\n左键抬起");
				break ;
			case "click":
				this.appendText("\n左键点击\n————————");
				break ;
			case "rightmousedown":
				this.appendText("\n————————\n右键按下");
				break ;
			case "rightmouseup":
				this.appendText("\n右键抬起");
				break ;
			case "rightclick":
				this.appendText("\n右键单击\n————————");
				break ;
			case "mousemove":
				if (/鼠标移动\.*$/.test(this.txt.text))
					this.appendText(".");
				else
				this.appendText("\n鼠标移动");
				break ;
			case "mouseover":
				this.appendText("\n鼠标经过目标");
				break ;
			case "mouseout":
				this.appendText("\n鼠标移出目标");
				break ;
			case "doubleclick":
				this.appendText("\n鼠标左键双击\n————————");
				break ;
			case "mousewheel":
				this.appendText("\n鼠标滚轮滚动");
				break ;
			}
	}

	__proto.appendText=function(value){
		this.txt.text+=value;
		this.txt.scrollY=this.txt.maxScrollY;
	}

	/**添加提示文本*/
	__proto.createLogger=function(){
		this.txt=new Text();
		this.txt.overflow=Text.SCROLL;
		this.txt.text="请把鼠标移到到矩形方块,左右键操作触发相应事件\n";
		this.txt.size(Laya.stage.width,Laya.stage.height);
		this.txt.pos(10,50);
		this.txt.fontSize=20;
		this.txt.wordWrap=true;
		this.txt.color="#FFFFFF";
		Laya.stage.addChild(this.txt);
	}

	/**
	*本地选择图片
	*
	*/
	__proto.uploadimg=function(){
		var file=Browser.document.createElement("input");
		file.type="file";
		file.style.position="absolute";
		file.style.zIndex=999;
		Browser.document.body.appendChild(file);
		var fileReader=new Browser.window.FileReader();
		file.onchange=function (e){
			fileReader.readAsDataURL(file.files[0]);
		};
		fileReader.onload=function (evt){
			if(Browser.window.FileReader.DONE==fileReader.readyState){
				var sp=new Sprite();
				sp.loadImage(fileReader.result,0,0,300,300);
				Laya.stage.addChild(sp);
			}
		}
	}

	// 下载Canvas元素的图片
	__proto.downloadCanvasIamge=function(name){
		var sp=new Sprite;
		sp.loadImage("t44sd/atlas/comp.png");
		var htmlC=sp.drawToCanvas(100,100,0,0);
		var canvas=htmlC.getCanvas();
		var url=canvas.toDataURL();
		console.log(url);
		Browser.window.downloadImage(url);
	}

	return test;
})()


/**
*Config 用于配置一些全局参数。如需更改，请在初始化引擎之前设置。
*/
//class Config
var Config=(function(){
	function Config(){}
	__class(Config,'Config');
	Config.WebGLTextCacheCount=500;
	Config.atlasEnable=false;
	Config.showCanvasMark=false;
	Config.animationInterval=50;
	Config.isAntialias=false;
	Config.isAlpha=false;
	Config.premultipliedAlpha=true;
	Config.isStencil=true;
	Config.preserveDrawingBuffer=false;
	return Config;
})()


/**
*<code>Graphics</code> 类用于创建绘图显示对象。Graphics可以同时绘制多个位图或者矢量图，还可以结合save，restore，transform，scale，rotate，translate，alpha等指令对绘图效果进行变化。
*Graphics以命令流方式存储，可以通过cmds属性访问所有命令流。Graphics是比Sprite更轻量级的对象，合理使用能提高应用性能(比如把大量的节点绘图改为一个节点的Graphics命令集合，能减少大量节点创建消耗)。
*@see laya.display.Sprite#graphics
*/
//class laya.display.Graphics
var Graphics=(function(){
	function Graphics(){
		/**@private */
		//this._sp=null;
		/**@private */
		this._one=null;
		/**@private */
		this._cmds=null;
		/**@private */
		//this._vectorgraphArray=null;
		/**@private */
		//this._graphicBounds=null;
		this._render=this._renderEmpty;
		if (Render.isConchNode){
			var _this_=this;
			_this_._nativeObj=new (window)._conchGraphics();
			_this_.id=_this_._nativeObj.conchID;
		}
	}

	__class(Graphics,'laya.display.Graphics');
	var __proto=Graphics.prototype;
	/**
	*<p>销毁此对象。</p>
	*/
	__proto.destroy=function(){
		this.clear();
		if (this._graphicBounds)this._graphicBounds.destroy();
		this._graphicBounds=null;
		this._vectorgraphArray=null;
		this._sp && (this._sp._renderType=0);
		this._sp=null;
	}

	/**
	*<p>清空绘制命令。</p>
	*@param recoverCmds 是否回收绘图指令
	*/
	__proto.clear=function(recoverCmds){
		(recoverCmds===void 0)&& (recoverCmds=false);
		var i=0,len=0;
		if (recoverCmds){
			var tCmd=this._one;
			if (this._cmds){
				len=this._cmds.length;
				for (i=0;i < len;i++){
					tCmd=this._cmds[i];
					if (tCmd && (tCmd.callee===Render._context._drawTexture || tCmd.callee===Render._context._drawTextureWithTransform)){
						tCmd[0]=null;
						Graphics._cache.push(tCmd);
					}
				}
				this._cmds.length=0;
				}else if (tCmd){
				if (tCmd && (tCmd.callee===Render._context._drawTexture || tCmd.callee===Render._context._drawTextureWithTransform)){
					tCmd[0]=null;
					Graphics._cache.push(tCmd);
				}
			}
			}else {
			this._cmds=null;
		}
		this._one=null;
		this._render=this._renderEmpty;
		this._sp && (this._sp._renderType &=~0x01 & ~0x200);
		this._repaint();
		if (this._vectorgraphArray){
			for (i=0,len=this._vectorgraphArray.length;i < len;i++){
				VectorGraphManager.getInstance().deleteShape(this._vectorgraphArray[i]);
			}
			this._vectorgraphArray.length=0;
		}
	}

	/**@private */
	__proto._clearBoundsCache=function(){
		if (this._graphicBounds)this._graphicBounds.reset();
	}

	/**@private */
	__proto._initGraphicBounds=function(){
		if (!this._graphicBounds){
			this._graphicBounds=new GraphicsBounds();
			this._graphicBounds._graphics=this;
		}
	}

	/**
	*@private
	*重绘此对象。
	*/
	__proto._repaint=function(){
		this._clearBoundsCache();
		this._sp && this._sp.repaint();
	}

	/**@private */
	__proto._isOnlyOne=function(){
		return !this._cmds || this._cmds.length===0;
	}

	/**
	*获取位置及宽高信息矩阵(比较耗CPU，频繁使用会造成卡顿，尽量少用)。
	*@param realSize （可选）使用图片的真实大小，默认为false
	*@return 位置与宽高组成的 一个 Rectangle 对象。
	*/
	__proto.getBounds=function(realSize){
		(realSize===void 0)&& (realSize=false);
		this._initGraphicBounds();
		return this._graphicBounds.getBounds(realSize);
	}

	/**
	*@private
	*@param realSize （可选）使用图片的真实大小，默认为false
	*获取端点列表。
	*/
	__proto.getBoundPoints=function(realSize){
		(realSize===void 0)&& (realSize=false);
		this._initGraphicBounds();
		return this._graphicBounds.getBoundPoints(realSize);
	}

	__proto._addCmd=function(a){
		this._cmds=this._cmds || [];
		a.callee=a.shift();
		this._cmds.push(a);
	}

	__proto.setFilters=function(fs){
		this._saveToCmd(Render._context._setFilters,fs);
	}

	/**
	*绘制纹理。
	*@param tex 纹理。
	*@param x （可选）X轴偏移量。
	*@param y （可选）Y轴偏移量。
	*@param width （可选）宽度。
	*@param height （可选）高度。
	*@param m （可选）矩阵信息。
	*@param alpha （可选）透明度。
	*/
	__proto.drawTexture=function(tex,x,y,width,height,m,alpha){
		(x===void 0)&& (x=0);
		(y===void 0)&& (y=0);
		(width===void 0)&& (width=0);
		(height===void 0)&& (height=0);
		(alpha===void 0)&& (alpha=1);
		if (!tex || alpha < 0.01)return null;
		if (!width)width=tex.sourceWidth;
		if (!height)height=tex.sourceHeight;
		alpha=alpha < 0 ? 0 :(alpha > 1 ? 1 :alpha);
		var offset=(!Render.isWebGL && (Browser.onFirefox || Browser.onEdge||Browser.onIE||Browser.onSafari))? 0.5 :0;
		var wRate=width / tex.sourceWidth;
		var hRate=height / tex.sourceHeight;
		width=tex.width *wRate;
		height=tex.height *hRate;
		if (tex.loaded && (width <=0 || height <=0))return null;
		x+=tex.offsetX *wRate;
		y+=tex.offsetY *hRate;
		this._sp && (this._sp._renderType |=0x200);
		var args;
		x-=offset;
		y-=offset;
		width+=2 *offset;
		height+=2 *offset;
		if (Graphics._cache.length){
			args=Graphics._cache.pop();
			args[0]=tex;
			args[1]=x;
			args[2]=y;
			args[3]=width;
			args[4]=height;
			args[5]=m;
			args[6]=alpha;
			}else {
			args=[tex,x,y,width,height,m,alpha];
		}
		args.callee=(m || alpha !=1)? Render._context._drawTextureWithTransform :Render._context._drawTexture;
		if (this._one==null && !m && alpha==1){
			this._one=args;
			this._render=this._renderOneImg;
			}else {
			this._saveToCmd(args.callee,args);
		}
		if (!tex.loaded){
			tex.once("loaded",this,this._textureLoaded,[tex,args]);
		}
		this._repaint();
		return args;
	}

	/**
	*@private 清理贴图并替换为最新的
	*@param tex
	*/
	__proto.cleanByTexture=function(tex,x,y,width,height){
		(width===void 0)&& (width=0);
		(height===void 0)&& (height=0);
		if (!tex)return this.clear();
		if (this._one && this._render===this._renderOneImg){
			if (!width)width=tex.sourceWidth;
			if (!height)height=tex.sourceHeight;
			var wRate=width / tex.sourceWidth;
			var hRate=height / tex.sourceHeight;
			width=tex.width *wRate;
			height=tex.height *hRate;
			x+=tex.offsetX *wRate;
			y+=tex.offsetY *hRate;
			this._one[0]=tex;
			this._one[1]=x;
			this._one[2]=y;
			this._one[3]=width;
			this._one[4]=height;
			}else {
			this.clear();
			tex && this.drawTexture(tex,x,y,width,height);
		}
	}

	/**
	*批量绘制同样纹理。
	*@param tex 纹理。
	*@param pos 绘制坐标。
	*/
	__proto.drawTextures=function(tex,pos){
		if (!tex)return;
		this._saveToCmd(Render._context._drawTextures,[tex,pos]);
	}

	/**
	*用texture填充。
	*@param tex 纹理。
	*@param x X轴偏移量。
	*@param y Y轴偏移量。
	*@param width （可选）宽度。
	*@param height （可选）高度。
	*@param type （可选）填充类型 repeat|repeat-x|repeat-y|no-repeat
	*@param offset （可选）贴图纹理偏移
	*/
	__proto.fillTexture=function(tex,x,y,width,height,type,offset){
		(width===void 0)&& (width=0);
		(height===void 0)&& (height=0);
		(type===void 0)&& (type="repeat");
		if (!tex)return;
		var args=[tex,x,y,width,height,type,offset || Point.EMPTY,{}];
		if (!tex.loaded){
			tex.once("loaded",this,this._textureLoaded,[tex,args]);
		}
		this._saveToCmd(Render._context._fillTexture,args);
	}

	__proto._textureLoaded=function(tex,param){
		param[3]=param[3] || tex.width;
		param[4]=param[4] || tex.height;
		this._repaint();
	}

	/**
	*填充一个圆形。这是一个临时函数，以后会删除，建议用户自己实现。
	*@param x
	*@param y
	*@param tex
	*@param cx 圆心位置。
	*@param cy
	*@param radius
	*@param segNum 分段数，越大越平滑。
	*/
	__proto.fillCircle=function(x,y,tex,cx,cy,radius,segNum){
		tex.bitmap.enableMerageInAtlas=false;
		var verts=new Float32Array((segNum+1)*2);
		var uvs=new Float32Array((segNum+1)*2);
		var indices=new Uint16Array(segNum*3);
		var dang=2 *Math.PI / segNum;
		var cang=0;
		verts[0]=cx;
		verts[1]=cy;
		uvs[0]=cx / tex.width;
		uvs[1]=cy / tex.height;
		var idx=2;
		for (var i=0;i < segNum;i++){
			var px=radius *Math.cos(cang)+cx;
			var py=radius *Math.sin(cang)+cy;
			verts[idx]=px;
			verts[idx+1]=py;
			uvs[idx]=px / tex.width;
			uvs[idx+1]=py / tex.height;
			cang+=dang;
			idx+=2;
		}
		idx=0;
		for (i=0;i < segNum;i++){
			indices[idx++]=0;
			indices[idx++]=i+1;
			indices[idx++]=(i+2 >=segNum+1)?1:(i+2);
		}
		this.drawTriangles(tex,x,y,verts,uvs,indices);
	}

	/**
	*绘制一组三角形
	*@param texture 纹理。
	*@param x X轴偏移量。
	*@param y Y轴偏移量。
	*@param vertices 顶点数组。
	*@param indices 顶点索引。
	*@param uvData UV数据。
	*@param matrix 缩放矩阵。
	*@param alpha alpha
	*@param color 颜色变换
	*@param blendMode blend模式
	*/
	__proto.drawTriangles=function(texture,x,y,vertices,uvs,indices,matrix,alpha,color,blendMode){
		(alpha===void 0)&& (alpha=1);
		this._saveToCmd(Render._context.drawTriangles,[texture,x,y,vertices,uvs,indices,matrix,alpha,color,blendMode]);
	}

	/**
	*@private
	*保存到命令流。
	*/
	__proto._saveToCmd=function(fun,args){
		this._sp && (this._sp._renderType |=0x200);
		if (this._one==null){
			this._one=args;
			this._render=this._renderOne;
			}else {
			this._sp && (this._sp._renderType &=~0x01);
			this._render=this._renderAll;
			(this._cmds || (this._cmds=[])).length===0 && this._cmds.push(this._one);
			this._cmds.push(args);
		}
		args.callee=fun;
		this._repaint();
		return args;
	}

	/**
	*设置剪裁区域，超出剪裁区域的坐标不显示。
	*@param x X 轴偏移量。
	*@param y Y 轴偏移量。
	*@param width 宽度。
	*@param height 高度。
	*/
	__proto.clipRect=function(x,y,width,height){
		this._saveToCmd(Render._context._clipRect,[x,y,width,height]);
	}

	/**
	*在画布上绘制文本。
	*@param text 在画布上输出的文本。
	*@param x 开始绘制文本的 x 坐标位置（相对于画布）。
	*@param y 开始绘制文本的 y 坐标位置（相对于画布）。
	*@param font 定义字号和字体，比如"20px Arial"。
	*@param color 定义文本颜色，比如"#ff0000"。
	*@param textAlign 文本对齐方式，可选值："left"，"center"，"right"。
	*/
	__proto.fillText=function(text,x,y,font,color,textAlign,underLine){
		(underLine===void 0)&& (underLine=0);
		this._saveToCmd(Render._context._fillText,[text,x,y,font || Font.defaultFont,color,textAlign]);
	}

	/**
	*在画布上绘制“被填充且镶边的”文本。
	*@param text 在画布上输出的文本。
	*@param x 开始绘制文本的 x 坐标位置（相对于画布）。
	*@param y 开始绘制文本的 y 坐标位置（相对于画布）。
	*@param font 定义字体和字号，比如"20px Arial"。
	*@param fillColor 定义文本颜色，比如"#ff0000"。
	*@param borderColor 定义镶边文本颜色。
	*@param lineWidth 镶边线条宽度。
	*@param textAlign 文本对齐方式，可选值："left"，"center"，"right"。
	*/
	__proto.fillBorderText=function(text,x,y,font,fillColor,borderColor,lineWidth,textAlign){
		this._saveToCmd(Render._context._fillBorderText,[text,x,y,font || Font.defaultFont,fillColor,borderColor,lineWidth,textAlign]);
	}

	/**
	*在画布上绘制文本（没有填色）。文本的默认颜色是黑色。
	*@param text 在画布上输出的文本。
	*@param x 开始绘制文本的 x 坐标位置（相对于画布）。
	*@param y 开始绘制文本的 y 坐标位置（相对于画布）。
	*@param font 定义字体和字号，比如"20px Arial"。
	*@param color 定义文本颜色，比如"#ff0000"。
	*@param lineWidth 线条宽度。
	*@param textAlign 文本对齐方式，可选值："left"，"center"，"right"。
	*/
	__proto.strokeText=function(text,x,y,font,color,lineWidth,textAlign){
		this._saveToCmd(Render._context._strokeText,[text,x,y,font || Font.defaultFont,color,lineWidth,textAlign]);
	}

	/**
	*设置透明度。
	*@param value 透明度。
	*/
	__proto.alpha=function(value){
		value=value < 0 ? 0 :(value > 1 ? 1 :value);
		this._saveToCmd(Render._context._alpha,[value]);
	}

	/**
	*设置当前透明度。
	*@param value 透明度。
	*/
	__proto.setAlpha=function(value){
		value=value < 0 ? 0 :(value > 1 ? 1 :value);
		this._saveToCmd(Render._context._setAlpha,[value]);
	}

	/**
	*替换绘图的当前转换矩阵。
	*@param mat 矩阵。
	*@param pivotX （可选）水平方向轴心点坐标。
	*@param pivotY （可选）垂直方向轴心点坐标。
	*/
	__proto.transform=function(matrix,pivotX,pivotY){
		(pivotX===void 0)&& (pivotX=0);
		(pivotY===void 0)&& (pivotY=0);
		this._saveToCmd(Render._context._transform,[matrix,pivotX,pivotY]);
	}

	/**
	*旋转当前绘图。(推荐使用transform，性能更高)
	*@param angle 旋转角度，以弧度计。
	*@param pivotX （可选）水平方向轴心点坐标。
	*@param pivotY （可选）垂直方向轴心点坐标。
	*/
	__proto.rotate=function(angle,pivotX,pivotY){
		(pivotX===void 0)&& (pivotX=0);
		(pivotY===void 0)&& (pivotY=0);
		this._saveToCmd(Render._context._rotate,[angle,pivotX,pivotY]);
	}

	/**
	*缩放当前绘图至更大或更小。(推荐使用transform，性能更高)
	*@param scaleX 水平方向缩放值。
	*@param scaleY 垂直方向缩放值。
	*@param pivotX （可选）水平方向轴心点坐标。
	*@param pivotY （可选）垂直方向轴心点坐标。
	*/
	__proto.scale=function(scaleX,scaleY,pivotX,pivotY){
		(pivotX===void 0)&& (pivotX=0);
		(pivotY===void 0)&& (pivotY=0);
		this._saveToCmd(Render._context._scale,[scaleX,scaleY,pivotX,pivotY]);
	}

	/**
	*重新映射画布上的 (0,0)位置。
	*@param x 添加到水平坐标（x）上的值。
	*@param y 添加到垂直坐标（y）上的值。
	*/
	__proto.translate=function(x,y){
		this._saveToCmd(Render._context._translate,[x,y]);
	}

	/**
	*保存当前环境的状态。
	*/
	__proto.save=function(){
		this._saveToCmd(Render._context._save,[]);
	}

	/**
	*返回之前保存过的路径状态和属性。
	*/
	__proto.restore=function(){
		this._saveToCmd(Render._context._restore,[]);
	}

	/**
	*@private
	*替换文本内容。
	*@param text 文本内容。
	*@return 替换成功则值为true，否则值为flase。
	*/
	__proto.replaceText=function(text){
		this._repaint();
		var cmds=this._cmds;
		if (!cmds){
			if (this._one && this._isTextCmd(this._one.callee)){
				if (this._one[0].toUpperCase)this._one[0]=text;
				else this._one[0].setText(text);
				return true;
			}
			}else {
			for (var i=cmds.length-1;i >-1;i--){
				if (this._isTextCmd(cmds[i].callee)){
					if (cmds[i][0].toUpperCase)cmds[i][0]=text;
					else cmds[i][0].setText(text);
					return true;
				}
			}
		}
		return false;
	}

	/**@private */
	__proto._isTextCmd=function(fun){
		return fun===Render._context._fillText || fun===Render._context._fillBorderText || fun===Render._context._strokeText;
	}

	/**
	*@private
	*替换文本颜色。
	*@param color 颜色。
	*/
	__proto.replaceTextColor=function(color){
		this._repaint();
		var cmds=this._cmds;
		if (!cmds){
			if (this._one && this._isTextCmd(this._one.callee)){
				this._one[4]=color;
				if (!this._one[0].toUpperCase)this._one[0].changed=true;
			}
			}else {
			for (var i=cmds.length-1;i >-1;i--){
				if (this._isTextCmd(cmds[i].callee)){
					cmds[i][4]=color;
					if (!cmds[i][0].toUpperCase)cmds[i][0].changed=true;
				}
			}
		}
	}

	/**
	*加载并显示一个图片。
	*@param url 图片地址。
	*@param x （可选）显示图片的x位置。
	*@param y （可选）显示图片的y位置。
	*@param width （可选）显示图片的宽度，设置为0表示使用图片默认宽度。
	*@param height （可选）显示图片的高度，设置为0表示使用图片默认高度。
	*@param complete （可选）加载完成回调。
	*/
	__proto.loadImage=function(url,x,y,width,height,complete){
		var _$this=this;
		(x===void 0)&& (x=0);
		(y===void 0)&& (y=0);
		(width===void 0)&& (width=0);
		(height===void 0)&& (height=0);
		var tex=Loader.getRes(url);
		if (tex)onloaded(tex);
		else Laya.loader.load(url,Handler.create(null,onloaded),null,"image");
		function onloaded (tex){
			if (tex){
				_$this.drawTexture(tex,x,y,width,height);
				if (complete !=null)complete.call(_$this._sp,tex);
			}
		}
	}

	/**
	*@private
	*/
	__proto._renderEmpty=function(sprite,context,x,y){}
	/**
	*@private
	*/
	__proto._renderAll=function(sprite,context,x,y){
		var cmds=this._cmds,cmd;
		for (var i=0,n=cmds.length;i < n;i++){
			(cmd=cmds[i]).callee.call(context,x,y,cmd);
		}
	}

	/**
	*@private
	*/
	__proto._renderOne=function(sprite,context,x,y){
		this._one.callee.call(context,x,y,this._one);
	}

	/**
	*@private
	*/
	__proto._renderOneImg=function(sprite,context,x,y){
		this._one.callee.call(context,x,y,this._one);
		if (sprite._renderType!==2305){
			sprite._renderType |=0x01;
		}
	}

	/**
	*绘制一条线。
	*@param fromX X轴开始位置。
	*@param fromY Y轴开始位置。
	*@param toX X轴结束位置。
	*@param toY Y轴结束位置。
	*@param lineColor 颜色。
	*@param lineWidth （可选）线条宽度。
	*/
	__proto.drawLine=function(fromX,fromY,toX,toY,lineColor,lineWidth){
		(lineWidth===void 0)&& (lineWidth=1);
		var tId=0;
		if (Render.isWebGL){
			tId=VectorGraphManager.getInstance().getId();
			if (this._vectorgraphArray==null)this._vectorgraphArray=[];
			this._vectorgraphArray.push(tId);
		};
		var offset=lineWidth % 2===0 ? 0 :0.5;
		var arr=[fromX+offset,fromY+offset,toX+offset,toY+offset,lineColor,lineWidth,tId];
		this._saveToCmd(Render._context._drawLine,arr);
	}

	/**
	*绘制一系列线段。
	*@param x 开始绘制的X轴位置。
	*@param y 开始绘制的Y轴位置。
	*@param points 线段的点集合。格式:[x1,y1,x2,y2,x3,y3...]。
	*@param lineColor 线段颜色，或者填充绘图的渐变对象。
	*@param lineWidth （可选）线段宽度。
	*/
	__proto.drawLines=function(x,y,points,lineColor,lineWidth){
		(lineWidth===void 0)&& (lineWidth=1);
		var tId=0;
		if (!points || points.length < 4)return;
		if (Render.isWebGL){
			tId=VectorGraphManager.getInstance().getId();
			if (this._vectorgraphArray==null)this._vectorgraphArray=[];
			this._vectorgraphArray.push(tId);
		};
		var offset=lineWidth % 2===0 ? 0 :0.5;
		var arr=[x+offset,y+offset,points,lineColor,lineWidth,tId];
		this._saveToCmd(Render._context._drawLines,arr);
	}

	/**
	*绘制一系列曲线。
	*@param x 开始绘制的 X 轴位置。
	*@param y 开始绘制的 Y 轴位置。
	*@param points 线段的点集合，格式[startx,starty,ctrx,ctry,startx,starty...]。
	*@param lineColor 线段颜色，或者填充绘图的渐变对象。
	*@param lineWidth （可选）线段宽度。
	*/
	__proto.drawCurves=function(x,y,points,lineColor,lineWidth){
		(lineWidth===void 0)&& (lineWidth=1);
		var arr=[x,y,points,lineColor,lineWidth];
		this._saveToCmd(Render._context._drawCurves,arr);
	}

	/**
	*绘制矩形。
	*@param x 开始绘制的 X 轴位置。
	*@param y 开始绘制的 Y 轴位置。
	*@param width 矩形宽度。
	*@param height 矩形高度。
	*@param fillColor 填充颜色，或者填充绘图的渐变对象。
	*@param lineColor （可选）边框颜色，或者填充绘图的渐变对象。
	*@param lineWidth （可选）边框宽度。
	*/
	__proto.drawRect=function(x,y,width,height,fillColor,lineColor,lineWidth){
		(lineWidth===void 0)&& (lineWidth=1);
		var offset=lineColor ? lineWidth / 2 :0;
		var lineOffset=lineColor ? lineWidth :0;
		var arr=[x+offset,y+offset,width-lineOffset,height-lineOffset,fillColor,lineColor,lineWidth];
		this._saveToCmd(Render._context._drawRect,arr);
	}

	/**
	*绘制圆形。
	*@param x 圆点X 轴位置。
	*@param y 圆点Y 轴位置。
	*@param radius 半径。
	*@param fillColor 填充颜色，或者填充绘图的渐变对象。
	*@param lineColor （可选）边框颜色，或者填充绘图的渐变对象。
	*@param lineWidth （可选）边框宽度。
	*/
	__proto.drawCircle=function(x,y,radius,fillColor,lineColor,lineWidth){
		(lineWidth===void 0)&& (lineWidth=1);
		var offset=lineColor ? lineWidth / 2 :0;
		var tId=0;
		if (Render.isWebGL){
			tId=VectorGraphManager.getInstance().getId();
			if (this._vectorgraphArray==null)this._vectorgraphArray=[];
			this._vectorgraphArray.push(tId);
		};
		var arr=[x,y,radius-offset,fillColor,lineColor,lineWidth,tId];
		this._saveToCmd(Render._context._drawCircle,arr);
	}

	/**
	*绘制扇形。
	*@param x 开始绘制的 X 轴位置。
	*@param y 开始绘制的 Y 轴位置。
	*@param radius 扇形半径。
	*@param startAngle 开始角度。
	*@param endAngle 结束角度。
	*@param fillColor 填充颜色，或者填充绘图的渐变对象。
	*@param lineColor （可选）边框颜色，或者填充绘图的渐变对象。
	*@param lineWidth （可选）边框宽度。
	*/
	__proto.drawPie=function(x,y,radius,startAngle,endAngle,fillColor,lineColor,lineWidth){
		(lineWidth===void 0)&& (lineWidth=1);
		var offset=lineColor ? lineWidth / 2 :0;
		var lineOffset=lineColor ? lineWidth :0;
		var tId=0;
		if (Render.isWebGL){
			tId=VectorGraphManager.getInstance().getId();
			if (this._vectorgraphArray==null)this._vectorgraphArray=[];
			this._vectorgraphArray.push(tId);
		};
		var arr=[x+offset,y+offset,radius-lineOffset,startAngle,endAngle,fillColor,lineColor,lineWidth,tId];
		arr[3]=Utils.toRadian(startAngle);
		arr[4]=Utils.toRadian(endAngle);
		this._saveToCmd(Render._context._drawPie,arr);
	}

	/**
	*绘制多边形。
	*@param x 开始绘制的 X 轴位置。
	*@param y 开始绘制的 Y 轴位置。
	*@param points 多边形的点集合。
	*@param fillColor 填充颜色，或者填充绘图的渐变对象。
	*@param lineColor （可选）边框颜色，或者填充绘图的渐变对象。
	*@param lineWidth （可选）边框宽度。
	*/
	__proto.drawPoly=function(x,y,points,fillColor,lineColor,lineWidth){
		(lineWidth===void 0)&& (lineWidth=1);
		var tId=0;
		var tIsConvexPolygon=false;
		if (Render.isWebGL){
			tId=VectorGraphManager.getInstance().getId();
			if (this._vectorgraphArray==null)this._vectorgraphArray=[];
			this._vectorgraphArray.push(tId);
			if (points.length > 6){
				tIsConvexPolygon=false;
				}else {
				tIsConvexPolygon=true;
			}
		};
		var offset=lineColor ? (lineWidth % 2===0 ? 0 :0.5):0;
		var arr=[x+offset,y+offset,points,fillColor,lineColor,lineWidth,tId,tIsConvexPolygon];
		this._saveToCmd(Render._context._drawPoly,arr);
	}

	/**
	*绘制路径。
	*@param x 开始绘制的 X 轴位置。
	*@param y 开始绘制的 Y 轴位置。
	*@param paths 路径集合，路径支持以下格式：[["moveTo",x,y],["lineTo",x,y,x,y,x,y],["arcTo",x1,y1,x2,y2,r],["closePath"]]。
	*@param brush （可选）刷子定义，支持以下设置{fillStyle}。
	*@param pen （可选）画笔定义，支持以下设置{strokeStyle,lineWidth,lineJoin,lineCap,miterLimit}。
	*/
	__proto.drawPath=function(x,y,paths,brush,pen){
		var arr=[x,y,paths,brush,pen];
		this._saveToCmd(Render._context._drawPath,arr);
	}

	/**
	*@private
	*命令流。存储了所有绘制命令。
	*/
	__getset(0,__proto,'cmds',function(){
		return this._cmds;
		},function(value){
		this._sp && (this._sp._renderType |=0x200);
		this._cmds=value;
		this._render=this._renderAll;
		this._repaint();
	});

	Graphics.__init__=function(){
		if (Render.isConchNode){
			var from=laya.display.Graphics.prototype;
			var to=Browser.window.ConchGraphics.prototype;
			var list=["clear","destroy","alpha","rotate","transform","scale","translate","save","restore","clipRect","blendMode","fillText","fillBorderText","_fands","drawRect","drawCircle","drawPie","drawPoly","drawPath","drawImageM","drawLine","drawLines","_drawPs","drawCurves","replaceText","replaceTextColor","_fillImage","fillTexture","setSkinMesh","drawParticle","drawImageS"];
			for (var i=0,len=list.length;i <=len;i++){
				var temp=list[i];
				from[temp]=to[temp];
			}
			from._saveToCmd=null;
			if (to.drawImageS){
				from.drawTextures=function (tex,pos){
					if (!tex)return;
					if (!(tex.loaded && tex.bitmap && tex.source)){
						return;
					};
					var uv=tex.uv,w=tex.bitmap.width,h=tex.bitmap.height;
					this.drawImageS(tex.bitmap.source,uv[0] *w,uv[1] *h,(uv[2]-uv[0])*w,(uv[5]-uv[3])*h,tex.offsetX,tex.offsetY,tex.width,tex.height,pos);
				}
			}
			from.drawTexture=function (tex,x,y,width,height,m,alpha){
				(x===void 0)&& (x=0);
				(y===void 0)&& (y=0);
				(width===void 0)&& (width=0);
				(height===void 0)&& (height=0);
				(alpha===void 0)&& (alpha=1);
				if (!tex)return;
				if (!tex.loaded){
					tex.once("loaded",this,function(){
						this.drawTexture(tex,x,y,width,height,m);
					});
					return;
				}
				if (!(tex.loaded && tex.bitmap && tex.source)){
					return;
				}
				if (!width)width=tex.sourceWidth;
				if (!height)height=tex.sourceHeight;
				alpha=alpha < 0 ? 0 :(alpha > 1 ? 1 :alpha);
				width=width-tex.sourceWidth+tex.width;
				height=height-tex.sourceHeight+tex.height;
				if (width <=0 || height <=0)return;
				x+=tex.offsetX;
				y+=tex.offsetY;
				var uv=tex.uv,w=tex.bitmap.width,h=tex.bitmap.height;
				this.drawImageM(tex.bitmap.source,uv[0] *w,uv[1] *h,(uv[2]-uv[0])*w,(uv[5]-uv[3])*h,x,y,width,height,m,alpha);
				this._repaint();
			}
			from.fillTexture=function (tex,x,y,width,height,type,offset){
				(width===void 0)&& (width=0);
				(height===void 0)&& (height=0);
				(type===void 0)&& (type="repeat");
				if (!tex)return;
				if (tex.loaded){
					var ctxi=Render._context.ctx;
					var w=tex.bitmap.width,h=tex.bitmap.height,uv=tex.uv;
					var pat;
					if (tex.uv !=Texture.DEF_UV){
						pat=ctxi.createPattern(tex.bitmap.source,type,uv[0] *w,uv[1] *h,(uv[2]-uv[0])*w,(uv[5]-uv[3])*h);
						}else {
						pat=ctxi.createPattern(tex.bitmap.source,type);
					};
					var sX=0,sY=0;
					if (offset){
						x+=offset.x % tex.width;
						y+=offset.y % tex.height;
						sX-=offset.x % tex.width;
						sY-=offset.y % tex.height;
					}
					this._fillImage(pat,x,y,sX,sY,width,height);
				}
			}
		}
	}

	Graphics._cache=[];
	return Graphics;
})()


/**
*@private
*<code>ShaderCompile</code> 类用于实现Shader编译。
*/
//class laya.webgl.utils.ShaderCompile
var ShaderCompile=(function(){
	var ShaderNode,InlcudeFile;
	function ShaderCompile(name,vs,ps,nameMap,defs){
		//this._nameMap=null;
		//this._VS=null;
		//this._PS=null;
		var _$this=this;
		function _compile (script){
			var includefiles=[];
			var top=new ShaderNode(includefiles);
			_$this._compileToTree(top,script.split('\n'),0,includefiles,defs);
			return top;
		};
		var startTime=Browser.now();
		this._VS=_compile(vs);
		this._PS=_compile(ps);
		this._nameMap=nameMap;
		if ((Browser.now()-startTime)> 2)
			console.log("ShaderCompile use time:"+(Browser.now()-startTime)+"  size:"+vs.length+"/"+ps.length);
	}

	__class(ShaderCompile,'laya.webgl.utils.ShaderCompile');
	var __proto=ShaderCompile.prototype;
	__proto._compileToTree=function(parent,lines,start,includefiles,defs){
		var node,preNode;
		var text,name,fname;
		var ofs=0,words,noUseNode;
		var i=0,n=0,j=0;
		for (i=start;i < lines.length;i++){
			text=lines[i];
			if (text.length < 1)continue ;
			ofs=text.indexOf("//");
			if (ofs===0)continue ;
			if (ofs >=0)text=text.substr(0,ofs);
			node=noUseNode || new ShaderNode(includefiles);
			noUseNode=null;
			node.text=text;
			node.noCompile=true;
			if ((ofs=text.indexOf("#"))>=0){
				name="#";
				for (j=ofs+1,n=text.length;j < n;j++){
					var c=text.charAt(j);
					if (c===' ' || c==='\t' || c==='?')break ;
					name+=c;
				}
				node.name=name;
				switch (name){
					case "#ifdef":
					case "#ifndef":
						node.src=text;
						node.noCompile=text.match(/[!&|()=<>]/)!=null;
						if (!node.noCompile){
							words=text.replace(/^\s*/,'').split(/\s+/);
							node.setCondition(words[1],name==="#ifdef" ? 1 :2);
							node.text="//"+node.text;
							}else {
							console.log("function():Boolean{return "+text.substr(ofs+node.name.length)+"}");
						}
						node.setParent(parent);
						parent=node;
						if (defs){
							words=text.substr(j).split(ShaderCompile._splitToWordExps3);
							for (j=0;j < words.length;j++){
								text=words[j];
								text.length && (defs[ text]=true);
							}
						}
						continue ;
					case "#if":
						node.src=text;
						node.noCompile=true;
						node.setParent(parent);
						parent=node;
						if (defs){
							words=text.substr(j).split(ShaderCompile._splitToWordExps3);
							for (j=0;j < words.length;j++){
								text=words[j];
								text.length && text!="defined" && (defs[ text]=true);
							}
						}
						continue ;
					case "#else":
						node.src=text;
						parent=parent.parent;
						preNode=parent.childs[parent.childs.length-1];
						node.noCompile=preNode.noCompile
						if (!(node.noCompile)){
							node.condition=preNode.condition;
							node.conditionType=preNode.conditionType==1 ? 2 :1;
							node.text="//"+node.text+" "+preNode.text+" "+node.conditionType;
						}
						node.setParent(parent);
						parent=node;
						continue ;
					case "#endif":
						parent=parent.parent;
						preNode=parent.childs[parent.childs.length-1];
						node.noCompile=preNode.noCompile;
						if (!(node.noCompile)){
							node.text="//"+node.text;
						}
						node.setParent(parent);
						continue ;
					case "#include":
						words=ShaderCompile.splitToWords(text,null);
						var inlcudeFile=ShaderCompile.includes[words[1]];
						if (!inlcudeFile){
							throw "ShaderCompile error no this include file:"+words[1];
							return;
						}
						if ((ofs=words[0].indexOf("?"))< 0){
							node.setParent(parent);
							text=inlcudeFile.getWith(words[2]=='with' ? words[3] :null);
							this._compileToTree(node,text.split('\n'),0,includefiles,defs);
							node.text="";
							continue ;
						}
						node.setCondition(words[0].substr(ofs+1),1);
						node.text=inlcudeFile.getWith(words[2]=='with' ? words[3] :null);
						break ;
					case "#import":
						words=ShaderCompile.splitToWords(text,null);
						fname=words[1];
						includefiles.push({node:node,file:ShaderCompile.includes[fname],ofs:node.text.length});
						continue ;
					}
				}else {
				preNode=parent.childs[parent.childs.length-1];
				if (preNode && !preNode.name){
					includefiles.length > 0 && ShaderCompile.splitToWords(text,preNode);
					noUseNode=node;
					preNode.text+="\n"+text;
					continue ;
				}
				includefiles.length > 0 && ShaderCompile.splitToWords(text,node);
			}
			node.setParent(parent);
		}
	}

	__proto.createShader=function(define,shaderName,createShader){
		var defMap={};
		var defineStr="";
		if (define){
			for (var i in define){
				defineStr+="#define "+i+"\n";
				defMap[i]=true;
			}
		};
		var vs=this._VS.toscript(defMap,[]);
		var ps=this._PS.toscript(defMap,[]);
		return (createShader || Shader.create)(defineStr+vs.join('\n'),defineStr+ps.join('\n'),shaderName,this._nameMap);
	}

	ShaderCompile._parseOne=function(attributes,uniforms,words,i,word,b){
		var one={type:ShaderCompile.shaderParamsMap[words[i+1]],name:words[i+2],size:isNaN(parseInt(words[i+3]))? 1 :parseInt(words[i+3])};
		if (b){
			if (word=="attribute"){
				attributes.push(one);
				}else {
				uniforms.push(one);
			}
		}
		if (words[i+3]==':'){
			one.type=words[i+4];
			i+=2;
		}
		i+=2;
		return i;
	}

	ShaderCompile.addInclude=function(fileName,txt){
		if (!txt || txt.length===0)
			throw new Error("add shader include file err:"+fileName);
		if (ShaderCompile.includes[fileName])
			throw new Error("add shader include file err, has add:"+fileName);
		ShaderCompile.includes[fileName]=new InlcudeFile(txt);
	}

	ShaderCompile.preGetParams=function(vs,ps){
		var text=[vs,ps];
		var result={};
		var attributes=[];
		var uniforms=[];
		var definesInfo={};
		var definesName=[];
		result.attributes=attributes;
		result.uniforms=uniforms;
		result.defines=definesInfo;
		var i=0,n=0,one;
		for (var s=0;s < 2;s++){
			text[s]=text[s].replace(ShaderCompile._removeAnnotation,"");
			var words=text[s].match(ShaderCompile._reg);
			var tempelse;
			for (i=0,n=words.length;i < n;i++){
				var word=words[i];
				if (word !="attribute" && word !="uniform"){
					if (word=="#define"){
						word=words[++i];
						definesName[word]=1;
						continue ;
						}else if (word=="#ifdef"){
						tempelse=words[++i];
						var def=definesInfo[tempelse]=definesInfo[tempelse] || [];
						for (i++;i < n;i++){
							word=words[i];
							if (word !="attribute" && word !="uniform"){
								if (word=="#else"){
									for (i++;i < n;i++){
										word=words[i];
										if (word !="attribute" && word !="uniform"){
											if (word=="#endif"){
												break ;
											}
											continue ;
										}
										i=ShaderCompile._parseOne(attributes,uniforms,words,i,word,!definesName[tempelse]);
									}
								}
								continue ;
							}
							i=ShaderCompile._parseOne(attributes,uniforms,words,i,word,definesName[tempelse]);
						}
					}
					continue ;
				}
				i=ShaderCompile._parseOne(attributes,uniforms,words,i,word,true);
			}
		}
		return result;
	}

	ShaderCompile.splitToWords=function(str,block){
		var out=[];
		var c;
		var ofs=-1;
		var word;
		for (var i=0,n=str.length;i < n;i++){
			c=str.charAt(i);
			if (" \t=+-*/&%!<>()'\",;".indexOf(c)>=0){
				if (ofs >=0 && (i-ofs)> 1){
					word=str.substr(ofs,i-ofs);
					out.push(word);
				}
				if (c=='"' || c=="'"){
					var ofs2=str.indexOf(c,i+1);
					if (ofs2 < 0){
						throw "Sharder err:"+str;
					}
					out.push(str.substr(i+1,ofs2-i-1));
					i=ofs2;
					ofs=-1;
					continue ;
				}
				if (c=='(' && block && out.length > 0){
					word=out[out.length-1]+";";
					if ("vec4;main;".indexOf(word)< 0)
						block.useFuns+=word;
				}
				ofs=-1;
				continue ;
			}
			if (ofs < 0)ofs=i;
		}
		if (ofs < n && (n-ofs)> 1){
			word=str.substr(ofs,n-ofs);
			out.push(word);
		}
		return out;
	}

	ShaderCompile.IFDEF_NO=0;
	ShaderCompile.IFDEF_YES=1;
	ShaderCompile.IFDEF_ELSE=2;
	ShaderCompile.IFDEF_PARENT=3;
	ShaderCompile._removeAnnotation=new RegExp("(/\\*([^*]|[\\r\\\n]|(\\*+([^*/]|[\\r\\n])))*\\*+/)|(//.*)","g");
	ShaderCompile._reg=new RegExp("(\".*\")|('.*')|([#\\w\\*-\\.+/()=<>{}\\\\]+)|([,;:\\\\])","g");
	ShaderCompile._splitToWordExps=new RegExp("[(\".*\")]+|[('.*')]+|([ \\t=\\+\\-*/&%!<>!%\(\),;])","g");
	ShaderCompile.includes={};
	__static(ShaderCompile,
	['shaderParamsMap',function(){return this.shaderParamsMap={"float":0x1406,"int":0x1404,"bool":0x8B56,"vec2":0x8B50,"vec3":0x8B51,"vec4":0x8B52,"ivec2":0x8B53,"ivec3":0x8B54,"ivec4":0x8B55,"bvec2":0x8B57,"bvec3":0x8B58,"bvec4":0x8B59,"mat2":0x8B5A,"mat3":0x8B5B,"mat4":0x8B5C,"sampler2D":0x8B5E,"samplerCube":0x8B60};},'_splitToWordExps3',function(){return this._splitToWordExps3=new RegExp("[ \\t=\\+\\-*/&%!<>!%\(\),;\\|]","g");}
	]);
	ShaderCompile.__init$=function(){
		//class ShaderNode
		ShaderNode=(function(){
			function ShaderNode(includefiles){
				this.childs=[];
				this.text="";
				this.parent=null;
				this.name=null;
				this.noCompile=false;
				this.includefiles=null;
				this.condition=null;
				this.conditionType=0;
				this.useFuns="";
				this.z=0;
				this.src=null;
				this.includefiles=includefiles;
			}
			__class(ShaderNode,'');
			var __proto=ShaderNode.prototype;
			__proto.setParent=function(parent){
				parent.childs.push(this);
				this.z=parent.z+1;
				this.parent=parent;
			}
			__proto.setCondition=function(condition,type){
				if (condition){
					this.conditionType=type;
					condition=condition.replace(/(\s*$)/g,"");
					this.condition=function (){
						return this[condition];
					}
					this.condition.__condition=condition;
				}
			}
			__proto.toscript=function(def,out){
				return this._toscript(def,out,++ShaderNode.__id);
			}
			__proto._toscript=function(def,out,id){
				if (this.childs.length < 1 && !this.text)return out;
				var outIndex=out.length;
				if (this.condition){
					var ifdef=!!this.condition.call(def);
					this.conditionType===2 && (ifdef=!ifdef);
					if (!ifdef)return out;
				}
				this.text && out.push(this.text);
				this.childs.length > 0 && this.childs.forEach(function(o,index,arr){
					o._toscript(def,out,id);
				});
				if (this.includefiles.length > 0 && this.useFuns.length > 0){
					var funsCode;
					for (var i=0,n=this.includefiles.length;i < n;i++){
						if (this.includefiles[i].curUseID==id){
							continue ;
						}
						funsCode=this.includefiles[i].file.getFunsScript(this.useFuns);
						if (funsCode.length > 0){
							this.includefiles[i].curUseID=id;
							out[0]=funsCode+out[0];
						}
					}
				}
				return out;
			}
			ShaderNode.__id=1;
			return ShaderNode;
		})()
		//class InlcudeFile
		InlcudeFile=(function(){
			function InlcudeFile(txt){
				this.script=null;
				this.codes={};
				this.funs={};
				this.curUseID=-1;
				this.funnames="";
				this.script=txt;
				var begin=0,ofs=0,end=0;
				while (true){
					begin=txt.indexOf("#begin",begin);
					if (begin < 0)break ;
					end=begin+5;
					while (true){
						end=txt.indexOf("#end",end);
						if (end < 0)break ;
						if (txt.charAt(end+4)==='i')
							end+=5;
						else break ;
					}
					if (end < 0){
						throw "add include err,no #end:"+txt;
						return;
					}
					ofs=txt.indexOf('\n',begin);
					var words=ShaderCompile.splitToWords(txt.substr(begin,ofs-begin),null);
					if (words[1]=='code'){
						this.codes[words[2]]=txt.substr(ofs+1,end-ofs-1);
						}else if (words[1]=='function'){
						ofs=txt.indexOf("function",begin);
						ofs+="function".length;
						this.funs[words[3]]=txt.substr(ofs+1,end-ofs-1);
						this.funnames+=words[3]+";";
					}
					begin=end+1;
				}
			}
			__class(InlcudeFile,'');
			var __proto=InlcudeFile.prototype;
			__proto.getWith=function(name){
				var r=name ? this.codes[name] :this.script;
				if (!r){
					throw "get with error:"+name;
				}
				return r;
			}
			__proto.getFunsScript=function(funsdef){
				var r="";
				for (var i in this.funs){
					if (funsdef.indexOf(i+";")>=0){
						r+=this.funs[i];
					}
				}
				return r;
			}
			return InlcudeFile;
		})()
	}

	return ShaderCompile;
})()


/**
*<code>BitmapFont</code> 是位图字体类，用于定义位图字体信息。
*/
//class laya.display.BitmapFont
var BitmapFont=(function(){
	function BitmapFont(){
		this._texture=null;
		this._fontCharDic={};
		this._fontWidthMap={};
		this._complete=null;
		this._path=null;
		this._maxWidth=0;
		this._spaceWidth=10;
		this._padding=null;
		/**当前位图字体字号。*/
		this.fontSize=12;
		/**表示是否根据实际使用的字体大小缩放位图字体大小。*/
		this.autoScaleSize=false;
		/**字符间距（以像素为单位）。*/
		this.letterSpacing=0;
	}

	__class(BitmapFont,'laya.display.BitmapFont');
	var __proto=BitmapFont.prototype;
	/**
	*通过指定位图字体文件路径，加载位图字体文件，加载完成后会自动解析。
	*@param path 位图字体文件的路径。
	*@param complete 加载并解析完成的回调。如果成功返回this,如果失败返回null
	*/
	__proto.loadFont=function(path,complete){
		this._path=path;
		this._complete=complete;
		Laya.loader.load([{url:this._path,type:"xml"},{url:this._path.replace(".fnt",".png"),type:"image"}],Handler.create(this,this.onLoaded));
	}

	/**
	*@private
	*/
	__proto.onLoaded=function(){
		this.parseFont(Loader.getRes(this._path),Loader.getRes(this._path.replace(".fnt",".png")));
		this._complete && this._complete.runWith(this._texture?this:null);
	}

	/**
	*解析字体文件。
	*@param xml 字体文件XML。
	*@param texture 字体的纹理。
	*/
	__proto.parseFont=function(xml,texture){
		if (xml==null || texture==null)return;
		this._texture=texture;
		var tX=0;
		var tScale=1;
		var tInfo=xml.getElementsByTagName("info");
		if (!tInfo[0].getAttributeNode){
			return this.parseFont2(xml,texture);
		}
		this.fontSize=parseInt(tInfo[0].getAttributeNode("size").nodeValue);
		var tPadding=tInfo[0].getAttributeNode("padding").nodeValue;
		var tPaddingArray=tPadding.split(",");
		this._padding=[parseInt(tPaddingArray[0]),parseInt(tPaddingArray[1]),parseInt(tPaddingArray[2]),parseInt(tPaddingArray[3])];
		var chars;
		chars=xml.getElementsByTagName("char");
		var i=0;
		for (i=0;i < chars.length;i++){
			var tAttribute=chars[i];
			var tId=parseInt(tAttribute.getAttributeNode("id").nodeValue);
			var xOffset=parseInt(tAttribute.getAttributeNode("xoffset").nodeValue)/ tScale;
			var yOffset=parseInt(tAttribute.getAttributeNode("yoffset").nodeValue)/ tScale;
			var xAdvance=parseInt(tAttribute.getAttributeNode("xadvance").nodeValue)/ tScale;
			var region=new Rectangle();
			region.x=parseInt(tAttribute.getAttributeNode("x").nodeValue);
			region.y=parseInt(tAttribute.getAttributeNode("y").nodeValue);
			region.width=parseInt(tAttribute.getAttributeNode("width").nodeValue);
			region.height=parseInt(tAttribute.getAttributeNode("height").nodeValue);
			var tTexture=Texture.create(texture,region.x,region.y,region.width,region.height,xOffset,yOffset);
			this._maxWidth=Math.max(this._maxWidth,xAdvance+this.letterSpacing);
			this._fontCharDic[tId]=tTexture;
			this._fontWidthMap[tId]=xAdvance;
		}
	}

	/**
	*@private
	*解析字体文件。
	*@param xml 字体文件XML。
	*@param texture 字体的纹理。
	*/
	__proto.parseFont2=function(xml,texture){
		if (xml==null || texture==null)return;
		this._texture=texture;
		var tX=0;
		var tScale=1;
		var tInfo=xml.getElementsByTagName("info");
		this.fontSize=parseInt(tInfo[0].attributes["size"].nodeValue);
		var tPadding=tInfo[0].attributes["padding"].nodeValue;
		var tPaddingArray=tPadding.split(",");
		this._padding=[parseInt(tPaddingArray[0]),parseInt(tPaddingArray[1]),parseInt(tPaddingArray[2]),parseInt(tPaddingArray[3])];
		var chars=xml.getElementsByTagName("char");
		var i=0;
		for (i=0;i < chars.length;i++){
			var tAttribute=chars[i].attributes;
			var tId=parseInt(tAttribute["id"].nodeValue);
			var xOffset=parseInt(tAttribute["xoffset"].nodeValue)/ tScale;
			var yOffset=parseInt(tAttribute["yoffset"].nodeValue)/ tScale;
			var xAdvance=parseInt(tAttribute["xadvance"].nodeValue)/ tScale;
			var region=new Rectangle();
			region.x=parseInt(tAttribute["x"].nodeValue);
			region.y=parseInt(tAttribute["y"].nodeValue);
			region.width=parseInt(tAttribute["width"].nodeValue);
			region.height=parseInt(tAttribute["height"].nodeValue);
			var tTexture=Texture.create(texture,region.x,region.y,region.width,region.height,xOffset,yOffset);
			this._maxWidth=Math.max(this._maxWidth,xAdvance+this.letterSpacing);
			this._fontCharDic[tId]=tTexture;
			this._fontWidthMap[tId]=xAdvance;
		}
	}

	/**
	*获取指定字符的字体纹理对象。
	*@param char 字符。
	*@return 指定的字体纹理对象。
	*/
	__proto.getCharTexture=function(char){
		return this._fontCharDic[char.charCodeAt(0)];
	}

	/**
	*销毁位图字体，调用Text.unregisterBitmapFont 时，默认会销毁。
	*/
	__proto.destroy=function(){
		if (this._texture){
			for (var p in this._fontCharDic){
				var tTexture=this._fontCharDic[p];
				if (tTexture)tTexture.destroy();
			}
			this._texture.destroy();
			this._fontCharDic=null;
			this._fontWidthMap=null;
			this._texture=null;
		}
	}

	/**
	*设置空格的宽（如果字体库有空格，这里就可以不用设置了）。
	*@param spaceWidth 宽度，单位为像素。
	*/
	__proto.setSpaceWidth=function(spaceWidth){
		this._spaceWidth=spaceWidth;
	}

	/**
	*获取指定字符的宽度。
	*@param char 字符。
	*@return 宽度。
	*/
	__proto.getCharWidth=function(char){
		var code=char.charCodeAt(0);
		if (this._fontWidthMap[code])return this._fontWidthMap[code]+this.letterSpacing;
		if (char==" ")return this._spaceWidth+this.letterSpacing;
		return 0;
	}

	/**
	*获取指定文本内容的宽度。
	*@param text 文本内容。
	*@return 宽度。
	*/
	__proto.getTextWidth=function(text){
		var tWidth=0;
		for (var i=0,n=text.length;i < n;i++){
			tWidth+=this.getCharWidth(text.charAt(i));
		}
		return tWidth;
	}

	/**
	*获取最大字符宽度。
	*/
	__proto.getMaxWidth=function(){
		return this._maxWidth;
	}

	/**
	*获取最大字符高度。
	*/
	__proto.getMaxHeight=function(){
		return this.fontSize;
	}

	/**
	*@private
	*将指定的文本绘制到指定的显示对象上。
	*/
	__proto.drawText=function(text,sprite,dra,drawY,align,width){
		var tWidth=this.getTextWidth(text);
		var tTexture;
		var dx=0;
		align==="center" && (dx=(width-tWidth)/ 2);
		align==="right" && (dx=(width-tWidth));
		var tX=0;
		for (var i=0,n=text.length;i < n;i++){
			tTexture=this.getCharTexture(text.charAt(i));
			if (tTexture){
				sprite.graphics.drawTexture(tTexture,drawX+tX+dx,drawY);
				tX+=this.getCharWidth(text.charAt(i));
			}
		}
	}

	return BitmapFont;
})()


/**
*@private
*<code>Style</code> 类是元素样式定义类。
*/
//class laya.display.css.Style
var Style=(function(){
	function Style(){
		/**透明度。*/
		this.alpha=1;
		/**表示是否显示。*/
		this.visible=true;
		/**表示滚动区域。*/
		this.scrollRect=null;
		/**混合模式。*/
		this.blendMode=null;
		/**@private */
		this._type=0;
		this._tf=Style._TF_EMPTY;
	}

	__class(Style,'laya.display.css.Style');
	var __proto=Style.prototype;
	__proto.getTransform=function(){
		return this._tf;
	}

	__proto.setTransform=function(value){
		this._tf=value==='none' || !value ? Style._TF_EMPTY :value;
	}

	__proto.setTranslateX=function(value){
		this._tf===Style._TF_EMPTY && (this._tf=new TransformInfo());
		this._tf.translateX=value;
	}

	__proto.setTranslateY=function(value){
		this._tf===Style._TF_EMPTY && (this._tf=new TransformInfo());
		this._tf.translateY=value;
	}

	__proto.setScaleX=function(value){
		this._tf===Style._TF_EMPTY && (this._tf=new TransformInfo());
		this._tf.scaleX=value;
	}

	__proto.setScale=function(x,y){
		this._tf===Style._TF_EMPTY && (this._tf=new TransformInfo());
		this._tf.scaleX=x;
		this._tf.scaleY=y;
	}

	__proto.setScaleY=function(value){
		this._tf===Style._TF_EMPTY && (this._tf=new TransformInfo());
		this._tf.scaleY=value;
	}

	__proto.setRotate=function(value){
		this._tf===Style._TF_EMPTY && (this._tf=new TransformInfo());
		this._tf.rotate=value;
	}

	__proto.setSkewX=function(value){
		this._tf===Style._TF_EMPTY && (this._tf=new TransformInfo());
		this._tf.skewX=value;
	}

	__proto.setSkewY=function(value){
		this._tf===Style._TF_EMPTY && (this._tf=new TransformInfo());
		this._tf.skewY=value;
	}

	/**销毁此对象。*/
	__proto.destroy=function(){
		this.scrollRect=null;
	}

	/**@private */
	__proto.render=function(sprite,context,x,y){}
	/**@private */
	__proto.getCSSStyle=function(){
		return CSSStyle.EMPTY;
	}

	/**@private */
	__proto._enableLayout=function(){
		return false;
	}

	/**X 轴缩放值。*/
	__getset(0,__proto,'scaleX',function(){
		return this._tf.scaleX;
		},function(value){
		this.setScaleX(value);
	});

	/**元素应用的 2D 或 3D 转换的值。该属性允许我们对元素进行旋转、缩放、移动或倾斜。*/
	__getset(0,__proto,'transform',function(){
		return this.getTransform();
		},function(value){
		this.setTransform(value);
	});

	/**定义转换，只是用 X 轴的值。*/
	__getset(0,__proto,'translateX',function(){
		return this._tf.translateX;
		},function(value){
		this.setTranslateX(value);
	});

	/**定义转换，只是用 Y 轴的值。*/
	__getset(0,__proto,'translateY',function(){
		return this._tf.translateY;
		},function(value){
		this.setTranslateY(value);
	});

	/**Y 轴缩放值。*/
	__getset(0,__proto,'scaleY',function(){
		return this._tf.scaleY;
		},function(value){
		this.setScaleY(value);
	});

	/**表示元素是否显示为块级元素。*/
	__getset(0,__proto,'block',function(){
		return (this._type & 0x1)!=0;
	});

	/**定义沿着 Y 轴的 2D 倾斜转换。*/
	__getset(0,__proto,'skewY',function(){
		return this._tf.skewY;
		},function(value){
		this.setSkewY(value);
	});

	/**定义旋转角度。*/
	__getset(0,__proto,'rotate',function(){
		return this._tf.rotate;
		},function(value){
		this.setRotate(value);
	});

	/**定义沿着 X 轴的 2D 倾斜转换。*/
	__getset(0,__proto,'skewX',function(){
		return this._tf.skewX;
		},function(value){
		this.setSkewX(value);
	});

	/**表示元素的左内边距。*/
	__getset(0,__proto,'paddingLeft',function(){
		return 0;
	});

	/**表示元素的上内边距。*/
	__getset(0,__proto,'paddingTop',function(){
		return 0;
	});

	/**是否为绝对定位。*/
	__getset(0,__proto,'absolute',function(){
		return true;
	});

	Style.__init__=function(){
		Style._TF_EMPTY=new TransformInfo();
		Style.EMPTY=new Style();
	}

	Style.EMPTY=null;
	Style._TF_EMPTY=null;
	return Style;
})()


/**
*@private
*<code>Font</code> 类是字体显示定义类。
*/
//class laya.display.css.Font
var Font=(function(){
	function Font(src){
		this._type=0;
		this._weight=0;
		this._decoration=null;
		this._text=null;
		/**
		*首行缩进 （以像素为单位）。
		*/
		this.indent=0;
		this._color=Color$1.create(Font.defaultColor);
		this.family=Font.defaultFamily;
		this.stroke=Font._STROKE;
		this.size=Font.defaultSize;
		src && src!==Font.EMPTY && src.copyTo(this);
	}

	__class(Font,'laya.display.css.Font');
	var __proto=Font.prototype;
	/**
	*字体样式字符串。
	*/
	__proto.set=function(value){
		this._text=null;
		var strs=value.split(' ');
		for (var i=0,n=strs.length;i < n;i++){
			var str=strs[i];
			switch (str){
				case 'italic':
					this.italic=true;
					continue ;
				case 'bold':
					this.bold=true;
					continue ;
				}
			if (str.indexOf('px')> 0){
				this.size=parseInt(str);
				this.family=strs[i+1];
				i++;
				continue ;
			}
		}
	}

	/**
	*返回字体样式字符串。
	*@return 字体样式字符串。
	*/
	__proto.toString=function(){
		this._text=""
		this.italic && (this._text+="italic ");
		this.bold && (this._text+="bold ");
		return this._text+=this.size+"px "+this.family;
	}

	/**
	*将当前的属性值复制到传入的 <code>Font</code> 对象。
	*@param dec 一个 Font 对象。
	*/
	__proto.copyTo=function(dec){
		dec._type=this._type;
		dec._text=this._text;
		dec._weight=this._weight;
		dec._color=this._color;
		dec.family=this.family;
		dec.stroke=this.stroke !=Font._STROKE ? this.stroke.slice():Font._STROKE;
		dec.indent=this.indent;
		dec.size=this.size;
	}

	/**
	*表示是否为密码格式。
	*/
	__getset(0,__proto,'password',function(){
		return (this._type & 0x400)!==0;
		},function(value){
		value ? (this._type |=0x400):(this._type &=~0x400);
	});

	/**
	*表示颜色字符串。
	*/
	__getset(0,__proto,'color',function(){
		return this._color.strColor;
		},function(value){
		this._color=Color$1.create(value);
	});

	/**
	*表示是否为斜体。
	*/
	__getset(0,__proto,'italic',function(){
		return (this._type & 0x200)!==0;
		},function(value){
		value ? (this._type |=0x200):(this._type &=~0x200);
	});

	/**
	*表示是否为粗体。
	*/
	__getset(0,__proto,'bold',function(){
		return (this._type & 0x800)!==0;
		},function(value){
		value ? (this._type |=0x800):(this._type &=~0x800);
	});

	/**
	*文本的粗细。
	*/
	__getset(0,__proto,'weight',function(){
		return ""+this._weight;
		},function(value){
		var weight=0;
		switch (value){
			case 'normal':
				break ;
			case 'bold':
				this.bold=true;
				weight=700;
				break ;
			case 'bolder':
				weight=800;
				break ;
			case 'lighter':
				weight=100;
				break ;
			default :
				weight=parseInt(value);
			}
		this._weight=weight;
		this._text=null;
	});

	/**
	*规定添加到文本的修饰。
	*/
	__getset(0,__proto,'decoration',function(){
		return this._decoration ? this._decoration.value :"none";
		},function(value){
		var strs=value.split(' ');
		this._decoration || (this._decoration={});
		switch (strs[0]){
			case '_':
				this._decoration.type='underline'
				break ;
			case '-':
				this._decoration.type='line-through'
				break ;
			case 'overline':
				this._decoration.type='overline'
				break ;
			default :
				this._decoration.type=strs[0];
			}
		strs[1] && (this._decoration.color=Color$1.create(strs));
		this._decoration.value=value;
	});

	Font.__init__=function(){
		Font.EMPTY=new Font(null);
	}

	Font.EMPTY=null;
	Font.defaultColor="#000000";
	Font.defaultSize=12;
	Font.defaultFamily="Arial";
	Font.defaultFont="12px Arial";
	Font._STROKE=[0,"#000000"];
	Font._ITALIC=0x200;
	Font._PASSWORD=0x400;
	Font._BOLD=0x800;
	return Font;
})()


/**
*@private
*/
//class laya.display.css.TransformInfo
var TransformInfo=(function(){
	function TransformInfo(){
		this.translateX=0;
		this.translateY=0;
		this.scaleX=1;
		this.scaleY=1;
		this.rotate=0;
		this.skewX=0;
		this.skewY=0;
	}

	__class(TransformInfo,'laya.display.css.TransformInfo');
	return TransformInfo;
})()


/**
*@private
*Graphic bounds数据类
*/
//class laya.display.GraphicsBounds
var GraphicsBounds=(function(){
	function GraphicsBounds(){
		/**@private */
		//this._temp=null;
		/**@private */
		//this._bounds=null;
		/**@private */
		//this._rstBoundPoints=null;
		/**@private */
		this._cacheBoundsType=false;
		/**@private */
		//this._graphics=null;
	}

	__class(GraphicsBounds,'laya.display.GraphicsBounds');
	var __proto=GraphicsBounds.prototype;
	/**
	*销毁
	*/
	__proto.destroy=function(){
		this._graphics=null;
		this._temp=null;
		this._rstBoundPoints=null;
		this._bounds=null;
	}

	/**
	*重置数据
	*/
	__proto.reset=function(){
		this._temp && (this._temp.length=0);
	}

	/**
	*获取位置及宽高信息矩阵(比较耗CPU，频繁使用会造成卡顿，尽量少用)。
	*@param realSize （可选）使用图片的真实大小，默认为false
	*@return 位置与宽高组成的 一个 Rectangle 对象。
	*/
	__proto.getBounds=function(realSize){
		(realSize===void 0)&& (realSize=false);
		if (!this._bounds || !this._temp || this._temp.length < 1 || realSize !=this._cacheBoundsType){
			this._bounds=Rectangle._getWrapRec(this.getBoundPoints(realSize),this._bounds)
		}
		this._cacheBoundsType=realSize;
		return this._bounds;
	}

	/**
	*@private
	*@param realSize （可选）使用图片的真实大小，默认为false
	*获取端点列表。
	*/
	__proto.getBoundPoints=function(realSize){
		(realSize===void 0)&& (realSize=false);
		if (!this._temp || this._temp.length < 1 || realSize !=this._cacheBoundsType)
			this._temp=this._getCmdPoints(realSize);
		this._cacheBoundsType=realSize;
		return this._rstBoundPoints=Utils.copyArray(this._rstBoundPoints,this._temp);
	}

	__proto._getCmdPoints=function(realSize){
		(realSize===void 0)&& (realSize=false);
		var context=Render._context;
		var cmds=this._graphics.cmds;
		var rst;
		rst=this._temp || (this._temp=[]);
		rst.length=0;
		if (!cmds && this._graphics._one !=null){
			GraphicsBounds._tempCmds.length=0;
			GraphicsBounds._tempCmds.push(this._graphics._one);
			cmds=GraphicsBounds._tempCmds;
		}
		if (!cmds)
			return rst;
		var matrixs;
		matrixs=GraphicsBounds._tempMatrixArrays;
		matrixs.length=0;
		var tMatrix=GraphicsBounds._initMatrix;
		tMatrix.identity();
		var tempMatrix=GraphicsBounds._tempMatrix;
		var cmd;
		var tex;
		var wRate=NaN;
		var hRate=NaN;
		var oWidth=NaN;
		var oHeight=NaN;
		var offX=NaN;
		var offY=NaN;
		for (var i=0,n=cmds.length;i < n;i++){
			cmd=cmds[i];
			if (!cmd.callee)continue ;
			switch (cmd.callee){
				case context._save:
				case 7:
					matrixs.push(tMatrix);
					tMatrix=tMatrix.clone();
					break ;
				case context._restore:
				case 8:
					tMatrix=matrixs.pop();
					break ;
				case context._scale:
				case 5:
					tempMatrix.identity();
					tempMatrix.translate(-cmd[2],-cmd[3]);
					tempMatrix.scale(cmd[0],cmd[1]);
					tempMatrix.translate(cmd[2],cmd[3]);
					this._switchMatrix(tMatrix,tempMatrix);
					break ;
				case context._rotate:
				case 3:
					tempMatrix.identity();
					tempMatrix.translate(-cmd[1],-cmd[2]);
					tempMatrix.rotate(cmd[0]);
					tempMatrix.translate(cmd[1],cmd[2]);
					this._switchMatrix(tMatrix,tempMatrix);
					break ;
				case context._translate:
				case 6:
					tempMatrix.identity();
					tempMatrix.translate(cmd[0],cmd[1]);
					this._switchMatrix(tMatrix,tempMatrix);
					break ;
				case context._transform:
				case 4:
					tempMatrix.identity();
					tempMatrix.translate(-cmd[1],-cmd[2]);
					tempMatrix.concat(cmd[0]);
					tempMatrix.translate(cmd[1],cmd[2]);
					this._switchMatrix(tMatrix,tempMatrix);
					break ;
				case 16:
				case 24:
					GraphicsBounds._addPointArrToRst(rst,Rectangle._getBoundPointS(cmd[0],cmd[1],cmd[2],cmd[3]),tMatrix);
					break ;
				case 17:
					tMatrix.copyTo(tempMatrix);
					tempMatrix.concat(cmd[4]);
					GraphicsBounds._addPointArrToRst(rst,Rectangle._getBoundPointS(cmd[0],cmd[1],cmd[2],cmd[3]),tempMatrix);
					break ;
				case context._drawTexture:
					tex=cmd[0];
					if (realSize){
						if (cmd[3] && cmd[4]){
							GraphicsBounds._addPointArrToRst(rst,Rectangle._getBoundPointS(cmd[1],cmd[2],cmd[3],cmd[4]),tMatrix);
							}else {
							tex=cmd[0];
							GraphicsBounds._addPointArrToRst(rst,Rectangle._getBoundPointS(cmd[1],cmd[2],tex.width,tex.height),tMatrix);
						}
						}else {
						wRate=(cmd[3] || tex.sourceWidth)/ tex.width;
						hRate=(cmd[4] || tex.sourceHeight)/ tex.height;
						oWidth=wRate *tex.sourceWidth;
						oHeight=hRate *tex.sourceHeight;
						offX=tex.offsetX > 0 ? tex.offsetX :0;
						offY=tex.offsetY > 0 ? tex.offsetY :0;
						offX *=wRate;
						offY *=hRate;
						GraphicsBounds._addPointArrToRst(rst,Rectangle._getBoundPointS(cmd[1]-offX,cmd[2]-offY,oWidth,oHeight),tMatrix);
					}
					break ;
				case context._fillTexture:
					if (cmd[3] && cmd[4]){
						GraphicsBounds._addPointArrToRst(rst,Rectangle._getBoundPointS(cmd[1],cmd[2],cmd[3],cmd[4]),tMatrix);
						}else {
						tex=cmd[0];
						GraphicsBounds._addPointArrToRst(rst,Rectangle._getBoundPointS(cmd[1],cmd[2],tex.width,tex.height),tMatrix);
					}
					break ;
				case context._drawTextureWithTransform:;
					var drawMatrix;
					if (cmd[5]){
						tMatrix.copyTo(tempMatrix);
						tempMatrix.concat(cmd[5]);
						drawMatrix=tempMatrix;
						}else {
						drawMatrix=tMatrix;
					}
					if (realSize){
						if (cmd[3] && cmd[4]){
							GraphicsBounds._addPointArrToRst(rst,Rectangle._getBoundPointS(cmd[1],cmd[2],cmd[3],cmd[4]),drawMatrix);
							}else {
							tex=cmd[0];
							GraphicsBounds._addPointArrToRst(rst,Rectangle._getBoundPointS(cmd[1],cmd[2],tex.width,tex.height),drawMatrix);
						}
						}else {
						tex=cmd[0];
						wRate=(cmd[3] || tex.sourceWidth)/ tex.width;
						hRate=(cmd[4] || tex.sourceHeight)/ tex.height;
						oWidth=wRate *tex.sourceWidth;
						oHeight=hRate *tex.sourceHeight;
						offX=tex.offsetX > 0 ? tex.offsetX :0;
						offY=tex.offsetY > 0 ? tex.offsetY :0;
						offX *=wRate;
						offY *=hRate;
						GraphicsBounds._addPointArrToRst(rst,Rectangle._getBoundPointS(cmd[1]-offX,cmd[2]-offY,oWidth,oHeight),drawMatrix);
					}
					break ;
				case context._drawRect:
				case 13:
					GraphicsBounds._addPointArrToRst(rst,Rectangle._getBoundPointS(cmd[0],cmd[1],cmd[2],cmd[3]),tMatrix);
					break ;
				case context._drawCircle:
				case context._fillCircle:
				case 14:
					GraphicsBounds._addPointArrToRst(rst,Rectangle._getBoundPointS(cmd[0]-cmd[2],cmd[1]-cmd[2],cmd[2]+cmd[2],cmd[2]+cmd[2]),tMatrix);
					break ;
				case context._drawLine:
				case 20:
					GraphicsBounds._tempPoints.length=0;
					var lineWidth=NaN;
					lineWidth=cmd[5] *0.5;
					if (cmd[0]==cmd[2]){
						GraphicsBounds._tempPoints.push(cmd[0]+lineWidth,cmd[1],cmd[2]+lineWidth,cmd[3],cmd[0]-lineWidth,cmd[1],cmd[2]-lineWidth,cmd[3]);
						}else if (cmd[1]==cmd[3]){
						GraphicsBounds._tempPoints.push(cmd[0],cmd[1]+lineWidth,cmd[2],cmd[3]+lineWidth,cmd[0],cmd[1]-lineWidth,cmd[2],cmd[3]-lineWidth);
						}else {
						GraphicsBounds._tempPoints.push(cmd[0],cmd[1],cmd[2],cmd[3]);
					}
					GraphicsBounds._addPointArrToRst(rst,GraphicsBounds._tempPoints,tMatrix);
					break ;
				case context._drawCurves:
				case 22:
					GraphicsBounds._addPointArrToRst(rst,Bezier.I.getBezierPoints(cmd[2]),tMatrix,cmd[0],cmd[1]);
					break ;
				case context._drawPoly:
				case context._drawLines:
				case 18:
					GraphicsBounds._addPointArrToRst(rst,cmd[2],tMatrix,cmd[0],cmd[1]);
					break ;
				case context._drawPath:
				case 19:
					GraphicsBounds._addPointArrToRst(rst,this._getPathPoints(cmd[2]),tMatrix,cmd[0],cmd[1]);
					break ;
				case context._drawPie:
				case 15:
					GraphicsBounds._addPointArrToRst(rst,this._getPiePoints(cmd[0],cmd[1],cmd[2],cmd[3],cmd[4]),tMatrix);
					break ;
				}
		}
		if (rst.length > 200){
			rst=Utils.copyArray(rst,Rectangle._getWrapRec(rst)._getBoundPoints());
		}else if (rst.length > 8)
		rst=GrahamScan.scanPList(rst);
		return rst;
	}

	__proto._switchMatrix=function(tMatix,tempMatrix){
		tempMatrix.concat(tMatix);
		tempMatrix.copyTo(tMatix);
	}

	__proto._getPiePoints=function(x,y,radius,startAngle,endAngle){
		var rst=GraphicsBounds._tempPoints;
		GraphicsBounds._tempPoints.length=0;
		rst.push(x,y);
		var delta=(endAngle-startAngle)% (2 *Math.PI);
		var segnum=10;
		var step=delta / segnum;
		var i=NaN;
		var angle=startAngle;
		for (i=0;i <=segnum;i++){
			rst.push(x+radius *Math.cos(angle),y+radius *Math.sin(angle));
			angle+=step;
		}
		return rst;
	}

	__proto._getPathPoints=function(paths){
		var i=0,len=0;
		var rst=GraphicsBounds._tempPoints;
		rst.length=0;
		len=paths.length;
		var tCMD;
		for (i=0;i < len;i++){
			tCMD=paths[i];
			if (tCMD.length > 1){
				rst.push(tCMD[1],tCMD[2]);
				if (tCMD.length > 3){
					rst.push(tCMD[3],tCMD[4]);
				}
			}
		}
		return rst;
	}

	GraphicsBounds._addPointArrToRst=function(rst,points,matrix,dx,dy){
		(dx===void 0)&& (dx=0);
		(dy===void 0)&& (dy=0);
		var i=0,len=0;
		len=points.length;
		for (i=0;i < len;i+=2){
			GraphicsBounds._addPointToRst(rst,points[i]+dx,points[i+1]+dy,matrix);
		}
	}

	GraphicsBounds._addPointToRst=function(rst,x,y,matrix){
		var _tempPoint=Point.TEMP;
		_tempPoint.setTo(x ? x :0,y ? y :0);
		matrix.transformPoint(_tempPoint);
		rst.push(_tempPoint.x,_tempPoint.y);
	}

	GraphicsBounds._tempPoints=[];
	GraphicsBounds._tempMatrixArrays=[];
	GraphicsBounds._tempCmds=[];
	__static(GraphicsBounds,
	['_tempMatrix',function(){return this._tempMatrix=new Matrix();},'_initMatrix',function(){return this._initMatrix=new Matrix();}
	]);
	return GraphicsBounds;
})()


/**
*<code>Event</code> 是事件类型的集合。一般当发生事件时，<code>Event</code> 对象将作为参数传递给事件侦听器。
*/
//class laya.events.Event
var Event=(function(){
	function Event(){
		/**事件类型。*/
		//this.type=null;
		/**原生浏览器事件。*/
		//this.nativeEvent=null;
		/**事件目标触发对象。*/
		//this.target=null;
		/**事件当前冒泡对象。*/
		//this.currentTarget=null;
		/**@private */
		//this._stoped=false;
		/**分配给触摸点的唯一标识号（作为 int）。*/
		//this.touchId=0;
		/**键盘值*/
		//this.keyCode=0;
		/**滚轮滑动增量*/
		//this.delta=0;
	}

	__class(Event,'laya.events.Event');
	var __proto=Event.prototype;
	/**
	*设置事件数据。
	*@param type 事件类型。
	*@param currentTarget 事件目标触发对象。
	*@param target 事件当前冒泡对象。
	*@return 返回当前 Event 对象。
	*/
	__proto.setTo=function(type,currentTarget,target){
		this.type=type;
		this.currentTarget=currentTarget;
		this.target=target;
		return this;
	}

	/**
	*阻止对事件流中当前节点的后续节点中的所有事件侦听器进行处理。此方法不会影响当前节点 (currentTarget)中的任何事件侦听器。
	*/
	__proto.stopPropagation=function(){
		this._stoped=true;
	}

	/**鼠标在 Stage 上的 Y 轴坐标*/
	__getset(0,__proto,'stageY',function(){
		return Laya.stage.mouseY;
	});

	/**
	*包含按下或释放的键的字符代码值。字符代码值为英文键盘值。
	*/
	__getset(0,__proto,'charCode',function(){
		return this.nativeEvent.charCode;
	});

	/**
	*触摸点列表。
	*/
	__getset(0,__proto,'touches',function(){
		var arr=this.nativeEvent.touches;
		if (arr){
			var stage=Laya.stage;
			for (var i=0,n=arr.length;i < n;i++){
				var e=arr[i];
				var point=Point.TEMP;
				point.setTo(e.clientX,e.clientY);
				stage._canvasTransform.invertTransformPoint(point);
				stage.transform.invertTransformPoint(point);
				e.stageX=point.x;
				e.stageY=point.y;
			}
		}
		return arr;
	});

	/**
	*表示键在键盘上的位置。这对于区分在键盘上多次出现的键非常有用。<br>
	*例如，您可以根据此属性的值来区分左 Shift 键和右 Shift 键：左 Shift 键的值为 KeyLocation.LEFT，右 Shift 键的值为 KeyLocation.RIGHT。另一个示例是区分标准键盘 (KeyLocation.STANDARD)与数字键盘 (KeyLocation.NUM_PAD)上按下的数字键。
	*/
	__getset(0,__proto,'keyLocation',function(){
		return this.nativeEvent.keyLocation;
	});

	/**
	*表示 Ctrl 键是处于活动状态 (true)还是非活动状态 (false)。
	*/
	__getset(0,__proto,'ctrlKey',function(){
		return this.nativeEvent.ctrlKey;
	});

	/**
	*表示 Alt 键是处于活动状态 (true)还是非活动状态 (false)。
	*/
	__getset(0,__proto,'altKey',function(){
		return this.nativeEvent.altKey;
	});

	/**
	*表示 Shift 键是处于活动状态 (true)还是非活动状态 (false)。
	*/
	__getset(0,__proto,'shiftKey',function(){
		return this.nativeEvent.shiftKey;
	});

	/**鼠标在 Stage 上的 X 轴坐标*/
	__getset(0,__proto,'stageX',function(){
		return Laya.stage.mouseX;
	});

	Event.EMPTY=new Event();
	Event.MOUSE_DOWN="mousedown";
	Event.MOUSE_UP="mouseup";
	Event.CLICK="click";
	Event.RIGHT_MOUSE_DOWN="rightmousedown";
	Event.RIGHT_MOUSE_UP="rightmouseup";
	Event.RIGHT_CLICK="rightclick";
	Event.MOUSE_MOVE="mousemove";
	Event.MOUSE_OVER="mouseover";
	Event.MOUSE_OUT="mouseout";
	Event.MOUSE_WHEEL="mousewheel";
	Event.ROLL_OVER="mouseover";
	Event.ROLL_OUT="mouseout";
	Event.DOUBLE_CLICK="doubleclick";
	Event.CHANGE="change";
	Event.CHANGED="changed";
	Event.RESIZE="resize";
	Event.ADDED="added";
	Event.REMOVED="removed";
	Event.DISPLAY="display";
	Event.UNDISPLAY="undisplay";
	Event.ERROR="error";
	Event.COMPLETE="complete";
	Event.LOADED="loaded";
	Event.PROGRESS="progress";
	Event.INPUT="input";
	Event.RENDER="render";
	Event.OPEN="open";
	Event.MESSAGE="message";
	Event.CLOSE="close";
	Event.KEY_DOWN="keydown";
	Event.KEY_PRESS="keypress";
	Event.KEY_UP="keyup";
	Event.FRAME="enterframe";
	Event.DRAG_START="dragstart";
	Event.DRAG_MOVE="dragmove";
	Event.DRAG_END="dragend";
	Event.ENTER="enter";
	Event.SELECT="select";
	Event.BLUR="blur";
	Event.FOCUS="focus";
	Event.VISIBILITY_CHANGE="visibilitychange";
	Event.FOCUS_CHANGE="focuschange";
	Event.PLAYED="played";
	Event.PAUSED="paused";
	Event.STOPPED="stopped";
	Event.START="start";
	Event.END="end";
	Event.ENABLE_CHANGED="enablechanged";
	Event.ACTIVE_IN_HIERARCHY_CHANGED="activeinhierarchychanged";
	Event.COMPONENT_ADDED="componentadded";
	Event.COMPONENT_REMOVED="componentremoved";
	Event.LAYER_CHANGED="layerchanged";
	Event.HIERARCHY_LOADED="hierarchyloaded";
	Event.RECOVERED="recovered";
	Event.RELEASED="released";
	Event.LINK="link";
	Event.LABEL="label";
	Event.FULL_SCREEN_CHANGE="fullscreenchange";
	Event.DEVICE_LOST="devicelost";
	Event.MESH_CHANGED="meshchanged";
	Event.MATERIAL_CHANGED="materialchanged";
	Event.WORLDMATRIX_NEEDCHANGE="worldmatrixneedchanged";
	Event.ANIMATION_CHANGED="animationchanged";
	Event.TRIGGER_ENTER="triggerenter";
	Event.TRIGGER_STAY="triggerstay";
	Event.TRIGGER_EXIT="triggerexit";
	Event.TRAIL_FILTER_CHANGE="trailfilterchange";
	Event.DOMINO_FILTER_CHANGE="dominofilterchange";
	return Event;
})()


/**
*<p><code>KeyBoardManager</code> 是键盘事件管理类。该类从浏览器中接收键盘事件，并派发该事件。</p>
*<p>派发事件时若 Stage.focus 为空则只从 Stage 上派发该事件，否则将从 Stage.focus 对象开始一直冒泡派发该事件。所以在 Laya.stage 上监听键盘事件一定能够收到，如果在其他地方监听，则必须处在Stage.focus的冒泡链上才能收到该事件。</p>
*<p>用户可以通过代码 Laya.stage.focus=someNode 的方式来设置focus对象。</p>
*<p>用户可统一的根据事件对象中 e.keyCode 来判断按键类型，该属性兼容了不同浏览器的实现。</p>
*/
//class laya.events.KeyBoardManager
var KeyBoardManager=(function(){
	function KeyBoardManager(){}
	__class(KeyBoardManager,'laya.events.KeyBoardManager');
	KeyBoardManager.__init__=function(){
		KeyBoardManager._addEvent("keydown");
		KeyBoardManager._addEvent("keypress");
		KeyBoardManager._addEvent("keyup");
	}

	KeyBoardManager._addEvent=function(type){
		Browser.document.addEventListener(type,function(e){
			laya.events.KeyBoardManager._dispatch(e,type);
		},true);
	}

	KeyBoardManager._dispatch=function(e,type){
		if (!KeyBoardManager.enabled)return;
		KeyBoardManager._event._stoped=false;
		KeyBoardManager._event.nativeEvent=e;
		KeyBoardManager._event.keyCode=e.keyCode || e.which || e.charCode;
		if (type==="keydown")KeyBoardManager._pressKeys[KeyBoardManager._event.keyCode]=true;
		else if (type==="keyup")KeyBoardManager._pressKeys[KeyBoardManager._event.keyCode]=null;
		var target=(Laya.stage.focus && (Laya.stage.focus.event !=null)&& Laya.stage.focus.displayedInStage)? Laya.stage.focus :Laya.stage;
		var ct=target;
		while (ct){
			ct.event(type,KeyBoardManager._event.setTo(type,ct,target));
			ct=ct.parent;
		}
	}

	KeyBoardManager.hasKeyDown=function(key){
		return KeyBoardManager._pressKeys[key];
	}

	KeyBoardManager._pressKeys={};
	KeyBoardManager.enabled=true;
	__static(KeyBoardManager,
	['_event',function(){return this._event=new Event();}
	]);
	return KeyBoardManager;
})()


/**
*<p><code>MouseManager</code> 是鼠标、触摸交互管理器。</p>
*<p>鼠标事件流包括捕获阶段、目标阶段、冒泡阶段。<br/>
*捕获阶段：此阶段引擎会从stage开始递归检测stage及其子对象，直到找到命中的目标对象或者未命中任何对象；<br/>
*目标阶段：找到命中的目标对象；<br/>
*冒泡阶段：事件离开目标对象，按节点层级向上逐层通知，直到到达舞台的过程。</p>
*/
//class laya.events.MouseManager
var MouseManager=(function(){
	function MouseManager(){
		/**canvas 上的鼠标X坐标。*/
		this.mouseX=0;
		/**canvas 上的鼠标Y坐标。*/
		this.mouseY=0;
		/**是否禁用除 stage 以外的鼠标事件检测。*/
		this.disableMouseEvent=false;
		/**鼠标按下的时间。单位为毫秒。*/
		this.mouseDownTime=0;
		/**鼠标移动精度。*/
		this.mouseMoveAccuracy=2;
		this._stage=null;
		this._target=null;
		this._lastMoveTimer=0;
		this._isLeftMouse=false;
		this._eventList=[];
		this._touchIDs={};
		this._id=1;
		this._tTouchID=0;
		this._event=new Event();
		this._matrix=new Matrix();
		this._point=new Point();
		this._rect=new Rectangle();
		this._prePoint=new Point();
		this._curTouchID=NaN;
	}

	__class(MouseManager,'laya.events.MouseManager');
	var __proto=MouseManager.prototype;
	/**
	*@private
	*初始化。
	*/
	__proto.__init__=function(stage,canvas){
		var _$this=this;
		this._stage=stage;
		var _this=this;
		var list=this._eventList;
		canvas.oncontextmenu=function (e){
			if (MouseManager.enabled)return false;
		}
		canvas.addEventListener('mousedown',function(e){
			if (MouseManager.enabled){
				if(!Browser.onIE)e.preventDefault();
				list.push(e);
				_this.mouseDownTime=Browser.now();
			}
		});
		canvas.addEventListener('mouseup',function(e){
			if (MouseManager.enabled){
				e.preventDefault();
				list.push(e);
				_this.mouseDownTime=-Browser.now();
			}
		},true);
		canvas.addEventListener('mousemove',function(e){
			if (MouseManager.enabled){
				e.preventDefault();
				var now=Browser.now();
				if (now-_this._lastMoveTimer < 10)return;
				_this._lastMoveTimer=now;
				list.push(e);
			}
		},true);
		canvas.addEventListener("mouseout",function(e){
			if (MouseManager.enabled)list.push(e);
		})
		canvas.addEventListener("mouseover",function(e){
			if (MouseManager.enabled)list.push(e);
		})
		canvas.addEventListener("touchstart",function(e){
			if (MouseManager.enabled){
				list.push(e);
				if (!MouseManager._isFirstTouch&&!Input.isInputting)e.preventDefault();
				_this.mouseDownTime=Browser.now();
			}
		});
		canvas.addEventListener("touchend",function(e){
			if (MouseManager.enabled){
				if (!MouseManager._isFirstTouch&&!Input.isInputting)e.preventDefault();
				MouseManager._isFirstTouch=false;
				list.push(e);
				_this.mouseDownTime=-Browser.now();
				}else {
				_$this._curTouchID=NaN;
			}
		},true);
		canvas.addEventListener("touchmove",function(e){
			if (MouseManager.enabled){
				e.preventDefault();
				list.push(e);
			}
		},true);
		canvas.addEventListener("touchcancel",function(e){
			if (MouseManager.enabled){
				e.preventDefault();
				list.push(e);
				}else {
				_$this._curTouchID=NaN;
			}
		},true);
		canvas.addEventListener('mousewheel',function(e){
			if (MouseManager.enabled)list.push(e);
		});
		canvas.addEventListener('DOMMouseScroll',function(e){
			if (MouseManager.enabled)list.push(e);
		});
	}

	__proto.initEvent=function(e,nativeEvent){
		var _this=this;
		_this._event._stoped=false;
		_this._event.nativeEvent=nativeEvent || e;
		_this._target=null;
		this._point.setTo(e.pageX || e.clientX,e.pageY || e.clientY);
		this._stage._canvasTransform.invertTransformPoint(this._point);
		_this.mouseX=this._point.x;
		_this.mouseY=this._point.y;
		_this._event.touchId=e.identifier || 0;
		this._tTouchID=_this._event.touchId;
		var evt;
		evt=TouchManager.I._event;
		evt._stoped=false;
		evt.nativeEvent=_this._event.nativeEvent;
		evt.touchId=_this._event.touchId;
	}

	__proto.checkMouseWheel=function(e){
		this._event.delta=e.wheelDelta ? e.wheelDelta *0.025 :-e.detail;
		var _lastOvers=TouchManager.I.getLastOvers();
		for (var i=0,n=_lastOvers.length;i < n;i++){
			var ele=_lastOvers[i];
			ele.event("mousewheel",this._event.setTo("mousewheel",ele,this._target));
		}
	}

	// _stage.event(Event.MOUSE_WHEEL,_event.setTo(Event.MOUSE_WHEEL,_stage,_target));
	__proto.onMouseMove=function(ele){
		TouchManager.I.onMouseMove(ele,this._tTouchID);
	}

	__proto.onMouseDown=function(ele){
		if (Input.isInputting && Laya.stage.focus && Laya.stage.focus["focus"] && !Laya.stage.focus.contains(this._target)){
			var pre_input=Laya.stage.focus['_tf'] || Laya.stage.focus;
			var new_input=ele['_tf'] || ele;
			if ((new_input instanceof laya.display.Input )&& new_input.multiline==pre_input.multiline)
				pre_input['_focusOut']();
			else
			pre_input.focus=false;
		}
		TouchManager.I.onMouseDown(ele,this._tTouchID,this._isLeftMouse);
	}

	__proto.onMouseUp=function(ele){
		TouchManager.I.onMouseUp(ele,this._tTouchID,this._isLeftMouse);
	}

	__proto.check=function(sp,mouseX,mouseY,callBack){
		this._point.setTo(mouseX,mouseY);
		sp.fromParentPoint(this._point);
		mouseX=this._point.x;
		mouseY=this._point.y;
		var scrollRect=sp.scrollRect;
		if (scrollRect){
			this._rect.setTo(scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
			if (!this._rect.contains(mouseX,mouseY))return false;
		}
		if (!this.disableMouseEvent){
			if (sp.hitTestPrior && !sp.mouseThrough && !this.hitTest(sp,mouseX,mouseY)){
				return false;
			}
			for (var i=sp._childs.length-1;i >-1;i--){
				var child=sp._childs[i];
				if (!child.destroyed && child.mouseEnabled && child.visible){
					if (this.check(child,mouseX,mouseY,callBack))return true;
				}
			}
		};
		var isHit=(sp.hitTestPrior && !sp.mouseThrough && !this.disableMouseEvent)? true :this.hitTest(sp,mouseX,mouseY);
		if (isHit){
			this._target=sp;
			callBack.call(this,sp);
			}else if (callBack===this.onMouseUp && sp===this._stage){
			this._target=this._stage;
			callBack.call(this,this._target);
		}
		return isHit;
	}

	__proto.hitTest=function(sp,mouseX,mouseY){
		var isHit=false;
		if (sp.scrollRect){
			mouseX-=sp.scrollRect.x;
			mouseY-=sp.scrollRect.y;
		}
		if ((sp.hitArea instanceof laya.utils.HitArea )){
			return sp.hitArea.isHit(mouseX,mouseY);
		}
		if (sp.width > 0 && sp.height > 0 || sp.mouseThrough || sp.hitArea){
			if (!sp.mouseThrough){
				var hitRect=this._rect;
				if (sp.hitArea)hitRect=sp.hitArea;
				else hitRect.setTo(0,0,sp.width,sp.height);
				isHit=hitRect.contains(mouseX,mouseY);
				}else {
				isHit=sp.getGraphicBounds().contains(mouseX,mouseY);
			}
		}
		return isHit;
	}

	/**
	*执行事件处理。
	*/
	__proto.runEvent=function(){
		var len=this._eventList.length;
		if (!len)return;
		var _this=this;
		var i=0,j=0,n=0,touch;
		while (i < len){
			var evt=this._eventList[i];
			if (evt.type!=='mousemove')this._prePoint.x=this._prePoint.y=-1000000;
			switch (evt.type){
				case 'mousedown':
					this._touchIDs[0]=this._id++;
					if (!MouseManager._isTouchRespond){
						_this._isLeftMouse=evt.button===0;
						_this.initEvent(evt);
						_this.check(_this._stage,_this.mouseX,_this.mouseY,_this.onMouseDown);
					}else
					MouseManager._isTouchRespond=false;
					break ;
				case 'mouseup':
					_this._isLeftMouse=evt.button===0;
					_this.initEvent(evt);
					_this.check(_this._stage,_this.mouseX,_this.mouseY,_this.onMouseUp);
					break ;
				case 'mousemove':
					if ((Math.abs(this._prePoint.x-evt.clientX)+Math.abs(this._prePoint.y-evt.clientY))>=this.mouseMoveAccuracy){
						this._prePoint.x=evt.clientX;
						this._prePoint.y=evt.clientY;
						_this.initEvent(evt);
						_this.check(_this._stage,_this.mouseX,_this.mouseY,_this.onMouseMove);
					}
					break ;
				case "touchstart":
					MouseManager._isTouchRespond=true;
					_this._isLeftMouse=true;
					var touches=evt.changedTouches;
					for (j=0,n=touches.length;j < n;j++){
						touch=touches[j];
						if (MouseManager.multiTouchEnabled || isNaN(this._curTouchID)){
							this._curTouchID=touch.identifier;
							if (this._id % 200===0)this._touchIDs={};
							this._touchIDs[touch.identifier]=this._id++;
							_this.initEvent(touch,evt);
							_this.check(_this._stage,_this.mouseX,_this.mouseY,_this.onMouseDown);
						}
					}
					break ;
				case "touchend":
				case "touchcancel":
					MouseManager._isTouchRespond=true;
					_this._isLeftMouse=true;
					var touchends=evt.changedTouches;
					for (j=0,n=touchends.length;j < n;j++){
						touch=touchends[j];
						if (MouseManager.multiTouchEnabled || touch.identifier==this._curTouchID){
							this._curTouchID=NaN;
							_this.initEvent(touch,evt);
							var isChecked=false;
							isChecked=_this.check(_this._stage,_this.mouseX,_this.mouseY,_this.onMouseUp);
							if (!isChecked){
								_this.onMouseUp(null);
							}
						}
					}
					break ;
				case "touchmove":;
					var touchemoves=evt.changedTouches;
					for (j=0,n=touchemoves.length;j < n;j++){
						touch=touchemoves[j];
						if (MouseManager.multiTouchEnabled || touch.identifier==this._curTouchID){
							_this.initEvent(touch,evt);
							_this.check(_this._stage,_this.mouseX,_this.mouseY,_this.onMouseMove);
						}
					}
					break ;
				case "wheel":
				case "mousewheel":
				case "DOMMouseScroll":
					_this.checkMouseWheel(evt);
					break ;
				case "mouseout":
					TouchManager.I.stageMouseOut();
					break ;
				case "mouseover":
					_this._stage.event("mouseover",_this._event.setTo("mouseover",_this._stage,_this._stage));
					break ;
				}
			i++;
		}
		this._eventList.length=0;
	}

	MouseManager.enabled=true;
	MouseManager.multiTouchEnabled=true;
	MouseManager._isTouchRespond=false;
	MouseManager._isFirstTouch=true;
	__static(MouseManager,
	['instance',function(){return this.instance=new MouseManager();}
	]);
	return MouseManager;
})()


/**
*@private
*Touch事件管理类，处理多点触控下的鼠标事件
*/
//class laya.events.TouchManager
var TouchManager=(function(){
	function TouchManager(){
		/**
		*当前over的touch表
		*/
		this.preOvers=[];
		/**
		*当前down的touch表
		*/
		this.preDowns=[];
		this.preRightDowns=[];
		/**
		*是否启用
		*/
		this.enable=true;
		this._lastClickTime=0;
		this._event=new Event();
	}

	__class(TouchManager,'laya.events.TouchManager');
	var __proto=TouchManager.prototype;
	__proto._clearTempArrs=function(){
		TouchManager._oldArr.length=0;
		TouchManager._newArr.length=0;
		TouchManager._tEleArr.length=0;
	}

	/**
	*从touch表里查找对应touchID的数据
	*@param touchID touch ID
	*@param arr touch表
	*@return
	*
	*/
	__proto.getTouchFromArr=function(touchID,arr){
		var i=0,len=0;
		len=arr.length;
		var tTouchO;
		for (i=0;i < len;i++){
			tTouchO=arr[i];
			if (tTouchO.id==touchID){
				return tTouchO;
			}
		}
		return null;
	}

	/**
	*从touch表里移除一个元素
	*@param touchID touch ID
	*@param arr touch表
	*
	*/
	__proto.removeTouchFromArr=function(touchID,arr){
		var i=0;
		for (i=arr.length-1;i >=0;i--){
			if (arr[i].id==touchID){
				arr.splice(i,1);
			}
		}
	}

	/**
	*创建一个touch数据
	*@param ele 当前的根节点
	*@param touchID touchID
	*@return
	*
	*/
	__proto.createTouchO=function(ele,touchID){
		var rst;
		rst=Pool.getItem("TouchData")|| {};
		rst.id=touchID;
		rst.tar=ele;
		return rst;
	}

	/**
	*处理touchStart
	*@param ele 根节点
	*@param touchID touchID
	*@param isLeft （可选）是否为左键
	*/
	__proto.onMouseDown=function(ele,touchID,isLeft){
		(isLeft===void 0)&& (isLeft=false);
		if (!this.enable)
			return;
		var preO;
		var tO;
		var arrs;
		preO=this.getTouchFromArr(touchID,this.preOvers);
		arrs=this.getEles(ele,null,TouchManager._tEleArr);
		if (!preO){
			tO=this.createTouchO(ele,touchID);
			this.preOvers.push(tO);
			}else {
			preO.tar=ele;
		}
		if (Browser.onMobile)
			this.sendEvents(arrs,"mouseover",touchID);
		var preDowns;
		preDowns=isLeft ? this.preDowns :this.preRightDowns;
		preO=this.getTouchFromArr(touchID,preDowns);
		if (!preO){
			tO=this.createTouchO(ele,touchID);
			preDowns.push(tO);
			}else {
			preO.tar=ele;
		}
		this.sendEvents(arrs,isLeft ? "mousedown" :"rightmousedown",touchID);
		this._clearTempArrs();
	}

	/**
	*派发事件。
	*@param eles 对象列表。
	*@param type 事件类型。
	*@param touchID （可选）touchID，默认为0。
	*/
	__proto.sendEvents=function(eles,type,touchID){
		(touchID===void 0)&& (touchID=0);
		var i=0,len=0;
		len=eles.length;
		this._event._stoped=false;
		var _target;
		_target=eles[0];
		var tE;
		for (i=0;i < len;i++){
			tE=eles[i];
			if (tE.destroyed)return;
			tE.event(type,this._event.setTo(type,tE,_target));
			if (this._event._stoped)
				break ;
		}
	}

	/**
	*获取对象列表。
	*@param start 起始节点。
	*@param end 结束节点。
	*@param rst 返回值。如果此值不为空，则将其赋值为计算结果，从而避免创建新数组；如果此值为空，则创建新数组返回。
	*@return Array 返回节点列表。
	*/
	__proto.getEles=function(start,end,rst){
		if (!rst){
			rst=[];
			}else {
			rst.length=0;
		}
		while (start && start !=end){
			rst.push(start);
			start=start.parent;
		}
		return rst;
	}

	/**
	*touchMove时处理out事件和over时间。
	*@param eleNew 新的根节点。
	*@param elePre 旧的根节点。
	*@param touchID （可选）touchID，默认为0。
	*/
	__proto.checkMouseOutAndOverOfMove=function(eleNew,elePre,touchID){
		(touchID===void 0)&& (touchID=0);
		if (elePre==eleNew)
			return;
		var tar;
		var arrs;
		var i=0,len=0;
		if (elePre.contains(eleNew)){
			arrs=this.getEles(eleNew,elePre,TouchManager._tEleArr);
			this.sendEvents(arrs,"mouseover",touchID);
			}else if (eleNew.contains(elePre)){
			arrs=this.getEles(elePre,eleNew,TouchManager._tEleArr);
			this.sendEvents(arrs,"mouseout",touchID);
			}else {
			arrs=TouchManager._tEleArr;
			arrs.length=0;
			var oldArr;
			oldArr=this.getEles(elePre,null,TouchManager._oldArr);
			var newArr;
			newArr=this.getEles(eleNew,null,TouchManager._newArr);
			len=oldArr.length;
			var tIndex=0;
			for (i=0;i < len;i++){
				tar=oldArr[i];
				tIndex=newArr.indexOf(tar);
				if (tIndex >=0){
					newArr.splice(tIndex,newArr.length-tIndex);
					break ;
					}else {
					arrs.push(tar);
				}
			}
			if (arrs.length > 0){
				this.sendEvents(arrs,"mouseout",touchID);
			}
			if (newArr.length > 0){
				this.sendEvents(newArr,"mouseover",touchID);
			}
		}
	}

	/**
	*处理TouchMove事件
	*@param ele 根节点
	*@param touchID touchID
	*
	*/
	__proto.onMouseMove=function(ele,touchID){
		if (!this.enable)
			return;
		var preO;
		preO=this.getTouchFromArr(touchID,this.preOvers);
		var arrs;
		var tO;
		if (!preO){
			arrs=this.getEles(ele,null,TouchManager._tEleArr);
			this.sendEvents(arrs,"mouseover",touchID);
			this.preOvers.push(this.createTouchO(ele,touchID));
			}else {
			this.checkMouseOutAndOverOfMove(ele,preO.tar);
			preO.tar=ele;
			arrs=this.getEles(ele,null,TouchManager._tEleArr);
		}
		this.sendEvents(arrs,"mousemove",touchID);
		this._clearTempArrs();
	}

	__proto.getLastOvers=function(){
		TouchManager._tEleArr.length=0;
		if (this.preOvers.length > 0 && this.preOvers[0].tar){
			return this.getEles(this.preOvers[0].tar,null,TouchManager._tEleArr);
		}
		TouchManager._tEleArr.push(Laya.stage);
		return TouchManager._tEleArr;
	}

	__proto.stageMouseOut=function(){
		var lastOvers;
		lastOvers=this.getLastOvers();
		this.preOvers.length=0;
		this.sendEvents(lastOvers,"mouseout",0);
	}

	/**
	*处理TouchEnd事件
	*@param ele 根节点
	*@param touchID touchID
	*@param isLeft 是否为左键
	*/
	__proto.onMouseUp=function(ele,touchID,isLeft){
		(isLeft===void 0)&& (isLeft=false);
		if (!this.enable)
			return;
		var preO;
		var tO;
		var arrs;
		var oldArr;
		var i=0,len=0;
		var tar;
		var sendArr;
		var onMobile=Browser.onMobile;
		arrs=this.getEles(ele,null,TouchManager._tEleArr);
		this.sendEvents(arrs,isLeft ? "mouseup" :"rightmouseup",touchID);
		var preDowns;
		preDowns=isLeft ? this.preDowns :this.preRightDowns;
		preO=this.getTouchFromArr(touchID,preDowns);
		if (!preO){
			}else {
			var isDouble=false;
			var now=Browser.now();
			isDouble=now-this._lastClickTime < 300;
			this._lastClickTime=now;
			if (ele==preO.tar){
				sendArr=arrs;
				}else {
				oldArr=this.getEles(preO.tar,null,TouchManager._oldArr);
				sendArr=TouchManager._newArr;
				sendArr.length=0;
				len=oldArr.length;
				for (i=0;i < len;i++){
					tar=oldArr[i];
					if (arrs.indexOf(tar)>=0){
						sendArr.push(tar);
					}
				}
			}
			if (sendArr.length > 0){
				this.sendEvents(sendArr,isLeft ? "click" :"rightclick",touchID);
			}
			if (isLeft && isDouble){
				this.sendEvents(sendArr,"doubleclick",touchID);
			}
			this.removeTouchFromArr(touchID,preDowns);
			preO.tar=null;
			Pool.recover("TouchData",preO);
		}
		preO=this.getTouchFromArr(touchID,this.preOvers);
		if (!preO){
			}else {
			if (onMobile){
				sendArr=this.getEles(preO.tar,null,sendArr);
				if (sendArr && sendArr.length > 0){
					this.sendEvents(sendArr,"mouseout",touchID);
				}
				this.removeTouchFromArr(touchID,this.preOvers);
				preO.tar=null;
				Pool.recover("TouchData",preO);
			}
		}
		this._clearTempArrs();
	}

	TouchManager._oldArr=[];
	TouchManager._newArr=[];
	TouchManager._tEleArr=[];
	__static(TouchManager,
	['I',function(){return this.I=new TouchManager();}
	]);
	return TouchManager;
})()


/**
*<code>Filter</code> 是滤镜基类。
*/
//class laya.filters.Filter
var Filter=(function(){
	function Filter(){
		/**@private */
		this._action=null;
	}

	__class(Filter,'laya.filters.Filter');
	var __proto=Filter.prototype;
	Laya.imps(__proto,{"laya.filters.IFilter":true})
	/**@private */
	__proto.callNative=function(sp){}
	/**@private 滤镜类型。*/
	__getset(0,__proto,'type',function(){return-1});
	/**@private 滤镜动作。*/
	__getset(0,__proto,'action',function(){return this._action });
	Filter.BLUR=0x10;
	Filter.COLOR=0x20;
	Filter.GLOW=0x08;
	Filter._filterStart=null;
	Filter._filterEnd=null;
	Filter._EndTarget=null;
	Filter._recycleScope=null;
	Filter._filter=null;
	Filter._useSrc=null;
	Filter._endSrc=null;
	Filter._useOut=null;
	Filter._endOut=null;
	return Filter;
})()


/**
*@private
*<code>ColorFilterAction</code> 是一个颜色滤镜应用类。
*/
//class laya.filters.ColorFilterAction
var ColorFilterAction=(function(){
	function ColorFilterAction(){
		this.data=null;
	}

	__class(ColorFilterAction,'laya.filters.ColorFilterAction');
	var __proto=ColorFilterAction.prototype;
	Laya.imps(__proto,{"laya.filters.IFilterAction":true})
	/**
	*给指定的对象应用颜色滤镜。
	*@param srcCanvas 需要应用画布对象。
	*@return 应用了滤镜后的画布对象。
	*/
	__proto.apply=function(srcCanvas){
		var ctx=srcCanvas.ctx.ctx;
		var canvas=srcCanvas.ctx.ctx.canvas;
		if (canvas.width==0 || canvas.height==0)return canvas;
		var imgdata=ctx.getImageData(0,0,canvas.width,canvas.height);
		var data=imgdata.data;
		var nData;
		for (var i=0,n=data.length;i < n;i+=4){
			nData=this.getColor(data[i],data[i+1],data[i+2],data[i+3]);
			if (data[i+3]==0)continue ;
			data[i]=nData[0];
			data[i+1]=nData[1];
			data[i+2]=nData[2];
			data[i+3]=nData[3];
		}
		ctx.putImageData(imgdata,0,0);
		return srcCanvas;
	}

	__proto.getColor=function(red,green,blue,alpha){
		var rst=[];
		if (this.data._mat && this.data._alpha){
			var mat=this.data._mat;
			var tempAlpha=this.data._alpha;
			rst[0]=mat[0] *red+mat[1] *green+mat[2] *blue+mat[3] *alpha+tempAlpha[0];
			rst[1]=mat[4] *red+mat[5] *green+mat[6] *blue+mat[7] *alpha+tempAlpha[1];
			rst[2]=mat[8] *red+mat[9] *green+mat[10] *blue+mat[11] *alpha+tempAlpha[2];
			rst[3]=mat[12] *red+mat[13] *green+mat[14] *blue+mat[15] *alpha+tempAlpha[3];
		}
		return rst;
	}

	return ColorFilterAction;
})()


/**
*默认的FILTER,什么都不做
*@private
*/
//class laya.filters.FilterAction
var FilterAction=(function(){
	function FilterAction(){
		this.data=null;
	}

	__class(FilterAction,'laya.filters.FilterAction');
	var __proto=FilterAction.prototype;
	Laya.imps(__proto,{"laya.filters.IFilterAction":true})
	__proto.apply=function(data){
		return null;
	}

	return FilterAction;
})()


//class laya.filters.webgl.FilterActionGL
var FilterActionGL=(function(){
	function FilterActionGL(){}
	__class(FilterActionGL,'laya.filters.webgl.FilterActionGL');
	var __proto=FilterActionGL.prototype;
	Laya.imps(__proto,{"laya.filters.IFilterActionGL":true})
	__proto.setValue=function(shader){}
	__proto.setValueMix=function(shader){}
	__proto.apply3d=function(scope,sprite,context,x,y){return null;}
	__proto.apply=function(srcCanvas){return null;}
	__getset(0,__proto,'typeMix',function(){
		return 0;
	});

	return FilterActionGL;
})()


/**
*@private
*/
//class laya.filters.WebGLFilter
var WebGLFilter=(function(){
	function WebGLFilter(){}
	__class(WebGLFilter,'laya.filters.WebGLFilter');
	WebGLFilter.enable=function(){
		if (WebGLFilter.isInit)return;
		WebGLFilter.isInit=true;
		if (!Render.isWebGL)return;
		RunDriver.createFilterAction=function (type){
			var action;
			switch (type){
				case 0x20:
					action=new ColorFilterActionGL();
					break ;
				case 0x10:
					action=new BlurFilterActionGL();
					break ;
				case 0x08:
					action=new GlowFilterActionGL();
					break ;
				}
			return action;
		}
	}

	WebGLFilter.isInit=false;
	WebGLFilter.__init$=function(){
		BlurFilterActionGL;
		ColorFilterActionGL;
		GlowFilterActionGL;
		Render;
		RunDriver;{
			RunDriver.createFilterAction=function (type){
				var action;
				switch (type){
					case 0x10:
						action=new FilterAction();
						break ;
					case 0x08:
						action=new FilterAction();
						break ;
					case 0x20:
						action=new ColorFilterAction();
						break ;
					}
				return action;
			}
		}
	}

	return WebGLFilter;
})()


/**
*@private
*/
//class laya.maths.Arith
var Arith=(function(){
	function Arith(){}
	__class(Arith,'laya.maths.Arith');
	Arith.formatR=function(r){
		if (r > Math.PI)r-=Math.PI *2;
		if (r <-Math.PI)r+=Math.PI *2;
		return r;
	}

	Arith.isPOT=function(w,h){
		return (w > 0 && (w & (w-1))===0 && h > 0 && (h & (h-1))===0);
	}

	Arith.setMatToArray=function(mat,array){
		mat.a,mat.b,0,0,mat.c,mat.d,0,0,0,0,1,0,mat.tx+20,mat.ty+20,0,1
		array[0]=mat.a;
		array[1]=mat.b;
		array[4]=mat.c;
		array[5]=mat.d;
		array[12]=mat.tx;
		array[13]=mat.ty;
	}

	return Arith;
})()


/**
*@private
*计算贝塞尔曲线的工具类。
*/
//class laya.maths.Bezier
var Bezier=(function(){
	function Bezier(){
		/**@private */
		this._controlPoints=[new Point(),new Point(),new Point()];
		this._calFun=this.getPoint2;
	}

	__class(Bezier,'laya.maths.Bezier');
	var __proto=Bezier.prototype;
	/**@private */
	__proto._switchPoint=function(x,y){
		var tPoint=this._controlPoints.shift();
		tPoint.setTo(x,y);
		this._controlPoints.push(tPoint);
	}

	/**
	*计算二次贝塞尔点。
	*@param t
	*@param rst
	*
	*/
	__proto.getPoint2=function(t,rst){
		var p1=this._controlPoints[0];
		var p2=this._controlPoints[1];
		var p3=this._controlPoints[2];
		var lineX=Math.pow((1-t),2)*p1.x+2 *t *(1-t)*p2.x+Math.pow(t,2)*p3.x;
		var lineY=Math.pow((1-t),2)*p1.y+2 *t *(1-t)*p2.y+Math.pow(t,2)*p3.y;
		rst.push(lineX,lineY);
	}

	/**
	*计算三次贝塞尔点
	*@param t
	*@param rst
	*
	*/
	__proto.getPoint3=function(t,rst){
		var p1=this._controlPoints[0];
		var p2=this._controlPoints[1];
		var p3=this._controlPoints[2];
		var p4=this._controlPoints[3];
		var lineX=Math.pow((1-t),3)*p1.x+3 *p2.x *t *(1-t)*(1-t)+3 *p3.x *t *t *(1-t)+p4.x *Math.pow(t,3);
		var lineY=Math.pow((1-t),3)*p1.y+3 *p2.y *t *(1-t)*(1-t)+3 *p3.y *t *t *(1-t)+p4.y *Math.pow(t,3);
		rst.push(lineX,lineY);
	}

	/**
	*计算贝塞尔点序列
	*@param count
	*@param rst
	*
	*/
	__proto.insertPoints=function(count,rst){
		var i=NaN;
		count=count > 0 ? count :5;
		var dLen=NaN;
		dLen=1 / count;
		for (i=0;i <=1;i+=dLen){
			this._calFun(i,rst);
		}
	}

	/**
	*获取贝塞尔曲线上的点。
	*@param pList 控制点[x0,y0,x1,y1...]
	*@param inSertCount 每次曲线的插值数量
	*@return
	*
	*/
	__proto.getBezierPoints=function(pList,inSertCount,count){
		(inSertCount===void 0)&& (inSertCount=5);
		(count===void 0)&& (count=2);
		var i=0,len=0;
		len=pList.length;
		if (len < (count+1)*2)return [];
		var rst;
		rst=[];
		switch (count){
			case 2:
				this._calFun=this.getPoint2;
				break ;
			case 3:
				this._calFun=this.getPoint3;
				break ;
			default :
				return [];
			}
		while (this._controlPoints.length <=count){
			this._controlPoints.push(new Point());
		}
		for (i=0;i < count *2;i+=2){
			this._switchPoint(pList[i],pList[i+1]);
		}
		for (i=count *2;i < len;i+=2){
			this._switchPoint(pList[i],pList[i+1]);
			if ((i / 2)% count==0)
				this.insertPoints(inSertCount,rst);
		}
		return rst;
	}

	__static(Bezier,
	['I',function(){return this.I=new Bezier();}
	]);
	return Bezier;
})()


/**
*@private
*凸包算法。
*/
//class laya.maths.GrahamScan
var GrahamScan=(function(){
	function GrahamScan(){}
	__class(GrahamScan,'laya.maths.GrahamScan');
	GrahamScan.multiply=function(p1,p2,p0){
		return ((p1.x-p0.x)*(p2.y-p0.y)-(p2.x-p0.x)*(p1.y-p0.y));
	}

	GrahamScan.dis=function(p1,p2){
		return (p1.x-p2.x)*(p1.x-p2.x)+(p1.y-p2.y)*(p1.y-p2.y);
	}

	GrahamScan._getPoints=function(count,tempUse,rst){
		(tempUse===void 0)&& (tempUse=false);
		if (!GrahamScan._mPointList)GrahamScan._mPointList=[];
		while (GrahamScan._mPointList.length < count)GrahamScan._mPointList.push(new Point());
		if (!rst)rst=[];
		rst.length=0;
		if (tempUse){
			GrahamScan.getFrom(rst,GrahamScan._mPointList,count);
			}else {
			GrahamScan.getFromR(rst,GrahamScan._mPointList,count);
		}
		return rst;
	}

	GrahamScan.getFrom=function(rst,src,count){
		var i=0;
		for (i=0;i < count;i++){
			rst.push(src[i]);
		}
		return rst;
	}

	GrahamScan.getFromR=function(rst,src,count){
		var i=0;
		for (i=0;i < count;i++){
			rst.push(src.pop());
		}
		return rst;
	}

	GrahamScan.pListToPointList=function(pList,tempUse){
		(tempUse===void 0)&& (tempUse=false);
		var i=0,len=pList.length / 2,rst=GrahamScan._getPoints(len,tempUse,GrahamScan._tempPointList);
		for (i=0;i < len;i++){
			rst[i].setTo(pList[i+i],pList[i+i+1]);
		}
		return rst;
	}

	GrahamScan.pointListToPlist=function(pointList){
		var i=0,len=pointList.length,rst=GrahamScan._temPList,tPoint;
		rst.length=0;
		for (i=0;i < len;i++){
			tPoint=pointList[i];
			rst.push(tPoint.x,tPoint.y);
		}
		return rst;
	}

	GrahamScan.scanPList=function(pList){
		return Utils.copyArray(pList,GrahamScan.pointListToPlist(GrahamScan.scan(GrahamScan.pListToPointList(pList,true))));
	}

	GrahamScan.scan=function(PointSet){
		var i=0,j=0,k=0,top=2,tmp,n=PointSet.length,ch;
		var _tmpDic={};
		var key;
		ch=GrahamScan._temArr;
		ch.length=0;
		n=PointSet.length;
		for (i=n-1;i >=0;i--){
			tmp=PointSet[i];
			key=tmp.x+"_"+tmp.y;
			if (!_tmpDic.hasOwnProperty(key)){
				_tmpDic[key]=true;
				ch.push(tmp);
			}
		}
		n=ch.length;
		Utils.copyArray(PointSet,ch);
		for (i=1;i < n;i++)
		if ((PointSet[i].y < PointSet[k].y)|| ((PointSet[i].y==PointSet[k].y)&& (PointSet[i].x < PointSet[k].x)))
			k=i;
		tmp=PointSet[0];
		PointSet[0]=PointSet[k];
		PointSet[k]=tmp;
		for (i=1;i < n-1;i++){
			k=i;
			for (j=i+1;j < n;j++)
			if ((GrahamScan.multiply(PointSet[j],PointSet[k],PointSet[0])> 0)|| ((GrahamScan.multiply(PointSet[j],PointSet[k],PointSet[0])==0)&& (GrahamScan.dis(PointSet[0],PointSet[j])< GrahamScan.dis(PointSet[0],PointSet[k]))))
				k=j;
			tmp=PointSet[i];
			PointSet[i]=PointSet[k];
			PointSet[k]=tmp;
		}
		ch=GrahamScan._temArr;
		ch.length=0;
		if (PointSet.length < 3){
			return Utils.copyArray(ch,PointSet);
		}
		ch.push(PointSet[0],PointSet[1],PointSet[2]);
		for (i=3;i < n;i++){
			while (ch.length >=2 && GrahamScan.multiply(PointSet[i],ch[ch.length-1],ch[ch.length-2])>=0)ch.pop();
			PointSet[i] && ch.push(PointSet[i]);
		}
		return ch;
	}

	GrahamScan._mPointList=null;
	GrahamScan._tempPointList=[];
	GrahamScan._temPList=[];
	GrahamScan._temArr=[];
	return GrahamScan;
})()


/**
*@private
*<code>MathUtil</code> 是一个数据处理工具类。
*/
//class laya.maths.MathUtil
var MathUtil$1=(function(){
	function MathUtil(){}
	__class(MathUtil,'laya.maths.MathUtil',null,'MathUtil$1');
	MathUtil.subtractVector3=function(l,r,o){
		o[0]=l[0]-r[0];
		o[1]=l[1]-r[1];
		o[2]=l[2]-r[2];
	}

	MathUtil.lerp=function(left,right,amount){
		return left *(1-amount)+right *amount;
	}

	MathUtil.scaleVector3=function(f,b,e){
		e[0]=f[0] *b;
		e[1]=f[1] *b;
		e[2]=f[2] *b;
	}

	MathUtil.lerpVector3=function(l,r,t,o){
		var ax=l[0],ay=l[1],az=l[2];
		o[0]=ax+t *(r[0]-ax);
		o[1]=ay+t *(r[1]-ay);
		o[2]=az+t *(r[2]-az);
	}

	MathUtil.lerpVector4=function(l,r,t,o){
		var ax=l[0],ay=l[1],az=l[2],aw=l[3];
		o[0]=ax+t *(r[0]-ax);
		o[1]=ay+t *(r[1]-ay);
		o[2]=az+t *(r[2]-az);
		o[3]=aw+t *(r[3]-aw);
	}

	MathUtil.slerpQuaternionArray=function(a,Offset1,b,Offset2,t,out,Offset3){
		var ax=a[Offset1+0],ay=a[Offset1+1],az=a[Offset1+2],aw=a[Offset1+3],bx=b[Offset2+0],by=b[Offset2+1],bz=b[Offset2+2],bw=b[Offset2+3];
		var omega,cosom,sinom,scale0,scale1;
		cosom=ax *bx+ay *by+az *bz+aw *bw;
		if (cosom < 0.0){
			cosom=-cosom;
			bx=-bx;
			by=-by;
			bz=-bz;
			bw=-bw;
		}
		if ((1.0-cosom)> 0.000001){
			omega=Math.acos(cosom);
			sinom=Math.sin(omega);
			scale0=Math.sin((1.0-t)*omega)/ sinom;
			scale1=Math.sin(t *omega)/ sinom;
			}else {
			scale0=1.0-t;
			scale1=t;
		}
		out[Offset3+0]=scale0 *ax+scale1 *bx;
		out[Offset3+1]=scale0 *ay+scale1 *by;
		out[Offset3+2]=scale0 *az+scale1 *bz;
		out[Offset3+3]=scale0 *aw+scale1 *bw;
		return out;
	}

	MathUtil.getRotation=function(x0,y0,x1,y1){
		return Math.atan2(y1-y0,x1-x0)/ Math.PI *180;
	}

	MathUtil.sortBigFirst=function(a,b){
		if (a==b)
			return 0;
		return b > a ? 1 :-1;
	}

	MathUtil.sortSmallFirst=function(a,b){
		if (a==b)
			return 0;
		return b > a ?-1 :1;
	}

	MathUtil.sortNumBigFirst=function(a,b){
		return parseFloat(b)-parseFloat(a);
	}

	MathUtil.sortNumSmallFirst=function(a,b){
		return parseFloat(a)-parseFloat(b);
	}

	MathUtil.sortByKey=function(key,bigFirst,forceNum){
		(bigFirst===void 0)&& (bigFirst=false);
		(forceNum===void 0)&& (forceNum=true);
		var _sortFun;
		if (bigFirst){
			_sortFun=forceNum ? MathUtil.sortNumBigFirst :MathUtil.sortBigFirst;
			}else {
			_sortFun=forceNum ? MathUtil.sortNumSmallFirst :MathUtil.sortSmallFirst;
		}
		return function (a,b){
			return _sortFun(a[key],b[key]);
		}
	}

	return MathUtil;
})()


/**
*<p> <code>Matrix</code> 类表示一个转换矩阵，它确定如何将点从一个坐标空间映射到另一个坐标空间。</p>
*<p>您可以对一个显示对象执行不同的图形转换，方法是设置 Matrix 对象的属性，将该 Matrix 对象应用于 Transform 对象的 matrix 属性，然后应用该 Transform 对象作为显示对象的 transform 属性。这些转换函数包括平移（x 和 y 重新定位）、旋转、缩放和倾斜。</p>
*/
//class laya.maths.Matrix
var Matrix=(function(){
	function Matrix(a,b,c,d,tx,ty){
		/**缩放或旋转图像时影响像素沿 x 轴定位的值。*/
		//this.a=NaN;
		/**旋转或倾斜图像时影响像素沿 y 轴定位的值。*/
		//this.b=NaN;
		/**旋转或倾斜图像时影响像素沿 x 轴定位的值。*/
		//this.c=NaN;
		/**缩放或旋转图像时影响像素沿 y 轴定位的值。*/
		//this.d=NaN;
		/**沿 x 轴平移每个点的距离。*/
		//this.tx=NaN;
		/**沿 y 轴平移每个点的距离。*/
		//this.ty=NaN;
		/**@private 表示此对象是否在对象池中。*/
		this.inPool=false;
		/**@private 是否有改变矩阵的值。*/
		this.bTransform=false;
		(a===void 0)&& (a=1);
		(b===void 0)&& (b=0);
		(c===void 0)&& (c=0);
		(d===void 0)&& (d=1);
		(tx===void 0)&& (tx=0);
		(ty===void 0)&& (ty=0);
		this.a=a;
		this.b=b;
		this.c=c;
		this.d=d;
		this.tx=tx;
		this.ty=ty;
		this._checkTransform();
	}

	__class(Matrix,'laya.maths.Matrix');
	var __proto=Matrix.prototype;
	/**
	*将本矩阵设置为单位矩阵。
	*@return 返回当前矩形。
	*/
	__proto.identity=function(){
		this.a=this.d=1;
		this.b=this.tx=this.ty=this.c=0;
		this.bTransform=false;
		return this;
	}

	/**@private */
	__proto._checkTransform=function(){
		return this.bTransform=(this.a!==1 || this.b!==0 || this.c!==0 || this.d!==1);
	}

	/**
	*设置沿 x 、y 轴平移每个点的距离。
	*@param x 沿 x 轴平移每个点的距离。
	*@param y 沿 y 轴平移每个点的距离。
	*@return 返回对象本身
	*/
	__proto.setTranslate=function(x,y){
		this.tx=x;
		this.ty=y;
		return this;
	}

	/**
	*沿 x 和 y 轴平移矩阵，平移的变化量由 x 和 y 参数指定。
	*@param x 沿 x 轴向右移动的量（以像素为单位）。
	*@param y 沿 y 轴向下移动的量（以像素为单位）。
	*@return 返回此矩形对象。
	*/
	__proto.translate=function(x,y){
		this.tx+=x;
		this.ty+=y;
		return this;
	}

	/**
	*对矩阵应用缩放转换。
	*@param x 用于沿 x 轴缩放对象的乘数。
	*@param y 用于沿 y 轴缩放对象的乘数。
	*/
	__proto.scale=function(x,y){
		this.a *=x;
		this.d *=y;
		this.c *=x;
		this.b *=y;
		this.tx *=x;
		this.ty *=y;
		this.bTransform=true;
	}

	/**
	*对 Matrix 对象应用旋转转换。
	*@param angle 以弧度为单位的旋转角度。
	*/
	__proto.rotate=function(angle){
		var cos=Math.cos(angle);
		var sin=Math.sin(angle);
		var a1=this.a;
		var c1=this.c;
		var tx1=this.tx;
		this.a=a1 *cos-this.b *sin;
		this.b=a1 *sin+this.b *cos;
		this.c=c1 *cos-this.d *sin;
		this.d=c1 *sin+this.d *cos;
		this.tx=tx1 *cos-this.ty *sin;
		this.ty=tx1 *sin+this.ty *cos;
		this.bTransform=true;
	}

	/**
	*对 Matrix 对象应用倾斜转换。
	*@param x 沿着 X 轴的 2D 倾斜弧度。
	*@param y 沿着 Y 轴的 2D 倾斜弧度。
	*@return 当前 Matrix 对象。
	*/
	__proto.skew=function(x,y){
		var tanX=Math.tan(x);
		var tanY=Math.tan(y);
		var a1=this.a;
		var b1=this.b;
		this.a+=tanY *this.c;
		this.b+=tanY *this.d;
		this.c+=tanX *a1;
		this.d+=tanX *b1;
		return this;
	}

	/**
	*对指定的点应用当前矩阵的逆转化并返回此点。
	*@param out 待转化的点 Point 对象。
	*@return 返回out
	*/
	__proto.invertTransformPoint=function(out){
		var a1=this.a;
		var b1=this.b;
		var c1=this.c;
		var d1=this.d;
		var tx1=this.tx;
		var n=a1 *d1-b1 *c1;
		var a2=d1 / n;
		var b2=-b1 / n;
		var c2=-c1 / n;
		var d2=a1 / n;
		var tx2=(c1 *this.ty-d1 *tx1)/ n;
		var ty2=-(a1 *this.ty-b1 *tx1)/ n;
		return out.setTo(a2 *out.x+c2 *out.y+tx2,b2 *out.x+d2 *out.y+ty2);
	}

	/**
	*将 Matrix 对象表示的几何转换应用于指定点。
	*@param out 用来设定输出结果的点。
	*@return 返回out
	*/
	__proto.transformPoint=function(out){
		return out.setTo(this.a *out.x+this.c *out.y+this.tx,this.b *out.x+this.d *out.y+this.ty);
	}

	/**
	*将 Matrix 对象表示的几何转换应用于指定点，忽略tx、ty。
	*@param out 用来设定输出结果的点。
	*@return 返回out
	*/
	__proto.transformPointN=function(out){
		return out.setTo(this.a *out.x+this.c *out.y ,this.b *out.x+this.d *out.y);
	}

	/**
	*@private
	*将 Matrix 对象表示的几何转换应用于指定点。
	*@param data 点集合。
	*@param out 存储应用转化的点的列表。
	*@return 返回out数组
	*/
	__proto.transformPointArray=function(data,out){
		var len=data.length;
		for (var i=0;i < len;i+=2){
			var x=data[i],y=data[i+1];
			out[i]=this.a *x+this.c *y+this.tx;
			out[i+1]=this.b *x+this.d *y+this.ty;
		}
		return out;
	}

	/**
	*@private
	*将 Matrix 对象表示的几何缩放转换应用于指定点。
	*@param data 点集合。
	*@param out 存储应用转化的点的列表。
	*@return 返回out数组
	*/
	__proto.transformPointArrayScale=function(data,out){
		var len=data.length;
		for (var i=0;i < len;i+=2){
			var x=data[i],y=data[i+1];
			out[i]=this.a *x+this.c *y;
			out[i+1]=this.b *x+this.d *y;
		}
		return out;
	}

	/**
	*获取 X 轴缩放值。
	*@return X 轴缩放值。
	*/
	__proto.getScaleX=function(){
		return this.b===0 ? this.a :Math.sqrt(this.a *this.a+this.b *this.b);
	}

	/**
	*获取 Y 轴缩放值。
	*@return Y 轴缩放值。
	*/
	__proto.getScaleY=function(){
		return this.c===0 ? this.d :Math.sqrt(this.c *this.c+this.d *this.d);
	}

	/**
	*执行原始矩阵的逆转换。
	*@return 当前矩阵对象。
	*/
	__proto.invert=function(){
		var a1=this.a;
		var b1=this.b;
		var c1=this.c;
		var d1=this.d;
		var tx1=this.tx;
		var n=a1 *d1-b1 *c1;
		this.a=d1 / n;
		this.b=-b1 / n;
		this.c=-c1 / n;
		this.d=a1 / n;
		this.tx=(c1 *this.ty-d1 *tx1)/ n;
		this.ty=-(a1 *this.ty-b1 *tx1)/ n;
		return this;
	}

	/**
	*将 Matrix 的成员设置为指定值。
	*@param a 缩放或旋转图像时影响像素沿 x 轴定位的值。
	*@param b 旋转或倾斜图像时影响像素沿 y 轴定位的值。
	*@param c 旋转或倾斜图像时影响像素沿 x 轴定位的值。
	*@param d 缩放或旋转图像时影响像素沿 y 轴定位的值。
	*@param tx 沿 x 轴平移每个点的距离。
	*@param ty 沿 y 轴平移每个点的距离。
	*@return 当前矩阵对象。
	*/
	__proto.setTo=function(a,b,c,d,tx,ty){
		this.a=a,this.b=b,this.c=c,this.d=d,this.tx=tx,this.ty=ty;
		return this;
	}

	/**
	*将指定矩阵与当前矩阵连接，从而将这两个矩阵的几何效果有效地结合在一起。
	*@param matrix 要连接到源矩阵的矩阵。
	*@return 当前矩阵。
	*/
	__proto.concat=function(matrix){
		var a=this.a;
		var c=this.c;
		var tx=this.tx;
		this.a=a *matrix.a+this.b *matrix.c;
		this.b=a *matrix.b+this.b *matrix.d;
		this.c=c *matrix.a+this.d *matrix.c;
		this.d=c *matrix.b+this.d *matrix.d;
		this.tx=tx *matrix.a+this.ty *matrix.c+matrix.tx;
		this.ty=tx *matrix.b+this.ty *matrix.d+matrix.ty;
		return this;
	}

	/**
	*@private
	*对矩阵应用缩放转换。反向相乘
	*@param x 用于沿 x 轴缩放对象的乘数。
	*@param y 用于沿 y 轴缩放对象的乘数。
	*/
	__proto.scaleEx=function(x,y){
		var ba=this.a,bb=this.b,bc=this.c,bd=this.d;
		if (bb!==0 || bc!==0){
			this.a=x *ba;
			this.b=x *bb;
			this.c=y *bc;
			this.d=y *bd;
			}else {
			this.a=x *ba;
			this.b=0 *bd;
			this.c=0 *ba;
			this.d=y *bd;
		}
		this.bTransform=true;
	}

	/**
	*@private
	*对 Matrix 对象应用旋转转换。反向相乘
	*@param angle 以弧度为单位的旋转角度。
	*/
	__proto.rotateEx=function(angle){
		var cos=Math.cos(angle);
		var sin=Math.sin(angle);
		var ba=this.a,bb=this.b,bc=this.c,bd=this.d;
		if (bb!==0 || bc!==0){
			this.a=cos *ba+sin *bc;
			this.b=cos *bb+sin *bd;
			this.c=-sin *ba+cos *bc;
			this.d=-sin *bb+cos *bd;
			}else {
			this.a=cos *ba;
			this.b=sin *bd;
			this.c=-sin *ba;
			this.d=cos *bd;
		}
		this.bTransform=true;
	}

	/**
	*返回此 Matrix 对象的副本。
	*@return 与原始实例具有完全相同的属性的新 Matrix 实例。
	*/
	__proto.clone=function(){
		var dec=Matrix.create();
		dec.a=this.a;
		dec.b=this.b;
		dec.c=this.c;
		dec.d=this.d;
		dec.tx=this.tx;
		dec.ty=this.ty;
		dec.bTransform=this.bTransform;
		return dec;
	}

	/**
	*将当前 Matrix 对象中的所有矩阵数据复制到指定的 Matrix 对象中。
	*@param dec 要复制当前矩阵数据的 Matrix 对象。
	*@return 已复制当前矩阵数据的 Matrix 对象。
	*/
	__proto.copyTo=function(dec){
		dec.a=this.a;
		dec.b=this.b;
		dec.c=this.c;
		dec.d=this.d;
		dec.tx=this.tx;
		dec.ty=this.ty;
		dec.bTransform=this.bTransform;
		return dec;
	}

	/**
	*返回列出该 Matrix 对象属性的文本值。
	*@return 一个字符串，它包含 Matrix 对象的属性值：a、b、c、d、tx 和 ty。
	*/
	__proto.toString=function(){
		return this.a+","+this.b+","+this.c+","+this.d+","+this.tx+","+this.ty;
	}

	/**
	*销毁此对象。
	*/
	__proto.destroy=function(){
		if (this.inPool)return;
		var cache=Matrix._cache;
		this.inPool=true;
		cache._length || (cache._length=0);
		cache[cache._length++]=this;
		this.a=this.d=1;
		this.b=this.c=this.tx=this.ty=0;
		this.bTransform=false;
	}

	Matrix.mul=function(m1,m2,out){
		var aa=m1.a,ab=m1.b,ac=m1.c,ad=m1.d,atx=m1.tx,aty=m1.ty;
		var ba=m2.a,bb=m2.b,bc=m2.c,bd=m2.d,btx=m2.tx,bty=m2.ty;
		if (bb!==0 || bc!==0){
			out.a=aa *ba+ab *bc;
			out.b=aa *bb+ab *bd;
			out.c=ac *ba+ad *bc;
			out.d=ac *bb+ad *bd;
			out.tx=ba *atx+bc *aty+btx;
			out.ty=bb *atx+bd *aty+bty;
			}else {
			out.a=aa *ba;
			out.b=ab *bd;
			out.c=ac *ba;
			out.d=ad *bd;
			out.tx=ba *atx+btx;
			out.ty=bd *aty+bty;
		}
		return out;
	}

	Matrix.mul16=function(m1,m2,out){
		var aa=m1.a,ab=m1.b,ac=m1.c,ad=m1.d,atx=m1.tx,aty=m1.ty;
		var ba=m2.a,bb=m2.b,bc=m2.c,bd=m2.d,btx=m2.tx,bty=m2.ty;
		if (bb!==0 || bc!==0){
			out[0]=aa *ba+ab *bc;
			out[1]=aa *bb+ab *bd;
			out[4]=ac *ba+ad *bc;
			out[5]=ac *bb+ad *bd;
			out[12]=ba *atx+bc *aty+btx;
			out[13]=bb *atx+bd *aty+bty;
			}else {
			out[0]=aa *ba;
			out[1]=ab *bd;
			out[4]=ac *ba;
			out[5]=ad *bd;
			out[12]=ba *atx+btx;
			out[13]=bd *aty+bty;
		}
		return out;
	}

	Matrix.mulPre=function(m1,ba,bb,bc,bd,btx,bty,out){
		var aa=m1.a,ab=m1.b,ac=m1.c,ad=m1.d,atx=m1.tx,aty=m1.ty;
		if (bb!==0 || bc!==0){
			out.a=aa *ba+ab *bc;
			out.b=aa *bb+ab *bd;
			out.c=ac *ba+ad *bc;
			out.d=ac *bb+ad *bd;
			out.tx=ba *atx+bc *aty+btx;
			out.ty=bb *atx+bd *aty+bty;
			}else {
			out.a=aa *ba;
			out.b=ab *bd;
			out.c=ac *ba;
			out.d=ad *bd;
			out.tx=ba *atx+btx;
			out.ty=bd *aty+bty;
		}
		return out;
	}

	Matrix.mulPos=function(m1,aa,ab,ac,ad,atx,aty,out){
		var ba=m1.a,bb=m1.b,bc=m1.c,bd=m1.d,btx=m1.tx,bty=m1.ty;
		if (bb!==0 || bc!==0){
			out.a=aa *ba+ab *bc;
			out.b=aa *bb+ab *bd;
			out.c=ac *ba+ad *bc;
			out.d=ac *bb+ad *bd;
			out.tx=ba *atx+bc *aty+btx;
			out.ty=bb *atx+bd *aty+bty;
			}else {
			out.a=aa *ba;
			out.b=ab *bd;
			out.c=ac *ba;
			out.d=ad *bd;
			out.tx=ba *atx+btx;
			out.ty=bd *aty+bty;
		}
		return out;
	}

	Matrix.preMul=function(parent,self,out){
		var pa=parent.a,pb=parent.b,pc=parent.c,pd=parent.d;
		var na=self.a,nb=self.b,nc=self.c,nd=self.d,ntx=self.tx,nty=self.ty;
		out.a=na *pa;
		out.b=out.c=0;
		out.d=nd *pd;
		out.tx=ntx *pa+parent.tx;
		out.ty=nty *pd+parent.ty;
		if (nb!==0 || nc!==0 || pb!==0 || pc!==0){
			out.a+=nb *pc;
			out.d+=nc *pb;
			out.b+=na *pb+nb *pd;
			out.c+=nc *pa+nd *pc;
			out.tx+=nty *pc;
			out.ty+=ntx *pb;
		}
		return out;
	}

	Matrix.preMulXY=function(parent,x,y,out){
		var pa=parent.a,pb=parent.b,pc=parent.c,pd=parent.d;
		out.a=pa;
		out.b=pb;
		out.c=pc;
		out.d=pd;
		out.tx=x *pa+parent.tx+y *pc;
		out.ty=y *pd+parent.ty+x *pb;
		return out;
	}

	Matrix.create=function(){
		var cache=Matrix._cache;
		var mat=!cache._length ? (new Matrix()):cache[--cache._length];
		mat.inPool=false;
		return mat;
	}

	Matrix.EMPTY=new Matrix();
	Matrix.TEMP=new Matrix();
	Matrix._cache=[];
	return Matrix;
})()


/**
*<code>Point</code> 对象表示二维坐标系统中的某个位置，其中 x 表示水平轴，y 表示垂直轴。
*/
//class laya.maths.Point
var Point=(function(){
	function Point(x,y){
		/**该点的水平坐标。*/
		//this.x=NaN;
		/**该点的垂直坐标。*/
		//this.y=NaN;
		(x===void 0)&& (x=0);
		(y===void 0)&& (y=0);
		this.x=x;
		this.y=y;
	}

	__class(Point,'laya.maths.Point');
	var __proto=Point.prototype;
	/**
	*将 <code>Point</code> 的成员设置为指定值。
	*@param x 水平坐标。
	*@param y 垂直坐标。
	*@return 当前 Point 对象。
	*/
	__proto.setTo=function(x,y){
		this.x=x;
		this.y=y;
		return this;
	}

	/**
	*计算当前点和目标点(x，y)的距离。
	*@param x 水平坐标。
	*@param y 垂直坐标。
	*@return 返回当前点和目标点之间的距离。
	*/
	__proto.distance=function(x,y){
		return Math.sqrt((this.x-x)*(this.x-x)+(this.y-y)*(this.y-y));
	}

	/**返回包含 x 和 y 坐标的值的字符串。*/
	__proto.toString=function(){
		return this.x+","+this.y;
	}

	/**
	*标准化向量。
	*/
	__proto.normalize=function(){
		var d=Math.sqrt(this.x *this.x+this.y *this.y);
		if (d > 0){
			var id=1.0 / d;
			this.x *=id;
			this.y *=id;
		}
	}

	Point.TEMP=new Point();
	Point.EMPTY=new Point();
	return Point;
})()


/**
*<p><code>Rectangle</code> 对象是按其位置（由它左上角的点 (x,y)确定）以及宽度和高度定义的区域。</p>
*<p>Rectangle 类的 x、y、width 和 height 属性相互独立；更改一个属性的值不会影响其他属性。</p>
*/
//class laya.maths.Rectangle
var Rectangle=(function(){
	function Rectangle(x,y,width,height){
		/**矩形左上角的 X 轴坐标。*/
		//this.x=NaN;
		/**矩形左上角的 Y 轴坐标。*/
		//this.y=NaN;
		/**矩形的宽度。*/
		//this.width=NaN;
		/**矩形的高度。*/
		//this.height=NaN;
		(x===void 0)&& (x=0);
		(y===void 0)&& (y=0);
		(width===void 0)&& (width=0);
		(height===void 0)&& (height=0);
		this.x=x;
		this.y=y;
		this.width=width;
		this.height=height;
	}

	__class(Rectangle,'laya.maths.Rectangle');
	var __proto=Rectangle.prototype;
	/**
	*将 Rectangle 的属性设置为指定值。
	*@param x x 矩形左上角的 X 轴坐标。
	*@param y x 矩形左上角的 Y 轴坐标。
	*@param width 矩形的宽度。
	*@param height 矩形的高。
	*@return 返回属性值修改后的矩形对象本身。
	*/
	__proto.setTo=function(x,y,width,height){
		this.x=x;
		this.y=y;
		this.width=width;
		this.height=height;
		return this;
	}

	/**
	*复制 source 对象的属性值到此矩形对象中。
	*@param sourceRect 源 Rectangle 对象。
	*@return 返回属性值修改后的矩形对象本身。
	*/
	__proto.copyFrom=function(source){
		this.x=source.x;
		this.y=source.y;
		this.width=source.width;
		this.height=source.height;
		return this;
	}

	/**
	*确定由此 Rectangle 对象定义的矩形区域内是否包含指定的点。
	*@param x 点的 X 轴坐标值（水平位置）。
	*@param y 点的 Y 轴坐标值（垂直位置）。
	*@return 如果 Rectangle 对象包含指定的点，则值为 true；否则为 false。
	*/
	__proto.contains=function(x,y){
		if (this.width <=0 || this.height <=0)return false;
		if (x >=this.x && x < this.right){
			if (y >=this.y && y < this.bottom){
				return true;
			}
		}
		return false;
	}

	/**
	*确定在 rect 参数中指定的对象是否与此 Rectangle 对象相交。此方法检查指定的 Rectangle 对象的 x、y、width 和 height 属性，以查看它是否与此 Rectangle 对象相交。
	*@param rect Rectangle 对象。
	*@return 如果传入的矩形对象与此对象相交，则返回 true 值，否则返回 false。
	*/
	__proto.intersects=function(rect){
		return !(rect.x > (this.x+this.width)|| (rect.x+rect.width)< this.x || rect.y > (this.y+this.height)|| (rect.y+rect.height)< this.y);
	}

	/**
	*如果在 rect 参数中指定的 Rectangle 对象与此 Rectangle 对象相交，则返回交集区域作为 Rectangle 对象。如果矩形不相交，则此方法返回null。
	*@param rect 待比较的矩形区域。
	*@param out （可选）待输出的矩形区域。如果为空则创建一个新的。建议：尽量复用对象，减少对象创建消耗。
	*@return 返回相交的矩形区域对象。
	*/
	__proto.intersection=function(rect,out){
		if (!this.intersects(rect))return null;
		out || (out=new Rectangle());
		out.x=Math.max(this.x,rect.x);
		out.y=Math.max(this.y,rect.y);
		out.width=Math.min(this.right,rect.right)-out.x;
		out.height=Math.min(this.bottom,rect.bottom)-out.y;
		return out;
	}

	/**
	*<p>矩形联合，通过填充两个矩形之间的水平和垂直空间，将这两个矩形组合在一起以创建一个新的 Rectangle 对象。</p>
	*<p>注意：union()方法忽略高度或宽度值为 0 的矩形，如：var rect2:Rectangle=new Rectangle(300,300,50,0);</p>
	*@param 要添加到此 Rectangle 对象的 Rectangle 对象。
	*@param out 用于存储输出结果的矩形对象。如果为空，则创建一个新的。建议：尽量复用对象，减少对象创建消耗。Rectangle.TEMP对象用于对象复用。
	*@return 充当两个矩形的联合的新 Rectangle 对象。
	*/
	__proto.union=function(source,out){
		out || (out=new Rectangle());
		this.clone(out);
		if (source.width <=0 || source.height <=0)return out;
		out.addPoint(source.x,source.y);
		out.addPoint(source.right,source.bottom);
		return this;
	}

	/**
	*返回一个 Rectangle 对象，其 x、y、width 和 height 属性的值与当前 Rectangle 对象的对应值相同。
	*@param out （可选）用于存储结果的矩形对象。如果为空，则创建一个新的。建议：尽量复用对象，减少对象创建消耗。。Rectangle.TEMP对象用于对象复用。
	*@return Rectangle 对象，其 x、y、width 和 height 属性的值与当前 Rectangle 对象的对应值相同。
	*/
	__proto.clone=function(out){
		out || (out=new Rectangle());
		out.x=this.x;
		out.y=this.y;
		out.width=this.width;
		out.height=this.height;
		return out;
	}

	/**
	*当前 Rectangle 对象的水平位置 x 和垂直位置 y 以及高度 width 和宽度 height 以逗号连接成的字符串。
	*/
	__proto.toString=function(){
		return this.x+","+this.y+","+this.width+","+this.height;
	}

	/**
	*检测传入的 Rectangle 对象的属性是否与当前 Rectangle 对象的属性 x、y、width、height 属性值都相等。
	*@param rect 待比较的 Rectangle 对象。
	*@return 如果判断的属性都相等，则返回 true ,否则返回 false。
	*/
	__proto.equals=function(rect){
		if (!rect || rect.x!==this.x || rect.y!==this.y || rect.width!==this.width || rect.height!==this.height)return false;
		return true;
	}

	/**
	*<p>为当前矩形对象加一个点，以使当前矩形扩展为包含当前矩形和此点的最小矩形。</p>
	*<p>此方法会修改本对象。</p>
	*@param x 点的 X 坐标。
	*@param y 点的 Y 坐标。
	*@return 返回此 Rectangle 对象。
	*/
	__proto.addPoint=function(x,y){
		this.x > x && (this.width+=this.x-x,this.x=x);
		this.y > y && (this.height+=this.y-y,this.y=y);
		if (this.width < x-this.x)this.width=x-this.x;
		if (this.height < y-this.y)this.height=y-this.y;
		return this;
	}

	/**
	*@private
	*返回代表当前矩形的顶点数据。
	*@return 顶点数据。
	*/
	__proto._getBoundPoints=function(){
		var rst=Rectangle._temB;
		rst.length=0;
		if (this.width==0 || this.height==0)return rst;
		rst.push(this.x,this.y,this.x+this.width,this.y,this.x,this.y+this.height,this.x+this.width,this.y+this.height);
		return rst;
	}

	/**
	*确定此 Rectangle 对象是否为空。
	*@return 如果 Rectangle 对象的宽度或高度小于等于 0，则返回 true 值，否则返回 false。
	*/
	__proto.isEmpty=function(){
		if (this.width <=0 || this.height <=0)return true;
		return false;
	}

	/**此矩形右侧的 X 轴坐标。 x 和 width 属性的和。*/
	__getset(0,__proto,'right',function(){
		return this.x+this.width;
	});

	/**此矩形底端的 Y 轴坐标。y 和 height 属性的和。*/
	__getset(0,__proto,'bottom',function(){
		return this.y+this.height;
	});

	Rectangle._getBoundPointS=function(x,y,width,height){
		var rst=Rectangle._temA;
		rst.length=0;
		if (width==0 || height==0)return rst;
		rst.push(x,y,x+width,y,x,y+height,x+width,y+height);
		return rst;
	}

	Rectangle._getWrapRec=function(pointList,rst){
		if (!pointList || pointList.length < 1)return rst ? rst.setTo(0,0,0,0):Rectangle.TEMP.setTo(0,0,0,0);
		rst=rst ? rst :new Rectangle();
		var i,len=pointList.length,minX,maxX,minY,maxY,tPoint=Point.TEMP;
		minX=minY=99999;
		maxX=maxY=-minX;
		for (i=0;i < len;i+=2){
			tPoint.x=pointList[i];
			tPoint.y=pointList[i+1];
			minX=minX < tPoint.x ? minX :tPoint.x;
			minY=minY < tPoint.y ? minY :tPoint.y;
			maxX=maxX > tPoint.x ? maxX :tPoint.x;
			maxY=maxY > tPoint.y ? maxY :tPoint.y;
		}
		return rst.setTo(minX,minY,maxX-minX,maxY-minY);
	}

	Rectangle.EMPTY=new Rectangle();
	Rectangle.TEMP=new Rectangle();
	Rectangle._temB=[];
	Rectangle._temA=[];
	return Rectangle;
})()


/**
*<code>SoundManager</code> 是一个声音管理类。提供了对背景音乐、音效的播放控制方法。
*引擎默认有两套声音方案：WebAudio和H5Audio
*播放音效，优先使用WebAudio播放声音，如果WebAudio不可用，则用H5Audio播放，H5Audio在部分机器上有兼容问题（比如不能混音，播放有延迟等）。
*播放背景音乐，则使用H5Audio播放（使用WebAudio会增加特别大的内存，并且要等加载完毕后才能播放，有延迟）
*建议背景音乐用mp3类型，音效用wav或者mp3类型（如果打包为app，音效只能用wav格式）。
*详细教程及声音格式请参考：http://ldc.layabox.com/doc/?nav=ch-as-1-7-0
*/
//class laya.media.SoundManager
var SoundManager=(function(){
	function SoundManager(){}
	__class(SoundManager,'laya.media.SoundManager');
	__getset(1,SoundManager,'useAudioMusic',function(){
		return SoundManager._useAudioMusic;
		},function(value){
		SoundManager._useAudioMusic=value;
		if (value){
			SoundManager._musicClass=AudioSound;
			}else{
			SoundManager._musicClass=null;
		}
	});

	/**
	*失去焦点后是否自动停止背景音乐。
	*@param v Boolean 失去焦点后是否自动停止背景音乐。
	*
	*/
	/**
	*失去焦点后是否自动停止背景音乐。
	*/
	__getset(1,SoundManager,'autoStopMusic',function(){
		return SoundManager._autoStopMusic;
		},function(v){
		Laya.stage.off("blur",null,SoundManager._stageOnBlur);
		Laya.stage.off("focus",null,SoundManager._stageOnFocus);
		Laya.stage.off("visibilitychange",null,SoundManager._visibilityChange);
		SoundManager._autoStopMusic=v;
		if (v){
			Laya.stage.on("blur",null,SoundManager._stageOnBlur);
			Laya.stage.on("focus",null,SoundManager._stageOnFocus);
			Laya.stage.on("visibilitychange",null,SoundManager._visibilityChange);
		}
	});

	/**
	*背景音乐和所有音效是否静音。
	*/
	__getset(1,SoundManager,'muted',function(){
		return SoundManager._muted;
		},function(value){
		if (value==SoundManager._muted)return;
		if (value){
			SoundManager.stopAllSound();
		}
		SoundManager.musicMuted=value;
		SoundManager._muted=value;
	});

	/**
	*背景音乐（不包括音效）是否静音。
	*/
	__getset(1,SoundManager,'musicMuted',function(){
		return SoundManager._musicMuted;
		},function(value){
		if (value==SoundManager._musicMuted)return;
		if (value){
			if (SoundManager._tMusic){
				if (SoundManager._musicChannel&&!SoundManager._musicChannel.isStopped){
					SoundManager._musicChannel.pause();
					}else{
					SoundManager._musicChannel=null;
				}
				}else{
				SoundManager._musicChannel=null;
			}
			SoundManager._musicMuted=value;
			}else {
			SoundManager._musicMuted=value;
			if (SoundManager._tMusic){
				if (SoundManager._musicChannel){
					SoundManager._musicChannel.resume();
				}
			}
		}
	});

	/**
	*所有音效（不包括背景音乐）是否静音。
	*/
	__getset(1,SoundManager,'soundMuted',function(){
		return SoundManager._soundMuted;
		},function(value){
		SoundManager._soundMuted=value;
	});

	SoundManager.addChannel=function(channel){
		if (SoundManager._channels.indexOf(channel)>=0)return;
		SoundManager._channels.push(channel);
	}

	SoundManager.removeChannel=function(channel){
		var i=0;
		for (i=SoundManager._channels.length-1;i >=0;i--){
			if (SoundManager._channels[i]==channel){
				SoundManager._channels.splice(i,1);
			}
		}
	}

	SoundManager.disposeSoundIfNotUsed=function(url){
		var i=0;
		for (i=SoundManager._channels.length-1;i >=0;i--){
			if (SoundManager._channels[i].url==url){
				return;
			}
		}
		SoundManager.destroySound(url);
	}

	SoundManager._visibilityChange=function(){
		if (Laya.stage.isVisibility){
			SoundManager._stageOnFocus();
			}else {
			SoundManager._stageOnBlur();
		}
	}

	SoundManager._stageOnBlur=function(){
		SoundManager._isActive=false;
		if (SoundManager._musicChannel){
			if (!SoundManager._musicChannel.isStopped){
				SoundManager._blurPaused=true;
				SoundManager._musicChannel.pause();
			}
		}
		SoundManager.stopAllSound();
		Laya.stage.once("mousedown",null,SoundManager._stageOnFocus);
	}

	SoundManager._recoverWebAudio=function(){
		if(WebAudioSound.ctx&&WebAudioSound.ctx.state!="running")
			WebAudioSound.ctx.resume();
	}

	SoundManager._stageOnFocus=function(){
		SoundManager._isActive=true;
		SoundManager._recoverWebAudio();
		Laya.stage.off("mousedown",null,SoundManager._stageOnFocus);
		if (SoundManager._blurPaused){
			if (SoundManager._musicChannel && SoundManager._musicChannel.isStopped){
				SoundManager._blurPaused=false;
				SoundManager._musicChannel.resume();
			}
		}
	}

	SoundManager.playSound=function(url,loops,complete,soundClass,startTime){
		(loops===void 0)&& (loops=1);
		(startTime===void 0)&& (startTime=0);
		if (!SoundManager._isActive || !url)return null;
		if (SoundManager._muted)return null;
		SoundManager._recoverWebAudio();
		url=URL.formatURL(url);
		if (url==SoundManager._tMusic){
			if (SoundManager._musicMuted)return null;
			}else {
			if (Render.isConchApp){
				var ext=Utils.getFileExtension(url);
				if (ext !="wav" && ext !="ogg"){
					alert("The sound only supports wav or ogg format,for optimal performance reason,please refer to the official website document.");
					return null;
				}
			}
			if (SoundManager._soundMuted)return null;
		};
		var tSound;
		if (!Browser.onMiniGame){
			tSound=Laya.loader.getRes(url);
		}
		if (!soundClass)soundClass=SoundManager._soundClass;
		if (!tSound){
			tSound=new soundClass();
			tSound.load(url);
			Loader.cacheRes(url,tSound);
		};
		var channel;
		channel=tSound.play(startTime,loops);
		if (!channel)return null;
		channel.url=url;
		channel.volume=(url==SoundManager._tMusic)? SoundManager.musicVolume :SoundManager.soundVolume;
		channel.completeHandler=complete;
		return channel;
	}

	SoundManager.destroySound=function(url){
		var tSound=Laya.loader.getRes(url);
		if (tSound){
			Loader.clearRes(url);
			tSound.dispose();
		}
	}

	SoundManager.playMusic=function(url,loops,complete,startTime){
		(loops===void 0)&& (loops=0);
		(startTime===void 0)&& (startTime=0);
		url=URL.formatURL(url);
		SoundManager._tMusic=url;
		if (SoundManager._musicChannel)SoundManager._musicChannel.stop();
		return SoundManager._musicChannel=SoundManager.playSound(url,loops,complete,SoundManager._musicClass,startTime);
	}

	SoundManager.stopSound=function(url){
		url=URL.formatURL(url);
		var i=0;
		var channel;
		for (i=SoundManager._channels.length-1;i >=0;i--){
			channel=SoundManager._channels[i];
			if (channel.url==url){
				channel.stop();
			}
		}
	}

	SoundManager.stopAll=function(){
		SoundManager._tMusic=null;
		var i=0;
		var channel;
		for (i=SoundManager._channels.length-1;i >=0;i--){
			channel=SoundManager._channels[i];
			channel.stop();
		}
	}

	SoundManager.stopAllSound=function(){
		var i=0;
		var channel;
		for (i=SoundManager._channels.length-1;i >=0;i--){
			channel=SoundManager._channels[i];
			if (channel.url !=SoundManager._tMusic){
				channel.stop();
			}
		}
	}

	SoundManager.stopMusic=function(){
		if (SoundManager._musicChannel)SoundManager._musicChannel.stop();
		SoundManager._tMusic=null;
	}

	SoundManager.setSoundVolume=function(volume,url){
		if (url){
			url=URL.formatURL(url);
			SoundManager._setVolume(url,volume);
			}else {
			SoundManager.soundVolume=volume;
			var i=0;
			var channel;
			for (i=SoundManager._channels.length-1;i >=0;i--){
				channel=SoundManager._channels[i];
				if (channel.url !=SoundManager._tMusic){
					channel.volume=volume;
				}
			}
		}
	}

	SoundManager.setMusicVolume=function(volume){
		SoundManager.musicVolume=volume;
		SoundManager._setVolume(SoundManager._tMusic,volume);
	}

	SoundManager._setVolume=function(url,volume){
		url=URL.formatURL(url);
		var i=0;
		var channel;
		for (i=SoundManager._channels.length-1;i >=0;i--){
			channel=SoundManager._channels[i];
			if (channel.url==url){
				channel.volume=volume;
			}
		}
	}

	SoundManager.musicVolume=1;
	SoundManager.soundVolume=1;
	SoundManager.playbackRate=1;
	SoundManager._useAudioMusic=true;
	SoundManager._muted=false;
	SoundManager._soundMuted=false;
	SoundManager._musicMuted=false;
	SoundManager._tMusic=null;
	SoundManager._musicChannel=null;
	SoundManager._channels=[];
	SoundManager._autoStopMusic=false;
	SoundManager._blurPaused=false;
	SoundManager._isActive=true;
	SoundManager._soundClass=null;
	SoundManager._musicClass=null;
	SoundManager.autoReleaseSound=true;
	return SoundManager;
})()


/**
*<p> <code>LocalStorage</code> 类用于没有时间限制的数据存储。</p>
*/
//class laya.net.LocalStorage
var LocalStorage=(function(){
	var Storage;
	function LocalStorage(){}
	__class(LocalStorage,'laya.net.LocalStorage');
	LocalStorage.__init__=function(){
		if (!LocalStorage._baseClass){
			LocalStorage._baseClass=Storage;
			Storage.init();
		}
		LocalStorage.items=LocalStorage._baseClass.items;
		LocalStorage.support=LocalStorage._baseClass.support;
	}

	LocalStorage.setItem=function(key,value){
		LocalStorage._baseClass.setItem(key,value);
	}

	LocalStorage.getItem=function(key){
		return LocalStorage._baseClass.getItem(key);
	}

	LocalStorage.setJSON=function(key,value){
		LocalStorage._baseClass.setJSON(key,value);
	}

	LocalStorage.getJSON=function(key){
		return LocalStorage._baseClass.getJSON(key);
	}

	LocalStorage.removeItem=function(key){
		LocalStorage._baseClass.removeItem(key);
	}

	LocalStorage.clear=function(){
		LocalStorage._baseClass.clear();
	}

	LocalStorage._baseClass=null;
	LocalStorage.items=null;
	LocalStorage.support=false;
	LocalStorage.__init$=function(){
		//class Storage
		Storage=(function(){
			function Storage(){}
			__class(Storage,'');
			Storage.init=function(){
				try{Storage.items=window.localStorage;Storage.setItem('laya','1');Storage.removeItem('laya');Storage.support=true;}catch(e){}if(!Storage.support)console.log('LocalStorage is not supprot or browser is private mode.');
			}
			Storage.setItem=function(key,value){
				try {
					Storage.support && Storage.items.setItem(key,value);
					}catch (e){
					console.warn("set localStorage failed",e);
				}
			}
			Storage.getItem=function(key){
				return Storage.support ? Storage.items.getItem(key):null;
			}
			Storage.setJSON=function(key,value){
				try {
					Storage.support && Storage.items.setItem(key,JSON.stringify(value));
					}catch (e){
					console.warn("set localStorage failed",e);
				}
			}
			Storage.getJSON=function(key){
				return JSON.parse(Storage.support ? Storage.items.getItem(key):null);
			}
			Storage.removeItem=function(key){
				Storage.support && Storage.items.removeItem(key);
			}
			Storage.clear=function(){
				Storage.support && Storage.items.clear();
			}
			Storage.items=null;
			Storage.support=false;
			return Storage;
		})()
	}

	return LocalStorage;
})()


/**
*@private
*/
//class laya.net.TTFLoader
var TTFLoader=(function(){
	function TTFLoader(){
		this.fontName=null;
		this.complete=null;
		this.err=null;
		this._fontTxt=null;
		this._url=null;
		this._div=null;
		this._txtWidth=NaN;
		this._http=null;
	}

	__class(TTFLoader,'laya.net.TTFLoader');
	var __proto=TTFLoader.prototype;
	__proto.load=function(fontPath){
		this._url=fontPath;
		var tArr=fontPath.split(".ttf")[0].split("/");
		this.fontName=tArr[tArr.length-1];
		if (Browser.window.conch){
			this._loadConch();
		}else
		if (Browser.window.FontFace){
			this._loadWithFontFace()
		}
		else {
			this._loadWithCSS();
		}
	}

	__proto._loadConch=function(){
		this._http=new HttpRequest();
		this._http.on("error",this,this._onErr);
		this._http.on("complete",this,this._onHttpLoaded);
		this._http.send(this._url,null,"get","arraybuffer");
	}

	__proto._onHttpLoaded=function(data){
		Browser.window.conch.setFontFaceFromBuffer(this.fontName,data);
		this._clearHttp();
		this._complete();
	}

	__proto._clearHttp=function(){
		if (this._http){
			this._http.off("error",this,this._onErr);
			this._http.off("complete",this,this._onHttpLoaded);
			this._http=null;
		}
	}

	__proto._onErr=function(){
		this._clearHttp();
		if (this.err){
			this.err.runWith("fail:"+this._url);
			this.err=null;
		}
	}

	__proto._complete=function(){
		Laya.timer.clear(this,this._complete);
		Laya.timer.clear(this,this._checkComplete);
		if (this._div && this._div.parentNode){
			this._div.parentNode.removeChild(this._div);
			this._div=null;
		}
		if (this.complete){
			this.complete.runWith(this);
			this.complete=null;
		}
	}

	__proto._checkComplete=function(){
		if (RunDriver.measureText("LayaTTFFont",this._fontTxt).width !=this._txtWidth){
			this._complete();
		}
	}

	__proto._loadWithFontFace=function(){
		var fontFace=new Browser.window.FontFace(this.fontName,"url('"+this._url+"')");
		Browser.window.document.fonts.add(fontFace);
		var self=this;
		fontFace.loaded.then((function(){
			self._complete()
		}));
		fontFace.load();
	}

	__proto._createDiv=function(){
		this._div=Browser.createElement("div");
		this._div.innerHTML="laya";
		var _style=this._div.style;
		_style.fontFamily=this.fontName;
		_style.position="absolute";
		_style.left="-100px";
		_style.top="-100px";
		Browser.document.body.appendChild(this._div);
	}

	__proto._loadWithCSS=function(){
		var _$this=this;
		var fontStyle=Browser.createElement("style");
		fontStyle.type="text/css";
		Browser.document.body.appendChild(fontStyle);
		fontStyle.textContent="@font-face { font-family:'"+this.fontName+"'; src:url('"+this._url+"');}";
		this._fontTxt="40px "+this.fontName;
		this._txtWidth=RunDriver.measureText("LayaTTFFont",this._fontTxt).width;
		var self=this;
		fontStyle.onload=function (){
			Laya.timer.once(10000,self,_$this._complete);
		};
		Laya.timer.loop(20,this,this._checkComplete);
		this._createDiv();
	}

	TTFLoader._testString="LayaTTFFont";
	return TTFLoader;
})()


/**
*<p> <code>URL</code> 类用于定义地址信息。</p>
*/
//class laya.net.URL
var URL=(function(){
	function URL(url){
		/**@private */
		this._url=null;
		/**@private */
		this._path=null;
		this._url=URL.formatURL(url);
		this._path=URL.getPath(url);
	}

	__class(URL,'laya.net.URL');
	var __proto=URL.prototype;
	/**地址的路径。*/
	__getset(0,__proto,'path',function(){
		return this._path;
	});

	/**格式化后的地址。*/
	__getset(0,__proto,'url',function(){
		return this._url;
	});

	URL.formatURL=function(url,base){
		if (!url)return "null path";
		if (url.indexOf(":")> 0)return url;
		if (URL.customFormat !=null)url=URL.customFormat(url,base);
		var char1=url.charAt(0);
		if (char1==="."){
			return URL.formatRelativePath((base || URL.basePath)+url);
			}else if (char1==='~'){
			return URL.rootPath+url.substring(1);
			}else if (char1==="d"){
			if (url.indexOf("data:image")===0)return url;
			}else if (char1==="/"){
			return url;
		}
		return (base || URL.basePath)+url;
	}

	URL.formatRelativePath=function(value){
		var parts=value.split("/");
		for (var i=0,len=parts.length;i < len;i++){
			if (parts[i]=='..'){
				parts.splice(i-1,2);
				i-=2;
			}
		}
		return parts.join('/');
	}

	URL.isAbsolute=function(url){
		return url.indexOf(":")> 0 || url.charAt(0)=='/';
	}

	URL.getPath=function(url){
		var ofs=url.lastIndexOf('/');
		return ofs > 0 ? url.substr(0,ofs+1):"";
	}

	URL.getFileName=function(url){
		var ofs=url.lastIndexOf('/');
		return ofs > 0 ? url.substr(ofs+1):url;
	}

	URL.version={};
	URL.basePath="";
	URL.rootPath="";
	URL.customFormat=function(url){
		var newUrl=URL.version[url];
		if (!Render.isConchApp && newUrl)url+="?v="+newUrl;
		return url;
	}

	return URL;
})()


//class laya.webgl.shader.ShaderValue
var ShaderValue=(function(){
	function ShaderValue(){}
	__class(ShaderValue,'laya.webgl.shader.ShaderValue');
	return ShaderValue;
})()


/**
*@private
*<code>Render</code> 是渲染管理类。它是一个单例，可以使用 Laya.render 访问。
*/
//class laya.renders.Render
var Render=(function(){
	function Render(width,height){
		/**@private */
		this._timeId=0;
		var style=Render._mainCanvas.source.style;
		style.position='absolute';
		style.top=style.left="0px";
		style.background="#000000";
		Render._mainCanvas.source.id="layaCanvas";
		var isWebGl=laya.renders.Render.isWebGL;
		Render._mainCanvas.source.width=width;
		Render._mainCanvas.source.height=height;
		isWebGl && Render.WebGL.init(Render._mainCanvas,width,height);
		Browser.container.appendChild(Render._mainCanvas.source);
		Render._context=new RenderContext(width,height,isWebGl ? null :Render._mainCanvas);
		Render._context.ctx.setIsMainContext();
		Browser.window.requestAnimationFrame(loop);
		function loop (){
			Laya.stage._loop();
			Browser.window.requestAnimationFrame(loop);
		}
		Laya.stage.on("visibilitychange",this,this._onVisibilitychange);
	}

	__class(Render,'laya.renders.Render');
	var __proto=Render.prototype;
	/**@private */
	__proto._onVisibilitychange=function(){
		if (!Laya.stage.isVisibility){
			this._timeId=Browser.window.setInterval(this._enterFrame,1000);
			}else if (this._timeId !=0){
			Browser.window.clearInterval(this._timeId);
		}
	}

	/**@private */
	__proto._enterFrame=function(e){
		Laya.stage._loop();
	}

	/**目前使用的渲染器。*/
	__getset(1,Render,'context',function(){
		return Render._context;
	});

	/**渲染使用的原生画布引用。 */
	__getset(1,Render,'canvas',function(){
		return Render._mainCanvas.source;
	});

	Render._context=null;
	Render._mainCanvas=null;
	Render.WebGL=null;
	Render.isConchNode=false;
	Render.isConchApp=false;
	Render.isConchWebGL=false;
	Render.isWebGL=false;
	Render.is3DMode=false;
	Render.optimizeTextureMemory=function(url,texture){
		return true;
	}

	Render.__init$=function(){
		window.ConchRenderType=window.ConchRenderType||1;
		window.ConchRenderType|=(!window.conch?0:0x04);;{
			Render.isConchNode=(window.ConchRenderType & 5)==5;
			Render.isConchApp=(window.ConchRenderType & 0x04)==0x04;
			Render.isConchWebGL=window.ConchRenderType==6;
		};;
	}

	return Render;
})()


/**
*@private
*渲染环境
*/
//class laya.renders.RenderContext
var RenderContext=(function(){
	function RenderContext(width,height,canvas){
		/**全局x坐标 */
		this.x=0;
		/**全局y坐标 */
		this.y=0;
		/**当前使用的画布 */
		//this.canvas=null;
		/**当前使用的画布上下文 */
		//this.ctx=null;
		this._drawTexture=function(x,y,args){
			if (args[0].loaded)this.ctx.drawTexture(args[0],args[1],args[2],args[3],args[4],x,y);
		}
		this._fillTexture=function(x,y,args){
			if (args[0].loaded)this.ctx.fillTexture(args[0],args[1]+x,args[2]+y,args[3],args[4],args[5],args[6],args[7]);
		}
		this._drawTextureWithTransform=function(x,y,args){
			if (args[0].loaded)this.ctx.drawTextureWithTransform(args[0],args[1],args[2],args[3],args[4],args[5],x,y,args[6]);
		}
		this._fillQuadrangle=function(x,y,args){
			this.ctx.fillQuadrangle(args[0],args[1],args[2],args[3],args[4]);
		}
		this._drawRect=function(x,y,args){
			var ctx=this.ctx;
			if (args[4] !=null){
				ctx.fillStyle=args[4];
				ctx.fillRect(x+args[0],y+args[1],args[2],args[3],null);
			}
			if (args[5] !=null){
				ctx.strokeStyle=args[5];
				ctx.lineWidth=args[6];
				ctx.strokeRect(x+args[0],y+args[1],args[2],args[3],args[6]);
			}
		}
		//矢量方法
		this._drawPie=function(x,y,args){
			var ctx=this.ctx;
			Render.isWebGL && ctx.setPathId(args[8]);
			ctx.beginPath();
			if (Render.isWebGL){
				ctx.movePath(args[0]+x,args[1]+y);
				ctx.moveTo(0,0);
				}else {
				ctx.moveTo(x+args[0],y+args[1]);
			}
			ctx.arc(x+args[0],y+args[1],args[2],args[3],args[4]);
			ctx.closePath();
			this._fillAndStroke(args[5],args[6],args[7],true);
		}
		this._clipRect=function(x,y,args){
			this.ctx.clipRect(x+args[0],y+args[1],args[2],args[3]);
		}
		this._fillRect=function(x,y,args){
			this.ctx.fillRect(x+args[0],y+args[1],args[2],args[3],args[4]);
		}
		this._drawCircle=function(x,y,args){
			var ctx=this.ctx;
			Render.isWebGL && ctx.setPathId(args[6]);
			Stat.drawCall++;
			ctx.beginPath();
			Render.isWebGL && ctx.movePath(args[0]+x,args[1]+y);
			ctx.arc(args[0]+x,args[1]+y,args[2],0,RenderContext.PI2);
			ctx.closePath();
			this._fillAndStroke(args[3],args[4],args[5],true);
		}
		this._fillCircle=function(x,y,args){
			Stat.drawCall++;
			var ctx=this.ctx;
			ctx.beginPath();
			ctx.fillStyle=args[3];
			ctx.arc(args[0]+x,args[1]+y,args[2],0,RenderContext.PI2);
			ctx.fill();
		}
		this._setShader=function(x,y,args){
			this.ctx.setShader(args[0]);
		}
		this._drawLine=function(x,y,args){
			var ctx=this.ctx;
			Render.isWebGL && ctx.setPathId(args[6]);
			ctx.beginPath();
			ctx.strokeStyle=args[4];
			ctx.lineWidth=args[5];
			if (Render.isWebGL){
				ctx.movePath(x,y);
				ctx.moveTo(args[0],args[1]);
				ctx.lineTo(args[2],args[3]);
				}else {
				ctx.moveTo(x+args[0],y+args[1]);
				ctx.lineTo(x+args[2],y+args[3]);
			}
			ctx.stroke();
		}
		this._drawLines=function(x,y,args){
			var ctx=this.ctx;
			Render.isWebGL && ctx.setPathId(args[5]);
			ctx.beginPath();
			x+=args[0],y+=args[1];
			Render.isWebGL && ctx.movePath(x,y);
			ctx.strokeStyle=args[3];
			ctx.lineWidth=args[4];
			var points=args[2];
			var i=2,n=points.length;
			if (Render.isWebGL){
				ctx.moveTo(points[0],points[1]);
				while (i < n){
					ctx.lineTo(points[i++],points[i++]);
				}
				}else {
				ctx.moveTo(x+points[0],y+points[1]);
				while (i < n){
					ctx.lineTo(x+points[i++],y+points[i++]);
				}
			}
			ctx.stroke();
		}
		this._drawLinesWebGL=function(x,y,args){
			this.ctx.drawLines(x+this.x+args[0],y+this.y+args[1],args[2],args[3],args[4]);
		}
		//x:Number,y:Number,points:Array,lineColor:String,lineWidth:Number=1
		this._drawCurves=function(x,y,args){
			this.ctx.drawCurves(x,y,args);
		}
		this._draw=function(x,y,args){
			args[0].call(null,this,x,y);
		}
		this._transformByMatrix=function(x,y,args){
			this.ctx.transformByMatrix(args[0]);
		}
		this._setTransform=function(x,y,args){
			this.ctx.setTransform(args[0],args[1],args[2],args[3],args[4],args[5]);
		}
		this._setTransformByMatrix=function(x,y,args){
			this.ctx.setTransformByMatrix(args[0]);
		}
		this._save=function(x,y,args){
			this.ctx.save();
		}
		this._restore=function(x,y,args){
			this.ctx.restore();
		}
		this._translate=function(x,y,args){
			this.ctx.translate(args[0],args[1]);
		}
		this._transform=function(x,y,args){
			this.ctx.translate(args[1]+x,args[2]+y);
			var mat=args[0];
			this.ctx.transform(mat.a,mat.b,mat.c,mat.d,mat.tx,mat.ty);
			this.ctx.translate(-x-args[1],-y-args[2]);
		}
		this._rotate=function(x,y,args){
			this.ctx.translate(args[1]+x,args[2]+y);
			this.ctx.rotate(args[0]);
			this.ctx.translate(-x-args[1],-y-args[2]);
		}
		this._scale=function(x,y,args){
			this.ctx.translate(args[2]+x,args[3]+y);
			this.ctx.scale(args[0],args[1]);
			this.ctx.translate(-x-args[2],-y-args[3]);
		}
		this._alpha=function(x,y,args){
			this.ctx.globalAlpha *=args[0];
		}
		this._setAlpha=function(x,y,args){
			this.ctx.globalAlpha=args[0];
		}
		this._fillText=function(x,y,args){
			this.ctx.fillText(args[0],args[1]+x,args[2]+y,args[3],args[4],args[5]);
		}
		this._strokeText=function(x,y,args){
			this.ctx.strokeText(args[0],args[1]+x,args[2]+y,args[3],args[4],args[5],args[6]);
		}
		this._fillBorderText=function(x,y,args){
			this.ctx.fillBorderText(args[0],args[1]+x,args[2]+y,args[3],args[4],args[5],args[6],args[7]);
		}
		this._blendMode=function(x,y,args){
			this.ctx.globalCompositeOperation=args[0];
		}
		this._beginClip=function(x,y,args){
			this.ctx.beginClip && this.ctx.beginClip(x+args[0],y+args[1],args[2],args[3]);
		}
		this._setIBVB=function(x,y,args){
			this.ctx.setIBVB(args[0]+x,args[1]+y,args[2],args[3],args[4],args[5],args[6],args[7]);
		}
		this._fillTrangles=function(x,y,args){
			this.ctx.fillTrangles(args[0],args[1]+x,args[2]+y,args[3],args[4]);
		}
		//x:Number,y:Number,paths:Array,brush:Object=null,pen:Object=null
		this._drawPath=function(x,y,args){
			var ctx=this.ctx;
			Render.isWebGL && ctx.setPathId(-1);
			ctx.beginPath();
			x+=args[0],y+=args[1];
			Render.isWebGL && ctx.movePath(x,y);
			var paths=args[2];
			for (var i=0,n=paths.length;i < n;i++){
				var path=paths[i];
				switch (path[0]){
					case "moveTo":
						Render.isWebGL ? ctx.moveTo(path[1],path[2]):ctx.moveTo(x+path[1],y+path[2]);
						break ;
					case "lineTo":
						Render.isWebGL ? ctx.lineTo(path[1],path[2]):ctx.lineTo(x+path[1],y+path[2]);
						break ;
					case "arcTo":
						Render.isWebGL ? ctx.arcTo(path[1],path[2],path[3],path[4],path[5]):ctx.arcTo(x+path[1],y+path[2],x+path[3],y+path[4],path[5]);
						break ;
					case "closePath":
						ctx.closePath();
						break ;
					}
			};
			var brush=args[3];
			if (brush !=null){
				ctx.fillStyle=brush.fillStyle;
				ctx.fill();
			};
			var pen=args[4];
			if (pen !=null){
				ctx.strokeStyle=pen.strokeStyle;
				ctx.lineWidth=pen.lineWidth || 1;
				ctx.lineJoin=pen.lineJoin;
				ctx.lineCap=pen.lineCap;
				ctx.miterLimit=pen.miterLimit;
				ctx.stroke();
			}
		}
		// polygon(x:Number,y:Number,r:Number,edges:Number,color:uint,borderWidth:int=2,borderColor:uint=0)
		this.drawPoly=function(x,y,args){
			this.ctx.drawPoly(x+this.x+args[0],y+this.y+args[1],args[2],args[3],args[4],args[5],args[6]);
		}
		//x:Number,y:Number,points:Array,fillColor:String,lineColor:String=null,lineWidth:Number=1
		this._drawPoly=function(x,y,args){
			var ctx=this.ctx;
			var points=args[2];
			var i=2,n=points.length;
			if (Render.isWebGL){
				ctx.setPathId(args[6]);
				ctx.beginPath();
				x+=args[0],y+=args[1];
				ctx.movePath(x,y);
				ctx.moveTo(points[0],points[1]);
				while (i < n){
					ctx.lineTo(points[i++],points[i++]);
				}
				}else {
				ctx.beginPath();
				x+=args[0],y+=args[1];
				ctx.moveTo(x+points[0],y+points[1]);
				while (i < n){
					ctx.lineTo(x+points[i++],y+points[i++]);
				}
			}
			ctx.closePath();
			this._fillAndStroke(args[3],args[4],args[5],args[7]);
		}
		this._drawSkin=function(x,y,args){
			var tSprite=args[0];
			if (tSprite){
				var ctx=this.ctx;
				tSprite.render(ctx,x,y);
			}
		}
		this._drawParticle=function(x,y,args){
			this.ctx.drawParticle(x+this.x,y+this.y,args[0]);
		}
		this._setFilters=function(x,y,args){
			this.ctx.setFilters(args);
		}
		if (canvas){
			this.ctx=canvas.getContext('2d');
			}else {
			canvas=HTMLCanvas.create("3D");
			this.ctx=RunDriver.createWebGLContext2D(canvas);
			canvas._setContext(this.ctx);
		}
		canvas.size(width,height);
		this.canvas=canvas;
	}

	__class(RenderContext,'laya.renders.RenderContext');
	var __proto=RenderContext.prototype;
	/**销毁当前渲染环境*/
	__proto.destroy=function(){
		if (this.canvas){
			this.canvas.destroy();
			this.canvas=null;
			this.ctx=null;
		}
		if (this.ctx){
			this.ctx.destroy();
			this.ctx=null;
		}
	}

	__proto.drawTexture=function(tex,x,y,width,height){
		if (tex.loaded)this.ctx.drawTexture(tex,x,y,width,height,this.x,this.y);
	}

	__proto._drawTextures=function(x,y,args){
		if (args[0].loaded)this.ctx.drawTextures(args[0],args[1],x+this.x,y+this.y);
	}

	__proto.drawTextureWithTransform=function(tex,x,y,width,height,m,alpha){
		if (tex.loaded)this.ctx.drawTextureWithTransform(tex,x,y,width,height,m,this.x,this.y,alpha);
	}

	__proto.fillQuadrangle=function(tex,x,y,point4,m){
		this.ctx.fillQuadrangle(tex,x,y,point4,m);
	}

	__proto.drawCanvas=function(canvas,x,y,width,height){
		this.ctx.drawCanvas(canvas,x+this.x,y+this.y,width,height);
	}

	__proto.drawRect=function(x,y,width,height,color,lineWidth){
		(lineWidth===void 0)&& (lineWidth=1);
		var ctx=this.ctx;
		ctx.strokeStyle=color;
		ctx.lineWidth=lineWidth;
		ctx.strokeRect(x+this.x,y+this.y,width,height,lineWidth);
	}

	__proto._fillAndStroke=function(fillColor,strokeColor,lineWidth,isConvexPolygon){
		(isConvexPolygon===void 0)&& (isConvexPolygon=false);
		var ctx=this.ctx;
		if (fillColor !=null){
			ctx.fillStyle=fillColor;
			if (Render.isWebGL){
				ctx.fill(isConvexPolygon);
				}else {
				ctx.fill();
			}
		}
		if (strokeColor !=null && lineWidth > 0){
			ctx.strokeStyle=strokeColor;
			ctx.lineWidth=lineWidth;
			ctx.stroke();
		}
	}

	//ctx.translate(-x-args[0],-y-args[1]);
	__proto.clipRect=function(x,y,width,height){
		this.ctx.clipRect(x+this.x,y+this.y,width,height);
	}

	__proto.fillRect=function(x,y,width,height,fillStyle){
		this.ctx.fillRect(x+this.x,y+this.y,width,height,fillStyle);
	}

	__proto.drawCircle=function(x,y,radius,color,lineWidth){
		(lineWidth===void 0)&& (lineWidth=1);
		Stat.drawCall++;
		var ctx=this.ctx;
		ctx.beginPath();
		ctx.strokeStyle=color;
		ctx.lineWidth=lineWidth;
		ctx.arc(x+this.x,y+this.y,radius,0,RenderContext.PI2);
		ctx.stroke();
	}

	/**
	*绘制三角形
	*@param x
	*@param y
	*@param tex
	*@param args [x,y,texture,vertices,indices,uvs,matrix]
	*/
	__proto.drawTriangles=function(x,y,args){
		if (Render.isWebGL){
			this.ctx.drawTriangles(args[0],x+args[1],y+args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9]);
			}else {
			var indices=args[5];
			var i=0,len=indices.length;
			var ctx=this.ctx;
			for (i=0;i < len;i+=3){
				var index0=indices[i] *2;
				var index1=indices[i+1] *2;
				var index2=indices[i+2] *2;
				ctx.drawTriangle(args[0],args[3],args[4],index0,index1,index2,args[6],true);
			}
		}
	}

	__proto.fillCircle=function(x,y,radius,color){
		Stat.drawCall++;
		var ctx=this.ctx;
		ctx.beginPath();
		ctx.fillStyle=color;
		ctx.arc(x+this.x,y+this.y,radius,0,RenderContext.PI2);
		ctx.fill();
	}

	__proto.setShader=function(shader){
		this.ctx.setShader(shader);
	}

	__proto.drawLine=function(fromX,fromY,toX,toY,color,lineWidth){
		(lineWidth===void 0)&& (lineWidth=1);
		var ctx=this.ctx;
		ctx.beginPath();
		ctx.strokeStyle=color;
		ctx.lineWidth=lineWidth;
		ctx.moveTo(this.x+fromX,this.y+fromY);
		ctx.lineTo(this.x+toX,this.y+toY);
		ctx.stroke();
	}

	__proto.clear=function(){
		this.ctx.clear();
	}

	__proto.transformByMatrix=function(value){
		this.ctx.transformByMatrix(value);
	}

	__proto.setTransform=function(a,b,c,d,tx,ty){
		this.ctx.setTransform(a,b,c,d,tx,ty);
	}

	__proto.setTransformByMatrix=function(value){
		this.ctx.setTransformByMatrix(value);
	}

	__proto.save=function(){
		this.ctx.save();
	}

	__proto.restore=function(){
		this.ctx.restore();
	}

	__proto.translate=function(x,y){
		this.ctx.translate(x,y);
	}

	__proto.transform=function(a,b,c,d,tx,ty){
		this.ctx.transform(a,b,c,d,tx,ty);
	}

	__proto.rotate=function(angle){
		this.ctx.rotate(angle);
	}

	__proto.scale=function(scaleX,scaleY){
		this.ctx.scale(scaleX,scaleY);
	}

	__proto.alpha=function(value){
		this.ctx.globalAlpha *=value;
	}

	__proto.setAlpha=function(value){
		this.ctx.globalAlpha=value;
	}

	__proto.fillWords=function(words,x,y,font,color,underLine){
		(underLine===void 0)&& (underLine=0);
		this.ctx.fillWords(words,x,y,font,color,underLine);
	}

	/***@private */
	__proto.fillBorderWords=function(words,x,y,font,fillColor,borderColor,lineWidth){
		this.ctx.fillBorderWords(words,x,y,font,fillColor,borderColor,lineWidth);
	}

	__proto.fillText=function(text,x,y,font,color,textAlign){
		this.ctx.fillText(text,x+this.x,y+this.y,font,color,textAlign);
	}

	__proto.strokeText=function(text,x,y,font,color,lineWidth,textAlign){
		this.ctx.strokeText(text,x+this.x,y+this.y,font,color,lineWidth,textAlign);
	}

	__proto.blendMode=function(type){
		this.ctx.globalCompositeOperation=type;
	}

	__proto.flush=function(){
		this.ctx.flush && this.ctx.flush();
	}

	__proto.addRenderObject=function(o){
		this.ctx.addRenderObject(o);
	}

	__proto.beginClip=function(x,y,w,h){
		this.ctx.beginClip && this.ctx.beginClip(x,y,w,h);
	}

	__proto.endClip=function(){
		this.ctx.endClip && this.ctx.endClip();
	}

	__proto.fillTrangles=function(x,y,args){
		this.ctx.fillTrangles(args[0],args[1],args[2],args[3],args.length > 4 ? args[4] :null);
	}

	RenderContext.PI2=2 *Math.PI;
	return RenderContext;
})()


/**
*@private
*精灵渲染器
*/
//class laya.renders.RenderSprite
var RenderSprite=(function(){
	function RenderSprite(type,next){
		/**@private */
		//this._next=null;
		/**@private */
		//this._fun=null;
		this._next=next || RenderSprite.NORENDER;
		switch (type){
			case 0:
				this._fun=this._no;
				return;
			case 0x01:
				this._fun=this._image;
				return;
			case 0x02:
				this._fun=this._alpha;
				return;
			case 0x04:
				this._fun=this._transform;
				return;
			case 0x08:
				this._fun=this._blend;
				return;
			case 0x10:
				this._fun=this._canvas;
				return;
			case 0x40:
				this._fun=this._mask;
				return;
			case 0x80:
				this._fun=this._clip;
				return;
			case 0x100:
				this._fun=this._style;
				return;
			case 0x200:
				this._fun=this._graphics;
				return;
			case 0x800:
				this._fun=this._childs;
				return;
			case 0x400:
				this._fun=this._custom;
				return;
			case 0x01 | 0x200:
				this._fun=this._image2;
				return;
			case 0x01 | 0x04 | 0x200:
				this._fun=this._image2;
				return;
			case 0x20:
				this._fun=Filter._filter;
				return;
			case 0x11111:
				this._fun=RenderSprite._initRenderFun;
				return;
			}
		this.onCreate(type);
	}

	__class(RenderSprite,'laya.renders.RenderSprite');
	var __proto=RenderSprite.prototype;
	__proto.onCreate=function(type){}
	__proto._style=function(sprite,context,x,y){
		sprite._style.render(sprite,context,x,y);
		var next=this._next;
		next._fun.call(next,sprite,context,x,y);
	}

	__proto._no=function(sprite,context,x,y){}
	__proto._custom=function(sprite,context,x,y){
		sprite.customRender(context,x,y);
		var tf=sprite._style._tf;
		this._next._fun.call(this._next,sprite,context,x-tf.translateX,y-tf.translateY);
	}

	__proto._clip=function(sprite,context,x,y){
		var next=this._next;
		if (next==RenderSprite.NORENDER)return;
		var r=sprite._style.scrollRect;
		context.ctx.save();
		context.ctx.clipRect(x,y,r.width,r.height);
		next._fun.call(next,sprite,context,x-r.x,y-r.y);
		context.ctx.restore();
	}

	__proto._blend=function(sprite,context,x,y){
		var style=sprite._style;
		if (style.blendMode){
			context.ctx.globalCompositeOperation=style.blendMode;
		};
		var next=this._next;
		next._fun.call(next,sprite,context,x,y);
		context.ctx.globalCompositeOperation="source-over";
	}

	__proto._mask=function(sprite,context,x,y){
		var next=this._next;
		next._fun.call(next,sprite,context,x,y);
		var mask=sprite.mask;
		if (mask){
			context.ctx.globalCompositeOperation="destination-in";
			if (mask.numChildren > 0 || !mask.graphics._isOnlyOne()){
				mask.cacheAsBitmap=true;
			}
			mask.render(context,x-sprite.pivotX,y-sprite.pivotY);
		}
		context.ctx.globalCompositeOperation="source-over";
	}

	__proto._graphics=function(sprite,context,x,y){
		var tf=sprite._style._tf;
		sprite._graphics && sprite._graphics._render(sprite,context,x-tf.translateX,y-tf.translateY);
		var next=this._next;
		next._fun.call(next,sprite,context,x,y);
	}

	__proto._image=function(sprite,context,x,y){
		var style=sprite._style;
		context.ctx.drawTexture2(x,y,style._tf.translateX,style._tf.translateY,sprite.transform,style.alpha,style.blendMode,sprite._graphics._one);
	}

	__proto._image2=function(sprite,context,x,y){
		var tf=sprite._style._tf;
		context.ctx.drawTexture2(x,y,tf.translateX,tf.translateY,sprite.transform,1,null,sprite._graphics._one);
	}

	__proto._alpha=function(sprite,context,x,y){
		var style=sprite._style;
		var alpha;
		if ((alpha=style.alpha)> 0.01 || sprite._needRepaint()){
			var temp=context.ctx.globalAlpha;
			context.ctx.globalAlpha *=alpha;
			var next=this._next;
			next._fun.call(next,sprite,context,x,y);
			context.ctx.globalAlpha=temp;
		}
	}

	__proto._transform=function(sprite,context,x,y){
		var transform=sprite.transform,_next=this._next;
		if (transform && _next !=RenderSprite.NORENDER){
			context.save();
			context.transform(transform.a,transform.b,transform.c,transform.d,transform.tx+x,transform.ty+y);
			_next._fun.call(_next,sprite,context,0,0);
			context.restore();
		}else
		_next._fun.call(_next,sprite,context,x,y);
	}

	__proto._childs=function(sprite,context,x,y){
		var style=sprite._style;
		var tf=style._tf;
		x=x-tf.translateX+style.paddingLeft;
		y=y-tf.translateY+style.paddingTop;
		if (style._calculation){
			var words=sprite._getWords();
			if (words){
				var tStyle=style;
				if (tStyle){
					if (tStyle.stroke){
						context.fillBorderWords(words,x,y,tStyle.font,tStyle.color,tStyle.strokeColor,tStyle.stroke);
						}else{
						context.fillWords(words,x,y,tStyle.font,tStyle.color,tStyle.underLine);
					}
				}
			}
		};
		var childs=sprite._childs,n=childs.length,ele;
		if (sprite.viewport || (sprite.optimizeScrollRect && sprite._style.scrollRect)){
			var rect=sprite.viewport || sprite._style.scrollRect;
			var left=rect.x;
			var top=rect.y;
			var right=rect.right;
			var bottom=rect.bottom;
			var _x=NaN,_y=NaN;
			for (i=0;i < n;++i){
				if ((ele=childs [i]).visible && ((_x=ele._x)< right && (_x+ele.width)> left && (_y=ele._y)< bottom && (_y+ele.height)> top)){
					ele.render(context,x,y);
				}
			}
			}else {
			for (var i=0;i < n;++i)
			(ele=(childs [i]))._style.visible && ele.render(context,x,y);
		}
	}

	//}
	__proto._canvas=function(sprite,context,x,y){
		var _cacheCanvas=sprite._$P.cacheCanvas;
		if (!_cacheCanvas){
			this._next._fun.call(this._next,sprite,context,x,y);
			return;
		}
		_cacheCanvas.type==='bitmap' ? (Stat.canvasBitmap++):(Stat.canvasNormal++);
		var tx=_cacheCanvas.ctx;
		if (sprite._needRepaint()|| !tx){
			this._canvas_repaint(sprite,context,x,y);
		}
		else{
			var tRec=_cacheCanvas._cacheRec;
			context.drawCanvas(tx.canvas,x+tRec.x,y+tRec.y,tRec.width,tRec.height);
		}
	}

	__proto._canvas_repaint=function(sprite,context,x,y){
		var _cacheCanvas=sprite._$P.cacheCanvas;
		var _next=this._next;
		if (!_cacheCanvas){
			_next._fun.call(_next,sprite,tx,x,y);
			return;
		};
		var tx=_cacheCanvas.ctx;
		var _repaint=sprite._needRepaint()|| (!tx);
		var canvas;
		var left;
		var top;
		var tRec;
		var tCacheType=_cacheCanvas.type;
		tCacheType==='bitmap' ? (Stat.canvasBitmap++):(Stat.canvasNormal++);
		if (_repaint){
			if (!_cacheCanvas._cacheRec)
				_cacheCanvas._cacheRec=new Rectangle();
			var w,h;
			if (!Render.isWebGL || tCacheType==="bitmap"){
				tRec=sprite.getSelfBounds();
				tRec.x=tRec.x-sprite.pivotX;
				tRec.y=tRec.y-sprite.pivotY;
				tRec.x=tRec.x-16;
				tRec.y=tRec.y-16;
				tRec.width=tRec.width+32;
				tRec.height=tRec.height+32;
				tRec.x=Math.floor(tRec.x+x)-x;
				tRec.y=Math.floor(tRec.y+y)-y;
				tRec.width=Math.floor(tRec.width);
				tRec.height=Math.floor(tRec.height);
				_cacheCanvas._cacheRec.copyFrom(tRec);
				}else{
				_cacheCanvas._cacheRec.setTo(-sprite.pivotX,-sprite.pivotY,1,1);
			}
			tRec=_cacheCanvas._cacheRec;
			var scaleX=Render.isWebGL ? 1 :Browser.pixelRatio *Laya.stage.clientScaleX;
			var scaleY=Render.isWebGL ? 1 :Browser.pixelRatio *Laya.stage.clientScaleY;
			if (!Render.isWebGL){
				var chainScaleX=1;
				var chainScaleY=1;
				var tar;
				tar=sprite;
				while (tar && tar !=Laya.stage){
					chainScaleX *=tar.scaleX;
					chainScaleY *=tar.scaleY;
					tar=tar.parent;
				}
				if (Render.isWebGL){
					if (chainScaleX < 1)scaleX *=chainScaleX;
					if (chainScaleY < 1)scaleY *=chainScaleY;
					}else {
					if (chainScaleX > 1)scaleX *=chainScaleX;
					if (chainScaleY > 1)scaleY *=chainScaleY;
				}
			}
			if (sprite.scrollRect){
				var scrollRect=sprite.scrollRect;
				tRec.x-=scrollRect.x;
				tRec.y-=scrollRect.y;
			}
			w=tRec.width *scaleX;
			h=tRec.height *scaleY;
			left=tRec.x;
			top=tRec.y;
			if (Render.isWebGL && tCacheType==='bitmap' && (w > 2048 || h > 2048)){
				console.warn("cache bitmap size larger than 2048,cache ignored");
				if (_cacheCanvas.ctx){
					Pool.recover("RenderContext",_cacheCanvas.ctx);
					_cacheCanvas.ctx.canvas.size(0,0);
					_cacheCanvas.ctx=null;
				}
				_next._fun.call(_next,sprite,context,x,y);
				return;
			}
			if (!tx){
				tx=_cacheCanvas.ctx=Pool.getItem("RenderContext")|| new RenderContext(w,h,HTMLCanvas.create("AUTO"));
			}
			tx.ctx.sprite=sprite;
			canvas=tx.canvas;
			canvas.clear();
			(canvas.width !=w || canvas.height !=h)&& canvas.size(w,h);
			if (tCacheType==='bitmap')canvas.context.asBitmap=true;
			else if(tCacheType==='normal')canvas.context.asBitmap=false;
			var t;
			if (scaleX !=1 || scaleY !=1){
				var ctx=(tx).ctx;
				ctx.save();
				ctx.scale(scaleX,scaleY);
				if (!Render.isConchWebGL && Render.isConchApp){
					t=sprite._$P.cf;
					t && ctx.setFilterMatrix && ctx.setFilterMatrix(t._mat,t._alpha);
				}
				_next._fun.call(_next,sprite,tx,-left,-top);
				ctx.restore();
				if (!Render.isConchApp || Render.isConchWebGL)sprite._applyFilters();
				}else {
				ctx=(tx).ctx;
				if (!Render.isConchWebGL && Render.isConchApp){
					t=sprite._$P.cf;
					t && ctx.setFilterMatrix && ctx.setFilterMatrix(t._mat,t._alpha);
				}
				_next._fun.call(_next,sprite,tx,-left,-top);
				if (!Render.isConchApp || Render.isConchWebGL)sprite._applyFilters();
			}
			if (sprite._$P.staticCache)_cacheCanvas.reCache=false;
			Stat.canvasReCache++;
			}else {
			tRec=_cacheCanvas._cacheRec;
			left=tRec.x;
			top=tRec.y;
			canvas=tx.canvas;
		}
		context.drawCanvas(canvas,x+left,y+top,tRec.width,tRec.height);
	}

	RenderSprite.__init__=function(){
		var i=0,len=0;
		var initRender;
		initRender=RunDriver.createRenderSprite(0x11111,null);
		len=RenderSprite.renders.length=0x800 *2;
		for (i=0;i < len;i++)
		RenderSprite.renders[i]=initRender;
		RenderSprite.renders[0]=RunDriver.createRenderSprite(0,null);
		function _initSame (value,o){
			var n=0;
			for (var i=0;i < value.length;i++){
				n |=value[i];
				RenderSprite.renders[n]=o;
			}
		}
		_initSame([0x01,0x200,0x04,0x02],new RenderSprite(0x01,null));
		RenderSprite.renders[0x01 | 0x200]=RunDriver.createRenderSprite(0x01 | 0x200,null);
		RenderSprite.renders[0x01 | 0x04 | 0x200]=new RenderSprite(0x01 | 0x04 | 0x200,null);
	}

	RenderSprite._initRenderFun=function(sprite,context,x,y){
		var type=sprite._renderType;
		var r=RenderSprite.renders[type]=RenderSprite._getTypeRender(type);
		r._fun(sprite,context,x,y);
	}

	RenderSprite._getTypeRender=function(type){
		var rst=null;
		var tType=0x800;
		while (tType > 1){
			if (tType & type)
				rst=RunDriver.createRenderSprite(tType,rst);
			tType=tType >> 1;
		}
		return rst;
	}

	RenderSprite.IMAGE=0x01;
	RenderSprite.ALPHA=0x02;
	RenderSprite.TRANSFORM=0x04;
	RenderSprite.BLEND=0x08;
	RenderSprite.CANVAS=0x10;
	RenderSprite.FILTERS=0x20;
	RenderSprite.MASK=0x40;
	RenderSprite.CLIP=0x80;
	RenderSprite.STYLE=0x100;
	RenderSprite.GRAPHICS=0x200;
	RenderSprite.CUSTOM=0x400;
	RenderSprite.CHILDS=0x800;
	RenderSprite.INIT=0x11111;
	RenderSprite.renders=[];
	RenderSprite.NORENDER=new RenderSprite(0,null);
	return RenderSprite;
})()


/**
*@private
*Context扩展类
*/
//class laya.resource.Context
var Context=(function(){
	function Context(){
		/***@private */
		//this._canvas=null;
		this._repaint=false;
	}

	__class(Context,'laya.resource.Context');
	var __proto=Context.prototype;
	__proto.replaceReset=function(){
		var i=0,len=0;
		len=Context.replaceKeys.length;
		var key;
		for (i=0;i < len;i++){
			key=Context.replaceKeys[i];
			this[Context.newKeys[i]]=this[key];
		}
	}

	__proto.replaceResotre=function(){
		this.__restore();
		this.__reset();
	}

	__proto.setIsMainContext=function(){}
	__proto.drawTextures=function(tex,pos,tx,ty){
		Stat.drawCall+=pos.length / 2;
		var w=tex.width;
		var h=tex.height;
		for (var i=0,sz=pos.length;i < sz;i+=2){
			this.drawTexture(tex,pos[i],pos[i+1],w,h,tx,ty);
		}
	}

	/***@private */
	__proto.drawCanvas=function(canvas,x,y,width,height){
		Stat.drawCall++;
		this.drawImage(canvas.source,x,y,width,height);
	}

	/***@private */
	__proto.fillRect=function(x,y,width,height,style){
		Stat.drawCall++;
		style && (this.fillStyle=style);
		this.__fillRect(x,y,width,height);
	}

	/***@private */
	__proto.fillText=function(text,x,y,font,color,textAlign){
		Stat.drawCall++;
		if (arguments.length > 3 && font !=null){
			this.font=font;
			this.fillStyle=color;
			this.textAlign=textAlign;
			this.textBaseline="top";
		}
		this.__fillText(text,x,y);
	}

	/***@private */
	__proto.fillBorderText=function(text,x,y,font,fillColor,borderColor,lineWidth,textAlign){
		Stat.drawCall++;
		this.font=font;
		this.fillStyle=fillColor;
		this.textBaseline="top";
		this.strokeStyle=borderColor;
		this.lineWidth=lineWidth;
		this.textAlign=textAlign;
		this.__strokeText(text,x,y);
		this.__fillText(text,x,y);
	}

	/***@private */
	__proto.strokeText=function(text,x,y,font,color,lineWidth,textAlign){
		Stat.drawCall++;
		if (arguments.length > 3 && font !=null){
			this.font=font;
			this.strokeStyle=color;
			this.lineWidth=lineWidth;
			this.textAlign=textAlign;
			this.textBaseline="top";
		}
		this.__strokeText(text,x,y);
	}

	/***@private */
	__proto.transformByMatrix=function(value){
		this.transform(value.a,value.b,value.c,value.d,value.tx,value.ty);
	}

	/***@private */
	__proto.setTransformByMatrix=function(value){
		this.setTransform(value.a,value.b,value.c,value.d,value.tx,value.ty);
	}

	/***@private */
	__proto.clipRect=function(x,y,width,height){
		Stat.drawCall++;
		this.beginPath();
		this.rect(x,y,width,height);
		this.clip();
	}

	/***@private */
	__proto.drawTexture=function(tex,x,y,width,height,tx,ty){
		Stat.drawCall++;
		var uv=tex.uv,w=tex.bitmap.width,h=tex.bitmap.height;
		this.drawImage(tex.source,uv[0] *w,uv[1] *h,(uv[2]-uv[0])*w,(uv[5]-uv[3])*h,x+tx,y+ty,width,height);
	}

	/***@private */
	__proto.drawTextureWithTransform=function(tex,x,y,width,height,m,tx,ty,alpha){
		Stat.drawCall++;
		var uv=tex.uv,w=tex.bitmap.width,h=tex.bitmap.height;
		this.save();
		alpha !=1 && (this.globalAlpha *=alpha);
		if (m){
			this.transform(m.a,m.b,m.c,m.d,m.tx+tx,m.ty+ty);
			this.drawImage(tex.source,uv[0] *w,uv[1] *h,(uv[2]-uv[0])*w,(uv[5]-uv[3])*h,x ,y,width,height);
			}else {
			this.drawImage(tex.source,uv[0] *w,uv[1] *h,(uv[2]-uv[0])*w,(uv[5]-uv[3])*h,x+tx ,y+ty,width,height);
		}
		this.restore();
	}

	/***@private */
	__proto.drawTexture2=function(x,y,pivotX,pivotY,m,alpha,blendMode,args2){
		'use strict';
		var tex=args2[0];
		if (!(tex.loaded && tex.bitmap && tex.source)){
			return;
		}
		Stat.drawCall++;
		var alphaChanged=alpha!==1;
		if (alphaChanged){
			var temp=this.globalAlpha;
			this.globalAlpha *=alpha;
		};
		var uv=tex.uv,w=tex.bitmap.width,h=tex.bitmap.height;
		if (m){
			this.save();
			this.transform(m.a,m.b,m.c,m.d,m.tx+x,m.ty+y);
			this.drawImage(tex.source,uv[0] *w,uv[1] *h,(uv[2]-uv[0])*w,(uv[5]-uv[3])*h,args2[1]-pivotX ,args2[2]-pivotY,args2[3],args2[4]);
			this.restore();
			}else {
			this.drawImage(tex.source,uv[0] *w,uv[1] *h,(uv[2]-uv[0])*w,(uv[5]-uv[3])*h,args2[1]-pivotX+x ,args2[2]-pivotY+y,args2[3],args2[4]);
		}
		if (alphaChanged)this.globalAlpha=temp;
	}

	__proto.fillTexture=function(texture,x,y,width,height,type,offset,other){
		if (!other.pat){
			if (texture.uv !=Texture.DEF_UV){
				var canvas=new HTMLCanvas("2D");
				canvas.getContext('2d');
				canvas.size(texture.width,texture.height);
				canvas.context.drawTexture(texture,0,0,texture.width,texture.height,0,0);
				texture=new Texture(canvas);
			}
			other.pat=this.createPattern(texture.bitmap.source,type);
		};
		var oX=x,oY=y;
		var sX=0,sY=0;
		if (offset){
			oX+=offset.x % texture.width;
			oY+=offset.y % texture.height;
			sX-=offset.x % texture.width;
			sY-=offset.y % texture.height;
		}
		this.translate(oX,oY);
		this.fillRect(sX,sY,width,height,other.pat);
		this.translate(-oX,-oY);
	}

	__proto.drawTriangle=function(texture,vertices,uvs,index0,index1,index2,matrix,canvasPadding){
		var source=texture.bitmap;
		var textureSource=source.source;
		var textureWidth=texture.width;
		var textureHeight=texture.height;
		var sourceWidth=source.width;
		var sourceHeight=source.height;
		var u0=uvs[index0] *sourceWidth;
		var u1=uvs[index1] *sourceWidth;
		var u2=uvs[index2] *sourceWidth;
		var v0=uvs[index0+1] *sourceHeight;
		var v1=uvs[index1+1] *sourceHeight;
		var v2=uvs[index2+1] *sourceHeight;
		var x0=vertices[index0];
		var x1=vertices[index1];
		var x2=vertices[index2];
		var y0=vertices[index0+1];
		var y1=vertices[index1+1];
		var y2=vertices[index2+1];
		if (canvasPadding){
			var paddingX=1;
			var paddingY=1;
			var centerX=(x0+x1+x2)/ 3;
			var centerY=(y0+y1+y2)/ 3;
			var normX=x0-centerX;
			var normY=y0-centerY;
			var dist=Math.sqrt((normX *normX)+(normY *normY));
			x0=centerX+((normX / dist)*(dist+paddingX));
			y0=centerY+((normY / dist)*(dist+paddingY));
			normX=x1-centerX;
			normY=y1-centerY;
			dist=Math.sqrt((normX *normX)+(normY *normY));
			x1=centerX+((normX / dist)*(dist+paddingX));
			y1=centerY+((normY / dist)*(dist+paddingY));
			normX=x2-centerX;
			normY=y2-centerY;
			dist=Math.sqrt((normX *normX)+(normY *normY));
			x2=centerX+((normX / dist)*(dist+paddingX));
			y2=centerY+((normY / dist)*(dist+paddingY));
		}
		this.save();
		if (matrix)
			this.transform(matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty);
		this.beginPath();
		this.moveTo(x0,y0);
		this.lineTo(x1,y1);
		this.lineTo(x2,y2);
		this.closePath();
		this.clip();
		var delta=(u0 *v1)+(v0 *u2)+(u1 *v2)-(v1 *u2)-(v0 *u1)-(u0 *v2);
		var dDelta=1 / delta;
		var deltaA=(x0 *v1)+(v0 *x2)+(x1 *v2)-(v1 *x2)-(v0 *x1)-(x0 *v2);
		var deltaB=(u0 *x1)+(x0 *u2)+(u1 *x2)-(x1 *u2)-(x0 *u1)-(u0 *x2);
		var deltaC=(u0 *v1 *x2)+(v0 *x1 *u2)+(x0 *u1 *v2)-(x0 *v1 *u2)-(v0 *u1 *x2)-(u0 *x1 *v2);
		var deltaD=(y0 *v1)+(v0 *y2)+(y1 *v2)-(v1 *y2)-(v0 *y1)-(y0 *v2);
		var deltaE=(u0 *y1)+(y0 *u2)+(u1 *y2)-(y1 *u2)-(y0 *u1)-(u0 *y2);
		var deltaF=(u0 *v1 *y2)+(v0 *y1 *u2)+(y0 *u1 *v2)-(y0 *v1 *u2)-(v0 *u1 *y2)-(u0 *y1 *v2);
		this.transform(deltaA *dDelta,deltaD *dDelta,deltaB *dDelta,deltaE *dDelta,deltaC *dDelta,deltaF *dDelta);
		this.drawImage(textureSource,texture.uv[0] *sourceWidth,texture.uv[1] *sourceHeight,textureWidth,textureHeight,texture.uv[0] *sourceWidth,texture.uv[1] *sourceHeight,textureWidth,textureHeight);
		this.restore();
	}

	/***@private */
	__proto.flush=function(){
		return 0;
	}

	/***@private */
	__proto.fillWords=function(words,x,y,font,color,underLine){
		font && (this.font=font);
		color && (this.fillStyle=color);
		var _this=this;
		this.textBaseline="top";
		this.textAlign='left';
		for (var i=0,n=words.length;i < n;i++){
			var a=words[i];
			this.__fillText(a.char,a.x+x,a.y+y);
			if (underLine===1){
				var tHeight=a.height;
				var dX=a.style.letterSpacing*0.5;
				if (!dX)dX=0;
				this.beginPath();
				this.strokeStyle=color;
				this.lineWidth=1;
				this.moveTo(x+a.x-dX+0.5,y+a.y+tHeight+0.5);
				this.lineTo(x+a.x+a.width+dX+0.5,y+a.y+tHeight+0.5);
				this.stroke();
			}
		}
	}

	/***@private */
	__proto.fillBorderWords=function(words,x,y,font,color,borderColor,lineWidth){
		font && (this.font=font);
		color && (this.fillStyle=color);
		this.textBaseline="top";
		this.lineWidth=lineWidth;
		this.textAlign='left';
		this.strokeStyle=borderColor;
		for (var i=0,n=words.length;i < n;i++){
			var a=words[i];
			this.__strokeText(a.char,a.x+x,a.y+y);
			this.__fillText(a.char,a.x+x,a.y+y);
		}
	}

	/***@private */
	__proto.destroy=function(){
		this.canvas.width=this.canvas.height=0;
	}

	/***@private */
	__proto.clear=function(){
		this.clearRect(0,0,this._canvas.width,this._canvas.height);
		this._repaint=false;
	}

	__proto.drawCurves=function(x,y,args){
		this.beginPath();
		this.strokeStyle=args[3];
		this.lineWidth=args[4];
		var points=args[2];
		x+=args[0],y+=args[1];
		this.moveTo(x+points[0],y+points[1]);
		var i=2,n=points.length;
		while (i < n){
			this.quadraticCurveTo(x+points[i++],y+points[i++],x+points[i++],y+points[i++]);
		}
		this.stroke();
	}

	Context.__init__=function(to){
		var from=laya.resource.Context.prototype;
		to=to || CanvasRenderingContext2D.prototype;
		if (to.inited)return;
		to.inited=true;
		to.__fillText=to.fillText;
		to.__fillRect=to.fillRect;
		to.__strokeText=to.strokeText;
		var funs=['drawTextures',"drawTriangle",'fillWords','fillBorderWords','setIsMainContext','fillRect','strokeText','fillTexture','fillText','transformByMatrix','setTransformByMatrix','clipRect','drawTexture','drawTexture2','drawTextureWithTransform','flush','clear','destroy','drawCanvas','fillBorderText','drawCurves'];
		funs.forEach(function(i){
			to[i]=from[i];
		});
	}

	Context.replaceCanvasGetSet=function(tar,key){
		var oldO=Object.getOwnPropertyDescriptor(tar,key);
		if (!oldO||!oldO.configurable)return false;
		var newO={};
		var tkey;
		for (tkey in oldO){
			if (tkey !="set"){
				newO[tkey]=oldO[tkey];
			}
		};
		var preFun=oldO["set"];
		newO["set"]=function (v){
			var _self=this;
			preFun.call(_self,v);
			var _ct=_self.getContext("2d");
			if (_ct && "__reset" in _ct){
				_ct.__reset();
			}
		}
		Object.defineProperty(tar,key,newO);
		return true;
	}

	Context.replaceGetSet=function(tar,key){
		var oldO=Object.getOwnPropertyDescriptor(tar,key);
		if (!oldO||!oldO.configurable)return false;
		var newO={};
		var tkey;
		for (tkey in oldO){
			if (tkey !="set"){
				newO[tkey]=oldO[tkey];
			}
		};
		var preFun=oldO["set"];
		var dataKey="___"+key+"__";
		Context.newKeys.push(dataKey);
		newO["set"]=function (v){
			var _self=this;
			if (v !=_self[dataKey]){
				_self[dataKey]=v;
				preFun.call(_self,v);
			}
		}
		Object.defineProperty(tar,key,newO);
		return true;
	}

	Context._default=new Context();
	Context.newKeys=[];
	__static(Context,
	['replaceKeys',function(){return this.replaceKeys=["font","fillStyle","textBaseline"];}
	]);
	return Context;
})()


/**
*@private
*<code>ResourceManager</code> 是资源管理类。它用于资源的载入、获取、销毁。
*/
//class laya.resource.ResourceManager
var ResourceManager=(function(){
	function ResourceManager(name){
		/**唯一标识ID。*/
		this._id=0;
		/**名字。*/
		this._name=null;
		/**所管理资源。*/
		this._resources=null;
		/**所管理资源的累计内存,以字节为单位。*/
		this._memorySize=0;
		/**垃圾回收比例，范围是0到1。*/
		this._garbageCollectionRate=NaN;
		/**自动释放机制中内存是否溢出。*/
		this._isOverflow=false;
		/**是否启用自动释放机制。*/
		this.autoRelease=false;
		/**自动释放机制的内存触发上限,以字节为单位。*/
		this.autoReleaseMaxSize=0;
		this._id=++ResourceManager._uniqueIDCounter;
		this._name=name ? name :"Content Manager";
		ResourceManager._isResourceManagersSorted=false;
		this._memorySize=0;
		this._isOverflow=false;
		this.autoRelease=false;
		this.autoReleaseMaxSize=1024 *1024 *512;
		this._garbageCollectionRate=0.2;
		ResourceManager._resourceManagers.push(this);
		this._resources=[];
	}

	__class(ResourceManager,'laya.resource.ResourceManager');
	var __proto=ResourceManager.prototype;
	Laya.imps(__proto,{"laya.resource.IDispose":true})
	/**
	*获取指定索引的资源 Resource 对象。
	*@param 索引。
	*@return 资源 Resource 对象。
	*/
	__proto.getResourceByIndex=function(index){
		return this._resources[index];
	}

	/**
	*获取此管理器所管理的资源个数。
	*@return 资源个数。
	*/
	__proto.getResourcesLength=function(){
		return this._resources.length;
	}

	/**
	*添加指定资源。
	*@param resource 需要添加的资源 Resource 对象。
	*@return 是否添加成功。
	*/
	__proto.addResource=function(resource){
		if (resource.resourceManager)
			resource.resourceManager.removeResource(resource);
		var index=this._resources.indexOf(resource);
		if (index===-1){
			resource._resourceManager=this;
			this._resources.push(resource);
			this.addSize(resource.memorySize);
			return true;
		}
		return false;
	}

	/**
	*移除指定资源。
	*@param resource 需要移除的资源 Resource 对象
	*@return 是否移除成功。
	*/
	__proto.removeResource=function(resource){
		var index=this._resources.indexOf(resource);
		if (index!==-1){
			this._resources.splice(index,1);
			resource._resourceManager=null;
			this._memorySize-=resource.memorySize;
			return true;
		}
		return false;
	}

	/**
	*卸载此资源管理器载入的资源。
	*/
	__proto.unload=function(){
		var tempResources=this._resources.slice(0,this._resources.length);
		for (var i=0;i < tempResources.length;i++){
			var resource=tempResources[i];
			resource.destroy();
		}
		tempResources.length=0;
	}

	/**释放资源。*/
	__proto.dispose=function(){
		if (this===ResourceManager._systemResourceManager)
			throw new Error("systemResourceManager不能被释放！");
		ResourceManager._resourceManagers.splice(ResourceManager._resourceManagers.indexOf(this),1);
		ResourceManager._isResourceManagersSorted=false;
		var tempResources=this._resources.slice(0,this._resources.length);
		for (var i=0;i < tempResources.length;i++){
			var resource=tempResources[i];
			resource.resourceManager.removeResource(resource);
			resource.destroy();
		}
		tempResources.length=0;
	}

	/**
	*增加内存。
	*@param add 需要增加的内存大小。
	*/
	__proto.addSize=function(add){
		if (add){
			if (this.autoRelease && add > 0)
				((this._memorySize+add)> this.autoReleaseMaxSize)&& (this.garbageCollection((1-this._garbageCollectionRate)*this.autoReleaseMaxSize));
			this._memorySize+=add;
		}
	}

	/**
	*垃圾回收。
	*@param reserveSize 保留尺寸。
	*/
	__proto.garbageCollection=function(reserveSize){
		var all=this._resources;
		all=all.slice();
		all.sort(function(a,b){
			if (!a || !b)
				throw new Error("a或b不能为空！");
			if (a.released && b.released)
				return 0;
			else if (a.released)
			return 1;
			else if (b.released)
			return-1;
			return a._lastUseFrameCount-b._lastUseFrameCount;
		});
		var currentFrameCount=Stat.loopCount;
		for (var i=0,n=all.length;i < n;i++){
			var resou=all[i];
			if (currentFrameCount-resou._lastUseFrameCount > 1){
				resou.releaseResource();
				}else {
				if (this._memorySize >=reserveSize)
					this._isOverflow=true;
				return;
			}
			if (this._memorySize < reserveSize){
				this._isOverflow=false;
				return;
			}
		}
	}

	/**
	*唯一标识 ID 。
	*/
	__getset(0,__proto,'id',function(){
		return this._id;
	});

	/**
	*名字。
	*/
	__getset(0,__proto,'name',function(){
		return this._name;
		},function(value){
		if ((value || value!=="")&& this._name!==value){
			this._name=value;
			ResourceManager._isResourceManagersSorted=false;
		}
	});

	/**
	*此管理器所管理资源的累计内存，以字节为单位。
	*/
	__getset(0,__proto,'memorySize',function(){
		return this._memorySize;
	});

	/**
	*系统资源管理器。
	*/
	__getset(1,ResourceManager,'systemResourceManager',function(){
		return ResourceManager._systemResourceManager;
	});

	ResourceManager.__init__=function(){
		ResourceManager.currentResourceManager=ResourceManager.systemResourceManager;
	}

	ResourceManager.getLoadedResourceManagerByIndex=function(index){
		return ResourceManager._resourceManagers[index];
	}

	ResourceManager.getLoadedResourceManagersCount=function(){
		return ResourceManager._resourceManagers.length;
	}

	ResourceManager.recreateContentManagers=function(force){
		(force===void 0)&& (force=false);
		var temp=ResourceManager.currentResourceManager;
		for (var i=0;i < ResourceManager._resourceManagers.length;i++){
			ResourceManager.currentResourceManager=ResourceManager._resourceManagers[i];
			for (var j=0;j < ResourceManager.currentResourceManager._resources.length;j++){
				ResourceManager.currentResourceManager._resources[j].releaseResource(force);
				ResourceManager.currentResourceManager._resources[j].activeResource(force);
			}
		}
		ResourceManager.currentResourceManager=temp;
	}

	ResourceManager.releaseContentManagers=function(force){
		(force===void 0)&& (force=false);
		var temp=ResourceManager.currentResourceManager;
		for (var i=0;i < ResourceManager._resourceManagers.length;i++){
			ResourceManager.currentResourceManager=ResourceManager._resourceManagers[i];
			for (var j=0;j < ResourceManager.currentResourceManager._resources.length;j++){
				var resource=ResourceManager.currentResourceManager._resources[j];
				(!resource.released)&& (resource.releaseResource(force));
			}
		}
		ResourceManager.currentResourceManager=temp;
	}

	ResourceManager._uniqueIDCounter=0;
	ResourceManager._isResourceManagersSorted=false;
	ResourceManager._resourceManagers=[];
	__static(ResourceManager,
	['_systemResourceManager',function(){return this._systemResourceManager=new ResourceManager("System Resource Manager");},'currentResourceManager',function(){return this.currentResourceManager=ResourceManager._systemResourceManager;}
	]);
	return ResourceManager;
})()


/**
*@private
*/
//class laya.system.System
var System=(function(){
	function System(){}
	__class(System,'laya.system.System');
	System.changeDefinition=function(name,classObj){
		Laya[name]=classObj;
		var str=name+"=classObj";
		eval(str);
	}

	System.__init__=function(){
		if (Render.isConchApp){
			conch.disableConchResManager();
			conch.disableConchAutoRestoreLostedDevice();
		}
	}

	return System;
})()


/**
*<code>LayoutStyle</code> 是一个布局样式类。
*/
//class laya.ui.LayoutStyle
var LayoutStyle=(function(){
	function LayoutStyle(){
		/**一个布尔值，表示是否有效。*/
		this.enable=false;
		this.top=NaN;
		this.bottom=NaN;
		this.left=NaN;
		this.right=NaN;
		this.centerX=NaN;
		this.centerY=NaN;
		this.anchorX=NaN;
		this.anchorY=NaN;
	}

	__class(LayoutStyle,'laya.ui.LayoutStyle');
	__static(LayoutStyle,
	['EMPTY',function(){return this.EMPTY=new LayoutStyle();}
	]);
	return LayoutStyle;
})()


/**
*<code>Styles</code> 定义了组件常用的样式属性。
*/
//class laya.ui.Styles
var Styles=(function(){
	function Styles(){}
	__class(Styles,'laya.ui.Styles');
	Styles.labelColor="#000000";
	Styles.buttonStateNum=3;
	Styles.scrollBarMinNum=15;
	Styles.scrollBarDelayTime=500;
	__static(Styles,
	['defaultSizeGrid',function(){return this.defaultSizeGrid=[4,4,4,4,0];},'labelPadding',function(){return this.labelPadding=[2,2,2,2];},'inputLabelPadding',function(){return this.inputLabelPadding=[1,1,1,3];},'buttonLabelColors',function(){return this.buttonLabelColors=["#32556b","#32cc6b","#ff0000","#C0C0C0"];},'comboBoxItemColors',function(){return this.comboBoxItemColors=["#5e95b6","#ffffff","#000000","#8fa4b1","#ffffff"];}
	]);
	return Styles;
})()


/**
*<code>UIUtils</code> 是文本工具集。
*/
//class laya.ui.UIUtils
var UIUtils=(function(){
	function UIUtils(){}
	__class(UIUtils,'laya.ui.UIUtils');
	UIUtils.fillArray=function(arr,str,type){
		var temp=arr.concat();
		if (str){
			var a=str.split(",");
			for (var i=0,n=Math.min(temp.length,a.length);i < n;i++){
				var value=a[i];
				temp[i]=(value=="true" ? true :(value=="false" ? false :value));
				if (type !=null)temp[i]=type(value);
			}
		}
		return temp;
	}

	UIUtils.toColor=function(color){
		return Utils.toHexColor(color);
	}

	UIUtils.gray=function(traget,isGray){
		(isGray===void 0)&& (isGray=true);
		if (isGray){
			UIUtils.addFilter(traget,UIUtils.grayFilter);
			}else {
			UIUtils.clearFilter(traget,ColorFilter);
		}
	}

	UIUtils.addFilter=function(target,filter){
		var filters=target.filters || [];
		filters.push(filter);
		target.filters=filters;
	}

	UIUtils.clearFilter=function(target,filterType){
		var filters=target.filters;
		if (filters !=null && filters.length > 0){
			for (var i=filters.length-1;i >-1;i--){
				var filter=filters[i];
				if (Laya.__typeof(filter,filterType))filters.splice(i,1);
			}
			target.filters=filters;
		}
	}

	UIUtils._getReplaceStr=function(word){
		return UIUtils.escapeSequence[word];
	}

	UIUtils.adptString=function(str){
		return str.replace(/\\(\w)/g,UIUtils._getReplaceStr);
	}

	UIUtils.getBindFun=function(value){
		var fun=UIUtils._funMap.get(value);
		if (fun==null){
			var temp="\""+value+"\"";
			temp=temp.replace(/^"\${|}"$/g,"").replace(/\${/g,"\"+").replace(/}/g,"+\"");
			var str="(function(data){if(data==null)return;with(data){try{\nreturn "+temp+"\n}catch(e){}}})";
			fun=Browser.window.eval(str);
			UIUtils._funMap.set(value,fun);
		}
		return fun;
	}

	__static(UIUtils,
	['grayFilter',function(){return this.grayFilter=new ColorFilter([0.3086,0.6094,0.082,0,0,0.3086,0.6094,0.082,0,0,0.3086,0.6094,0.082,0,0,0,0,0,1,0]);},'escapeSequence',function(){return this.escapeSequence={"\\n":"\n","\\t":"\t"};},'_funMap',function(){return this._funMap=new WeakObject();}
	]);
	return UIUtils;
})()


SoundManager;
/**
*<code>Browser</code> 是浏览器代理类。封装浏览器及原生 js 提供的一些功能。
*/
//class laya.utils.Browser
var Browser=(function(){
	function Browser(){}
	__class(Browser,'laya.utils.Browser');
	/**设备像素比。*/
	__getset(1,Browser,'pixelRatio',function(){
		Browser.__init__();
		if (Browser.userAgent.indexOf("Mozilla/6.0(Linux; Android 6.0; HUAWEI NXT-AL10 Build/HUAWEINXT-AL10)")>-1)return 2;
		return RunDriver.getPixelRatio();
	});

	/**浏览器窗口物理高度，其值等于clientHeight *pixelRatio，并且浏览器发生反转之后，宽高会互换。*/
	__getset(1,Browser,'height',function(){
		Browser.__init__();
		return ((Laya.stage && Laya.stage.canvasRotation)? Browser.clientWidth :Browser.clientHeight)*Browser.pixelRatio;
	});

	/**
	*浏览器窗口可视宽度。
	*通过分析浏览器信息获得。浏览器多个属性值优先级为：window.innerWidth(包含滚动条宽度)> document.body.clientWidth(不包含滚动条宽度)，如果前者为0或为空，则选择后者。
	*/
	__getset(1,Browser,'clientWidth',function(){
		Browser.__init__();
		return Browser.window.innerWidth || Browser.document.body.clientWidth;
	});

	/**浏览器原生 window 对象的引用。*/
	__getset(1,Browser,'window',function(){
		Browser.__init__();
		return Browser._window;
	});

	/**
	*浏览器窗口可视高度。
	*通过分析浏览器信息获得。浏览器多个属性值优先级为：window.innerHeight(包含滚动条高度)> document.body.clientHeight(不包含滚动条高度)> document.documentElement.clientHeight(不包含滚动条高度)，如果前者为0或为空，则选择后者。
	*/
	__getset(1,Browser,'clientHeight',function(){
		Browser.__init__();
		return Browser.window.innerHeight || Browser.document.body.clientHeight || Browser.document.documentElement.clientHeight;
	});

	/**浏览器窗口物理宽度，其值等于clientWidth *pixelRatio，并且浏览器发生反转之后，宽高会互换。*/
	__getset(1,Browser,'width',function(){
		Browser.__init__();
		return ((Laya.stage && Laya.stage.canvasRotation)? Browser.clientHeight :Browser.clientWidth)*Browser.pixelRatio;
	});

	/**画布容器，用来盛放画布的容器。方便对画布进行控制*/
	__getset(1,Browser,'container',function(){
		Browser.__init__();
		if (!Browser._container){
			Browser._container=Browser.createElement("div");
			Browser._container.id="layaContainer";
			Browser.document.body.appendChild(Browser._container);
		}
		return Browser._container;
		},function(value){
		Browser._container=value;
	});

	/**浏览器原生 document 对象的引用。*/
	__getset(1,Browser,'document',function(){
		Browser.__init__();
		return Browser._document;
	});

	Browser.__init__=function(){
		SoundManager;
		if (Browser._window)return;
		Browser._window=RunDriver.getWindow();
		Browser._document=Browser.window.document;
		Browser._window.addEventListener('message',function(e){
			laya.utils.Browser._onMessage(e);
		},false);
		Browser.document.__createElement=Browser.document.createElement;
		window.requestAnimationFrame=window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (c){return window.setTimeout(c,1000 / 60);};;
		Browser.userAgent=/*[SAFE]*/ Browser.window.navigator.userAgent;
		Browser.u=/*[SAFE]*/ Browser.userAgent;
		Browser.onIOS=/*[SAFE]*/ !!Browser.u.match(/\(i[^;]+;(U;)? CPU.+Mac OS X/);
		Browser.onMobile=/*[SAFE]*/ Browser.u.indexOf("Mobile")>-1;
		Browser.onIPhone=/*[SAFE]*/ Browser.u.indexOf("iPhone")>-1;
		Browser.onMac=/*[SAFE]*/ Browser.u.indexOf("Mac OS X")>-1;
		Browser.onIPad=/*[SAFE]*/ Browser.u.indexOf("iPad")>-1;
		Browser.onAndriod=/*[SAFE]*/ Browser.u.indexOf('Android')>-1 || Browser.u.indexOf('Adr')>-1;
		Browser.onWP=/*[SAFE]*/ Browser.u.indexOf("Windows Phone")>-1;
		Browser.onQQBrowser=/*[SAFE]*/ Browser.u.indexOf("QQBrowser")>-1;
		Browser.onMQQBrowser=/*[SAFE]*/ Browser.u.indexOf("MQQBrowser")>-1 || (Browser.u.indexOf("Mobile")>-1 && Browser.u.indexOf("QQ")>-1);
		Browser.onIE=/*[SAFE]*/ !!Browser.window.ActiveXObject || "ActiveXObject" in Browser.window;
		Browser.onWeiXin=/*[SAFE]*/ Browser.u.indexOf('MicroMessenger')>-1;
		Browser.onPC=/*[SAFE]*/ !Browser.onMobile;
		Browser.onSafari=/*[SAFE]*/ Browser.u.indexOf("Safari")>-1;
		Browser.onFirefox=/*[SAFE]*/ Browser.u.indexOf('Firefox')>-1;
		Browser.onEdge=/*[SAFE]*/ Browser.u.indexOf('Edge')>-1;
		Browser.onMiniGame=/*[SAFE]*/ Browser.u.indexOf('MiniGame')>-1;
		Browser.onLimixiu=/*[SAFE]*/ Browser.u.indexOf('limixiu')>-1;
		Browser.httpProtocol=/*[SAFE]*/ Browser.window.location.protocol=="http:";
		if (Browser.onMiniGame && Browser.window.focus==null){
			console.error("请先初始化小游戏适配库，详细教程https://ldc.layabox.com/doc/?nav=zh-ts-5-0-0");
		}
		Browser.webAudioEnabled=/*[SAFE]*/ Browser.window["AudioContext"] || Browser.window["webkitAudioContext"] || Browser.window["mozAudioContext"] ? true :false;
		Browser.soundType=/*[SAFE]*/ Browser.webAudioEnabled ? "WEBAUDIOSOUND" :"AUDIOSOUND";
		Sound=Browser.webAudioEnabled?WebAudioSound:AudioSound;;
		if (Browser.webAudioEnabled)WebAudioSound.initWebAudio();;
		AudioSound._initMusicAudio();
		Browser.enableTouch=(('ontouchstart' in window)|| window.DocumentTouch && document instanceof DocumentTouch);
		window.focus();
		SoundManager._soundClass=Sound;;
		SoundManager._musicClass=AudioSound;
		Render._mainCanvas=Render._mainCanvas || HTMLCanvas.create('2D');
		if (Browser.canvas)return;
		Browser.canvas=HTMLCanvas.create('2D');
		Browser.context=Browser.canvas.getContext('2d');
	}

	Browser._onMessage=function(e){
		if (!e.data)return;
		if (e.data.name=="size"){
			Browser.window.innerWidth=e.data.width;
			Browser.window.innerHeight=e.data.height;
			Browser.window.__innerHeight=e.data.clientHeight;
			if (!Browser.document.createEvent){
				console.warn("no document.createEvent");
				return;
			};
			var evt=Browser.document.createEvent("HTMLEvents");
			evt.initEvent("resize",false,false);
			Browser.window.dispatchEvent(evt);
			return;
		}
	}

	Browser.createElement=function(type){
		Browser.__init__();
		return Browser.document.__createElement(type);
	}

	Browser.getElementById=function(type){
		Browser.__init__();
		return Browser.document.getElementById(type);
	}

	Browser.removeElement=function(ele){
		if (ele && ele.parentNode)ele.parentNode.removeChild(ele);
	}

	Browser.now=function(){
		return RunDriver.now();
	}

	Browser._window=null;
	Browser._document=null;
	Browser._container=null;
	Browser.userAgent=null;
	Browser.u=null;
	Browser.onIOS=false;
	Browser.onMac=false;
	Browser.onMobile=false;
	Browser.onIPhone=false;
	Browser.onIPad=false;
	Browser.onAndriod=false;
	Browser.onAndroid=false;
	Browser.onWP=false;
	Browser.onQQBrowser=false;
	Browser.onMQQBrowser=false;
	Browser.onSafari=false;
	Browser.onFirefox=false;
	Browser.onEdge=false;
	Browser.onIE=false;
	Browser.onWeiXin=false;
	Browser.onMiniGame=false;
	Browser.onLimixiu=false;
	Browser.onPC=false;
	Browser.httpProtocol=false;
	Browser.webAudioEnabled=false;
	Browser.soundType=null;
	Browser.enableTouch=false;
	Browser.canvas=null;
	Browser.context=null;
	Browser.__init$=function(){
		AudioSound;
		WebAudioSound;
	}

	return Browser;
})()


/**
*@private
*对象缓存统一管理类
*/
//class laya.utils.CacheManager
var CacheManager=(function(){
	function CacheManager(){}
	__class(CacheManager,'laya.utils.CacheManager');
	CacheManager.regCacheByFunction=function(disposeFunction,getCacheListFunction){
		CacheManager.unRegCacheByFunction(disposeFunction,getCacheListFunction);
		var cache;
		cache={tryDispose:disposeFunction,getCacheList:getCacheListFunction};
		CacheManager._cacheList.push(cache);
	}

	CacheManager.unRegCacheByFunction=function(disposeFunction,getCacheListFunction){
		var i=0,len=0;
		len=CacheManager._cacheList.length;
		for (i=0;i < len;i++){
			if (CacheManager._cacheList[i].tryDispose==disposeFunction && CacheManager._cacheList[i].getCacheList==getCacheListFunction){
				CacheManager._cacheList.splice(i,1);
				return;
			}
		}
	}

	CacheManager.forceDispose=function(){
		var i=0,len=CacheManager._cacheList.length;
		for (i=0;i < len;i++){
			CacheManager._cacheList[i].tryDispose(true);
		}
	}

	CacheManager.beginCheck=function(waitTime){
		(waitTime===void 0)&& (waitTime=15000);
		Laya.timer.loop(waitTime,null,CacheManager._checkLoop);
	}

	CacheManager.stopCheck=function(){
		Laya.timer.clear(null,CacheManager._checkLoop);
	}

	CacheManager._checkLoop=function(){
		var cacheList=CacheManager._cacheList;
		if (cacheList.length < 1)return;
		var tTime=Browser.now();
		var count=0;
		var len=0;
		len=count=cacheList.length;
		while (count > 0){
			CacheManager._index++;
			CacheManager._index=CacheManager._index % len;
			cacheList[CacheManager._index].tryDispose(false);
			if (Browser.now()-tTime > CacheManager.loopTimeLimit)break ;
			count--;
		}
	}

	CacheManager.loopTimeLimit=2;
	CacheManager._cacheList=[];
	CacheManager._index=0;
	return CacheManager;
})()


/**
*<code>ClassUtils</code> 是一个类工具类。
*/
//class laya.utils.ClassUtils
var ClassUtils=(function(){
	function ClassUtils(){}
	__class(ClassUtils,'laya.utils.ClassUtils');
	ClassUtils.regClass=function(className,classDef){
		ClassUtils._classMap[className]=classDef;
	}

	ClassUtils.getRegClass=function(className){
		return ClassUtils._classMap[className];
	}

	ClassUtils.getInstance=function(className){
		var compClass=ClassUtils.getClass(className);
		if (compClass)
			return new compClass();
		else
		console.warn("[error] Undefined class:",className);
		return null;
	}

	ClassUtils.createByJson=function(json,node,root,customHandler,instanceHandler){
		if ((typeof json=='string'))
			json=JSON.parse(json);
		var props=json.props;
		if (!node){
			node=instanceHandler ? instanceHandler.runWith(json):ClassUtils.getInstance(props.runtime || json.type);
			if (!node)
				return null;
		};
		var child=json.child;
		if (child){
			for (var i=0,n=child.length;i < n;i++){
				var data=child[i];
				if ((data.props.name==="render" || data.props.renderType==="render")&& node["_$set_itemRender"])
					node.itemRender=data;
				else {
					if (data.type=="Graphic"){
						ClassUtils.addGraphicsToSprite(data,node);
						}else if (ClassUtils.isDrawType(data.type)){
						ClassUtils.addGraphicToSprite(data,node,true);
						}else {
						var tChild=ClassUtils.createByJson(data,null,root,customHandler,instanceHandler)
						if (data.type=="Script"){
							if (tChild.hasOwnProperty("owner")){
								tChild["owner"]=node;
								}else if (tChild.hasOwnProperty("target")){
								tChild["target"]=node;
							}
							}else if (data.props.renderType=="mask"){
							node.mask=tChild;
							}else {
							node.addChild(tChild);
						}
					}
				}
			}
		}
		if (props){
			for (var prop in props){
				var value=props[prop];
				if (prop==="var" && root){
					root[value]=node;
					}else if ((value instanceof Array)&& (typeof (node[prop])=='function')){
					node[prop].apply(node,value);
					}else {
					node[prop]=value;
				}
			}
		}
		if (customHandler && json.customProps){
			customHandler.runWith([node,json]);
		}
		if (node["created"])
			node.created();
		return node;
	}

	ClassUtils.addGraphicsToSprite=function(graphicO,sprite){
		var graphics;
		graphics=graphicO.child;
		if (!graphics || graphics.length < 1)
			return;
		var g;
		g=ClassUtils._getGraphicsFromSprite(graphicO,sprite);
		var ox=0;
		var oy=0;
		if (graphicO.props){
			ox=ClassUtils._getObjVar(graphicO.props,"x",0);
			oy=ClassUtils._getObjVar(graphicO.props,"y",0);
		}
		if (ox !=0 && oy !=0){
			g.translate(ox,oy);
		};
		var i=0,len=0;
		len=graphics.length;
		for (i=0;i < len;i++){
			ClassUtils._addGraphicToGraphics(graphics[i],g);
		}
		if (ox !=0 && oy !=0){
			g.translate(-ox,-oy);
		}
	}

	ClassUtils.addGraphicToSprite=function(graphicO,sprite,isChild){
		(isChild===void 0)&& (isChild=false);
		var g;
		g=isChild ? ClassUtils._getGraphicsFromSprite(graphicO,sprite):sprite.graphics;
		ClassUtils._addGraphicToGraphics(graphicO,g);
	}

	ClassUtils._getGraphicsFromSprite=function(dataO,sprite){
		var g;
		if (!dataO || !dataO.props)
			return sprite.graphics;
		var propsName;
		propsName=dataO.props.renderType;
		switch (propsName){
			case "hit":
			case "unHit":;
				var hitArea;
				if (!sprite.hitArea){
					sprite.hitArea=new HitArea();
				}
				hitArea=sprite.hitArea;
				if (!hitArea[propsName]){
					hitArea[propsName]=new Graphics();
				}
				g=hitArea[propsName];
				break ;
			default :
			}
		if (!g)
			g=sprite.graphics;
		return g;
	}

	ClassUtils._getTransformData=function(propsO){
		var m;
		if (propsO.hasOwnProperty("pivotX")|| propsO.hasOwnProperty("pivotY")){
			m=m || new Matrix();
			m.translate(-ClassUtils._getObjVar(propsO,"pivotX",0),-ClassUtils._getObjVar(propsO,"pivotY",0));
		};
		var sx=ClassUtils._getObjVar(propsO,"scaleX",1),sy=ClassUtils._getObjVar(propsO,"scaleY",1);
		var rotate=ClassUtils._getObjVar(propsO,"rotation",0);
		var skewX=ClassUtils._getObjVar(propsO,"skewX",0);
		var skewY=ClassUtils._getObjVar(propsO,"skewY",0);
		if (sx !=1 || sy !=1 || rotate !=0){
			m=m || new Matrix();
			m.scale(sx,sy);
			m.rotate(rotate *0.0174532922222222);
		}
		return m;
	}

	ClassUtils._addGraphicToGraphics=function(graphicO,graphic){
		var propsO;
		propsO=graphicO.props;
		if (!propsO)
			return;
		var drawConfig;
		drawConfig=ClassUtils.DrawTypeDic[graphicO.type];
		if (!drawConfig)
			return;
		var g;
		g=graphic;
		var m;
		var params=ClassUtils._getParams(propsO,drawConfig[1],drawConfig[2],drawConfig[3]);
		m=ClassUtils._tM;
		if (m || ClassUtils._alpha !=1){
			g.save();
			if (m)
				g.transform(m);
			if (ClassUtils._alpha !=1)
				g.alpha(ClassUtils._alpha);
		}
		g[drawConfig[0]].apply(g,params);
		if (m || ClassUtils._alpha !=1){
			g.restore();
		}
	}

	ClassUtils._adptLineData=function(params){
		params[2]=parseFloat(params[0])+parseFloat(params[2]);
		params[3]=parseFloat(params[1])+parseFloat(params[3]);
		return params;
	}

	ClassUtils._adptTextureData=function(params){
		params[0]=Loader.getRes(params[0]);
		return params;
	}

	ClassUtils._adptLinesData=function(params){
		params[2]=ClassUtils._getPointListByStr(params[2]);
		return params;
	}

	ClassUtils.isDrawType=function(type){
		if (type=="Image")
			return false;
		return ClassUtils.DrawTypeDic.hasOwnProperty(type);
	}

	ClassUtils._getParams=function(obj,params,xPos,adptFun){
		(xPos===void 0)&& (xPos=0);
		var rst;
		rst=ClassUtils._temParam;
		rst.length=params.length;
		var i=0,len=0;
		len=params.length;
		for (i=0;i < len;i++){
			rst[i]=ClassUtils._getObjVar(obj,params[i][0],params[i][1]);
		}
		ClassUtils._alpha=ClassUtils._getObjVar(obj,"alpha",1);
		var m;
		m=ClassUtils._getTransformData(obj);
		if (m){
			if (!xPos)xPos=0;
			m.translate(rst[xPos],rst[xPos+1]);
			rst[xPos]=rst[xPos+1]=0;
			ClassUtils._tM=m;
			}else {
			ClassUtils._tM=null;
		}
		if (adptFun && ClassUtils[adptFun]){
			rst=ClassUtils[adptFun](rst);
		}
		return rst;
	}

	ClassUtils._getPointListByStr=function(str){
		var pointArr;
		pointArr=str.split(",");
		var i=0,len=0;
		len=pointArr.length;
		for (i=0;i < len;i++){
			pointArr[i]=parseFloat(pointArr[i]);
		}
		return pointArr;
	}

	ClassUtils._getObjVar=function(obj,key,noValue){
		if (obj.hasOwnProperty(key)){
			return obj[key];
		}
		return noValue;
	}

	ClassUtils._temParam=[];
	ClassUtils._classMap={'Sprite':'laya.display.Sprite','Text':'laya.display.Text','Animation':'laya.display.Animation','Skeleton':'laya.ani.bone.Skeleton','Particle2D':'laya.particle.Particle2D','div':'laya.html.dom.HTMLDivElement','p':'laya.html.dom.HTMLElement','img':'laya.html.dom.HTMLImageElement','span':'laya.html.dom.HTMLElement','br':'laya.html.dom.HTMLBrElement','style':'laya.html.dom.HTMLStyleElement','font':'laya.html.dom.HTMLElement','a':'laya.html.dom.HTMLElement','#text':'laya.html.dom.HTMLElement'};
	ClassUtils.getClass=function(className){
		var classObject=ClassUtils._classMap[className] || className;
		if ((typeof classObject=='string'))
			return Laya["__classmap"][classObject];
		return classObject;
	}

	ClassUtils._tM=null;
	ClassUtils._alpha=NaN;
	__static(ClassUtils,
	['DrawTypeDic',function(){return this.DrawTypeDic={"Rect":["drawRect",[["x",0],["y",0],["width",0],["height",0],["fillColor",null],["lineColor",null],["lineWidth",1]]],"Circle":["drawCircle",[["x",0],["y",0],["radius",0],["fillColor",null],["lineColor",null],["lineWidth",1]]],"Pie":["drawPie",[["x",0],["y",0],["radius",0],["startAngle",0],["endAngle",0],["fillColor",null],["lineColor",null],["lineWidth",1]]],"Image":["drawTexture",[["x",0],["y",0],["width",0],["height",0]]],"Texture":["drawTexture",[["skin",null],["x",0],["y",0],["width",0],["height",0]],1,"_adptTextureData"],"FillTexture":["fillTexture",[["skin",null],["x",0],["y",0],["width",0],["height",0],["repeat",null]],1,"_adptTextureData"],"FillText":["fillText",[["text",""],["x",0],["y",0],["font",null],["color",null],["textAlign",null]],1],"Line":["drawLine",[["x",0],["y",0],["toX",0],["toY",0],["lineColor",null],["lineWidth",0]],0,"_adptLineData"],"Lines":["drawLines",[["x",0],["y",0],["points",""],["lineColor",null],["lineWidth",0]],0,"_adptLinesData"],"Curves":["drawCurves",[["x",0],["y",0],["points",""],["lineColor",null],["lineWidth",0]],0,"_adptLinesData"],"Poly":["drawPoly",[["x",0],["y",0],["points",""],["fillColor",null],["lineColor",null],["lineWidth",1]],0,"_adptLinesData"]};}
	]);
	return ClassUtils;
})()


/**
*@private
*<code>Color</code> 是一个颜色值处理类。
*/
//class laya.utils.Color
var Color$1=(function(){
	function Color(str){
		/**@private */
		this._color=[];
		/**字符串型颜色值。*/
		//this.strColor=null;
		/**uint 型颜色值。*/
		//this.numColor=0;
		//this._drawStyle=null;
		if ((typeof str=='string')){
			this.strColor=str;
			if (str===null)str="#000000";
			str.charAt(0)=='#' && (str=str.substr(1));
			var len=str.length;
			if (len==3 || len==4){
				var temp="";
				for (var i=0;i < len;i++){
					temp+=(str[i]+str[i]);
				}
				str=temp;
			};
			var color=this.numColor=parseInt(str,16);
			var flag=(str.length==8);
			if (flag){
				this._color=[parseInt(str.substr(0,2),16)/ 255,((0x00FF0000 & color)>> 16)/ 255,((0x0000FF00 & color)>> 8)/ 255,(0x000000FF & color)/ 255];
				return;
			}
			}else {
			color=this.numColor=str;
			this.strColor=Utils.toHexColor(color);
		}
		this._color=[((0xFF0000 & color)>> 16)/ 255,((0xFF00 & color)>> 8)/ 255,(0xFF & color)/ 255,1];
		(this._color).__id=++Color._COLODID;
	}

	__class(Color,'laya.utils.Color',null,'Color$1');
	Color._initDefault=function(){
		Color._DEFAULT={};
		for (var i in Color._COLOR_MAP)Color._SAVE[i]=Color._DEFAULT[i]=new Color(Color._COLOR_MAP[i]);
		return Color._DEFAULT;
	}

	Color._initSaveMap=function(){
		Color._SAVE_SIZE=0;
		Color._SAVE={};
		for (var i in Color._DEFAULT)Color._SAVE[i]=Color._DEFAULT[i];
	}

	Color.create=function(str){
		var color=Color._SAVE[str+""];
		if (color !=null)return color;
		(Color._SAVE_SIZE < 1000)|| Color._initSaveMap();
		return Color._SAVE[str+""]=new Color(str);
	}

	Color._SAVE={};
	Color._SAVE_SIZE=0;
	Color._COLOR_MAP={"white":'#FFFFFF',"red":'#FF0000',"green":'#00FF00',"blue":'#0000FF',"black":'#000000',"yellow":'#FFFF00','gray':'#AAAAAA'};
	Color._DEFAULT=Color._initDefault();
	Color._COLODID=1;
	return Color;
})()


/**
*<code>Dictionary</code> 是一个字典型的数据存取类。
*/
//class laya.utils.Dictionary
var Dictionary=(function(){
	function Dictionary(){
		this._values=[];
		this._keys=[];
	}

	__class(Dictionary,'laya.utils.Dictionary');
	var __proto=Dictionary.prototype;
	/**
	*给指定的键名设置值。
	*@param key 键名。
	*@param value 值。
	*/
	__proto.set=function(key,value){
		var index=this.indexOf(key);
		if (index >=0){
			this._values[index]=value;
			return;
		}
		this._keys.push(key);
		this._values.push(value);
	}

	/**
	*获取指定对象的键名索引。
	*@param key 键名对象。
	*@return 键名索引。
	*/
	__proto.indexOf=function(key){
		var index=this._keys.indexOf(key);
		if (index >=0)return index;
		key=((typeof key=='string'))? Number(key):(((typeof key=='number'))? key.toString():key);
		return this._keys.indexOf(key);
	}

	/**
	*返回指定键名的值。
	*@param key 键名对象。
	*@return 指定键名的值。
	*/
	__proto.get=function(key){
		var index=this.indexOf(key);
		return index < 0 ? null :this._values[index];
	}

	/**
	*移除指定键名的值。
	*@param key 键名对象。
	*@return 是否成功移除。
	*/
	__proto.remove=function(key){
		var index=this.indexOf(key);
		if (index >=0){
			this._keys.splice(index,1);
			this._values.splice(index,1);
			return true;
		}
		return false;
	}

	/**
	*清除此对象的键名列表和键值列表。
	*/
	__proto.clear=function(){
		this._values.length=0;
		this._keys.length=0;
	}

	/**
	*获取所有的子元素列表。
	*/
	__getset(0,__proto,'values',function(){
		return this._values;
	});

	/**
	*获取所有的子元素键名列表。
	*/
	__getset(0,__proto,'keys',function(){
		return this._keys;
	});

	return Dictionary;
})()


/**
*@private
*<code>Dragging</code> 类是触摸滑动控件。
*/
//class laya.utils.Dragging
var Dragging=(function(){
	function Dragging(){
		/**被拖动的对象。*/
		//this.target=null;
		/**缓动衰减系数。*/
		this.ratio=0.92;
		/**单帧最大偏移量。*/
		this.maxOffset=60;
		/**滑动范围。*/
		//this.area=null;
		/**表示拖动是否有惯性。*/
		//this.hasInertia=false;
		/**橡皮筋最大值。*/
		//this.elasticDistance=NaN;
		/**橡皮筋回弹时间，单位为毫秒。*/
		//this.elasticBackTime=NaN;
		/**事件携带数据。*/
		//this.data=null;
		this._dragging=false;
		this._clickOnly=true;
		//this._elasticRateX=NaN;
		//this._elasticRateY=NaN;
		//this._lastX=NaN;
		//this._lastY=NaN;
		//this._offsetX=NaN;
		//this._offsetY=NaN;
		//this._offsets=null;
		//this._disableMouseEvent=false;
		//this._tween=null;
		//this._parent=null;
	}

	__class(Dragging,'laya.utils.Dragging');
	var __proto=Dragging.prototype;
	/**
	*开始拖拽。
	*@param target 待拖拽的 <code>Sprite</code> 对象。
	*@param area 滑动范围。
	*@param hasInertia 拖动是否有惯性。
	*@param elasticDistance 橡皮筋最大值。
	*@param elasticBackTime 橡皮筋回弹时间，单位为毫秒。
	*@param data 事件携带数据。
	*@param disableMouseEvent 鼠标事件是否有效。
	*@param ratio 惯性阻尼系数
	*/
	__proto.start=function(target,area,hasInertia,elasticDistance,elasticBackTime,data,disableMouseEvent,ratio){
		(ratio===void 0)&& (ratio=0.92);
		this.clearTimer();
		this.target=target;
		this.area=area;
		this.hasInertia=hasInertia;
		this.elasticDistance=area ? elasticDistance :0;
		this.elasticBackTime=elasticBackTime;
		this.data=data;
		this._disableMouseEvent=disableMouseEvent;
		this.ratio=ratio;
		if (target.globalScaleX !=1 || target.globalScaleY !=1){
			this._parent=target.parent;
			}else {
			this._parent=Laya.stage;
		}
		this._clickOnly=true;
		this._dragging=true;
		this._elasticRateX=this._elasticRateY=1;
		this._lastX=this._parent.mouseX;
		this._lastY=this._parent.mouseY;
		Laya.stage.on("mouseup",this,this.onStageMouseUp);
		Laya.stage.on("mouseout",this,this.onStageMouseUp);
		Laya.timer.frameLoop(1,this,this.loop);
	}

	/**
	*清除计时器。
	*/
	__proto.clearTimer=function(){
		Laya.timer.clear(this,this.loop);
		Laya.timer.clear(this,this.tweenMove);
		if (this._tween){
			this._tween.recover();
			this._tween=null;
		}
	}

	/**
	*停止拖拽。
	*/
	__proto.stop=function(){
		if (this._dragging){
			MouseManager.instance.disableMouseEvent=false;
			Laya.stage.off("mouseup",this,this.onStageMouseUp);
			Laya.stage.off("mouseout",this,this.onStageMouseUp);
			this._dragging=false;
			this.target && this.area && this.backToArea();
			this.clear();
		}
	}

	/**
	*拖拽的循环处理函数。
	*/
	__proto.loop=function(){
		var point=this._parent.getMousePoint();
		var mouseX=point.x;
		var mouseY=point.y;
		var offsetX=mouseX-this._lastX;
		var offsetY=mouseY-this._lastY;
		if (this._clickOnly){
			if (Math.abs(offsetX *Laya.stage._canvasTransform.getScaleX())> 1 || Math.abs(offsetY *Laya.stage._canvasTransform.getScaleY())> 1){
				this._clickOnly=false;
				this._offsets || (this._offsets=[]);
				this._offsets.length=0;
				this.target.event("dragstart",this.data);
				MouseManager.instance.disableMouseEvent=this._disableMouseEvent;
				this.target._set$P("$_MOUSEDOWN",false);
			}else return;
			}else {
			this._offsets.push(offsetX,offsetY);
		}
		if (offsetX===0 && offsetY===0)return;
		this._lastX=mouseX;
		this._lastY=mouseY;
		this.target.x+=offsetX *this._elasticRateX;
		this.target.y+=offsetY *this._elasticRateY;
		this.area && this.checkArea();
		this.target.event("dragmove",this.data);
	}

	/**
	*拖拽区域检测。
	*/
	__proto.checkArea=function(){
		if (this.elasticDistance <=0){
			this.backToArea();
			}else {
			if (this.target.x < this.area.x){
				var offsetX=this.area.x-this.target.x;
				}else if (this.target.x > this.area.x+this.area.width){
				offsetX=this.target.x-this.area.x-this.area.width;
				}else {
				offsetX=0;
			}
			this._elasticRateX=Math.max(0,1-(offsetX / this.elasticDistance));
			if (this.target.y < this.area.y){
				var offsetY=this.area.y-this.target.y;
				}else if (this.target.y > this.area.y+this.area.height){
				offsetY=this.target.y-this.area.y-this.area.height;
				}else {
				offsetY=0;
			}
			this._elasticRateY=Math.max(0,1-(offsetY / this.elasticDistance));
		}
	}

	/**
	*移动至设定的拖拽区域。
	*/
	__proto.backToArea=function(){
		this.target.x=Math.min(Math.max(this.target.x,this.area.x),this.area.x+this.area.width);
		this.target.y=Math.min(Math.max(this.target.y,this.area.y),this.area.y+this.area.height);
	}

	/**
	*舞台的抬起事件侦听函数。
	*@param e Event 对象。
	*/
	__proto.onStageMouseUp=function(e){
		MouseManager.instance.disableMouseEvent=false;
		Laya.stage.off("mouseup",this,this.onStageMouseUp);
		Laya.stage.off("mouseout",this,this.onStageMouseUp);
		Laya.timer.clear(this,this.loop);
		if (this._clickOnly || !this.target)return;
		if (this.hasInertia){
			if (this._offsets.length < 1){
				this._offsets.push(this._parent.mouseX-this._lastX,this._parent.mouseY-this._lastY);
			}
			this._offsetX=this._offsetY=0;
			var len=this._offsets.length;
			var n=Math.min(len,6);
			var m=this._offsets.length-n;
			for (var i=len-1;i > m;i--){
				this._offsetY+=this._offsets[i--];
				this._offsetX+=this._offsets[i];
			}
			this._offsetX=this._offsetX / n *2;
			this._offsetY=this._offsetY / n *2;
			if (Math.abs(this._offsetX)> this.maxOffset)this._offsetX=this._offsetX > 0 ? this.maxOffset :-this.maxOffset;
			if (Math.abs(this._offsetY)> this.maxOffset)this._offsetY=this._offsetY > 0 ? this.maxOffset :-this.maxOffset;
			Laya.timer.frameLoop(1,this,this.tweenMove);
			}else if (this.elasticDistance > 0){
			this.checkElastic();
			}else {
			this.clear();
		}
	}

	/**
	*橡皮筋效果检测。
	*/
	__proto.checkElastic=function(){
		var tx=NaN;
		var ty=NaN;
		if (this.target.x < this.area.x)tx=this.area.x;
		else if (this.target.x > this.area.x+this.area.width)tx=this.area.x+this.area.width;
		if (this.target.y < this.area.y)ty=this.area.y;
		else if (this.target.y > this.area.y+this.area.height)ty=this.area.y+this.area.height;
		if (!isNaN(tx)|| !isNaN(ty)){
			var obj={};
			if (!isNaN(tx))obj.x=tx;
			if (!isNaN(ty))obj.y=ty;
			this._tween=Tween.to(this.target,obj,this.elasticBackTime,Ease.sineOut,Handler.create(this,this.clear),0,false,false);
			}else {
			this.clear();
		}
	}

	/**
	*移动。
	*/
	__proto.tweenMove=function(){
		this._offsetX *=this.ratio *this._elasticRateX;
		this._offsetY *=this.ratio *this._elasticRateY;
		this.target.x+=this._offsetX;
		this.target.y+=this._offsetY;
		this.area && this.checkArea();
		this.target.event("dragmove",this.data);
		if ((Math.abs(this._offsetX)< 1 && Math.abs(this._offsetY)< 1)|| this._elasticRateX < 0.5 || this._elasticRateY < 0.5){
			Laya.timer.clear(this,this.tweenMove);
			if (this.elasticDistance > 0)this.checkElastic();
			else this.clear();
		}
	}

	/**
	*结束拖拽。
	*/
	__proto.clear=function(){
		if (this.target){
			this.clearTimer();
			var sp=this.target;
			this.target=null;
			this._parent=null;
			sp.event("dragend",this.data);
		}
	}

	return Dragging;
})()


/**
*<code>Ease</code> 类定义了缓动函数，以便实现 <code>Tween</code> 动画的缓动效果。
*/
//class laya.utils.Ease
var Ease=(function(){
	function Ease(){}
	__class(Ease,'laya.utils.Ease');
	Ease.linearNone=function(t,b,c,d){
		return c *t / d+b;
	}

	Ease.linearIn=function(t,b,c,d){
		return c *t / d+b;
	}

	Ease.linearInOut=function(t,b,c,d){
		return c *t / d+b;
	}

	Ease.linearOut=function(t,b,c,d){
		return c *t / d+b;
	}

	Ease.bounceIn=function(t,b,c,d){
		return c-Ease.bounceOut(d-t,0,c,d)+b;
	}

	Ease.bounceInOut=function(t,b,c,d){
		if (t < d *0.5)return Ease.bounceIn(t *2,0,c,d)*.5+b;
		else return Ease.bounceOut(t *2-d,0,c,d)*.5+c *.5+b;
	}

	Ease.bounceOut=function(t,b,c,d){
		if ((t /=d)< (1 / 2.75))return c *(7.5625 *t *t)+b;
		else if (t < (2 / 2.75))return c *(7.5625 *(t-=(1.5 / 2.75))*t+.75)+b;
		else if (t < (2.5 / 2.75))return c *(7.5625 *(t-=(2.25 / 2.75))*t+.9375)+b;
		else return c *(7.5625 *(t-=(2.625 / 2.75))*t+.984375)+b;
	}

	Ease.backIn=function(t,b,c,d,s){
		(s===void 0)&& (s=1.70158);
		return c *(t /=d)*t *((s+1)*t-s)+b;
	}

	Ease.backInOut=function(t,b,c,d,s){
		(s===void 0)&& (s=1.70158);
		if ((t /=d *0.5)< 1)return c *0.5 *(t *t *(((s *=(1.525))+1)*t-s))+b;
		return c / 2 *((t-=2)*t *(((s *=(1.525))+1)*t+s)+2)+b;
	}

	Ease.backOut=function(t,b,c,d,s){
		(s===void 0)&& (s=1.70158);
		return c *((t=t / d-1)*t *((s+1)*t+s)+1)+b;
	}

	Ease.elasticIn=function(t,b,c,d,a,p){
		(a===void 0)&& (a=0);
		(p===void 0)&& (p=0);
		var s;
		if (t==0)return b;
		if ((t /=d)==1)return b+c;
		if (!p)p=d *.3;
		if (!a || (c > 0 && a < c)|| (c < 0 && a <-c)){
			a=c;
			s=p / 4;
		}else s=p / Ease.PI2 *Math.asin(c / a);
		return-(a *Math.pow(2,10 *(t-=1))*Math.sin((t *d-s)*Ease.PI2 / p))+b;
	}

	Ease.elasticInOut=function(t,b,c,d,a,p){
		(a===void 0)&& (a=0);
		(p===void 0)&& (p=0);
		var s;
		if (t==0)return b;
		if ((t /=d *0.5)==2)return b+c;
		if (!p)p=d *(.3 *1.5);
		if (!a || (c > 0 && a < c)|| (c < 0 && a <-c)){
			a=c;
			s=p / 4;
		}else s=p / Ease.PI2 *Math.asin(c / a);
		if (t < 1)return-.5 *(a *Math.pow(2,10 *(t-=1))*Math.sin((t *d-s)*Ease.PI2 / p))+b;
		return a *Math.pow(2,-10 *(t-=1))*Math.sin((t *d-s)*Ease.PI2 / p)*.5+c+b;
	}

	Ease.elasticOut=function(t,b,c,d,a,p){
		(a===void 0)&& (a=0);
		(p===void 0)&& (p=0);
		var s;
		if (t==0)return b;
		if ((t /=d)==1)return b+c;
		if (!p)p=d *.3;
		if (!a || (c > 0 && a < c)|| (c < 0 && a <-c)){
			a=c;
			s=p / 4;
		}else s=p / Ease.PI2 *Math.asin(c / a);
		return (a *Math.pow(2,-10 *t)*Math.sin((t *d-s)*Ease.PI2 / p)+c+b);
	}

	Ease.strongIn=function(t,b,c,d){
		return c *(t /=d)*t *t *t *t+b;
	}

	Ease.strongInOut=function(t,b,c,d){
		if ((t /=d *0.5)< 1)return c *0.5 *t *t *t *t *t+b;
		return c *0.5 *((t-=2)*t *t *t *t+2)+b;
	}

	Ease.strongOut=function(t,b,c,d){
		return c *((t=t / d-1)*t *t *t *t+1)+b;
	}

	Ease.sineInOut=function(t,b,c,d){
		return-c *0.5 *(Math.cos(Math.PI *t / d)-1)+b;
	}

	Ease.sineIn=function(t,b,c,d){
		return-c *Math.cos(t / d *Ease.HALF_PI)+c+b;
	}

	Ease.sineOut=function(t,b,c,d){
		return c *Math.sin(t / d *Ease.HALF_PI)+b;
	}

	Ease.quintIn=function(t,b,c,d){
		return c *(t /=d)*t *t *t *t+b;
	}

	Ease.quintInOut=function(t,b,c,d){
		if ((t /=d *0.5)< 1)return c *0.5 *t *t *t *t *t+b;
		return c *0.5 *((t-=2)*t *t *t *t+2)+b;
	}

	Ease.quintOut=function(t,b,c,d){
		return c *((t=t / d-1)*t *t *t *t+1)+b;
	}

	Ease.quartIn=function(t,b,c,d){
		return c *(t /=d)*t *t *t+b;
	}

	Ease.quartInOut=function(t,b,c,d){
		if ((t /=d *0.5)< 1)return c *0.5 *t *t *t *t+b;
		return-c *0.5 *((t-=2)*t *t *t-2)+b;
	}

	Ease.quartOut=function(t,b,c,d){
		return-c *((t=t / d-1)*t *t *t-1)+b;
	}

	Ease.cubicIn=function(t,b,c,d){
		return c *(t /=d)*t *t+b;
	}

	Ease.cubicInOut=function(t,b,c,d){
		if ((t /=d *0.5)< 1)return c *0.5 *t *t *t+b;
		return c *0.5 *((t-=2)*t *t+2)+b;
	}

	Ease.cubicOut=function(t,b,c,d){
		return c *((t=t / d-1)*t *t+1)+b;
	}

	Ease.quadIn=function(t,b,c,d){
		return c *(t /=d)*t+b;
	}

	Ease.quadInOut=function(t,b,c,d){
		if ((t /=d *0.5)< 1)return c *0.5 *t *t+b;
		return-c *0.5 *((--t)*(t-2)-1)+b;
	}

	Ease.quadOut=function(t,b,c,d){
		return-c *(t /=d)*(t-2)+b;
	}

	Ease.expoIn=function(t,b,c,d){
		return (t==0)? b :c *Math.pow(2,10 *(t / d-1))+b-c *0.001;
	}

	Ease.expoInOut=function(t,b,c,d){
		if (t==0)return b;
		if (t==d)return b+c;
		if ((t /=d *0.5)< 1)return c *0.5 *Math.pow(2,10 *(t-1))+b;
		return c *0.5 *(-Math.pow(2,-10 *--t)+2)+b;
	}

	Ease.expoOut=function(t,b,c,d){
		return (t==d)? b+c :c *(-Math.pow(2,-10 *t / d)+1)+b;
	}

	Ease.circIn=function(t,b,c,d){
		return-c *(Math.sqrt(1-(t /=d)*t)-1)+b;
	}

	Ease.circInOut=function(t,b,c,d){
		if ((t /=d *0.5)< 1)return-c *0.5 *(Math.sqrt(1-t *t)-1)+b;
		return c *0.5 *(Math.sqrt(1-(t-=2)*t)+1)+b;
	}

	Ease.circOut=function(t,b,c,d){
		return c *Math.sqrt(1-(t=t / d-1)*t)+b;
	}

	Ease.HALF_PI=Math.PI *0.5;
	Ease.PI2=Math.PI *2;
	return Ease;
})()


/**
*鼠标点击区域，可以设置绘制一系列矢量图作为点击区域和非点击区域（目前只支持圆形，矩形，多边形）
*/
//class laya.utils.HitArea
var HitArea=(function(){
	function HitArea(){
		/**@private */
		this._hit=null;
		/**@private */
		this._unHit=null;
	}

	__class(HitArea,'laya.utils.HitArea');
	var __proto=HitArea.prototype;
	/**
	*是否包含某个点
	*@param x x坐标
	*@param y y坐标
	*@return 是否点击到
	*/
	__proto.isHit=function(x,y){
		if (!HitArea.isHitGraphic(x,y,this.hit))return false;
		return !HitArea.isHitGraphic(x,y,this.unHit);
	}

	/**
	*检测对象是否包含指定的点。
	*@param x 点的 X 轴坐标值（水平位置）。
	*@param y 点的 Y 轴坐标值（垂直位置）。
	*@return 如果包含指定的点，则值为 true；否则为 false。
	*/
	__proto.contains=function(x,y){
		return this.isHit(x,y);
	}

	/**
	*可点击区域，可以设置绘制一系列矢量图作为点击区域（目前只支持圆形，矩形，多边形）
	*/
	__getset(0,__proto,'hit',function(){
		if (!this._hit)this._hit=new Graphics();
		return this._hit;
		},function(value){
		this._hit=value;
	});

	/**
	*不可点击区域，可以设置绘制一系列矢量图作为非点击区域（目前只支持圆形，矩形，多边形）
	*/
	__getset(0,__proto,'unHit',function(){
		if (!this._unHit)this._unHit=new Graphics();
		return this._unHit;
		},function(value){
		this._unHit=value;
	});

	HitArea.isHitGraphic=function(x,y,graphic){
		if (!graphic)return false;
		var cmds;
		cmds=graphic.cmds;
		if (!cmds && graphic._one){
			cmds=HitArea._cmds;
			cmds.length=1;
			cmds[0]=graphic._one;
		}
		if (!cmds)return false;
		var i=0,len=0;
		len=cmds.length;
		var cmd;
		for (i=0;i < len;i++){
			cmd=cmds[i];
			if (!cmd)continue ;
			var context=Render._context;
			switch (cmd.callee){
				case context._translate:
				case 6:
					x-=cmd[0];
					y-=cmd[1];
				default :
				}
			if (HitArea.isHitCmd(x,y,cmd))return true;
		}
		return false;
	}

	HitArea.isHitCmd=function(x,y,cmd){
		if (!cmd)return false;
		var context=Render._context;
		var rst=false;
		switch (cmd["callee"]){
			case context._drawRect:
			case 13:
				HitArea._rec.setTo(cmd[0],cmd[1],cmd[2],cmd[3]);
				rst=HitArea._rec.contains(x,y);
				break ;
			case context._drawCircle:
			case context._fillCircle:
			case 14:;
				var d=NaN;
				x-=cmd[0];
				y-=cmd[1];
				d=x *x+y *y;
				rst=d < cmd[2] *cmd[2];
				break ;
			case context._drawPoly:
			case 18:
				x-=cmd[0];
				y-=cmd[1];
				rst=HitArea.ptInPolygon(x,y,cmd[2]);
				break ;
			default :
				break ;
			}
		return rst;
	}

	HitArea.ptInPolygon=function(x,y,areaPoints){
		var p;
		p=HitArea._ptPoint;
		p.setTo(x,y);
		var nCross=0;
		var p1x=NaN,p1y=NaN,p2x=NaN,p2y=NaN;
		var len=0;
		len=areaPoints.length;
		for (var i=0;i < len;i+=2){
			p1x=areaPoints[i];
			p1y=areaPoints[i+1];
			p2x=areaPoints[(i+2)% len];
			p2y=areaPoints[(i+3)% len];
			if (p1y==p2y)
				continue ;
			if (p.y < Math.min(p1y,p2y))
				continue ;
			if (p.y >=Math.max(p1y,p2y))
				continue ;
			var tx=(p.y-p1y)*(p2x-p1x)/ (p2y-p1y)+p1x;
			if (tx > p.x){
				nCross++;
			}
		}
		return (nCross % 2==1);
	}

	HitArea._cmds=[];
	__static(HitArea,
	['_rec',function(){return this._rec=new Rectangle();},'_ptPoint',function(){return this._ptPoint=new Point();}
	]);
	return HitArea;
})()


/**
*@private
*<code>HTMLChar</code> 是一个 HTML 字符类。
*/
//class laya.utils.HTMLChar
var HTMLChar=(function(){
	function HTMLChar(char,w,h,style){
		//this._sprite=null;
		//this._x=NaN;
		//this._y=NaN;
		//this._w=NaN;
		//this._h=NaN;
		/**表示是否是正常单词(英文|.|数字)。*/
		//this.isWord=false;
		/**字符。*/
		//this.char=null;
		/**字符数量。*/
		//this.charNum=NaN;
		/**CSS 样式。*/
		//this.style=null;
		this.char=char;
		this.charNum=char.charCodeAt(0);
		this._x=this._y=0;
		this.width=w;
		this.height=h;
		this.style=style;
		this.isWord=!HTMLChar._isWordRegExp.test(char);
	}

	__class(HTMLChar,'laya.utils.HTMLChar');
	var __proto=HTMLChar.prototype;
	Laya.imps(__proto,{"laya.display.ILayout":true})
	/**
	*设置与此对象绑定的显示对象 <code>Sprite</code> 。
	*@param sprite 显示对象 <code>Sprite</code> 。
	*/
	__proto.setSprite=function(sprite){
		this._sprite=sprite;
	}

	/**
	*获取与此对象绑定的显示对象 <code>Sprite</code>。
	*@return
	*/
	__proto.getSprite=function(){
		return this._sprite;
	}

	/**@private */
	__proto._isChar=function(){
		return true;
	}

	/**@private */
	__proto._getCSSStyle=function(){
		return this.style;
	}

	/**
	*宽度。
	*/
	__getset(0,__proto,'width',function(){
		return this._w;
		},function(value){
		this._w=value;
	});

	/**
	*此对象存储的 X 轴坐标值。
	*当设置此值时，如果此对象有绑定的 Sprite 对象，则改变 Sprite 对象的属性 x 的值。
	*/
	__getset(0,__proto,'x',function(){
		return this._x;
		},function(value){
		if (this._sprite){
			this._sprite.x=value;
		}
		this._x=value;
	});

	/**
	*此对象存储的 Y 轴坐标值。
	*当设置此值时，如果此对象有绑定的 Sprite 对象，则改变 Sprite 对象的属性 y 的值。
	*/
	__getset(0,__proto,'y',function(){
		return this._y;
		},function(value){
		if (this._sprite){
			this._sprite.y=value;
		}
		this._y=value;
	});

	/**
	*高度。
	*/
	__getset(0,__proto,'height',function(){
		return this._h;
		},function(value){
		this._h=value;
	});

	HTMLChar._isWordRegExp=new RegExp("[\\w\.]","");
	return HTMLChar;
})()


/**
*<code>Mouse</code> 类用于控制鼠标光标。
*/
//class laya.utils.Mouse
var Mouse=(function(){
	function Mouse(){}
	__class(Mouse,'laya.utils.Mouse');
	/**
	*设置鼠标样式
	*@param cursorStr
	*例如auto move no-drop col-resize
	*all-scroll pointer not-allowed row-resize
	*crosshair progress e-resize ne-resize
	*default text n-resize nw-resize
	*help vertical-text s-resize se-resize
	*inherit wait w-resize sw-resize
	*
	*/
	__getset(1,Mouse,'cursor',function(){
		return Mouse._style.cursor;
		},function(cursorStr){
		Mouse._style.cursor=cursorStr;
	});

	Mouse.hide=function(){
		if (Mouse.cursor !="none"){
			Mouse._preCursor=Mouse.cursor;
			Mouse.cursor="none";
		}
	}

	Mouse.show=function(){
		if (Mouse.cursor=="none"){
			if (Mouse._preCursor){
				Mouse.cursor=Mouse._preCursor;
				}else {
				Mouse.cursor="auto";
			}
		}
	}

	Mouse._preCursor=null;
	__static(Mouse,
	['_style',function(){return this._style=Browser.document.body.style;}
	]);
	return Mouse;
})()


/**
*<p> <code>Pool</code> 是对象池类，用于对象的存贮、重复使用。</p>
*<p>合理使用对象池，可以有效减少对象创建的开销，避免频繁的垃圾回收，从而优化游戏流畅度。</p>
*/
//class laya.utils.Pool
var Pool=(function(){
	function Pool(){}
	__class(Pool,'laya.utils.Pool');
	Pool.getPoolBySign=function(sign){
		return Pool._poolDic[sign] || (Pool._poolDic[sign]=[]);
	}

	Pool.clearBySign=function(sign){
		if (Pool._poolDic[sign])Pool._poolDic[sign].length=0;
	}

	Pool.recover=function(sign,item){
		if (item["__InPool"])return;
		item["__InPool"]=true;
		Pool.getPoolBySign(sign).push(item);
	}

	Pool.getItemByClass=function(sign,cls){
		var pool=Pool.getPoolBySign(sign);
		var rst=pool.length ? pool.pop():new cls();
		rst["__InPool"]=false;
		return rst;
	}

	Pool.getItemByCreateFun=function(sign,createFun){
		var pool=Pool.getPoolBySign(sign);
		var rst=pool.length ? pool.pop():createFun();
		rst["__InPool"]=false;
		return rst;
	}

	Pool.getItem=function(sign){
		var pool=Pool.getPoolBySign(sign);
		var rst=pool.length ? pool.pop():null;
		if (rst){
			rst["__InPool"]=false;
		}
		return rst;
	}

	Pool._poolDic={};
	Pool.InPoolSign="__InPool";
	return Pool;
})()


/**
*<p> <code>Stat</code> 是一个性能统计面板，可以实时更新相关的性能参数。</p>
*<p>参与统计的性能参数如下（所有参数都是每大约1秒进行更新）：<br/>
*FPS(Canvas)/FPS(WebGL)：Canvas 模式或者 WebGL 模式下的帧频，也就是每秒显示的帧数，值越高、越稳定，感觉越流畅；<br/>
*Sprite：统计所有渲染节点（包括容器）数量，它的大小会影响引擎进行节点遍历、数据组织和渲染的效率。其值越小，游戏运行效率越高；<br/>
*DrawCall：此值是决定性能的重要指标，其值越小，游戏运行效率越高。Canvas模式下表示每大约1秒的图像绘制次数；WebGL模式下表示每大约1秒的渲染提交批次，每次准备数据并通知GPU渲染绘制的过程称为1次DrawCall，在每次DrawCall中除了在通知GPU的渲染上比较耗时之外，切换材质与shader也是非常耗时的操作；<br/>
*CurMem：Canvas模式下，表示内存占用大小，值越小越好，过高会导致游戏闪退；WebGL模式下，表示内存与显存的占用，值越小越好；<br/>
*Shader：是 WebGL 模式独有的性能指标，表示每大约1秒 Shader 提交次数，值越小越好；<br/>
*Canvas：由三个数值组成，只有设置 CacheAs 后才会有值，默认为0/0/0。从左到右数值的意义分别为：每帧重绘的画布数量 / 缓存类型为"normal"类型的画布数量 / 缓存类型为"bitmap"类型的画布数量。</p>
*/
//class laya.utils.Stat
var Stat=(function(){
	function Stat(){}
	__class(Stat,'laya.utils.Stat');
	/**
	*点击性能统计显示区域的处理函数。
	*/
	__getset(1,Stat,'onclick',null,function(fn){
		if (Stat._sp){
			Stat._sp.on("click",Stat._sp,fn);
		}
		if (Stat._canvas){
			Stat._canvas.source.onclick=fn;
			Stat._canvas.source.style.pointerEvents='';
		}
	});

	Stat.show=function(x,y){
		(x===void 0)&& (x=0);
		(y===void 0)&& (y=0);
		if (Render.isConchApp){
			Browser.window.conch.showFPS && Browser.window.conch.showFPS(x,y);
			return;
		}
		if (!Browser.onMiniGame&&!Browser.onLimixiu)Stat._useCanvas=true;
		Stat._show=true;
		Stat._fpsData.length=60;
		Stat._view[0]={title:"FPS(Canvas)",value:"_fpsStr",color:"yellow",units:"int"};
		Stat._view[1]={title:"Sprite",value:"_spriteStr",color:"white",units:"int"};
		Stat._view[2]={title:"DrawCall",value:"drawCall",color:"white",units:"int"};
		Stat._view[3]={title:"CurMem",value:"currentMemorySize",color:"yellow",units:"M"};
		if (Render.isWebGL){
			Stat._view[4]={title:"Shader",value:"shaderCall",color:"white",units:"int"};
			if (!Render.is3DMode){
				Stat._view[0].title="FPS(WebGL)";
				Stat._view[5]={title:"Canvas",value:"_canvasStr",color:"white",units:"int"};
				}else {
				Stat._view[0].title="FPS(3D)";
				Stat._view[5]={title:"TriFaces",value:"trianglesFaces",color:"white",units:"int"};
				Stat._view[6]={title:"treeNodeColl",value:"treeNodeCollision",color:"white",units:"int"};
				Stat._view[7]={title:"treeSpriteColl",value:"treeSpriteCollision",color:"white",units:"int"};
			}
			}else {
			Stat._view[4]={title:"Canvas",value:"_canvasStr",color:"white",units:"int"};
		}
		if (Stat._useCanvas){
			Stat.createUIPre(x,y);
		}else
		Stat.createUI(x,y);
		Stat.enable();
	}

	Stat.createUIPre=function(x,y){
		var pixel=Browser.pixelRatio;
		Stat._width=pixel *130;
		Stat._vx=pixel *75;
		Stat._height=pixel *(Stat._view.length *12+3 *pixel)+4;
		Stat._fontSize=12 *pixel;
		for (var i=0;i < Stat._view.length;i++){
			Stat._view[i].x=4;
			Stat._view[i].y=i *Stat._fontSize+2 *pixel;
		}
		if (!Stat._canvas){
			Stat._canvas=new HTMLCanvas('2D');
			Stat._canvas.size(Stat._width,Stat._height);
			Stat._ctx=Stat._canvas.getContext('2d');
			Stat._ctx.textBaseline="top";
			Stat._ctx.font=Stat._fontSize+"px Sans-serif";
			Stat._canvas.source.style.cssText="pointer-events:none;background:rgba(150,150,150,0.8);z-index:100000;position: absolute;direction:ltr;left:"+x+"px;top:"+y+"px;width:"+(Stat._width / pixel)+"px;height:"+(Stat._height / pixel)+"px;";
		}
		Stat._first=true;
		Stat.loop();
		Stat._first=false;
		Browser.container.appendChild(Stat._canvas.source);
	}

	Stat.createUI=function(x,y){
		var stat=Stat._sp;
		var pixel=Browser.pixelRatio;
		if (!stat){
			stat=new Sprite();
			Stat._leftText=new Text();
			Stat._leftText.pos(5,5);
			Stat._leftText.color="#ffffff";
			stat.addChild(Stat._leftText);
			Stat._txt=new Text();
			Stat._txt.pos(80*pixel,5);
			Stat._txt.color="#ffffff";
			stat.addChild(Stat._txt);
			Stat._sp=stat;
		}
		stat.pos(x,y);
		var text="";
		for (var i=0;i < Stat._view.length;i++){
			var one=Stat._view[i];
			text+=one.title+"\n";
		}
		Stat._leftText.text=text;
		var width=pixel *138;
		var height=pixel *(Stat._view.length *12+3 *pixel)+4;
		Stat._txt.fontSize=Stat._fontSize *pixel;
		Stat._leftText.fontSize=Stat._fontSize *pixel;
		stat.size(width,height);
		stat.graphics.clear();
		stat.graphics.setAlpha(0.5);
		stat.graphics.drawRect(0,0,width,height,"#999999");
		stat.graphics.setAlpha(1);
		Stat.loop();
	}

	Stat.enable=function(){
		Laya.timer.frameLoop(1,Stat,Stat.loop);
	}

	Stat.hide=function(){
		Stat._show=false;
		Laya.timer.clear(Stat,Stat.loop);
		if (Stat._canvas){
			Browser.removeElement(Stat._canvas.source);
		}
	}

	Stat.clear=function(){
		Stat.trianglesFaces=Stat.drawCall=Stat.shaderCall=Stat.spriteCount=Stat.spriteRenderUseCacheCount=Stat.treeNodeCollision=Stat.treeSpriteCollision=Stat.canvasNormal=Stat.canvasBitmap=Stat.canvasReCache=0;
	}

	Stat.loop=function(){
		Stat._count++;
		var timer=Browser.now();
		if (timer-Stat._timer < 1000)return;
		var count=Stat._count;
		Stat.FPS=Math.round((count *1000)/ (timer-Stat._timer));
		if (Stat._show){
			Stat.trianglesFaces=Math.round(Stat.trianglesFaces / count);
			if (!Stat._useCanvas){
				Stat.drawCall=Math.round(Stat.drawCall / count)-2;
				Stat.shaderCall=Math.round(Stat.shaderCall / count)-4;
				Stat.spriteCount=Math.round(Stat.spriteCount / count)-4;
				}else{
				Stat.drawCall=Math.round(Stat.drawCall / count)-2;
				Stat.shaderCall=Math.round(Stat.shaderCall / count);
				Stat.spriteCount=Math.round(Stat.spriteCount / count)-1;
			}
			Stat.spriteRenderUseCacheCount=Math.round(Stat.spriteRenderUseCacheCount / count);
			Stat.canvasNormal=Math.round(Stat.canvasNormal / count);
			Stat.canvasBitmap=Math.round(Stat.canvasBitmap / count);
			Stat.canvasReCache=Math.ceil(Stat.canvasReCache / count);
			Stat.treeNodeCollision=Math.round(Stat.treeNodeCollision / count);
			Stat.treeSpriteCollision=Math.round(Stat.treeSpriteCollision / count);
			var delay=Stat.FPS > 0 ? Math.floor(1000 / Stat.FPS).toString():" ";
			Stat._fpsStr=Stat.FPS+(Stat.renderSlow ? " slow" :"")+" "+delay;
			Stat._spriteStr=Stat.spriteCount+(Stat.spriteRenderUseCacheCount ? ("/"+Stat.spriteRenderUseCacheCount):'');
			Stat._canvasStr=Stat.canvasReCache+"/"+Stat.canvasNormal+"/"+Stat.canvasBitmap;
			Stat.currentMemorySize=ResourceManager.systemResourceManager.memorySize;
			if (Stat._useCanvas){
				Stat.renderInfoPre();
			}else
			Stat.renderInfo();
			Stat.clear();
		}
		Stat._count=0;
		Stat._timer=timer;
	}

	Stat.renderInfoPre=function(){
		if (Stat._canvas){
			var ctx=Stat._ctx;
			ctx.clearRect(Stat._first ? 0 :Stat._vx,0,Stat._width,Stat._height);
			for (var i=0;i < Stat._view.length;i++){
				var one=Stat._view[i];
				if (Stat._first){
					ctx.fillStyle="white";
					ctx.fillText(one.title,one.x,one.y,null,null,null);
				}
				ctx.fillStyle=one.color;
				var value=Stat[one.value];
				(one.units=="M")&& (value=Math.floor(value / (1024 *1024)*100)/ 100+" M");
				ctx.fillText(value+"",one.x+Stat._vx,one.y,null,null,null);
			}
		}
	}

	Stat.renderInfo=function(){
		var text="";
		for (var i=0;i < Stat._view.length;i++){
			var one=Stat._view[i];
			var value=Stat[one.value];
			(one.units=="M")&& (value=Math.floor(value / (1024 *1024)*100)/ 100+" M");
			(one.units=="K")&& (value=Math.floor(value / (1024)*100)/ 100+" K");
			text+=value+"\n";
		}
		Stat._txt.text=text;
	}

	Stat.FPS=0;
	Stat.loopCount=0;
	Stat.shaderCall=0;
	Stat.drawCall=0;
	Stat.trianglesFaces=0;
	Stat.spriteCount=0;
	Stat.spriteRenderUseCacheCount=0;
	Stat.treeNodeCollision=0;
	Stat.treeSpriteCollision=0;
	Stat.canvasNormal=0;
	Stat.canvasBitmap=0;
	Stat.canvasReCache=0;
	Stat.renderSlow=false;
	Stat.currentMemorySize=0;
	Stat._fpsStr=null;
	Stat._canvasStr=null;
	Stat._spriteStr=null;
	Stat._fpsData=[];
	Stat._timer=0;
	Stat._count=0;
	Stat._view=[];
	Stat._fontSize=12;
	Stat._txt=null;
	Stat._leftText=null;
	Stat._sp=null;
	Stat._show=false;
	Stat._useCanvas=false;
	Stat._canvas=null;
	Stat._ctx=null;
	Stat._first=false;
	Stat._vx=NaN;
	Stat._width=0;
	Stat._height=100;
	return Stat;
})()


/**
*@private
*<code>StringKey</code> 类用于存取字符串对应的数字。
*/
//class laya.utils.StringKey
var StringKey=(function(){
	function StringKey(){
		this._strsToID={};
		this._idToStrs=[];
		this._length=0;
	}

	__class(StringKey,'laya.utils.StringKey');
	var __proto=StringKey.prototype;
	/**
	*添加一个字符。
	*@param str 字符，将作为key 存储相应生成的数字。
	*@return 此字符对应的数字。
	*/
	__proto.add=function(str){
		var index=this._strsToID[str];
		if (index !=null)return index;
		this._idToStrs[this._length]=str;
		return this._strsToID[str]=this._length++;
	}

	/**
	*获取指定字符对应的ID。
	*@param str 字符。
	*@return 此字符对应的ID。
	*/
	__proto.getID=function(str){
		var index=this._strsToID[str];
		return index==null ?-1 :index;
	}

	/**
	*根据指定ID获取对应字符。
	*@param id ID。
	*@return 此id对应的字符。
	*/
	__proto.getName=function(id){
		var str=this._idToStrs[id];
		return str==null ? undefined :str;
	}

	return StringKey;
})()


/**
*<code>Timer</code> 是时钟管理类。它是一个单例，不要手动实例化此类，应该通过 Laya.timer 访问。
*/
//class laya.utils.Timer
var Timer=(function(){
	var TimerHandler;
	function Timer(){
		/**两帧之间的时间间隔,单位毫秒。*/
		this._delta=0;
		/**时针缩放。*/
		this.scale=1;
		/**当前的帧数。*/
		this.currFrame=0;
		/**@private */
		this._mid=1;
		/**@private */
		this._map=[];
		/**@private */
		this._laters=[];
		/**@private */
		this._handlers=[];
		/**@private */
		this._temp=[];
		/**@private */
		this._count=0;
		this.currTimer=this._now();
		this._lastTimer=this._now();
		this._init();
	}

	__class(Timer,'laya.utils.Timer');
	var __proto=Timer.prototype;
	/**@private */
	__proto._init=function(){
		Laya.timer && Laya.timer.frameLoop(1,this,this._update);
	}

	/**@private */
	__proto._now=function(){
		return Date.now();
	}

	/**
	*@private
	*帧循环处理函数。
	*/
	__proto._update=function(){
		if (this.scale <=0){
			this._lastTimer=this._now();
			return;
		};
		var frame=this.currFrame=this.currFrame+this.scale;
		var now=this._now();
		this._delta=(now-this._lastTimer)*this.scale;
		var timer=this.currTimer=this.currTimer+this._delta;
		this._lastTimer=now;
		var handlers=this._handlers;
		this._count=0;
		for (i=0,n=handlers.length;i < n;i++){
			handler=handlers[i];
			if (handler.method!==null){
				var t=handler.userFrame ? frame :timer;
				if (t >=handler.exeTime){
					if (handler.repeat){
						if (!handler.jumpFrame){
							handler.exeTime+=handler.delay;
							handler.run(false);
							if (t > handler.exeTime){
								handler.exeTime+=Math.ceil((t-handler.exeTime)/ handler.delay)*handler.delay;
							}
							}else {
							while (t >=handler.exeTime){
								handler.exeTime+=handler.delay;
								handler.run(false);
							}
						}
						}else {
						handler.run(true);
					}
				}
				}else {
				this._count++;
			}
		}
		if (this._count > 30 || frame % 200===0)this._clearHandlers();
		var laters=this._laters;
		for (var i=0,n=laters.length-1;i <=n;i++){
			var handler=laters[i];
			if (handler.method!==null){
				this._map[handler.key]=null;
				handler.run(false);
			}
			this._recoverHandler(handler);
			i===n && (n=laters.length-1);
		}
		laters.length=0;
	}

	/**@private */
	__proto._clearHandlers=function(){
		var handlers=this._handlers;
		for (var i=0,n=handlers.length;i < n;i++){
			var handler=handlers[i];
			if (handler.method!==null)this._temp.push(handler);
			else this._recoverHandler(handler);
		}
		this._handlers=this._temp;
		this._temp=handlers;
		this._temp.length=0;
	}

	/**@private */
	__proto._recoverHandler=function(handler){
		if(this._map[handler.key]==handler)this._map[handler.key]=null;
		handler.clear();
		Timer._pool.push(handler);
	}

	/**@private */
	__proto._create=function(useFrame,repeat,delay,caller,method,args,coverBefore){
		if (!delay){
			method.apply(caller,args);
			return null;
		}
		if (coverBefore){
			var handler=this._getHandler(caller,method);
			if (handler){
				handler.repeat=repeat;
				handler.userFrame=useFrame;
				handler.delay=delay;
				handler.caller=caller;
				handler.method=method;
				handler.args=args;
				handler.exeTime=delay+(useFrame ? this.currFrame :this.currTimer+this._now()-this._lastTimer);
				return handler;
			}
		}
		handler=Timer._pool.length > 0 ? Timer._pool.pop():new TimerHandler();
		handler.repeat=repeat;
		handler.userFrame=useFrame;
		handler.delay=delay;
		handler.caller=caller;
		handler.method=method;
		handler.args=args;
		handler.exeTime=delay+(useFrame ? this.currFrame :this.currTimer+this._now()-this._lastTimer)+1;
		this._indexHandler(handler);
		this._handlers.push(handler);
		return handler;
	}

	/**@private */
	__proto._indexHandler=function(handler){
		var caller=handler.caller;
		var method=handler.method;
		var cid=caller ? caller.$_GID || (caller.$_GID=Utils.getGID()):0;
		var mid=method.$_TID || (method.$_TID=(this._mid++)*100000);
		handler.key=cid+mid;
		this._map[handler.key]=handler;
	}

	/**
	*定时执行一次。
	*@param delay 延迟时间(单位为毫秒)。
	*@param caller 执行域(this)。
	*@param method 定时器回调函数。
	*@param args 回调参数。
	*@param coverBefore 是否覆盖之前的延迟执行，默认为 true 。
	*/
	__proto.once=function(delay,caller,method,args,coverBefore){
		(coverBefore===void 0)&& (coverBefore=true);
		this._create(false,false,delay,caller,method,args,coverBefore);
	}

	/**
	*定时重复执行。
	*@param delay 间隔时间(单位毫秒)。
	*@param caller 执行域(this)。
	*@param method 定时器回调函数。
	*@param args 回调参数。
	*@param coverBefore 是否覆盖之前的延迟执行，默认为 true 。
	*@param jumpFrame 时钟是否跳帧。基于时间的循环回调，单位时间间隔内，如能执行多次回调，出于性能考虑，引擎默认只执行一次，设置jumpFrame=true后，则回调会连续执行多次
	*/
	__proto.loop=function(delay,caller,method,args,coverBefore,jumpFrame){
		(coverBefore===void 0)&& (coverBefore=true);
		(jumpFrame===void 0)&& (jumpFrame=false);
		var handler=this._create(false,true,delay,caller,method,args,coverBefore);
		if (handler)handler.jumpFrame=jumpFrame;
	}

	/**
	*定时执行一次(基于帧率)。
	*@param delay 延迟几帧(单位为帧)。
	*@param caller 执行域(this)。
	*@param method 定时器回调函数。
	*@param args 回调参数。
	*@param coverBefore 是否覆盖之前的延迟执行，默认为 true 。
	*/
	__proto.frameOnce=function(delay,caller,method,args,coverBefore){
		(coverBefore===void 0)&& (coverBefore=true);
		this._create(true,false,delay,caller,method,args,coverBefore);
	}

	/**
	*定时重复执行(基于帧率)。
	*@param delay 间隔几帧(单位为帧)。
	*@param caller 执行域(this)。
	*@param method 定时器回调函数。
	*@param args 回调参数。
	*@param coverBefore 是否覆盖之前的延迟执行，默认为 true 。
	*/
	__proto.frameLoop=function(delay,caller,method,args,coverBefore){
		(coverBefore===void 0)&& (coverBefore=true);
		this._create(true,true,delay,caller,method,args,coverBefore);
	}

	/**返回统计信息。*/
	__proto.toString=function(){
		return "callLater:"+this._laters.length+" handlers:"+this._handlers.length+" pool:"+Timer._pool.length;
	}

	/**
	*清理定时器。
	*@param caller 执行域(this)。
	*@param method 定时器回调函数。
	*/
	__proto.clear=function(caller,method){
		var handler=this._getHandler(caller,method);
		if (handler){
			this._map[handler.key]=null;handler.key=0;
			handler.clear();
		}
	}

	/**
	*清理对象身上的所有定时器。
	*@param caller 执行域(this)。
	*/
	__proto.clearAll=function(caller){
		if (!caller)return;
		for (var i=0,n=this._handlers.length;i < n;i++){
			var handler=this._handlers[i];
			if (handler.caller===caller){
				this._map[handler.key]=null;handler.key=0;
				handler.clear();
			}
		}
	}

	/**@private */
	__proto._getHandler=function(caller,method){
		var cid=caller ? caller.$_GID || (caller.$_GID=Utils.getGID()):0;
		var mid=method.$_TID || (method.$_TID=(this._mid++)*100000);
		return this._map[cid+mid];
	}

	/**
	*延迟执行。
	*@param caller 执行域(this)。
	*@param method 定时器回调函数。
	*@param args 回调参数。
	*/
	__proto.callLater=function(caller,method,args){
		if (this._getHandler(caller,method)==null){
			if (Timer._pool.length)
				var handler=Timer._pool.pop();
			else handler=new TimerHandler();
			handler.caller=caller;
			handler.method=method;
			handler.args=args;
			this._indexHandler(handler);
			this._laters.push(handler);
		}
	}

	/**
	*立即执行 callLater 。
	*@param caller 执行域(this)。
	*@param method 定时器回调函数。
	*/
	__proto.runCallLater=function(caller,method){
		var handler=this._getHandler(caller,method);
		if (handler && handler.method !=null){
			this._map[handler.key]=null;
			handler.run(true);
		}
	}

	/**
	*立即提前执行定时器，执行之后从队列中删除
	*@param caller 执行域(this)。
	*@param method 定时器回调函数。
	*/
	__proto.runTimer=function(caller,method){
		this.runCallLater(caller,method);
	}

	/**
	*两帧之间的时间间隔,单位毫秒。
	*/
	__getset(0,__proto,'delta',function(){
		return this._delta;
	});

	Timer._pool=[];
	Timer.__init$=function(){
		/**@private */
		//class TimerHandler
		TimerHandler=(function(){
			function TimerHandler(){
				this.key=0;
				this.repeat=false;
				this.delay=0;
				this.userFrame=false;
				this.exeTime=0;
				this.caller=null;
				this.method=null;
				this.args=null;
				this.jumpFrame=false;
			}
			__class(TimerHandler,'');
			var __proto=TimerHandler.prototype;
			__proto.clear=function(){
				this.caller=null;
				this.method=null;
				this.args=null;
			}
			__proto.run=function(withClear){
				var caller=this.caller;
				if (caller && caller.destroyed)return this.clear();
				var method=this.method;
				var args=this.args;
				withClear && this.clear();
				if (method==null)return;
				args ? method.apply(caller,args):method.call(caller);
			}
			return TimerHandler;
		})()
	}

	return Timer;
})()


/**
*<code>Tween</code> 是一个缓动类。使用此类能够实现对目标对象属性的渐变。
*/
//class laya.utils.Tween
var Tween=(function(){
	function Tween(){
		/**@private */
		//this._complete=null;
		/**@private */
		//this._target=null;
		/**@private */
		//this._ease=null;
		/**@private */
		//this._props=null;
		/**@private */
		//this._duration=0;
		/**@private */
		//this._delay=0;
		/**@private */
		//this._startTimer=0;
		/**@private */
		//this._usedTimer=0;
		/**@private */
		//this._usedPool=false;
		/**@private */
		//this._delayParam=null;
		/**@private 唯一标识，TimeLintLite用到*/
		this.gid=0;
		/**更新回调，缓动数值发生变化时，回调变化的值*/
		//this.update=null;
	}

	__class(Tween,'laya.utils.Tween');
	var __proto=Tween.prototype;
	/**
	*缓动对象的props属性到目标值。
	*@param target 目标对象(即将更改属性值的对象)。
	*@param props 变化的属性列表，比如{x:100,y:20,ease:Ease.backOut,complete:Handler.create(this,onComplete),update:new Handler(this,onComplete)}。
	*@param duration 花费的时间，单位毫秒。
	*@param ease 缓动类型，默认为匀速运动。
	*@param complete 结束回调函数。
	*@param delay 延迟执行时间。
	*@param coverBefore 是否覆盖之前的缓动。
	*@return 返回Tween对象。
	*/
	__proto.to=function(target,props,duration,ease,complete,delay,coverBefore){
		(delay===void 0)&& (delay=0);
		(coverBefore===void 0)&& (coverBefore=false);
		return this._create(target,props,duration,ease,complete,delay,coverBefore,true,false,true);
	}

	/**
	*从props属性，缓动到当前状态。
	*@param target 目标对象(即将更改属性值的对象)。
	*@param props 变化的属性列表，比如{x:100,y:20,ease:Ease.backOut,complete:Handler.create(this,onComplete),update:new Handler(this,onComplete)}。
	*@param duration 花费的时间，单位毫秒。
	*@param ease 缓动类型，默认为匀速运动。
	*@param complete 结束回调函数。
	*@param delay 延迟执行时间。
	*@param coverBefore 是否覆盖之前的缓动。
	*@return 返回Tween对象。
	*/
	__proto.from=function(target,props,duration,ease,complete,delay,coverBefore){
		(delay===void 0)&& (delay=0);
		(coverBefore===void 0)&& (coverBefore=false);
		return this._create(target,props,duration,ease,complete,delay,coverBefore,false,false,true);
	}

	/**@private */
	__proto._create=function(target,props,duration,ease,complete,delay,coverBefore,isTo,usePool,runNow){
		if (!target)throw new Error("Tween:target is null");
		this._target=target;
		this._duration=duration;
		this._ease=ease || props.ease || Tween.easeNone;
		this._complete=complete || props.complete;
		this._delay=delay;
		this._props=[];
		this._usedTimer=0;
		this._startTimer=Browser.now();
		this._usedPool=usePool;
		this._delayParam=null;
		this.update=props.update;
		var gid=(target.$_GID || (target.$_GID=Utils.getGID()));
		if (!Tween.tweenMap[gid]){
			Tween.tweenMap[gid]=[this];
			}else {
			if (coverBefore)Tween.clearTween(target);
			Tween.tweenMap[gid].push(this);
		}
		if (runNow){
			if (delay <=0)this.firstStart(target,props,isTo);
			else{
				this._delayParam=[target,props,isTo];
				Laya.scaleTimer.once(delay,this,this.firstStart,this._delayParam);
			}
			}else {
			this._initProps(target,props,isTo);
		}
		return this;
	}

	__proto.firstStart=function(target,props,isTo){
		this._delayParam=null;
		if (target.destroyed){
			this.clear();
			return;
		}
		this._initProps(target,props,isTo);
		this._beginLoop();
	}

	__proto._initProps=function(target,props,isTo){
		for (var p in props){
			if ((typeof (target[p])=='number')){
				var start=isTo ? target[p] :props[p];
				var end=isTo ? props[p] :target[p];
				this._props.push([p,start,end-start]);
				if (!isTo)target[p]=start;
			}
		}
	}

	__proto._beginLoop=function(){
		Laya.scaleTimer.frameLoop(1,this,this._doEase);
	}

	/**执行缓动**/
	__proto._doEase=function(){
		this._updateEase(Browser.now());
	}

	/**@private */
	__proto._updateEase=function(time){
		var target=this._target;
		if (!target)return;
		if (target.destroyed)return Tween.clearTween(target);
		var usedTimer=this._usedTimer=time-this._startTimer-this._delay;
		if (usedTimer < 0)return;
		if (usedTimer >=this._duration)return this.complete();
		var ratio=usedTimer > 0 ? this._ease(usedTimer,0,1,this._duration):0;
		var props=this._props;
		for (var i=0,n=props.length;i < n;i++){
			var prop=props[i];
			target[prop[0]]=prop[1]+(ratio *prop[2]);
		}
		if (this.update)this.update.run();
	}

	/**
	*立即结束缓动并到终点。
	*/
	__proto.complete=function(){
		if (!this._target)return;
		Laya.scaleTimer.runTimer(this,this.firstStart);
		var target=this._target;
		var props=this._props;
		var handler=this._complete;
		for (var i=0,n=props.length;i < n;i++){
			var prop=props[i];
			target[prop[0]]=prop[1]+prop[2];
		}
		if (this.update)this.update.run();
		this.clear();
		handler && handler.run();
	}

	/**
	*暂停缓动，可以通过resume或restart重新开始。
	*/
	__proto.pause=function(){
		Laya.scaleTimer.clear(this,this._beginLoop);
		Laya.scaleTimer.clear(this,this._doEase);
		Laya.scaleTimer.clear(this,this.firstStart);
		var time=Browser.now();
		var dTime=NaN;
		dTime=time-this._startTimer-this._delay;
		if (dTime < 0){
			this._usedTimer=dTime;
		}
	}

	/**
	*设置开始时间。
	*@param startTime 开始时间。
	*/
	__proto.setStartTime=function(startTime){
		this._startTimer=startTime;
	}

	/**
	*停止并清理当前缓动。
	*/
	__proto.clear=function(){
		if (this._target){
			this._remove();
			this._clear();
		}
	}

	/**
	*@private
	*/
	__proto._clear=function(){
		this.pause();
		Laya.scaleTimer.clear(this,this.firstStart);
		this._complete=null;
		this._target=null;
		this._ease=null;
		this._props=null;
		this._delayParam=null;
		if (this._usedPool){
			this.update=null;
			Pool.recover("tween",this);
		}
	}

	/**回收到对象池。*/
	__proto.recover=function(){
		this._usedPool=true;
		this._clear();
	}

	__proto._remove=function(){
		var tweens=Tween.tweenMap[this._target.$_GID];
		if (tweens){
			for (var i=0,n=tweens.length;i < n;i++){
				if (tweens[i]===this){
					tweens.splice(i,1);
					break ;
				}
			}
		}
	}

	/**
	*重新开始暂停的缓动。
	*/
	__proto.restart=function(){
		this.pause();
		this._usedTimer=0;
		this._startTimer=Browser.now();
		if (this._delayParam){
			Laya.scaleTimer.once(this._delay,this,this.firstStart,this._delayParam);
			return;
		};
		var props=this._props;
		for (var i=0,n=props.length;i < n;i++){
			var prop=props[i];
			this._target[prop[0]]=prop[1];
		}
		Laya.scaleTimer.once(this._delay,this,this._beginLoop);
	}

	/**
	*恢复暂停的缓动。
	*/
	__proto.resume=function(){
		if (this._usedTimer >=this._duration)return;
		this._startTimer=Browser.now()-this._usedTimer-this._delay;
		if (this._delayParam){
			if (this._usedTimer < 0){
				Laya.scaleTimer.once(-this._usedTimer,this,this.firstStart,this._delayParam);
				}else{
				this.firstStart.apply(this,this._delayParam);
			}
			}else{
			this._beginLoop();
		}
	}

	/**设置当前执行比例**/
	__getset(0,__proto,'progress',null,function(v){
		var uTime=v *this._duration;
		this._startTimer=Browser.now()-this._delay-uTime;
	});

	Tween.to=function(target,props,duration,ease,complete,delay,coverBefore,autoRecover){
		(delay===void 0)&& (delay=0);
		(coverBefore===void 0)&& (coverBefore=false);
		(autoRecover===void 0)&& (autoRecover=true);
		return Pool.getItemByClass("tween",Tween)._create(target,props,duration,ease,complete,delay,coverBefore,true,autoRecover,true);
	}

	Tween.from=function(target,props,duration,ease,complete,delay,coverBefore,autoRecover){
		(delay===void 0)&& (delay=0);
		(coverBefore===void 0)&& (coverBefore=false);
		(autoRecover===void 0)&& (autoRecover=true);
		return Pool.getItemByClass("tween",Tween)._create(target,props,duration,ease,complete,delay,coverBefore,false,autoRecover,true);
	}

	Tween.clearAll=function(target){
		if (!target || !target.$_GID)return;
		var tweens=Tween.tweenMap[target.$_GID];
		if (tweens){
			for (var i=0,n=tweens.length;i < n;i++){
				tweens[i]._clear();
			}
			tweens.length=0;
		}
	}

	Tween.clear=function(tween){
		tween.clear();
	}

	Tween.clearTween=function(target){
		Tween.clearAll(target);
	}

	Tween.easeNone=function(t,b,c,d){
		return c *t / d+b;
	}

	Tween.tweenMap={};
	return Tween;
})()


/**
*<code>Utils</code> 是工具类。
*/
//class laya.utils.Utils
var Utils=(function(){
	function Utils(){}
	__class(Utils,'laya.utils.Utils');
	Utils.toRadian=function(angle){
		return angle *Utils._pi2;
	}

	Utils.toAngle=function(radian){
		return radian *Utils._pi;
	}

	Utils.toHexColor=function(color){
		if (color < 0 || isNaN(color))return null;
		var str=color.toString(16);
		while (str.length < 6)str="0"+str;
		return "#"+str;
	}

	Utils.getGID=function(){
		return Utils._gid++;
	}

	Utils.concatArray=function(source,array){
		if (!array)return source;
		if (!source)return array;
		var i=0,len=array.length;
		for (i=0;i < len;i++){
			source.push(array[i]);
		}
		return source;
	}

	Utils.clearArray=function(array){
		if (!array)return array;
		array.length=0;
		return array;
	}

	Utils.copyArray=function(source,array){
		source || (source=[]);
		if (!array)return source;
		source.length=array.length;
		var i=0,len=array.length;
		for (i=0;i < len;i++){
			source[i]=array[i];
		}
		return source;
	}

	Utils.getGlobalRecByPoints=function(sprite,x0,y0,x1,y1){
		var newLTPoint;
		newLTPoint=new Point(x0,y0);
		newLTPoint=sprite.localToGlobal(newLTPoint);
		var newRBPoint;
		newRBPoint=new Point(x1,y1);
		newRBPoint=sprite.localToGlobal(newRBPoint);
		return Rectangle._getWrapRec([newLTPoint.x,newLTPoint.y,newRBPoint.x,newRBPoint.y]);
	}

	Utils.getGlobalPosAndScale=function(sprite){
		return Utils.getGlobalRecByPoints(sprite,0,0,1,1);
	}

	Utils.bind=function(fun,scope){
		var rst=fun;
		rst=fun.bind(scope);;
		return rst;
	}

	Utils.measureText=function(txt,font){
		return RunDriver.measureText(txt,font);
	}

	Utils.updateOrder=function(array){
		if (!array || array.length < 2)return false;
		var i=1,j=0,len=array.length,key=NaN,c;
		while (i < len){
			j=i;
			c=array[j];
			key=array[j]._zOrder;
			while (--j >-1){
				if (array[j]._zOrder > key)array[j+1]=array[j];
				else break ;
			}
			array[j+1]=c;
			i++;
		};
		var model=c.parent.conchModel;
		if (model){
			if (model.updateZOrder !=null){
				model.updateZOrder();
				}else {
				for (i=0;i < len;i++){
					model.removeChild(array[i].conchModel);
				}
				for (i=0;i < len;i++){
					model.addChildAt(array[i].conchModel,i);
				}
			}
		}
		return true;
	}

	Utils.transPointList=function(points,x,y){
		var i=0,len=points.length;
		for (i=0;i < len;i+=2){
			points[i]+=x;
			points[i+1]+=y;
		}
	}

	Utils.parseInt=function(str,radix){
		(radix===void 0)&& (radix=0);
		var result=Browser.window.parseInt(str,radix);
		if (isNaN(result))return 0;
		return result;
	}

	Utils.getFileExtension=function(path){
		Utils._extReg.lastIndex=path.lastIndexOf(".");
		var result=Utils._extReg.exec(path);
		if (result && result.length > 1){
			return result[1].toLowerCase();
		}
		return null;
	}

	Utils.getTransformRelativeToWindow=function(coordinateSpace,x,y){
		var stage=Laya.stage;
		var globalTransform=laya.utils.Utils.getGlobalPosAndScale(coordinateSpace);
		var canvasMatrix=stage._canvasTransform.clone();
		var canvasLeft=canvasMatrix.tx;
		var canvasTop=canvasMatrix.ty;
		canvasMatrix.rotate(-Math.PI / 180 *Laya.stage.canvasDegree);
		canvasMatrix.scale(Laya.stage.clientScaleX,Laya.stage.clientScaleY);
		var perpendicular=(Laya.stage.canvasDegree % 180 !=0);
		var tx=NaN,ty=NaN;
		if (perpendicular){
			tx=y+globalTransform.y;
			ty=x+globalTransform.x;
			tx *=canvasMatrix.d;
			ty *=canvasMatrix.a;
			if (Laya.stage.canvasDegree==90){
				tx=canvasLeft-tx;
				ty+=canvasTop;
			}
			else {
				tx+=canvasLeft;
				ty=canvasTop-ty;
			}
		}
		else {
			tx=x+globalTransform.x;
			ty=y+globalTransform.y;
			tx *=canvasMatrix.a;
			ty *=canvasMatrix.d;
			tx+=canvasLeft;
			ty+=canvasTop;
		};
		var domScaleX=NaN,domScaleY=NaN;
		if (perpendicular){
			domScaleX=canvasMatrix.d *globalTransform.height;
			domScaleY=canvasMatrix.a *globalTransform.width;
			}else {
			domScaleX=canvasMatrix.a *globalTransform.width;
			domScaleY=canvasMatrix.d *globalTransform.height;
		}
		return {x:tx,y:ty,scaleX:domScaleX,scaleY:domScaleY};
	}

	Utils.fitDOMElementInArea=function(dom,coordinateSpace,x,y,width,height){
		if (!dom._fitLayaAirInitialized){
			dom._fitLayaAirInitialized=true;
			dom.style.transformOrigin=dom.style.webKittransformOrigin="left top";
			dom.style.position="absolute"
		};
		var transform=Utils.getTransformRelativeToWindow(coordinateSpace,x,y);
		dom.style.transform=dom.style.webkitTransform="scale("+transform.scaleX+","+transform.scaleY+") rotate("+(Laya.stage.canvasDegree)+"deg)";
		dom.style.width=width+'px';
		dom.style.height=height+'px';
		dom.style.left=transform.x+'px';
		dom.style.top=transform.y+'px';
	}

	Utils.isOkTextureList=function(textureList){
		if (!textureList)return false;
		var i=0,len=textureList.length;
		var tTexture;
		for (i=0;i < len;i++){
			tTexture=textureList[i];
			if (!tTexture||!tTexture.source)return false;
		}
		return true;
	}

	Utils.isOKCmdList=function(cmds){
		if (!cmds)return false;
		var i=0,len=cmds.length;
		var context=Render._context;
		var cmd;
		var tex;
		for (i=0;i < len;i++){
			cmd=cmds[i];
			switch(cmd.callee){
				case context._drawTexture:
				case context._fillTexture:
				case context._drawTextureWithTransform:
					tex=cmd[0];
					if (!tex || !tex.source)return false;
				}
		}
		return true;
	}

	Utils._gid=1;
	Utils._pi=180 / Math.PI;
	Utils._pi2=Math.PI / 180;
	Utils._extReg=/\.(\w+)\??/g;
	Utils.parseXMLFromString=function(value){
		var rst;
		value=value.replace(/>\s+</g,'><');
		rst=(new DOMParser()).parseFromString(value,'text/xml');
		if (rst.firstChild.textContent.indexOf("This page contains the following errors")>-1){
			throw new Error(rst.firstChild.firstChild.textContent);
		}
		return rst;
	}

	return Utils;
})()


/**
*@private
*/
//class laya.utils.VectorGraphManager
var VectorGraphManager=(function(){
	function VectorGraphManager(){
		this.useDic={};
		this.shapeDic={};
		this.shapeLineDic={};
		this._id=0;
		this._checkKey=false;
		this._freeIdArray=[];
		if (Render.isWebGL){
			CacheManager.regCacheByFunction(Utils.bind(this.startDispose,this),Utils.bind(this.getCacheList,this));
		}
	}

	__class(VectorGraphManager,'laya.utils.VectorGraphManager');
	var __proto=VectorGraphManager.prototype;
	/**
	*得到个空闲的ID
	*@return
	*/
	__proto.getId=function(){
		return this._id++;
	}

	/**
	*添加一个图形到列表中
	*@param id
	*@param shape
	*/
	__proto.addShape=function(id,shape){
		this.shapeDic[id]=shape;
		if (!this.useDic[id]){
			this.useDic[id]=true;
		}
	}

	/**
	*添加一个线图形到列表中
	*@param id
	*@param Line
	*/
	__proto.addLine=function(id,Line){
		this.shapeLineDic[id]=Line;
		if (!this.shapeLineDic[id]){
			this.shapeLineDic[id]=true;
		}
	}

	/**
	*检测一个对象是否在使用中
	*@param id
	*/
	__proto.getShape=function(id){
		if (this._checkKey){
			if (this.useDic[id] !=null){
				this.useDic[id]=true;
			}
		}
	}

	/**
	*删除一个图形对象
	*@param id
	*/
	__proto.deleteShape=function(id){
		if (this.shapeDic[id]){
			this.shapeDic[id]=null;
			delete this.shapeDic[id];
		}
		if (this.shapeLineDic[id]){
			this.shapeLineDic[id]=null;
			delete this.shapeLineDic[id];
		}
		if (this.useDic[id] !=null){
			delete this.useDic[id];
		}
	}

	/**
	*得到缓存列表
	*@return
	*/
	__proto.getCacheList=function(){
		var str;
		var list=[];
		for (str in this.shapeDic){
			list.push(this.shapeDic[str]);
		}
		for (str in this.shapeLineDic){
			list.push(this.shapeLineDic[str]);
		}
		return list;
	}

	/**
	*开始清理状态，准备销毁
	*/
	__proto.startDispose=function(key){
		var str;
		for (str in this.useDic){
			this.useDic[str]=false;
		}
		this._checkKey=true;
	}

	/**
	*确认销毁
	*/
	__proto.endDispose=function(){
		if (this._checkKey){
			var str;
			for (str in this.useDic){
				if (!this.useDic[str]){
					this.deleteShape(str);
				}
			}
			this._checkKey=false;
		}
	}

	VectorGraphManager.getInstance=function(){
		return VectorGraphManager.instance=VectorGraphManager.instance|| new VectorGraphManager();
	}

	VectorGraphManager.instance=null;
	return VectorGraphManager;
})()


/**
*封装弱引用WeakMap
*如果支持WeakMap，则使用WeakMap，如果不支持，则用Object代替
*注意：如果采用Object，为了防止内存泄漏，则采用定时清理缓存策略
*/
//class laya.utils.WeakObject
var WeakObject=(function(){
	function WeakObject(){
		/**@private */
		this._obj=null;
		this._obj=WeakObject.supportWeakMap ? new Browser.window.WeakMap():{};
		if (!WeakObject.supportWeakMap)WeakObject._maps.push(this);
	}

	__class(WeakObject,'laya.utils.WeakObject');
	var __proto=WeakObject.prototype;
	/**
	*设置缓存
	*@param key kye对象，可被回收
	*@param value object对象，可被回收
	*/
	__proto.set=function(key,value){
		if (key==null)return;
		if (WeakObject.supportWeakMap){
			var objKey=key;
			if ((typeof key=='string')|| (typeof key=='number')){
				objKey=WeakObject._keys[key];
				if (!objKey)objKey=WeakObject._keys[key]={k:key};
			}
			this._obj.set(objKey,value);
			}else {
			if ((typeof key=='string')|| (typeof key=='number')){
				this._obj[key]=value;
				}else {
				key.$_GID || (key.$_GID=Utils.getGID());
				this._obj[key.$_GID]=value;
			}
		}
	}

	/**
	*获取缓存
	*@param key kye对象，可被回收
	*/
	__proto.get=function(key){
		if (key==null)return null;
		if (WeakObject.supportWeakMap){
			var objKey=((typeof key=='string')|| (typeof key=='number'))? WeakObject._keys[key] :key;
			if (!objKey)return null;
			return this._obj.get(objKey);
			}else {
			if ((typeof key=='string')|| (typeof key=='number'))return this._obj[key];
			return this._obj[key.$_GID];
		}
	}

	/**
	*删除缓存
	*/
	__proto.del=function(key){
		if (key==null)return;
		if (WeakObject.supportWeakMap){
			var objKey=((typeof key=='string')|| (typeof key=='number'))? WeakObject._keys[key] :key;
			if (!objKey)return;
			this._obj.delete(objKey);
			}else {
			if ((typeof key=='string')|| (typeof key=='number'))delete this._obj[key];
			else delete this._obj[this._obj.$_GID];
		}
	}

	/**
	*是否有缓存
	*/
	__proto.has=function(key){
		if (key==null)return false;
		if (WeakObject.supportWeakMap){
			var objKey=((typeof key=='string')|| (typeof key=='number'))? WeakObject._keys[key] :key;
			return this._obj.has(objKey);
			}else {
			if ((typeof key=='string')|| (typeof key=='number'))return this._obj[key] !=null;
			return this._obj[this._obj.$_GID] !=null;
		}
	}

	WeakObject.__init__=function(){
		WeakObject.supportWeakMap=Browser.window.WeakMap !=null;
		if (!WeakObject.supportWeakMap)Laya.timer.loop(WeakObject.delInterval,null,WeakObject.clearCache);
	}

	WeakObject.clearCache=function(){
		for (var i=0,n=WeakObject._maps.length;i < n;i++){
			var obj=WeakObject._maps[i];
			obj._obj={};
		}
	}

	WeakObject.supportWeakMap=false;
	WeakObject.delInterval=5 *60 *1000;
	WeakObject._keys={};
	WeakObject._maps=[];
	__static(WeakObject,
	['I',function(){return this.I=new WeakObject();}
	]);
	return WeakObject;
})()


/**
*@private
*/
//class laya.utils.WordText
var WordText=(function(){
	function WordText(){
		this.id=NaN;
		this.save=[];
		this.toUpperCase=null;
		this.changed=false;
		this._text=null;
	}

	__class(WordText,'laya.utils.WordText');
	var __proto=WordText.prototype;
	__proto.setText=function(txt){
		this.changed=true;
		this._text=txt;
	}

	__proto.toString=function(){
		return this._text;
	}

	__proto.charCodeAt=function(i){
		return this._text ? this._text.charCodeAt(i):NaN;
	}

	__proto.charAt=function(i){
		return this._text ? this._text.charAt(i):null;
	}

	__getset(0,__proto,'length',function(){
		return this._text ? this._text.length :0;
	});

	return WordText;
})()


//class laya.webgl.atlas.AtlasGrid
var AtlasGrid=(function(){
	var TexRowInfo,TexMergeTexSize;
	function AtlasGrid(width,height,atlasID){
		this._atlasID=0;
		this._width=0;
		this._height=0;
		this._texCount=0;
		this._rowInfo=null;
		this._cells=null;
		this._failSize=new TexMergeTexSize();
		(width===void 0)&& (width=0);
		(height===void 0)&& (height=0);
		(atlasID===void 0)&& (atlasID=0);
		this._cells=null;
		this._rowInfo=null;
		this._init(width,height);
		this._atlasID=atlasID;
	}

	__class(AtlasGrid,'laya.webgl.atlas.AtlasGrid');
	var __proto=AtlasGrid.prototype;
	//------------------------------------------------------------------------------
	__proto.getAltasID=function(){
		return this._atlasID;
	}

	//------------------------------------------------------------------------------
	__proto.setAltasID=function(atlasID){
		if (atlasID >=0){
			this._atlasID=atlasID;
		}
	}

	//------------------------------------------------------------------
	__proto.addTex=function(type,width,height){
		var result=this._get(width,height);
		if (result.ret==false){
			return result;
		}
		this._fill(result.x,result.y,width,height,type);
		this._texCount++;
		return result;
	}

	//------------------------------------------------------------------------------
	__proto._release=function(){
		if (this._cells !=null){
			this._cells.length=0;
			this._cells=null;
		}
		if (this._rowInfo){
			this._rowInfo.length=0;
			this._rowInfo=null;
		}
	}

	//------------------------------------------------------------------------------
	__proto._init=function(width,height){
		this._width=width;
		this._height=height;
		this._release();
		if (this._width==0)return false;
		this._cells=new Uint8Array(this._width *this._height*3);
		this._rowInfo=__newvec(this._height);
		for (var i=0;i < this._height;i++){
			this._rowInfo[i]=new TexRowInfo();
		}
		this._clear();
		return true;
	}

	//------------------------------------------------------------------
	__proto._get=function(width,height){
		var pFillInfo=new MergeFillInfo();
		if (width >=this._failSize.width && height >=this._failSize.height){
			return pFillInfo;
		};
		var rx=-1;
		var ry=-1;
		var nWidth=this._width;
		var nHeight=this._height;
		var pCellBox=this._cells;
		for (var y=0;y < nHeight;y++){
			if (this._rowInfo[y].spaceCount < width)continue ;
			for (var x=0;x < nWidth;){
				var tm=(y *nWidth+x)*3;
				if (pCellBox[tm] !=0 || pCellBox[tm+1] < width || pCellBox[tm+2] < height){
					x+=pCellBox[tm+1];
					continue ;
				}
				rx=x;
				ry=y;
				for (var xx=0;xx < width;xx++){
					if (pCellBox[3*xx+tm+2] < height){
						rx=-1;
						break ;
					}
				}
				if (rx < 0){
					x+=pCellBox[tm+1];
					continue ;
				}
				pFillInfo.ret=true;
				pFillInfo.x=rx;
				pFillInfo.y=ry;
				return pFillInfo;
			}
		}
		return pFillInfo;
	}

	//------------------------------------------------------------------
	__proto._fill=function(x,y,w,h,type){
		var nWidth=this._width;
		var nHeghit=this._height;
		this._check((x+w)<=nWidth && (y+h)<=nHeghit);
		for (var yy=y;yy < (h+y);++yy){
			this._check(this._rowInfo[yy].spaceCount >=w);
			this._rowInfo[yy].spaceCount-=w;
			for (var xx=0;xx < w;xx++){
				var tm=(x+yy *nWidth+xx)*3;
				this._check(this._cells[tm]==0);
				this._cells[tm]=type;
				this._cells[tm+1]=w;
				this._cells[tm+2]=h;
			}
		}
		if (x > 0){
			for (yy=0;yy < h;++yy){
				var s=0;
				for (xx=x-1;xx >=0;--xx,++s){
					if (this._cells[((y+yy)*nWidth+xx)*3] !=0)break ;
				}
				for (xx=s;xx > 0;--xx){
					this._cells[((y+yy)*nWidth+x-xx)*3+1]=xx;
					this._check(xx > 0);
				}
			}
		}
		if (y > 0){
			for (xx=x;xx < (x+w);++xx){
				s=0;
				for (yy=y-1;yy >=0;--yy,s++){
					if (this._cells[(xx+yy *nWidth)*3] !=0)break ;
				}
				for (yy=s;yy > 0;--yy){
					this._cells[(xx+(y-yy)*nWidth)*3+2]=yy;
					this._check(yy > 0);
				}
			}
		}
	}

	__proto._check=function(ret){
		if (ret==false){
			console.log("xtexMerger 错误啦");
		}
	}

	//------------------------------------------------------------------
	__proto._clear=function(){
		this._texCount=0;
		for (var y=0;y < this._height;y++){
			this._rowInfo[y].spaceCount=this._width;
		}
		for (var i=0;i < this._height;i++){
			for (var j=0;j < this._width;j++){
				var tm=(i *this._width+j)*3;
				this._cells[tm]=0;
				this._cells[tm+1]=this._width-j;
				this._cells[tm+2]=this._width-i;
			}
		}
		this._failSize.width=this._width+1;
		this._failSize.height=this._height+1;
	}

	AtlasGrid.__init$=function(){
		//------------------------------------------------------------------------------
		//class TexRowInfo
		TexRowInfo=(function(){
			function TexRowInfo(){
				this.spaceCount=0;
			}
			__class(TexRowInfo,'');
			return TexRowInfo;
		})()
		//------------------------------------------------------------------------------
		//class TexMergeTexSize
		TexMergeTexSize=(function(){
			function TexMergeTexSize(){
				this.width=0;
				this.height=0;
			}
			__class(TexMergeTexSize,'');
			return TexMergeTexSize;
		})()
	}

	return AtlasGrid;
})()


//class laya.webgl.atlas.AtlasResourceManager
var AtlasResourceManager=(function(){
	function AtlasResourceManager(width,height,gridSize,maxTexNum){
		this._currentAtlasCount=0;
		this._maxAtlaserCount=0;
		this._width=0;
		this._height=0;
		this._gridSize=0;
		this._gridNumX=0;
		this._gridNumY=0;
		this._init=false;
		this._curAtlasIndex=0;
		this._setAtlasParam=false;
		this._atlaserArray=null;
		this._needGC=false;
		this._setAtlasParam=true;
		this._width=width;
		this._height=height;
		this._gridSize=gridSize;
		this._maxAtlaserCount=maxTexNum;
		this._gridNumX=width / gridSize;
		this._gridNumY=height / gridSize;
		this._curAtlasIndex=0;
		this._atlaserArray=[];
	}

	__class(AtlasResourceManager,'laya.webgl.atlas.AtlasResourceManager');
	var __proto=AtlasResourceManager.prototype;
	__proto.setAtlasParam=function(width,height,gridSize,maxTexNum){
		if (this._setAtlasParam==true){
			AtlasResourceManager._sid_=0;
			this._width=width;
			this._height=height;
			this._gridSize=gridSize;
			this._maxAtlaserCount=maxTexNum;
			this._gridNumX=width / gridSize;
			this._gridNumY=height / gridSize;
			this._curAtlasIndex=0;
			this.freeAll();
			return true;
			}else {
			console.log("设置大图合集参数错误，只能在开始页面设置各种参数");
			throw-1;
			return false;
		}
		return false;
	}

	//添加 图片到大图集
	__proto.pushData=function(texture){
		var bitmap=texture.bitmap;
		var nWebGLImageIndex=-1;
		var curAtlas=null;
		var i=0,n=0,altasIndex=0;
		for (i=0,n=this._atlaserArray.length;i < n;i++){
			altasIndex=(this._curAtlasIndex+i)% n;
			curAtlas=this._atlaserArray[altasIndex];
			nWebGLImageIndex=curAtlas.findBitmapIsExist(bitmap);
			if (nWebGLImageIndex !=-1){
				break ;
			}
		}
		if (nWebGLImageIndex !=-1){
			var offset=curAtlas.InAtlasWebGLImagesOffsetValue[nWebGLImageIndex];
			offsetX=offset[0];
			offsetY=offset[1];
			curAtlas.addToAtlas(texture,offsetX,offsetY);
			return true;
			}else {
			var tex=texture;
			this._setAtlasParam=false;
			var bFound=false;
			var nImageGridX=(Math.ceil((texture.bitmap.width+2)/ this._gridSize));
			var nImageGridY=(Math.ceil((texture.bitmap.height+2)/ this._gridSize));
			var bSuccess=false;
			for (var k=0;k < 2;k++){
				var maxAtlaserCount=this._maxAtlaserCount;
				for (i=0;i < maxAtlaserCount;i++){
					altasIndex=(this._curAtlasIndex+i)% maxAtlaserCount;
					(this._atlaserArray.length-1 >=altasIndex)|| (this._atlaserArray.push(new Atlaser(this._gridNumX,this._gridNumY,this._width,this._height,AtlasResourceManager._sid_++)));
					var atlas=this._atlaserArray[altasIndex];
					var offsetX=0,offsetY=0;
					var fillInfo=atlas.addTex(1,nImageGridX,nImageGridY);
					if (fillInfo.ret){
						offsetX=fillInfo.x *this._gridSize+1;
						offsetY=fillInfo.y *this._gridSize+1;
						bitmap.lock=true;
						atlas.addToAtlasTexture((bitmap),offsetX,offsetY);
						atlas.addToAtlas(texture,offsetX,offsetY);
						bSuccess=true;
						this._curAtlasIndex=altasIndex;
						break ;
					}
				}
				if (bSuccess)
					break ;
				this._atlaserArray.push(new Atlaser(this._gridNumX,this._gridNumY,this._width,this._height,AtlasResourceManager._sid_++));
				this._needGC=true;
				this.garbageCollection();
				this._curAtlasIndex=this._atlaserArray.length-1;
			}
			if (!bSuccess){
				console.log(">>>AtlasManager pushData error");
			}
			return bSuccess;
		}
	}

	__proto.addToAtlas=function(tex){
		laya.webgl.atlas.AtlasResourceManager.instance.pushData(tex);
	}

	/**
	*回收大图合集,不建议手动调用
	*@return
	*/
	__proto.garbageCollection=function(){
		if (this._needGC===true){
			var n=this._atlaserArray.length-this._maxAtlaserCount;
			for (var i=0;i < n;i++){
				this._atlaserArray[i].dispose();
				console.log("AtlasResourceManager:Dispose the inner Atlas。");
			}
			console.log(">>>>altas garbageCollection ="+n);
			this._atlaserArray.splice(0,n);
			this._needGC=false;
		}
		return true;
	}

	__proto.freeAll=function(){
		for (var i=0,n=this._atlaserArray.length;i < n;i++){
			this._atlaserArray[i].dispose();
		}
		this._atlaserArray.length=0;
		this._curAtlasIndex=0;
	}

	__proto.getAtlaserCount=function(){
		return this._atlaserArray.length;
	}

	__proto.getAtlaserByIndex=function(index){
		return this._atlaserArray[index];
	}

	__getset(1,AtlasResourceManager,'instance',function(){
		if (!AtlasResourceManager._Instance){
			AtlasResourceManager._Instance=new AtlasResourceManager(laya.webgl.atlas.AtlasResourceManager.atlasTextureWidth,laya.webgl.atlas.AtlasResourceManager.atlasTextureHeight,16,laya.webgl.atlas.AtlasResourceManager.maxTextureCount);
		}
		return AtlasResourceManager._Instance;
	});

	__getset(1,AtlasResourceManager,'enabled',function(){
		return Config.atlasEnable;
	});

	__getset(1,AtlasResourceManager,'atlasLimitWidth',function(){
		return AtlasResourceManager._atlasLimitWidth;
		},function(value){
		AtlasResourceManager._atlasLimitWidth=value;
	});

	__getset(1,AtlasResourceManager,'atlasLimitHeight',function(){
		return AtlasResourceManager._atlasLimitHeight;
		},function(value){
		AtlasResourceManager._atlasLimitHeight=value;
	});

	AtlasResourceManager._enable=function(){
		Config.atlasEnable=true;
	}

	AtlasResourceManager._disable=function(){
		Config.atlasEnable=false;
	}

	AtlasResourceManager.__init__=function(){
		AtlasResourceManager.atlasTextureWidth=2048;
		AtlasResourceManager.atlasTextureHeight=2048;
		AtlasResourceManager.maxTextureCount=6;
		AtlasResourceManager.atlasLimitWidth=512;
		AtlasResourceManager.atlasLimitHeight=512;
	}

	AtlasResourceManager._atlasLimitWidth=0;
	AtlasResourceManager._atlasLimitHeight=0;
	AtlasResourceManager.gridSize=16;
	AtlasResourceManager.atlasTextureWidth=0;
	AtlasResourceManager.atlasTextureHeight=0;
	AtlasResourceManager.maxTextureCount=0;
	AtlasResourceManager._atlasRestore=0;
	AtlasResourceManager.BOARDER_TYPE_NO=0;
	AtlasResourceManager.BOARDER_TYPE_RIGHT=1;
	AtlasResourceManager.BOARDER_TYPE_LEFT=2;
	AtlasResourceManager.BOARDER_TYPE_BOTTOM=4;
	AtlasResourceManager.BOARDER_TYPE_TOP=8;
	AtlasResourceManager.BOARDER_TYPE_ALL=15;
	AtlasResourceManager._sid_=0;
	AtlasResourceManager._Instance=null;
	return AtlasResourceManager;
})()


//class laya.webgl.atlas.MergeFillInfo
var MergeFillInfo=(function(){
	function MergeFillInfo(){
		this.x=0;
		this.y=0;
		this.ret=false;
		this.ret=false;
		this.x=0;
		this.y=0;
	}

	__class(MergeFillInfo,'laya.webgl.atlas.MergeFillInfo');
	return MergeFillInfo;
})()


;
//class laya.webgl.canvas.BlendMode
var BlendMode=(function(){
	function BlendMode(){}
	__class(BlendMode,'laya.webgl.canvas.BlendMode');
	BlendMode._init_=function(gl){
		BlendMode.fns=[BlendMode.BlendNormal,BlendMode.BlendAdd,BlendMode.BlendMultiply,BlendMode.BlendScreen,BlendMode.BlendOverlay,BlendMode.BlendLight,BlendMode.BlendMask,BlendMode.BlendDestinationOut];
		BlendMode.targetFns=[BlendMode.BlendNormalTarget,BlendMode.BlendAddTarget,BlendMode.BlendMultiplyTarget,BlendMode.BlendScreenTarget,BlendMode.BlendOverlayTarget,BlendMode.BlendLightTarget,BlendMode.BlendMask,BlendMode.BlendDestinationOut];
	}

	BlendMode.BlendNormal=function(gl){
		gl.blendFunc(1,0x0303);
	}

	BlendMode.BlendAdd=function(gl){
		gl.blendFunc(1,0x0304);
	}

	BlendMode.BlendMultiply=function(gl){
		gl.blendFunc(0x0306,0x0303);
	}

	BlendMode.BlendScreen=function(gl){
		gl.blendFunc(1,1);
	}

	BlendMode.BlendOverlay=function(gl){
		gl.blendFunc(1,0x0301);
	}

	BlendMode.BlendLight=function(gl){
		gl.blendFunc(1,1);
	}

	BlendMode.BlendNormalTarget=function(gl){
		gl.blendFunc(1,0x0303);
	}

	BlendMode.BlendAddTarget=function(gl){
		gl.blendFunc(1,0x0304);
	}

	BlendMode.BlendMultiplyTarget=function(gl){
		gl.blendFunc(0x0306,0x0303);
	}

	BlendMode.BlendScreenTarget=function(gl){
		gl.blendFunc(1,1);
	}

	BlendMode.BlendOverlayTarget=function(gl){
		gl.blendFunc(1,0x0301);
	}

	BlendMode.BlendLightTarget=function(gl){
		gl.blendFunc(1,1);
	}

	BlendMode.BlendMask=function(gl){
		gl.blendFunc(0,0x0302);
	}

	BlendMode.BlendDestinationOut=function(gl){
		gl.blendFunc(0,0);
	}

	BlendMode.activeBlendFunction=null;
	BlendMode.NAMES=["normal","add","multiply","screen","overlay","light","mask","destination-out"];
	BlendMode.TOINT={"normal":0,"add":1,"multiply":2,"screen":3 ,"lighter":1,"overlay":4,"light":5,"mask":6,"destination-out":7};
	BlendMode.NORMAL="normal";
	BlendMode.ADD="add";
	BlendMode.MULTIPLY="multiply";
	BlendMode.SCREEN="screen";
	BlendMode.LIGHT="light";
	BlendMode.OVERLAY="overlay";
	BlendMode.DESTINATIONOUT="destination-out";
	BlendMode.fns=[];
	BlendMode.targetFns=[];
	return BlendMode;
})()


//class laya.webgl.canvas.DrawStyle
var DrawStyle=(function(){
	function DrawStyle(value){
		this._color=Color$1.create("black");
		this.setValue(value);
	}

	__class(DrawStyle,'laya.webgl.canvas.DrawStyle');
	var __proto=DrawStyle.prototype;
	__proto.setValue=function(value){
		if (value){
			if ((typeof value=='string')){
				this._color=Color$1.create(value);
				return;
			}
			if ((value instanceof laya.utils.Color )){
				this._color=value;
				return;
			}
		}
	}

	__proto.reset=function(){
		this._color=Color$1.create("black");
	}

	__proto.equal=function(value){
		if ((typeof value=='string'))return this._color.strColor===value;
		if ((value instanceof laya.utils.Color ))return this._color.numColor===(value).numColor;
		return false;
	}

	__proto.toColorStr=function(){
		return this._color.strColor;
	}

	DrawStyle.create=function(value){
		if (value){
			var color;
			if ((typeof value=='string'))color=Color$1.create(value);
			else if ((value instanceof laya.utils.Color ))color=value;
			if (color){
				return color._drawStyle || (color._drawStyle=new DrawStyle(value));
			}
		}
		return laya.webgl.canvas.DrawStyle.DEFAULT;
	}

	__static(DrawStyle,
	['DEFAULT',function(){return this.DEFAULT=new DrawStyle("#000000");}
	]);
	return DrawStyle;
})()


//class laya.webgl.canvas.Path
var Path=(function(){
	function Path(){
		this._x=0;
		this._y=0;
		//this._rect=null;
		//this.ib=null;
		//this.vb=null;
		this.dirty=false;
		//this.geomatrys=null;
		//this._curGeomatry=null;
		this.offset=0;
		this.count=0;
		this.geoStart=0;
		this.tempArray=[];
		this.closePath=false;
		this.geomatrys=[];
		var gl=WebGL.mainContext;
		this.ib=IndexBuffer2D.create(0x88E8);
		this.vb=VertexBuffer2D.create(5);
	}

	__class(Path,'laya.webgl.canvas.Path');
	var __proto=Path.prototype;
	__proto.addPoint=function(pointX,pointY){
		this.tempArray.push(pointX,pointY);
	}

	__proto.getEndPointX=function(){
		return this.tempArray[this.tempArray.length-2];
	}

	__proto.getEndPointY=function(){
		return this.tempArray[this.tempArray.length-1];
	}

	__proto.polygon=function(x,y,points,color,borderWidth,borderColor){
		var geo;
		this.geomatrys.push(this._curGeomatry=geo=new Polygon(x,y,points,color,borderWidth,borderColor));
		if (!color)geo.fill=false;
		if (borderColor==undefined)geo.borderWidth=0;
		return geo;
	}

	__proto.setGeomtry=function(shape){
		this.geomatrys.push(this._curGeomatry=shape);
	}

	__proto.drawLine=function(x,y,points,width,color){
		var geo;
		if (this.closePath){
			this.geomatrys.push(this._curGeomatry=geo=new LoopLine(x,y,points,width,color));
			}else {
			this.geomatrys.push(this._curGeomatry=geo=new Line(x,y,points,width,color));
		}
		geo.fill=false;
		return geo;
	}

	__proto.update=function(){
		var si=this.ib._byteLength;
		var len=this.geomatrys.length;
		this.offset=si;
		for (var i=this.geoStart;i < len;i++){
			this.geomatrys[i].getData(this.ib,this.vb,this.vb._byteLength / 20);
		}
		this.geoStart=len;
		this.count=(this.ib._byteLength-si)/ CONST3D2D.BYTES_PIDX;
	}

	__proto.reset=function(){
		this.vb.clear();
		this.ib.clear();
		this.offset=this.count=this.geoStart=0;
		this.geomatrys.length=0;
	}

	__proto.recover=function(){
		this._curGeomatry=null;
		this.vb.destory();
		this.vb=null;
		this.ib.destory();
		this.ib=null;
	}

	return Path;
})()


//class laya.webgl.canvas.save.SaveBase
var SaveBase=(function(){
	function SaveBase(){
		//this._valueName=null;
		//this._value=null;
		//this._dataObj=null;
		//this._newSubmit=false;
	}

	__class(SaveBase,'laya.webgl.canvas.save.SaveBase');
	var __proto=SaveBase.prototype;
	Laya.imps(__proto,{"laya.webgl.canvas.save.ISaveData":true})
	__proto.isSaveMark=function(){return false;}
	__proto.restore=function(context){
		this._dataObj[this._valueName]=this._value;
		SaveBase._cache[SaveBase._cache._length++]=this;
		this._newSubmit && (context._curSubmit=Submit.RENDERBASE,context._renderKey=0);
	}

	SaveBase._createArray=function(){
		var value=[];
		value._length=0;
		return value;
	}

	SaveBase._init=function(){
		var namemap=SaveBase._namemap={};
		namemap[0x1]="ALPHA";
		namemap[0x2]="fillStyle";
		namemap[0x8]="font";
		namemap[0x100]="lineWidth";
		namemap[0x200]="strokeStyle";
		namemap[0x2000]="_mergeID";
		namemap[0x400]=namemap[0x800]=namemap[0x1000]=[];
		namemap[0x4000]="textBaseline";
		namemap[0x8000]="textAlign";
		namemap[0x10000]="_nBlendType";
		namemap[0x100000]="shader";
		namemap[0x200000]="filters";
		return namemap;
	}

	SaveBase.save=function(context,type,dataObj,newSubmit){
		if ((context._saveMark._saveuse & type)!==type){
			context._saveMark._saveuse |=type;
			var cache=SaveBase._cache;
			var o=cache._length > 0 ? cache[--cache._length] :(new SaveBase());
			o._value=dataObj[o._valueName=SaveBase._namemap[type]];
			o._dataObj=dataObj;
			o._newSubmit=newSubmit;
			var _save=context._save;
			_save[_save._length++]=o;
		}
	}

	SaveBase._cache=laya.webgl.canvas.save.SaveBase._createArray();
	SaveBase._namemap=SaveBase._init();
	return SaveBase;
})()


//class laya.webgl.canvas.save.SaveClipRect
var SaveClipRect=(function(){
	function SaveClipRect(){
		//this._clipSaveRect=null;
		//this._submitScissor=null;
		this._clipRect=new Rectangle();
	}

	__class(SaveClipRect,'laya.webgl.canvas.save.SaveClipRect');
	var __proto=SaveClipRect.prototype;
	Laya.imps(__proto,{"laya.webgl.canvas.save.ISaveData":true})
	__proto.isSaveMark=function(){return false;}
	__proto.restore=function(context){
		context._clipRect=this._clipSaveRect;
		SaveClipRect._cache[SaveClipRect._cache._length++]=this;
		this._submitScissor.submitLength=context._submits._length-this._submitScissor.submitIndex;
		context._curSubmit=Submit.RENDERBASE;
		context._renderKey=0;
	}

	SaveClipRect.save=function(context,submitScissor){
		if ((context._saveMark._saveuse & 0x20000)==0x20000)return;
		context._saveMark._saveuse |=0x20000;
		var cache=SaveClipRect._cache;
		var o=cache._length > 0 ? cache[--cache._length] :(new SaveClipRect());
		o._clipSaveRect=context._clipRect;
		context._clipRect=o._clipRect.copyFrom(context._clipRect);
		o._submitScissor=submitScissor;
		var _save=context._save;
		_save[_save._length++]=o;
	}

	__static(SaveClipRect,
	['_cache',function(){return this._cache=SaveBase._createArray();}
	]);
	return SaveClipRect;
})()


//class laya.webgl.canvas.save.SaveClipRectStencil
var SaveClipRectStencil=(function(){
	function SaveClipRectStencil(){
		//this._clipSaveRect=null;
		//this._saveMatrix=null;
		this._contextX=0;
		this._contextY=0;
		//this._submitStencil=null;
		this._clipRect=new Rectangle();
		this._rect=new Rectangle();
		this._matrix=new Matrix();
	}

	__class(SaveClipRectStencil,'laya.webgl.canvas.save.SaveClipRectStencil');
	var __proto=SaveClipRectStencil.prototype;
	Laya.imps(__proto,{"laya.webgl.canvas.save.ISaveData":true})
	__proto.isSaveMark=function(){return false;}
	__proto.restore=function(context){
		SubmitStencil.restore(context,this._rect,this._saveMatrix,this._contextX,this._contextY);
		context._clipRect=this._clipSaveRect;
		context._curMat=this._saveMatrix;
		context._x=this._contextX;
		context._y=this._contextY;
		SaveClipRectStencil._cache[SaveClipRectStencil._cache._length++]=this;
		context._curSubmit=Submit.RENDERBASE;
	}

	SaveClipRectStencil.save=function(context,submitStencil,x,y,width,height,clipX,clipY,clipWidth,clipHeight){
		if ((context._saveMark._saveuse & 0x40000)==0x40000)return;
		context._saveMark._saveuse |=0x40000;
		var cache=SaveClipRectStencil._cache;
		var o=cache._length > 0 ? cache[--cache._length] :(new SaveClipRectStencil());
		o._clipSaveRect=context._clipRect;
		o._clipRect.setTo(clipX,clipY,clipWidth,clipHeight);
		context._clipRect=o._clipRect;
		o._rect.x=x;
		o._rect.y=y;
		o._rect.width=width;
		o._rect.height=height;
		o._contextX=context._x;
		o._contextY=context._y;
		o._saveMatrix=context._curMat;
		context._curMat.copyTo(o._matrix);
		context._curMat=o._matrix;
		o._submitStencil=submitStencil;
		var _save=context._save;
		_save[_save._length++]=o;
	}

	__static(SaveClipRectStencil,
	['_cache',function(){return this._cache=SaveBase._createArray();}
	]);
	return SaveClipRectStencil;
})()


//class laya.webgl.canvas.save.SaveMark
var SaveMark=(function(){
	function SaveMark(){
		this._saveuse=0;
		//this._preSaveMark=null;
		;
	}

	__class(SaveMark,'laya.webgl.canvas.save.SaveMark');
	var __proto=SaveMark.prototype;
	Laya.imps(__proto,{"laya.webgl.canvas.save.ISaveData":true})
	__proto.isSaveMark=function(){
		return true;
	}

	__proto.restore=function(context){
		context._saveMark=this._preSaveMark;
		SaveMark._no[SaveMark._no._length++]=this;
	}

	SaveMark.Create=function(context){
		var no=SaveMark._no;
		var o=no._length > 0 ? no[--no._length] :(new SaveMark());
		o._saveuse=0;
		o._preSaveMark=context._saveMark;
		context._saveMark=o;
		return o;
	}

	__static(SaveMark,
	['_no',function(){return this._no=SaveBase._createArray();}
	]);
	return SaveMark;
})()


//class laya.webgl.canvas.save.SaveTransform
var SaveTransform=(function(){
	function SaveTransform(){
		//this._savematrix=null;
		this._matrix=new Matrix();
	}

	__class(SaveTransform,'laya.webgl.canvas.save.SaveTransform');
	var __proto=SaveTransform.prototype;
	Laya.imps(__proto,{"laya.webgl.canvas.save.ISaveData":true})
	__proto.isSaveMark=function(){return false;}
	__proto.restore=function(context){
		context._curMat=this._savematrix;
		SaveTransform._no[SaveTransform._no._length++]=this;
	}

	SaveTransform.save=function(context){
		var _saveMark=context._saveMark;
		if ((_saveMark._saveuse & 0x800)===0x800)return;
		_saveMark._saveuse |=0x800;
		var no=SaveTransform._no;
		var o=no._length > 0 ? no[--no._length] :(new SaveTransform());
		o._savematrix=context._curMat;
		context._curMat=context._curMat.copyTo(o._matrix);
		var _save=context._save;
		_save[_save._length++]=o;
	}

	__static(SaveTransform,
	['_no',function(){return this._no=SaveBase._createArray();}
	]);
	return SaveTransform;
})()


//class laya.webgl.canvas.save.SaveTranslate
var SaveTranslate=(function(){
	function SaveTranslate(){
		//this._x=NaN;
		//this._y=NaN;
	}

	__class(SaveTranslate,'laya.webgl.canvas.save.SaveTranslate');
	var __proto=SaveTranslate.prototype;
	Laya.imps(__proto,{"laya.webgl.canvas.save.ISaveData":true})
	__proto.isSaveMark=function(){return false;}
	__proto.restore=function(context){
		var mat=context._curMat;
		context._x=this._x;
		context._y=this._y;
		SaveTranslate._no[SaveTranslate._no._length++]=this;
	}

	SaveTranslate.save=function(context){
		var no=SaveTranslate._no;
		var o=no._length > 0 ? no[--no._length] :(new SaveTranslate());
		o._x=context._x;
		o._y=context._y;
		var _save=context._save;
		_save[_save._length++]=o;
	}

	__static(SaveTranslate,
	['_no',function(){return this._no=SaveBase._createArray();}
	]);
	return SaveTranslate;
})()


//class laya.webgl.resource.RenderTargetMAX
var RenderTargetMAX=(function(){
	function RenderTargetMAX(){
		//public var targets:Vector.<OneTarget>;//没用到
		this.target=null;
		this.repaint=false;
		this._width=NaN;
		this._height=NaN;
		this._sp=null;
		this._clipRect=new Rectangle();
	}

	__class(RenderTargetMAX,'laya.webgl.resource.RenderTargetMAX');
	var __proto=RenderTargetMAX.prototype;
	__proto.setSP=function(sp){
		this._sp=sp;
	}

	__proto.size=function(w,h){
		var _$this=this;
		if (this._width===w && this._height===h){
			this.target.size(w,h);
			return;
		}
		this.repaint=true;
		this._width=w;
		this._height=h;
		if (!this.target)
			this.target=RenderTarget2D.create(w,h);
		else
		this.target.size(w,h);
		if (!this.target.hasListener("recovered")){
			this.target.on("recovered",this,function(e){
				Laya.timer.callLater(_$this._sp,_$this._sp.repaint);
			});
		}
	}

	__proto._flushToTarget=function(context,target){
		if (target._destroy)return;
		var worldScissorTest=RenderState2D.worldScissorTest;
		var preworldClipRect=RenderState2D.worldClipRect;
		RenderState2D.worldClipRect=this._clipRect;
		this._clipRect.x=this._clipRect.y=0;
		this._clipRect.width=this._width;
		this._clipRect.height=this._height;
		RenderState2D.worldScissorTest=false;
		WebGL.mainContext.disable(0x0C11);
		var preAlpha=RenderState2D.worldAlpha;
		var preMatrix4=RenderState2D.worldMatrix4;
		var preMatrix=RenderState2D.worldMatrix;
		var preFilters=RenderState2D.worldFilters;
		var preShaderDefines=RenderState2D.worldShaderDefines;
		RenderState2D.worldMatrix=Matrix.EMPTY;
		RenderState2D.restoreTempArray();
		RenderState2D.worldMatrix4=RenderState2D.TEMPMAT4_ARRAY;
		RenderState2D.worldAlpha=1;
		RenderState2D.worldFilters=null;
		RenderState2D.worldShaderDefines=null;
		BaseShader.activeShader=null;
		target.start();
		Config.showCanvasMark ? target.clear(0,1,0,0.3):target.clear(0,0,0,0);
		context.flush();
		target.end();
		BaseShader.activeShader=null;
		RenderState2D.worldAlpha=preAlpha;
		RenderState2D.worldMatrix4=preMatrix4;
		RenderState2D.worldMatrix=preMatrix;
		RenderState2D.worldFilters=preFilters;
		RenderState2D.worldShaderDefines=preShaderDefines;
		RenderState2D.worldScissorTest=worldScissorTest
		if (worldScissorTest){
			var y=RenderState2D.height-preworldClipRect.y-preworldClipRect.height;
			WebGL.mainContext.scissor(preworldClipRect.x,y,preworldClipRect.width,preworldClipRect.height);
			WebGL.mainContext.enable(0x0C11);
		}
		RenderState2D.worldClipRect=preworldClipRect;
	}

	__proto.flush=function(context){
		if (this.repaint){
			this._flushToTarget(context,this.target);
			this.repaint=false;
		}
	}

	__proto.drawTo=function(context,x,y,width,height){
		context.drawTexture(this.target.getTexture(),x,y,width,height,0,0);
	}

	__proto.destroy=function(){
		if (this.target){
			this.target.destroy();
			this.target=null;
			this._sp=null;
		}
	}

	return RenderTargetMAX;
})()


//class laya.webgl.shader.d2.Shader2D
var Shader2D=(function(){
	function Shader2D(){
		this.ALPHA=1;
		//this.glTexture=null;
		//this.shader=null;
		//this.filters=null;
		this.shaderType=0;
		//this.colorAdd=null;
		//this.strokeStyle=null;
		//this.fillStyle=null;
		this.defines=new ShaderDefines2D();
	}

	__class(Shader2D,'laya.webgl.shader.d2.Shader2D');
	var __proto=Shader2D.prototype;
	__proto.destroy=function(){
		this.defines=null;
		this.filters=null;
		this.glTexture=null;
		this.strokeStyle=null;
		this.fillStyle=null;
	}

	Shader2D.__init__=function(){
		Shader.addInclude("parts/ColorFilter_ps_uniform.glsl","uniform vec4 colorAlpha;\nuniform mat4 colorMat;");
		Shader.addInclude("parts/ColorFilter_ps_logic.glsl","mat4 alphaMat =colorMat;\n\nalphaMat[0][3] *= gl_FragColor.a;\nalphaMat[1][3] *= gl_FragColor.a;\nalphaMat[2][3] *= gl_FragColor.a;\n\ngl_FragColor = gl_FragColor * alphaMat;\ngl_FragColor += colorAlpha/255.0*gl_FragColor.a;\n");
		Shader.addInclude("parts/GlowFilter_ps_uniform.glsl","uniform vec4 u_color;\nuniform float u_strength;\nuniform float u_blurX;\nuniform float u_blurY;\nuniform float u_offsetX;\nuniform float u_offsetY;\nuniform float u_textW;\nuniform float u_textH;");
		Shader.addInclude("parts/GlowFilter_ps_logic.glsl","const float c_IterationTime = 10.0;\nfloat floatIterationTotalTime = c_IterationTime * c_IterationTime;\nvec4 vec4Color = vec4(0.0,0.0,0.0,0.0);\nvec2 vec2FilterDir = vec2(-(u_offsetX)/u_textW,-(u_offsetY)/u_textH);\nvec2 vec2FilterOff = vec2(u_blurX/u_textW/c_IterationTime * 2.0,u_blurY/u_textH/c_IterationTime * 2.0);\nfloat maxNum = u_blurX * u_blurY;\nvec2 vec2Off = vec2(0.0,0.0);\nfloat floatOff = c_IterationTime/2.0;\nfor(float i = 0.0;i<=c_IterationTime; ++i){\n	for(float j = 0.0;j<=c_IterationTime; ++j){\n		vec2Off = vec2(vec2FilterOff.x * (i - floatOff),vec2FilterOff.y * (j - floatOff));\n		vec4Color += texture2D(texture, v_texcoord + vec2FilterDir + vec2Off)/floatIterationTotalTime;\n	}\n}\ngl_FragColor = vec4(u_color.rgb,vec4Color.a * u_strength);\ngl_FragColor.rgb *= gl_FragColor.a;");
		Shader.addInclude("parts/BlurFilter_ps_logic.glsl","gl_FragColor =   blur();\ngl_FragColor.w*=alpha;");
		Shader.addInclude("parts/BlurFilter_ps_uniform.glsl","uniform vec4 strength_sig2_2sig2_gauss1;\nuniform vec2 blurInfo;\n\n#define PI 3.141593\n\n//float sigma=strength/3.0;//3σ以外影响很小。即当σ=1的时候，半径为3\n//float sig2 = sigma*sigma;\n//float _2sig2 = 2.0*sig2;\n//return 1.0/(2*PI*sig2)*exp(-(x*x+y*y)/_2sig2)\n//float gauss1 = 1.0/(2.0*PI*sig2);\n\nfloat getGaussian(float x, float y){\n    return strength_sig2_2sig2_gauss1.w*exp(-(x*x+y*y)/strength_sig2_2sig2_gauss1.z);\n}\n\nvec4 blur(){\n    const float blurw = 9.0;\n    vec4 vec4Color = vec4(0.0,0.0,0.0,0.0);\n    vec2 halfsz=vec2(blurw,blurw)/2.0/blurInfo;    \n    vec2 startpos=v_texcoord-halfsz;\n    vec2 ctexcoord = startpos;\n    vec2 step = 1.0/blurInfo;  //每个像素      \n    \n    for(float y = 0.0;y<=blurw; ++y){\n        ctexcoord.x=startpos.x;\n        for(float x = 0.0;x<=blurw; ++x){\n            //TODO 纹理坐标的固定偏移应该在vs中处理\n            vec4Color += texture2D(texture, ctexcoord)*getGaussian(x-blurw/2.0,y-blurw/2.0);\n            ctexcoord.x+=step.x;\n        }\n        ctexcoord.y+=step.y;\n    }\n    return vec4Color;\n}");
		Shader.addInclude("parts/ColorAdd_ps_uniform.glsl","uniform vec4 colorAdd;\n");
		Shader.addInclude("parts/ColorAdd_ps_logic.glsl","gl_FragColor = vec4(colorAdd.rgb,colorAdd.a*gl_FragColor.a);\ngl_FragColor.xyz *= colorAdd.a;");
		var vs,ps;
		vs="attribute vec4 position;\nattribute vec2 texcoord;\nuniform vec2 size;\n\n#ifdef WORLDMAT\nuniform mat4 mmat;\n#endif\nvarying vec2 v_texcoord;\nvoid main() {\n  #ifdef WORLDMAT\n  vec4 pos=mmat*position;\n  gl_Position =vec4((pos.x/size.x-0.5)*2.0,(0.5-pos.y/size.y)*2.0,pos.z,1.0);\n  #else\n  gl_Position =vec4((position.x/size.x-0.5)*2.0,(0.5-position.y/size.y)*2.0,position.z,1.0);\n  #endif\n  \n  v_texcoord = texcoord;\n}";
		ps="precision mediump float;\n//precision highp float;\nvarying vec2 v_texcoord;\nuniform sampler2D texture;\nuniform float alpha;\n#include?BLUR_FILTER  \"parts/BlurFilter_ps_uniform.glsl\";\n#include?COLOR_FILTER \"parts/ColorFilter_ps_uniform.glsl\";\n#include?GLOW_FILTER \"parts/GlowFilter_ps_uniform.glsl\";\n#include?COLOR_ADD \"parts/ColorAdd_ps_uniform.glsl\";\n\nvoid main() {\n   vec4 color= texture2D(texture, v_texcoord);\n   color.a*=alpha;\n   color.rgb*=alpha;\n   gl_FragColor=color;\n   #include?COLOR_ADD \"parts/ColorAdd_ps_logic.glsl\";   \n   #include?BLUR_FILTER  \"parts/BlurFilter_ps_logic.glsl\";\n   #include?COLOR_FILTER \"parts/ColorFilter_ps_logic.glsl\";\n   #include?GLOW_FILTER \"parts/GlowFilter_ps_logic.glsl\";\n}";
		Shader.preCompile2D(0,0x01,vs,ps,null);
		vs="attribute vec4 position;\nuniform vec2 size;\nuniform mat4 mmat;\nvoid main() {\n  vec4 pos=mmat*position;\n  gl_Position =vec4((pos.x/size.x-0.5)*2.0,(0.5-pos.y/size.y)*2.0,pos.z,1.0);\n}";
		ps="precision mediump float;\nuniform vec4 color;\nuniform float alpha;\n#include?COLOR_FILTER \"parts/ColorFilter_ps_uniform.glsl\";\nvoid main() {\n	vec4 a = vec4(color.r, color.g, color.b, color.a);\n	a.w = alpha;\n	a.xyz *= alpha;\n	gl_FragColor = a;\n	#include?COLOR_FILTER \"parts/ColorFilter_ps_logic.glsl\";\n}";
		Shader.preCompile2D(0,0x02,vs,ps,null);
		vs="attribute vec4 position;\nattribute vec3 a_color;\nuniform mat4 mmat;\nuniform mat4 u_mmat2;\nuniform vec2 u_pos;\nuniform vec2 size;\nvarying vec3 color;\nvoid main(){\n  vec4 tPos = vec4(position.x + u_pos.x,position.y + u_pos.y,position.z,position.w);\n  vec4 pos=mmat*u_mmat2*tPos;\n  gl_Position =vec4((pos.x/size.x-0.5)*2.0,(0.5-pos.y/size.y)*2.0,pos.z,1.0);\n  color=a_color;\n}";
		ps="precision mediump float;\n//precision mediump float;\nvarying vec3 color;\nuniform float alpha;\nvoid main(){\n	//vec4 a=vec4(color.r, color.g, color.b, 1);\n	//a.a*=alpha;\n    gl_FragColor=vec4(color.r, color.g, color.b, alpha);\n	gl_FragColor.rgb*=alpha;\n}";
		Shader.preCompile2D(0,0x04,vs,ps,null);
		vs="attribute vec4 position;\nattribute vec2 texcoord;\nuniform vec2 size;\n\n#ifdef WORLDMAT\nuniform mat4 mmat;\n#endif\nvarying vec2 v_texcoord;\nvoid main() {\n  #ifdef WORLDMAT\n  vec4 pos=mmat*position;\n  gl_Position =vec4((pos.x/size.x-0.5)*2.0,(0.5-pos.y/size.y)*2.0,pos.z,1.0);\n  #else\n  gl_Position =vec4((position.x/size.x-0.5)*2.0,(0.5-position.y/size.y)*2.0,position.z,1.0);\n  #endif\n  \n  v_texcoord = texcoord;\n}";
		ps="#ifdef FSHIGHPRECISION\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n//precision highp float;\nvarying vec2 v_texcoord;\nuniform sampler2D texture;\nuniform float alpha;\nuniform vec4 u_TexRange;\nuniform vec2 u_offset;\n#include?BLUR_FILTER  \"parts/BlurFilter_ps_uniform.glsl\";\n#include?COLOR_FILTER \"parts/ColorFilter_ps_uniform.glsl\";\n#include?GLOW_FILTER \"parts/GlowFilter_ps_uniform.glsl\";\n#include?COLOR_ADD \"parts/ColorAdd_ps_uniform.glsl\";\n\nvoid main() {\n   vec2 newTexCoord;\n   newTexCoord.x = mod(u_offset.x + v_texcoord.x,u_TexRange.y) + u_TexRange.x;\n   newTexCoord.y = mod(u_offset.y + v_texcoord.y,u_TexRange.w) + u_TexRange.z;\n   vec4 color= texture2D(texture, newTexCoord);\n   color.a*=alpha;\n   gl_FragColor=color;\n   #include?COLOR_ADD \"parts/ColorAdd_ps_logic.glsl\";   \n   #include?BLUR_FILTER  \"parts/BlurFilter_ps_logic.glsl\";\n   #include?COLOR_FILTER \"parts/ColorFilter_ps_logic.glsl\";\n   #include?GLOW_FILTER \"parts/GlowFilter_ps_logic.glsl\";\n}";
		Shader.preCompile2D(0,0x100,vs,ps,null);
		vs="attribute vec2 position;\nattribute vec2 texcoord;\nattribute vec4 color;\nuniform vec2 size;\nuniform float offsetX;\nuniform float offsetY;\nuniform mat4 mmat;\nuniform mat4 u_mmat2;\nvarying vec2 v_texcoord;\nvarying vec4 v_color;\nvoid main() {\n  vec4 pos=mmat*u_mmat2*vec4(offsetX+position.x,offsetY+position.y,0,1 );\n  gl_Position = vec4((pos.x/size.x-0.5)*2.0,(0.5-pos.y/size.y)*2.0,pos.z,1.0);\n  v_color = color;\n  v_color.rgb *= v_color.a;\n  v_texcoord = texcoord;  \n}";
		ps="precision mediump float;\nvarying vec2 v_texcoord;\nvarying vec4 v_color;\nuniform sampler2D texture;\nuniform float alpha;\nvoid main() {\n	vec4 t_color = texture2D(texture, v_texcoord);\n	gl_FragColor = t_color.rgba * v_color;\n	gl_FragColor *= alpha;\n}";
		Shader.preCompile2D(0,0x200,vs,ps,null);
	}

	return Shader2D;
})()


//class laya.webgl.shader.ShaderDefines
var ShaderDefines$1=(function(){
	function ShaderDefines(name2int,int2name,int2nameMap){
		this._value=0;
		//this._name2int=null;
		//this._int2name=null;
		//this._int2nameMap=null;
		this._name2int=name2int;
		this._int2name=int2name;
		this._int2nameMap=int2nameMap;
	}

	__class(ShaderDefines,'laya.webgl.shader.ShaderDefines',null,'ShaderDefines$1');
	var __proto=ShaderDefines.prototype;
	__proto.add=function(value){
		if ((typeof value=='string'))value=this._name2int[value];
		this._value |=value;
		return this._value;
	}

	__proto.addInt=function(value){
		this._value |=value;
		return this._value;
	}

	__proto.remove=function(value){
		if ((typeof value=='string'))value=this._name2int[value];
		this._value &=(~value);
		return this._value;
	}

	__proto.isDefine=function(def){
		return (this._value & def)===def;
	}

	__proto.getValue=function(){
		return this._value;
	}

	__proto.setValue=function(value){
		this._value=value;
	}

	__proto.toNameDic=function(){
		var r=this._int2nameMap[this._value];
		return r ? r :ShaderDefines._toText(this._value,this._int2name,this._int2nameMap);
	}

	ShaderDefines._reg=function(name,value,_name2int,_int2name){
		_name2int[name]=value;
		_int2name[value]=name;
	}

	ShaderDefines._toText=function(value,_int2name,_int2nameMap){
		var r=_int2nameMap[value];
		if (r)return r;
		var o={};
		var d=1;
		for (var i=0;i < 32;i++){
			d=1 << i;
			if (d > value)break ;
			if (value & d){
				var name=_int2name[d];
				name && (o[name]="");
			}
		}
		_int2nameMap[value]=o;
		return o;
	}

	ShaderDefines._toInt=function(names,_name2int){
		var words=names.split('.');
		var num=0;
		for (var i=0,n=words.length;i < n;i++){
			var value=_name2int[words[i]];
			if (!value)throw new Error("Defines to int err:"+names+"/"+words[i]);
			num |=value;
		}
		return num;
	}

	return ShaderDefines;
})()


/**
*这里销毁的问题，后面待确认
*/
//class laya.webgl.shader.d2.skinAnishader.SkinMesh
var SkinMesh=(function(){
	function SkinMesh(){
		this.mVBBuffer=null;
		this.mIBBuffer=null;
		this.mVBData=null;
		this.mIBData=null;
		this.mEleNum=0;
		this.mTexture=null;
		this.transform=null;
		this._vs=null;
		this._ps=null;
		this._indexStart=-1;
		this._verticles=null;
		this._uvs=null;
		this._tempMatrix=new Matrix();
	}

	__class(SkinMesh,'laya.webgl.shader.d2.skinAnishader.SkinMesh');
	var __proto=SkinMesh.prototype;
	__proto.init=function(texture,vs,ps){
		if (vs){
			this._vs=vs;
			}else {
			this._vs=[];
			var tWidth=texture.width;
			var tHeight=texture.height;
			var tRed=1;
			var tGreed=1;
			var tBlue=1;
			var tAlpha=1;
			this._vs.push(0,0,0,0,tRed,tGreed,tBlue,tAlpha);
			this._vs.push(tWidth,0,1,0,tRed,tGreed,tBlue,tAlpha);
			this._vs.push(tWidth,tHeight,1,1,tRed,tGreed,tBlue,tAlpha);
			this._vs.push(0,tHeight,0,1,tRed,tGreed,tBlue,tAlpha);
		}
		if (ps){
			this._ps=ps;
			}else {
			if (!SkinMesh._defaultPS){
				SkinMesh._defaultPS=[];
				SkinMesh._defaultPS.push(0,1,3,3,1,2);
			}
			this._ps=SkinMesh._defaultPS;
		}
		this.mVBData=new Float32Array(this._vs);
		this.mIBData=new Uint16Array(this._ps.length);
		this.mIBData["start"]=-1;
		this.mEleNum=this._ps.length;
		this.mTexture=texture;
	}

	__proto.init2=function(texture,vs,ps,verticles,uvs){
		if (this.transform)this.transform=null;
		if (ps){
			this._ps=ps;
			}else {
			this._ps=[];
			this._ps.push(0,1,3,3,1,2);
		}
		this._verticles=verticles;
		this._uvs=uvs;
		this.mEleNum=this._ps.length;
		this.mTexture=texture;
		if (Render.isConchNode || Render.isConchApp){
			this._initMyData();
			this.mVBData=new Float32Array(this._vs);
		}
	}

	__proto._initMyData=function(){
		var vsI=0;
		var vI=0;
		var vLen=this._verticles.length;
		var tempVLen=vLen *4;
		this._vs=SkinMesh._tempVS;
		var insertNew=false;
		if (Render.isConchNode || Render.isConchApp){
			this._vs.length=tempVLen;
			insertNew=true;
			}else{
			if (this._vs.length < tempVLen){
				this._vs.length=tempVLen;
				insertNew=true;
			}
		}
		SkinMesh._tVSLen=tempVLen;
		if (insertNew){
			while (vsI < tempVLen){
				this._vs[vsI]=this._verticles[vI];
				this._vs[vsI+1]=this._verticles[vI+1];
				this._vs[vsI+2]=this._uvs[vI];
				this._vs[vsI+3]=this._uvs[vI+1];
				this._vs[vsI+4]=1;
				this._vs[vsI+5]=1;
				this._vs[vsI+6]=1;
				this._vs[vsI+7]=1;
				vsI+=8;
				vI+=2;
			}
			}else{
			while (vsI < tempVLen){
				this._vs[vsI]=this._verticles[vI];
				this._vs[vsI+1]=this._verticles[vI+1];
				this._vs[vsI+2]=this._uvs[vI];
				this._vs[vsI+3]=this._uvs[vI+1];
				vsI+=8;
				vI+=2;
			}
		}
	}

	__proto.getData2=function(vb,ib,start){
		this.mVBBuffer=vb;
		this.mIBBuffer=ib;
		this._initMyData();
		vb.appendEx2(this._vs,Float32Array,SkinMesh._tVSLen,4);
		this._indexStart=ib._byteLength;
		var tIB;
		tIB=SkinMesh._tempIB;
		if (tIB.length < this._ps.length){
			tIB.length=this._ps.length;
		}
		for (var i=0,n=this._ps.length;i < n;i++){
			tIB[i]=this._ps[i]+start;
		}
		ib.appendEx2(tIB,Uint16Array,this._ps.length,2);
	}

	__proto.getData=function(vb,ib,start){
		this.mVBBuffer=vb;
		this.mIBBuffer=ib;
		vb.append(this.mVBData);
		this._indexStart=ib._byteLength;
		if (this.mIBData["start"] !=start){
			for (var i=0,n=this._ps.length;i < n;i++){
				this.mIBData[i]=this._ps[i]+start;
			}
			this.mIBData["start"]=start;
		}
		ib.append(this.mIBData);
	}

	__proto.render=function(context,x,y){
		if (Render.isWebGL && this.mTexture){
			context._renderKey=0;
			context._shader2D.glTexture=null;
			SkinMeshBuffer.getInstance().addSkinMesh(this);
			var tempSubmit=Submit.createShape(context,this.mIBBuffer,this.mVBBuffer,this.mEleNum,this._indexStart,Value2D.create(0x200,0));
			this.transform || (this.transform=Matrix.EMPTY);
			this.transform.translate(x,y);
			Matrix.mul(this.transform,context._curMat,this._tempMatrix);
			this.transform.translate(-x,-y);
			var tShaderValue=tempSubmit.shaderValue;
			var tArray=tShaderValue.u_mmat2||RenderState2D.getMatrArray();
			RenderState2D.mat2MatArray(this._tempMatrix,tArray);
			tShaderValue.textureHost=this.mTexture;
			tShaderValue.offsetX=0;
			tShaderValue.offsetY=0;
			tShaderValue.u_mmat2=tArray;
			tShaderValue.ALPHA=context._shader2D.ALPHA;
			context._submits[context._submits._length++]=tempSubmit;
		}
		else if (Render.isConchApp&&this.mTexture){
			this.transform || (this.transform=Matrix.EMPTY);
			context.setSkinMesh&&context.setSkinMesh(x,y,this._ps,this.mVBData,this.mEleNum,0,this.mTexture,this.transform);
		}
	}

	SkinMesh._tempVS=[];
	SkinMesh._tempIB=[];
	SkinMesh._defaultPS=null;
	SkinMesh._tVSLen=0;
	return SkinMesh;
})()


//class laya.webgl.shader.d2.skinAnishader.SkinMeshBuffer
var SkinMeshBuffer=(function(){
	function SkinMeshBuffer(){
		this.ib=null;
		this.vb=null;
		var gl=WebGL.mainContext;
		this.ib=IndexBuffer2D.create(0x88E8);
		this.vb=VertexBuffer2D.create(8);
	}

	__class(SkinMeshBuffer,'laya.webgl.shader.d2.skinAnishader.SkinMeshBuffer');
	var __proto=SkinMeshBuffer.prototype;
	__proto.addSkinMesh=function(skinMesh){
		skinMesh.getData2(this.vb,this.ib,this.vb._byteLength / 32);
	}

	__proto.reset=function(){
		this.vb.clear();
		this.ib.clear();
	}

	SkinMeshBuffer.getInstance=function(){
		return SkinMeshBuffer.instance=SkinMeshBuffer.instance|| new SkinMeshBuffer();
	}

	SkinMeshBuffer.instance=null;
	return SkinMeshBuffer;
})()


//此类可以减少代码
//class laya.webgl.shapes.BasePoly
var BasePoly=(function(){
	function BasePoly(x,y,width,height,edges,color,borderWidth,borderColor,round){
		//this.x=NaN;
		//this.y=NaN;
		//this.r=NaN;
		//this.width=NaN;
		//this.height=NaN;
		//this.edges=NaN;
		this.r0=0
		//this.color=0;
		//this.borderColor=NaN;
		//this.borderWidth=NaN;
		//this.round=0;
		this.fill=true;
		//this.mUint16Array=null;
		//this.mFloat32Array=null;
		this.r1=Math.PI / 2;
		(round===void 0)&& (round=0);
		this.x=x;
		this.y=y;
		this.width=width;
		this.height=height;
		this.edges=edges;
		this.color=color;
		this.borderWidth=borderWidth;
		this.borderColor=borderColor;
	}

	__class(BasePoly,'laya.webgl.shapes.BasePoly');
	var __proto=BasePoly.prototype;
	Laya.imps(__proto,{"laya.webgl.shapes.IShape":true})
	__proto.getData=function(ib,vb,start){}
	__proto.rebuild=function(points){}
	__proto.setMatrix=function(mat){}
	__proto.needUpdate=function(mat){
		return true;
	}

	__proto.sector=function(outVert,outIndex,start){
		var x=this.x,y=this.y,edges=this.edges,seg=(this.r1-this.r0)/ edges;
		var w=this.width,h=this.height,color=this.color;
		var r=((color >> 16)& 0x0000ff)/ 255,g=((color >> 8)& 0xff)/ 255,b=(color & 0x0000ff)/ 255;
		outVert.push(x,y,r,g,b);
		for (var i=0;i < edges+1;i++){
			outVert.push(x+Math.sin(seg *i+this.r0)*w,y+Math.cos(seg *i+this.r0)*h);
			outVert.push(r,g,b);
		}
		for (i=0;i < edges;i++){
			outIndex.push(start,start+i+1,start+i+2);
		}
	}

	//用于画线
	__proto.createLine2=function(p,indices,lineWidth,len,outVertex,indexCount){
		var points=p.concat();
		var result=outVertex;
		var color=this.borderColor;
		var r=((color >> 16)& 0x0000ff)/ 255,g=((color >> 8)& 0xff)/ 255,b=(color & 0x0000ff)/ 255;
		var length=points.length / 2;
		var iStart=len,w=lineWidth / 2;
		var px,py,p1x,p1y,p2x,p2y,p3x,p3y;
		var perpx,perpy,perp2x,perp2y,perp3x,perp3y;
		var a1,b1,c1,a2,b2,c2;
		var denom,pdist,dist;
		p1x=points[0];
		p1y=points[1];
		p2x=points[2];
		p2y=points[3];
		perpx=-(p1y-p2y);
		perpy=p1x-p2x;
		dist=Math.sqrt(perpx *perpx+perpy *perpy);
		perpx=perpx / dist *w;
		perpy=perpy / dist *w;
		result.push(p1x-perpx+this.x,p1y-perpy+this.y,r,g,b,p1x+perpx+this.x,p1y+perpy+this.y,r,g,b);
		for (var i=1;i < length-1;i++){
			p1x=points[(i-1)*2];
			p1y=points[(i-1)*2+1];
			p2x=points[(i)*2];
			p2y=points[(i)*2+1];
			p3x=points[(i+1)*2];
			p3y=points[(i+1)*2+1];
			perpx=-(p1y-p2y);
			perpy=p1x-p2x;
			dist=Math.sqrt(perpx *perpx+perpy *perpy);
			perpx=perpx / dist *w;
			perpy=perpy / dist *w;
			perp2x=-(p2y-p3y);
			perp2y=p2x-p3x;
			dist=Math.sqrt(perp2x *perp2x+perp2y *perp2y);
			perp2x=perp2x / dist *w;
			perp2y=perp2y / dist *w;
			a1=(-perpy+p1y)-(-perpy+p2y);
			b1=(-perpx+p2x)-(-perpx+p1x);
			c1=(-perpx+p1x)*(-perpy+p2y)-(-perpx+p2x)*(-perpy+p1y);
			a2=(-perp2y+p3y)-(-perp2y+p2y);
			b2=(-perp2x+p2x)-(-perp2x+p3x);
			c2=(-perp2x+p3x)*(-perp2y+p2y)-(-perp2x+p2x)*(-perp2y+p3y);
			denom=a1 *b2-a2 *b1;
			if (Math.abs(denom)< 0.1){
				denom+=10.1;
				result.push(p2x-perpx+this.x,p2y-perpy+this.y,r,g,b,p2x+perpx+this.x,p2y+perpy+this.y,r,g,b);
				continue ;
			}
			px=(b1 *c2-b2 *c1)/ denom;
			py=(a2 *c1-a1 *c2)/ denom;
			pdist=(px-p2x)*(px-p2x)+(py-p2y)+(py-p2y);
			result.push(px+this.x,py+this.y,r,g,b,p2x-(px-p2x)+this.x,p2y-(py-p2y)+this.y,r,g,b);
		}
		p1x=points[points.length-4];
		p1y=points[points.length-3];
		p2x=points[points.length-2];
		p2y=points[points.length-1];
		perpx=-(p1y-p2y);
		perpy=p1x-p2x;
		dist=Math.sqrt(perpx *perpx+perpy *perpy);
		perpx=perpx / dist *w;
		perpy=perpy / dist *w;
		result.push(p2x-perpx+this.x,p2y-perpy+this.y,r,g,b,p2x+perpx+this.x,p2y+perpy+this.y,r,g,b);
		var groupLen=indexCount;
		for (i=1;i < groupLen;i++){
			indices.push(iStart+(i-1)*2,iStart+(i-1)*2+1,iStart+i *2+1,iStart+i *2+1,iStart+i *2,iStart+(i-1)*2);
		}
		return result;
	}

	// /*,outVertex:Array,outIndex:Array*/
	__proto.createLine=function(p,indices,lineWidth,len){
		var points=p.concat();
		var result=p;
		var color=this.borderColor;
		var r=((color >> 16)& 0x0000ff)/ 255,g=((color >> 8)& 0xff)/ 255,b=(color & 0x0000ff)/ 255;
		points.splice(0,5);
		var length=points.length / 5;
		var iStart=len,w=lineWidth / 2;
		var px,py,p1x,p1y,p2x,p2y,p3x,p3y;
		var perpx,perpy,perp2x,perp2y,perp3x,perp3y;
		var a1,b1,c1,a2,b2,c2;
		var denom,pdist,dist;
		p1x=points[0];
		p1y=points[1];
		p2x=points[5];
		p2y=points[6];
		perpx=-(p1y-p2y);
		perpy=p1x-p2x;
		dist=Math.sqrt(perpx *perpx+perpy *perpy);
		perpx=perpx / dist *w;
		perpy=perpy / dist *w;
		result.push(p1x-perpx,p1y-perpy,r,g,b,p1x+perpx,p1y+perpy,r,g,b);
		for (var i=1;i < length-1;i++){
			p1x=points[(i-1)*5];
			p1y=points[(i-1)*5+1];
			p2x=points[(i)*5];
			p2y=points[(i)*5+1];
			p3x=points[(i+1)*5];
			p3y=points[(i+1)*5+1];
			perpx=-(p1y-p2y);
			perpy=p1x-p2x;
			dist=Math.sqrt(perpx *perpx+perpy *perpy);
			perpx=perpx / dist *w;
			perpy=perpy / dist *w;
			perp2x=-(p2y-p3y);
			perp2y=p2x-p3x;
			dist=Math.sqrt(perp2x *perp2x+perp2y *perp2y);
			perp2x=perp2x / dist *w;
			perp2y=perp2y / dist *w;
			a1=(-perpy+p1y)-(-perpy+p2y);
			b1=(-perpx+p2x)-(-perpx+p1x);
			c1=(-perpx+p1x)*(-perpy+p2y)-(-perpx+p2x)*(-perpy+p1y);
			a2=(-perp2y+p3y)-(-perp2y+p2y);
			b2=(-perp2x+p2x)-(-perp2x+p3x);
			c2=(-perp2x+p3x)*(-perp2y+p2y)-(-perp2x+p2x)*(-perp2y+p3y);
			denom=a1 *b2-a2 *b1;
			if (Math.abs(denom)< 0.1){
				denom+=10.1;
				result.push(p2x-perpx,p2y-perpy,r,g,b,p2x+perpx,p2y+perpy,r,g,b);
				continue ;
			}
			px=(b1 *c2-b2 *c1)/ denom;
			py=(a2 *c1-a1 *c2)/ denom;
			pdist=(px-p2x)*(px-p2x)+(py-p2y)+(py-p2y);
			result.push(px,py,r,g,b,p2x-(px-p2x),p2y-(py-p2y),r,g,b);
		}
		p1x=points[points.length-10];
		p1y=points[points.length-9];
		p2x=points[points.length-5];
		p2y=points[points.length-4];
		perpx=-(p1y-p2y);
		perpy=p1x-p2x;
		dist=Math.sqrt(perpx *perpx+perpy *perpy);
		perpx=perpx / dist *w;
		perpy=perpy / dist *w;
		result.push(p2x-perpx,p2y-perpy,r,g,b,p2x+perpx,p2y+perpy,r,g,b);
		var groupLen=this.edges+1;
		for (i=1;i < groupLen;i++){
			indices.push(iStart+(i-1)*2,iStart+(i-1)*2+1,iStart+i *2+1,iStart+i *2+1,iStart+i *2,iStart+(i-1)*2);
		}
		return result;
	}

	//闭合路径
	__proto.createLoopLine=function(p,indices,lineWidth,len,outVertex,outIndex){
		var points=p.concat();
		var result=outVertex ? outVertex :p;
		var color=this.borderColor;
		var r=((color >> 16)& 0x0000ff)/ 255,g=((color >> 8)& 0xff)/ 255,b=(color & 0x0000ff)/ 255;
		points.splice(0,5);
		var firstPoint=[points[0],points[1]];
		var lastPoint=[points[points.length-5],points[points.length-4]];
		var midPointX=lastPoint[0]+(firstPoint[0]-lastPoint[0])*0.5;
		var midPointY=lastPoint[1]+(firstPoint[1]-lastPoint[1])*0.5;
		points.unshift(midPointX,midPointY,0,0,0);
		points.push(midPointX,midPointY,0,0,0);
		var length=points.length / 5;
		var iStart=len,w=lineWidth / 2;
		var px,py,p1x,p1y,p2x,p2y,p3x,p3y;
		var perpx,perpy,perp2x,perp2y,perp3x,perp3y;
		var a1,b1,c1,a2,b2,c2;
		var denom,pdist,dist;
		p1x=points[0];
		p1y=points[1];
		p2x=points[5];
		p2y=points[6];
		perpx=-(p1y-p2y);
		perpy=p1x-p2x;
		dist=Math.sqrt(perpx *perpx+perpy *perpy);
		perpx=perpx / dist *w;
		perpy=perpy / dist *w;
		result.push(p1x-perpx,p1y-perpy,r,g,b,p1x+perpx,p1y+perpy,r,g,b);
		for (var i=1;i < length-1;i++){
			p1x=points[(i-1)*5];
			p1y=points[(i-1)*5+1];
			p2x=points[(i)*5];
			p2y=points[(i)*5+1];
			p3x=points[(i+1)*5];
			p3y=points[(i+1)*5+1];
			perpx=-(p1y-p2y);
			perpy=p1x-p2x;
			dist=Math.sqrt(perpx *perpx+perpy *perpy);
			perpx=perpx / dist *w;
			perpy=perpy / dist *w;
			perp2x=-(p2y-p3y);
			perp2y=p2x-p3x;
			dist=Math.sqrt(perp2x *perp2x+perp2y *perp2y);
			perp2x=perp2x / dist *w;
			perp2y=perp2y / dist *w;
			a1=(-perpy+p1y)-(-perpy+p2y);
			b1=(-perpx+p2x)-(-perpx+p1x);
			c1=(-perpx+p1x)*(-perpy+p2y)-(-perpx+p2x)*(-perpy+p1y);
			a2=(-perp2y+p3y)-(-perp2y+p2y);
			b2=(-perp2x+p2x)-(-perp2x+p3x);
			c2=(-perp2x+p3x)*(-perp2y+p2y)-(-perp2x+p2x)*(-perp2y+p3y);
			denom=a1 *b2-a2 *b1;
			if (Math.abs(denom)< 0.1){
				denom+=10.1;
				result.push(p2x-perpx,p2y-perpy,r,g,b,p2x+perpx,p2y+perpy,r,g,b);
				continue ;
			}
			px=(b1 *c2-b2 *c1)/ denom;
			py=(a2 *c1-a1 *c2)/ denom;
			pdist=(px-p2x)*(px-p2x)+(py-p2y)+(py-p2y);
			result.push(px,py,r,g,b,p2x-(px-p2x),p2y-(py-p2y),r,g,b);
		}
		if (outIndex){
			indices=outIndex;
		};
		var groupLen=this.edges+1;
		for (i=1;i < groupLen;i++){
			indices.push(iStart+(i-1)*2,iStart+(i-1)*2+1,iStart+i *2+1,iStart+i *2+1,iStart+i *2,iStart+(i-1)*2);
		}
		indices.push(iStart+(i-1)*2,iStart+(i-1)*2+1,iStart+1,iStart+1,iStart,iStart+(i-1)*2);
		return result;
	}

	return BasePoly;
})()


//class laya.webgl.shapes.Earcut
var Earcut=(function(){
	function Earcut(){}
	__class(Earcut,'laya.webgl.shapes.Earcut');
	Earcut.earcut=function(data,holeIndices,dim){
		dim=dim || 2;
		var hasHoles=holeIndices && holeIndices.length,
		outerLen=hasHoles ? holeIndices[0] *dim :data.length,
		outerNode=Earcut.linkedList(data,0,outerLen,dim,true),
		triangles=[];
		if (!outerNode)return triangles;
		var minX,minY,maxX,maxY,x,y,invSize;
		if (hasHoles)outerNode=Earcut.eliminateHoles(data,holeIndices,outerNode,dim);
		if (data.length > 80 *dim){
			minX=maxX=data[0];
			minY=maxY=data[1];
			for (var i=dim;i < outerLen;i+=dim){
				x=data[i];
				y=data[i+1];
				if (x < minX)minX=x;
				if (y < minY)minY=y;
				if (x > maxX)maxX=x;
				if (y > maxY)maxY=y;
			}
			invSize=Math.max(maxX-minX,maxY-minY);
			invSize=invSize!==0 ? 1 / invSize :0;
		}
		Earcut.earcutLinked(outerNode,triangles,dim,minX,minY,invSize);
		return triangles;
	}

	Earcut.linkedList=function(data,start,end,dim,clockwise){
		var i,last;
		if (clockwise===(Earcut.signedArea(data,start,end,dim)> 0)){
			for (i=start;i < end;i+=dim)last=Earcut.insertNode(i,data[i],data[i+1],last);
			}else {
			for (i=end-dim;i >=start;i-=dim)last=Earcut.insertNode(i,data[i],data[i+1],last);
		}
		if (last && Earcut.equals(last,last.next)){
			Earcut.removeNode(last);
			last=last.next;
		}
		return last;
	}

	Earcut.filterPoints=function(start,end){
		if (!start)return start;
		if (!end)end=start;
		var p=start,
		again;
		do {
			again=false;
			if (!p.steiner && (Earcut.equals(p,p.next)|| Earcut.area(p.prev,p,p.next)===0)){
				Earcut.removeNode(p);
				p=end=p.prev;
				if (p===p.next)break ;
				again=true;
				}else {
				p=p.next;
			}
		}while (again || p!==end);
		return end;
	}

	Earcut.earcutLinked=function(ear,triangles,dim,minX,minY,invSize,pass){
		if (!ear)return;
		if (!pass && invSize)Earcut.indexCurve(ear,minX,minY,invSize);
		var stop=ear,
		prev,next;
		while (ear.prev!==ear.next){
			prev=ear.prev;
			next=ear.next;
			if (invSize ? Earcut.isEarHashed(ear,minX,minY,invSize):Earcut.isEar(ear)){
				triangles.push(prev.i / dim);
				triangles.push(ear.i / dim);
				triangles.push(next.i / dim);
				Earcut.removeNode(ear);
				ear=next.next;
				stop=next.next;
				continue ;
			}
			ear=next;
			if (ear===stop){
				if (!pass){
					Earcut.earcutLinked(Earcut.filterPoints(ear,null),triangles,dim,minX,minY,invSize,1);
					}else if (pass===1){
					ear=Earcut.cureLocalIntersections(ear,triangles,dim);
					Earcut.earcutLinked(ear,triangles,dim,minX,minY,invSize,2);
					}else if (pass===2){
					Earcut.splitEarcut(ear,triangles,dim,minX,minY,invSize);
				}
				break ;
			}
		}
	}

	Earcut.isEar=function(ear){
		var a=ear.prev,
		b=ear,
		c=ear.next;
		if (Earcut.area(a,b,c)>=0)return false;
		var p=ear.next.next;
		while (p!==ear.prev){
			if (Earcut.pointInTriangle(a.x,a.y,b.x,b.y,c.x,c.y,p.x,p.y)&&
				Earcut.area(p.prev,p,p.next)>=0)return false;
			p=p.next;
		}
		return true;
	}

	Earcut.isEarHashed=function(ear,minX,minY,invSize){
		var a=ear.prev,
		b=ear,
		c=ear.next;
		if (Earcut.area(a,b,c)>=0)return false;
		var minTX=a.x < b.x ? (a.x < c.x ? a.x :c.x):(b.x < c.x ? b.x :c.x),
		minTY=a.y < b.y ? (a.y < c.y ? a.y :c.y):(b.y < c.y ? b.y :c.y),
		maxTX=a.x > b.x ? (a.x > c.x ? a.x :c.x):(b.x > c.x ? b.x :c.x),
		maxTY=a.y > b.y ? (a.y > c.y ? a.y :c.y):(b.y > c.y ? b.y :c.y);
		var minZ=Earcut.zOrder(minTX,minTY,minX,minY,invSize),
		maxZ=Earcut.zOrder(maxTX,maxTY,minX,minY,invSize);
		var p=ear.nextZ;
		while (p && p.z <=maxZ){
			if (p!==ear.prev && p!==ear.next &&
				Earcut.pointInTriangle(a.x,a.y,b.x,b.y,c.x,c.y,p.x,p.y)&&
			Earcut.area(p.prev,p,p.next)>=0)return false;
			p=p.nextZ;
		}
		p=ear.prevZ;
		while (p && p.z >=minZ){
			if (p!==ear.prev && p!==ear.next &&
				Earcut.pointInTriangle(a.x,a.y,b.x,b.y,c.x,c.y,p.x,p.y)&&
			Earcut.area(p.prev,p,p.next)>=0)return false;
			p=p.prevZ;
		}
		return true;
	}

	Earcut.cureLocalIntersections=function(start,triangles,dim){
		var p=start;
		do {
			var a=p.prev,
			b=p.next.next;
			if (!Earcut.equals(a,b)&& Earcut.intersects(a,p,p.next,b)&& Earcut.locallyInside(a,b)&& Earcut.locallyInside(b,a)){
				triangles.push(a.i / dim);
				triangles.push(p.i / dim);
				triangles.push(b.i / dim);
				Earcut.removeNode(p);
				Earcut.removeNode(p.next);
				p=start=b;
			}
			p=p.next;
		}while (p!==start);
		return p;
	}

	Earcut.splitEarcut=function(start,triangles,dim,minX,minY,invSize){
		var a=start;
		do {
			var b=a.next.next;
			while (b!==a.prev){
				if (a.i!==b.i && Earcut.isValidDiagonal(a,b)){
					var c=Earcut.splitPolygon(a,b);
					a=Earcut.filterPoints(a,a.next);
					c=Earcut.filterPoints(c,c.next);
					Earcut.earcutLinked(a,triangles,dim,minX,minY,invSize);
					Earcut.earcutLinked(c,triangles,dim,minX,minY,invSize);
					return;
				}
				b=b.next;
			}
			a=a.next;
		}while (a!==start);
	}

	Earcut.eliminateHoles=function(data,holeIndices,outerNode,dim){
		var queue=[],
		i,len,start,end,list;
		for (i=0,len=holeIndices.length;i < len;i++){
			start=holeIndices[i] *dim;
			end=i < len-1 ? holeIndices[i+1] *dim :data.length;
			list=Earcut.linkedList(data,start,end,dim,false);
			if (list===list.next)list.steiner=true;
			queue.push(Earcut.getLeftmost(list));
		}
		queue.sort(Earcut.compareX);
		for (i=0;i < queue.length;i++){
			Earcut.eliminateHole(queue[i],outerNode);
			outerNode=Earcut.filterPoints(outerNode,outerNode.next);
		}
		return outerNode;
	}

	Earcut.compareX=function(a,b){
		return a.x-b.x;
	}

	Earcut.eliminateHole=function(hole,outerNode){
		outerNode=Earcut.findHoleBridge(hole,outerNode);
		if (outerNode){
			var b=Earcut.splitPolygon(outerNode,hole);
			Earcut.filterPoints(b,b.next);
		}
	}

	Earcut.findHoleBridge=function(hole,outerNode){
		var p=outerNode,
		hx=hole.x,
		hy=hole.y,
		qx=-Infinity,
		m;
		do {
			if (hy <=p.y && hy >=p.next.y && p.next.y!==p.y){
				var x=p.x+(hy-p.y)*(p.next.x-p.x)/ (p.next.y-p.y);
				if (x <=hx && x > qx){
					qx=x;
					if (x===hx){
						if (hy===p.y)return p;
						if (hy===p.next.y)return p.next;
					}
					m=p.x < p.next.x ? p :p.next;
				}
			}
			p=p.next;
		}while (p!==outerNode);
		if (!m)return null;
		if (hx===qx)return m.prev;
		var stop=m,
		mx=m.x,
		my=m.y,
		tanMin=Infinity,
		tan;
		p=m.next;
		while (p!==stop){
			if (hx >=p.x && p.x >=mx && hx!==p.x &&
				Earcut.pointInTriangle(hy < my ? hx :qx,hy,mx,my,hy < my ? qx :hx,hy,p.x,p.y)){
				tan=Math.abs(hy-p.y)/ (hx-p.x);
				if ((tan < tanMin || (tan===tanMin && p.x > m.x))&& Earcut.locallyInside(p,hole)){
					m=p;
					tanMin=tan;
				}
			}
			p=p.next;
		}
		return m;
	}

	Earcut.indexCurve=function(start,minX,minY,invSize){
		var p=start;
		do {
			if (p.z===null)p.z=Earcut.zOrder(p.x,p.y,minX,minY,invSize);
			p.prevZ=p.prev;
			p.nextZ=p.next;
			p=p.next;
		}while (p!==start);
		p.prevZ.nextZ=null;
		p.prevZ=null;
		Earcut.sortLinked(p);
	}

	Earcut.sortLinked=function(list){
		var i,p,q,e,tail,numMerges,pSize,qSize,
		inSize=1;
		do {
			p=list;
			list=null;
			tail=null;
			numMerges=0;
			while (p){
				numMerges++;
				q=p;
				pSize=0;
				for (i=0;i < inSize;i++){
					pSize++;
					q=q.nextZ;
					if (!q)break ;
				}
				qSize=inSize;
				while (pSize > 0 || (qSize > 0 && q)){
					if (pSize!==0 && (qSize===0 || !q || p.z <=q.z)){
						e=p;
						p=p.nextZ;
						pSize--;
						}else {
						e=q;
						q=q.nextZ;
						qSize--;
					}
					if (tail)tail.nextZ=e;
					else list=e;
					e.prevZ=tail;
					tail=e;
				}
				p=q;
			}
			tail.nextZ=null;
			inSize *=2;
		}while (numMerges > 1);
		return list;
	}

	Earcut.zOrder=function(x,y,minX,minY,invSize){
		x=32767 *(x-minX)*invSize;
		y=32767 *(y-minY)*invSize;
		x=(x | (x << 8))& 0x00FF00FF;
		x=(x | (x << 4))& 0x0F0F0F0F;
		x=(x | (x << 2))& 0x33333333;
		x=(x | (x << 1))& 0x55555555;
		y=(y | (y << 8))& 0x00FF00FF;
		y=(y | (y << 4))& 0x0F0F0F0F;
		y=(y | (y << 2))& 0x33333333;
		y=(y | (y << 1))& 0x55555555;
		return x | (y << 1);
	}

	Earcut.getLeftmost=function(start){
		var p=start,
		leftmost=start;
		do {
			if (p.x < leftmost.x)leftmost=p;
			p=p.next;
		}while (p!==start);
		return leftmost;
	}

	Earcut.pointInTriangle=function(ax,ay,bx,by,cx,cy,px,py){
		return (cx-px)*(ay-py)-(ax-px)*(cy-py)>=0 &&
		(ax-px)*(by-py)-(bx-px)*(ay-py)>=0 &&
		(bx-px)*(cy-py)-(cx-px)*(by-py)>=0;
	}

	Earcut.isValidDiagonal=function(a,b){
		return a.next.i!==b.i && a.prev.i!==b.i && !Earcut.intersectsPolygon(a,b)&&
		Earcut.locallyInside(a,b)&& Earcut.locallyInside(b,a)&& Earcut.middleInside(a,b);
	}

	Earcut.area=function(p,q,r){
		return (q.y-p.y)*(r.x-q.x)-(q.x-p.x)*(r.y-q.y);
	}

	Earcut.equals=function(p1,p2){
		return p1.x===p2.x && p1.y===p2.y;
	}

	Earcut.intersects=function(p1,q1,p2,q2){
		if ((Earcut.equals(p1,q1)&& Earcut.equals(p2,q2))||
			(Earcut.equals(p1,q2)&& Earcut.equals(p2,q1)))return true;
		return Earcut.area(p1,q1,p2)> 0!==Earcut.area(p1,q1,q2)> 0 &&
		Earcut.area(p2,q2,p1)> 0!==Earcut.area(p2,q2,q1)> 0;
	}

	Earcut.intersectsPolygon=function(a,b){
		var p=a;
		do {
			if (p.i!==a.i && p.next.i!==a.i && p.i!==b.i && p.next.i!==b.i &&
				Earcut.intersects(p,p.next,a,b))return true;
			p=p.next;
		}while (p!==a);
		return false;
	}

	Earcut.locallyInside=function(a,b){
		return Earcut.area(a.prev,a,a.next)< 0 ?
		Earcut.area(a,b,a.next)>=0 && Earcut.area(a,a.prev,b)>=0 :
		Earcut.area(a,b,a.prev)< 0 || Earcut.area(a,a.next,b)< 0;
	}

	Earcut.middleInside=function(a,b){
		var p=a,
		inside=false,
		px=(a.x+b.x)/ 2,
		py=(a.y+b.y)/ 2;
		do {
			if (((p.y > py)!==(p.next.y > py))&& p.next.y!==p.y &&
				(px < (p.next.x-p.x)*(py-p.y)/ (p.next.y-p.y)+p.x))
			inside=!inside;
			p=p.next;
		}while (p!==a);
		return inside;
	}

	Earcut.splitPolygon=function(a,b){
		var a2=new EarcutNode(a.i,a.x,a.y),
		b2=new EarcutNode(b.i,b.x,b.y),
		an=a.next,
		bp=b.prev;
		a.next=b;
		b.prev=a;
		a2.next=an;
		an.prev=a2;
		b2.next=a2;
		a2.prev=b2;
		bp.next=b2;
		b2.prev=bp;
		return b2;
	}

	Earcut.insertNode=function(i,x,y,last){
		var p=new EarcutNode(i,x,y);
		if (!last){
			p.prev=p;
			p.next=p;
			}else {
			p.next=last.next;
			p.prev=last;
			last.next.prev=p;
			last.next=p;
		}
		return p;
	}

	Earcut.removeNode=function(p){
		p.next.prev=p.prev;
		p.prev.next=p.next;
		if (p.prevZ)p.prevZ.nextZ=p.nextZ;
		if (p.nextZ)p.nextZ.prevZ=p.prevZ;
	}

	Earcut.signedArea=function(data,start,end,dim){
		var sum=0;
		for (var i=start,j=end-dim;i < end;i+=dim){
			sum+=(data[j]-data[i])*(data[i+1]+data[j+1]);
			j=i;
		}
		return sum;
	}

	return Earcut;
})()


//class laya.webgl.shapes.EarcutNode
var EarcutNode=(function(){
	function EarcutNode(i,x,y){
		this.i=null;
		this.x=null;
		this.y=null;
		this.prev=null;
		this.next=null;
		this.z=null;
		this.prevZ=null;
		this.nextZ=null;
		this.steiner=null;
		this.i=i;
		this.x=x;
		this.y=y;
		this.prev=null;
		this.next=null;
		this.z=null;
		this.prevZ=null;
		this.nextZ=null;
		this.steiner=false;
	}

	__class(EarcutNode,'laya.webgl.shapes.EarcutNode');
	return EarcutNode;
})()


//class laya.webgl.submit.Submit
var Submit=(function(){
	function Submit(renderType){
		//this._selfVb=null;
		//this._ib=null;
		//this._blendFn=null;
		//this._renderType=0;
		//this._vb=null;
		// 从VB中什么地方开始画，画到哪
		//this._startIdx=0;
		//this._numEle=0;
		//this.shaderValue=null;
		(renderType===void 0)&& (renderType=10000);
		this._renderType=renderType;
	}

	__class(Submit,'laya.webgl.submit.Submit');
	var __proto=Submit.prototype;
	Laya.imps(__proto,{"laya.webgl.submit.ISubmit":true})
	__proto.releaseRender=function(){
		var cache=Submit._cache;
		cache[cache._length++]=this;
		this.shaderValue.release();
		this._vb=null;
	}

	__proto.getRenderType=function(){
		return this._renderType;
	}

	__proto.renderSubmit=function(){
		if (this._numEle===0)return 1;
		var _tex=this.shaderValue.textureHost;
		if (_tex){
			var source=_tex.source;
			if (!_tex.bitmap || !source)
				return 1;
			this.shaderValue.texture=source;
		}
		this._vb.bind_upload(this._ib);
		var gl=WebGL.mainContext;
		this.shaderValue.upload();
		if (BlendMode.activeBlendFunction!==this._blendFn){
			gl.enable(0x0BE2);
			this._blendFn(gl);
			BlendMode.activeBlendFunction=this._blendFn;
		}
		Stat.drawCall++;
		Stat.trianglesFaces+=this._numEle / 3;
		gl.drawElements(0x0004,this._numEle,0x1403,this._startIdx);
		return 1;
	}

	Submit.__init__=function(){
		var s=Submit.RENDERBASE=new Submit(-1);
		s.shaderValue=new Value2D(0,0);
		s.shaderValue.ALPHA=-1234;
	}

	Submit.createSubmit=function(context,ib,vb,pos,sv){
		var o=Submit._cache._length ? Submit._cache[--Submit._cache._length] :new Submit();
		if (vb==null){
			vb=o._selfVb || (o._selfVb=VertexBuffer2D.create(-1));
			vb.clear();
			pos=0;
		}
		o._ib=ib;
		o._vb=vb;
		o._startIdx=pos *CONST3D2D.BYTES_PIDX;
		o._numEle=0;
		var blendType=context._nBlendType;
		o._blendFn=context._targets ? BlendMode.targetFns[blendType] :BlendMode.fns[blendType];
		o.shaderValue=sv;
		o.shaderValue.setValue(context._shader2D);
		var filters=context._shader2D.filters;
		filters && o.shaderValue.setFilters(filters);
		return o;
	}

	Submit.createShape=function(ctx,ib,vb,numEle,offset,sv){
		var o=(!Submit._cache._length)? (new Submit()):Submit._cache[--Submit._cache._length];
		o._ib=ib;
		o._vb=vb;
		o._numEle=numEle;
		o._startIdx=offset;
		o.shaderValue=sv;
		o.shaderValue.setValue(ctx._shader2D);
		var blendType=ctx._nBlendType;
		o._blendFn=ctx._targets ? BlendMode.targetFns[blendType] :BlendMode.fns[blendType];
		return o;
	}

	Submit.TYPE_2D=10000;
	Submit.TYPE_CANVAS=10003;
	Submit.TYPE_CMDSETRT=10004;
	Submit.TYPE_CUSTOM=10005;
	Submit.TYPE_BLURRT=10006;
	Submit.TYPE_CMDDESTORYPRERT=10007;
	Submit.TYPE_DISABLESTENCIL=10008;
	Submit.TYPE_OTHERIBVB=10009;
	Submit.TYPE_PRIMITIVE=10010;
	Submit.TYPE_RT=10011;
	Submit.TYPE_BLUR_RT=10012;
	Submit.TYPE_TARGET=10013;
	Submit.TYPE_CHANGE_VALUE=10014;
	Submit.TYPE_SHAPE=10015;
	Submit.TYPE_TEXTURE=10016;
	Submit.TYPE_FILLTEXTURE=10017;
	Submit.RENDERBASE=null;
	Submit._cache=(Submit._cache=[],Submit._cache._length=0,Submit._cache);
	return Submit;
})()


//class laya.webgl.submit.SubmitCMD
var SubmitCMD=(function(){
	function SubmitCMD(){
		this.fun=null;
		this.args=null;
	}

	__class(SubmitCMD,'laya.webgl.submit.SubmitCMD');
	var __proto=SubmitCMD.prototype;
	Laya.imps(__proto,{"laya.webgl.submit.ISubmit":true})
	__proto.renderSubmit=function(){
		this.fun.apply(null,this.args);
		return 1;
	}

	__proto.getRenderType=function(){
		return 0;
	}

	__proto.releaseRender=function(){
		var cache=SubmitCMD._cache;
		cache[cache._length++]=this;
	}

	SubmitCMD.create=function(args,fun){
		var o=SubmitCMD._cache._length?SubmitCMD._cache[--SubmitCMD._cache._length]:new SubmitCMD();
		o.fun=fun;
		o.args=args;
		return o;
	}

	SubmitCMD._cache=(SubmitCMD._cache=[],SubmitCMD._cache._length=0,SubmitCMD._cache);
	return SubmitCMD;
})()


//class laya.webgl.submit.SubmitCMDScope
var SubmitCMDScope=(function(){
	function SubmitCMDScope(){
		this.variables={};
	}

	__class(SubmitCMDScope,'laya.webgl.submit.SubmitCMDScope');
	var __proto=SubmitCMDScope.prototype;
	__proto.getValue=function(name){
		return this.variables[name];
	}

	__proto.addValue=function(name,value){
		return this.variables[name]=value;
	}

	__proto.setValue=function(name,value){
		if(this.variables.hasOwnProperty(name)){
			return this.variables[name]=value;
		}
		return null;
	}

	__proto.clear=function(){
		for(var key in this.variables){
			delete this.variables[key];
		}
	}

	__proto.recycle=function(){
		this.clear();
		SubmitCMDScope.POOL.push(this);
	}

	SubmitCMDScope.create=function(){
		var scope=SubmitCMDScope.POOL.pop();
		scope||(scope=new SubmitCMDScope());
		return scope;
	}

	SubmitCMDScope.POOL=[];
	return SubmitCMDScope;
})()


//class laya.webgl.submit.SubmitOtherIBVB
var SubmitOtherIBVB=(function(){
	function SubmitOtherIBVB(){
		this.offset=0;
		//this._vb=null;
		//this._ib=null;
		//this._blendFn=null;
		//this._mat=null;
		//this._shader=null;
		//this._shaderValue=null;
		//this._numEle=0;
		this.startIndex=0;
		;
		this._mat=Matrix.create();
	}

	__class(SubmitOtherIBVB,'laya.webgl.submit.SubmitOtherIBVB');
	var __proto=SubmitOtherIBVB.prototype;
	Laya.imps(__proto,{"laya.webgl.submit.ISubmit":true})
	__proto.releaseRender=function(){
		var cache=SubmitOtherIBVB._cache;
		cache[cache._length++]=this;
	}

	__proto.getRenderType=function(){
		return 10009;
	}

	__proto.renderSubmit=function(){
		var _tex=this._shaderValue.textureHost;
		if (_tex){
			var source=_tex.source;
			if (!_tex.bitmap || !source)
				return 1;
			this._shaderValue.texture=source;
		}
		this._vb.bind_upload(this._ib);
		var w=RenderState2D.worldMatrix4;
		var wmat=Matrix.TEMP;
		Matrix.mulPre(this._mat,w[0],w[1],w[4],w[5],w[12],w[13],wmat);
		var tmp=RenderState2D.worldMatrix4=SubmitOtherIBVB.tempMatrix4;
		tmp[0]=wmat.a;
		tmp[1]=wmat.b;
		tmp[4]=wmat.c;
		tmp[5]=wmat.d;
		tmp[12]=wmat.tx;
		tmp[13]=wmat.ty;
		this._shader._offset=this.offset;
		this._shaderValue.refresh();
		this._shader.upload(this._shaderValue);
		this._shader._offset=0;
		var gl=WebGL.mainContext;
		if (BlendMode.activeBlendFunction!==this._blendFn){
			gl.enable(0x0BE2);
			this._blendFn(gl);
			BlendMode.activeBlendFunction=this._blendFn;
		}
		Stat.drawCall++;
		Stat.trianglesFaces+=this._numEle / 3;
		gl.drawElements(0x0004,this._numEle,0x1403,this.startIndex);
		RenderState2D.worldMatrix4=w;
		BaseShader.activeShader=null;
		return 1;
	}

	SubmitOtherIBVB.create=function(context,vb,ib,numElement,shader,shaderValue,startIndex,offset,type){
		(type===void 0)&& (type=0);
		var o=(!SubmitOtherIBVB._cache._length)? (new SubmitOtherIBVB()):SubmitOtherIBVB._cache[--SubmitOtherIBVB._cache._length];
		o._ib=ib;
		o._vb=vb;
		o._numEle=numElement;
		o._shader=shader;
		o._shaderValue=shaderValue;
		var blendType=context._nBlendType;
		o._blendFn=context._targets ? BlendMode.targetFns[blendType] :BlendMode.fns[blendType];
		switch(type){
			case 0:
				o.offset=0;
				o.startIndex=offset / (CONST3D2D.BYTES_PE *vb.vertexStride)*1.5;
				o.startIndex *=CONST3D2D.BYTES_PIDX;
				break ;
			case 1:
				o.startIndex=startIndex;
				o.offset=offset;
				break ;
			}
		return o;
	}

	SubmitOtherIBVB._cache=(SubmitOtherIBVB._cache=[],SubmitOtherIBVB._cache._length=0,SubmitOtherIBVB._cache);
	SubmitOtherIBVB.tempMatrix4=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,];
	return SubmitOtherIBVB;
})()


//class laya.webgl.submit.SubmitScissor
var SubmitScissor=(function(){
	function SubmitScissor(){
		this.submitIndex=0;
		this.submitLength=0;
		this.context=null;
		this.clipRect=new Rectangle();
		this.screenRect=new Rectangle();
	}

	__class(SubmitScissor,'laya.webgl.submit.SubmitScissor');
	var __proto=SubmitScissor.prototype;
	Laya.imps(__proto,{"laya.webgl.submit.ISubmit":true})
	__proto._scissor=function(x,y,w,h){
		var m=RenderState2D.worldMatrix4;
		var a=m[0],d=m[5],tx=m[12],ty=m[13];
		x=x *a+tx;
		y=y *d+ty;
		w *=a;
		h *=d;
		if (w < 1 || h < 1){
			return false;
		};
		var r=x+w;
		var b=y+h;
		x < 0 && (x=0,w=r-x);
		y < 0 && (y=0,h=b-y);
		var screen=RenderState2D.worldClipRect;
		x=Math.max(x,screen.x);
		y=Math.max(y,screen.y);
		w=Math.min(r,screen.right)-x;
		h=Math.min(b,screen.bottom)-y;
		if (w < 1 || h < 1){
			return false;
		};
		var worldScissorTest=RenderState2D.worldScissorTest;
		this.screenRect.copyFrom(screen);
		screen.x=x;
		screen.y=y;
		screen.width=w;
		screen.height=h;
		RenderState2D.worldScissorTest=true;
		y=RenderState2D.height-y-h;
		WebGL.mainContext.scissor(x,y,w,h);
		WebGL.mainContext.enable(0x0C11);
		this.context.submitElement(this.submitIndex,this.submitIndex+this.submitLength);
		if (worldScissorTest){
			y=RenderState2D.height-this.screenRect.y-this.screenRect.height;
			WebGL.mainContext.scissor(this.screenRect.x,y,this.screenRect.width,this.screenRect.height);
			WebGL.mainContext.enable(0x0C11);
		}
		else{
			WebGL.mainContext.disable(0x0C11);
			RenderState2D.worldScissorTest=false;
		}
		screen.copyFrom(this.screenRect);
		return true;
	}

	__proto._scissorWithTagart=function(x,y,w,h){
		if (w < 1 || h < 1){
			return false;
		};
		var r=x+w;
		var b=y+h;
		x < 0 && (x=0,w=r-x);
		y < 0 && (y=0,h=b-y);
		var screen=RenderState2D.worldClipRect;
		x=Math.max(x,screen.x);
		y=Math.max(y,screen.y);
		w=Math.min(r,screen.right)-x;
		h=Math.min(b,screen.bottom)-y;
		if (w < 1 || h < 1){
			return false;
		};
		var worldScissorTest=RenderState2D.worldScissorTest;
		this.screenRect.copyFrom(screen);
		RenderState2D.worldScissorTest=true;
		screen.x=x;
		screen.y=y;
		screen.width=w;
		screen.height=h;
		y=RenderState2D.height-y-h;
		WebGL.mainContext.scissor(x,y,w,h);
		WebGL.mainContext.enable(0x0C11);
		this.context.submitElement(this.submitIndex,this.submitIndex+this.submitLength);
		if (worldScissorTest){
			y=RenderState2D.height-this.screenRect.y-this.screenRect.height;
			WebGL.mainContext.scissor(this.screenRect.x,y,this.screenRect.width,this.screenRect.height);
			WebGL.mainContext.enable(0x0C11);
		}
		else{
			WebGL.mainContext.disable(0x0C11);
			RenderState2D.worldScissorTest=false;
		}
		screen.copyFrom(this.screenRect);
		return true;
	}

	__proto.renderSubmit=function(){
		this.submitLength=Math.min(this.context._submits._length-1,this.submitLength);
		if (this.submitLength < 1 || this.clipRect.width < 1 || this.clipRect.height < 1)
			return this.submitLength+1;
		if (this.context._targets)
			this._scissorWithTagart(this.clipRect.x,this.clipRect.y,this.clipRect.width,this.clipRect.height);
		else this._scissor(this.clipRect.x,this.clipRect.y,this.clipRect.width,this.clipRect.height);
		return this.submitLength+1;
	}

	__proto.getRenderType=function(){
		return 0;
	}

	__proto.releaseRender=function(){
		var cache=SubmitScissor._cache;
		cache[cache._length++]=this;
		this.context=null;
	}

	SubmitScissor.create=function(context){
		var o=SubmitScissor._cache._length?SubmitScissor._cache[--SubmitScissor._cache._length]:new SubmitScissor();
		o.context=context;
		return o;
	}

	SubmitScissor._cache=(SubmitScissor._cache=[],SubmitScissor._cache._length=0,SubmitScissor._cache);
	return SubmitScissor;
})()


//class laya.webgl.submit.SubmitStencil
var SubmitStencil=(function(){
	function SubmitStencil(){
		this.step=0;
		this.blendMode=null;
		this.level=0;
	}

	__class(SubmitStencil,'laya.webgl.submit.SubmitStencil');
	var __proto=SubmitStencil.prototype;
	Laya.imps(__proto,{"laya.webgl.submit.ISubmit":true})
	__proto.renderSubmit=function(){
		switch(this.step){
			case 1:
				this.do1();
				break ;
			case 2:
				this.do2();
				break ;
			case 3:
				this.do3();
				break ;
			case 4:
				this.do4();
				break ;
			case 5:
				this.do5();
				break ;
			case 6:
				this.do6();
				break ;
			case 7:
				this.do7();
				break ;
			case 8:
				this.do8();
				break ;
			}
		return 1;
	}

	__proto.getRenderType=function(){
		return 0;
	}

	__proto.releaseRender=function(){
		var cache=SubmitStencil._cache;
		cache[cache._length++]=this;
	}

	__proto.do1=function(){
		var gl=WebGL.mainContext;
		gl.enable(0x0B90);
		gl.clear(0x00000400);
		gl.colorMask(false,false,false,false);
		gl.stencilFunc(0x0202,this.level,0xFF);
		gl.stencilOp(0x1E00,0x1E00,0x1E02);
	}

	//gl.stencilOp(WebGLContext.KEEP,WebGLContext.KEEP,WebGLContext.INVERT);//测试通过给模版缓冲 写入值 一开始是0 现在是 0xFF (模版缓冲中不知道是多少位的数据)
	__proto.do2=function(){
		var gl=WebGL.mainContext;
		gl.stencilFunc(0x0202,this.level+1,0xFF);
		gl.colorMask(true,true,true,true);
		gl.stencilOp(0x1E00,0x1E00,0x1E00);
	}

	__proto.do3=function(){
		var gl=WebGL.mainContext;
		gl.colorMask(true,true,true,true);
		gl.stencilOp(0x1E00,0x1E00,0x1E00);
		gl.clear(0x00000400);
		gl.disable(0x0B90);
	}

	__proto.do4=function(){
		var gl=WebGL.mainContext;
		if (this.level==0){
			gl.enable(0x0B90);
			gl.clear(0x00000400);
		}
		gl.colorMask(false,false,false,false);
		gl.stencilFunc(0x0207,0,0xFF);
		gl.stencilOp(0x1E00,0x1E00,0x1E02);
	}

	__proto.do5=function(){
		var gl=WebGL.mainContext;
		gl.stencilFunc(0x0202,this.level,0xFF);
		gl.colorMask(true,true,true,true);
		gl.stencilOp(0x1E00,0x1E00,0x1E00);
	}

	__proto.do6=function(){
		var gl=WebGL.mainContext;
		BlendMode.targetFns[BlendMode.TOINT[this.blendMode]](gl);
	}

	__proto.do7=function(){
		var gl=WebGL.mainContext;
		gl.colorMask(false,false,false,false);
		gl.stencilOp(0x1E00,0x1E00,0x1E03);
	}

	__proto.do8=function(){
		var gl=WebGL.mainContext;
		gl.colorMask(true,true,true,true);
		gl.stencilFunc(0x0202,this.level,0xFF);
		gl.stencilOp(0x1E00,0x1E00,0x1E00);
	}

	SubmitStencil.restore=function(context,clip,m,_x,_y){
		var submitStencil;
		context._renderKey=0;
		if (SubmitStencil._mask > 0){
			SubmitStencil._mask--;
		}
		if (SubmitStencil._mask==0){
			submitStencil=laya.webgl.submit.SubmitStencil.create(3);
			context.addRenderObject(submitStencil);
			context._curSubmit=Submit.RENDERBASE;
		}
		else{
			submitStencil=laya.webgl.submit.SubmitStencil.create(7);
			context.addRenderObject(submitStencil);
			var vb=context._vb;
			var nPos=(vb._byteLength >> 2);
			if (GlUtils.fillRectImgVb(vb,null,clip.x,clip.y,clip.width,clip.height,Texture.DEF_UV,m,_x,_y,0,0)){
				var shader=context._shader2D;
				shader.glTexture=null;
				var submit=context._curSubmit=Submit.createSubmit(context,context._ib,vb,((vb._byteLength-16 *4)/ 32)*3,Value2D.create(0x02,0));
				submit.shaderValue.ALPHA=1.0;
				context._submits[context._submits._length++]=submit;
				context._curSubmit._numEle+=6;
				context._curSubmit=Submit.RENDERBASE;
				}else {
				alert("clipRect calc stencil rect error");
			}
			submitStencil=laya.webgl.submit.SubmitStencil.create(8);
			context.addRenderObject(submitStencil);
		}
	}

	SubmitStencil.restore2=function(context,submit){
		var submitStencil;
		context._renderKey=0;
		if (SubmitStencil._mask > 0){
			SubmitStencil._mask--;
		}
		if (SubmitStencil._mask==0){
			submitStencil=laya.webgl.submit.SubmitStencil.create(3);
			context.addRenderObject(submitStencil);
			context._curSubmit=Submit.RENDERBASE;
		}
		else{
			submitStencil=laya.webgl.submit.SubmitStencil.create(7);
			context.addRenderObject(submitStencil);
			context._submits[context._submits._length++]=submit;
			submitStencil=laya.webgl.submit.SubmitStencil.create(8);
			context.addRenderObject(submitStencil);
		}
	}

	SubmitStencil.create=function(step){
		var o=SubmitStencil._cache._length?SubmitStencil._cache[--SubmitStencil._cache._length]:new SubmitStencil();
		o.step=step;
		if (step==5)
			++SubmitStencil._mask;
		o.level=SubmitStencil._mask;
		return o;
	}

	SubmitStencil._cache=(SubmitStencil._cache=[],SubmitStencil._cache._length=0,SubmitStencil._cache);
	SubmitStencil._mask=0;
	return SubmitStencil;
})()


//class laya.webgl.submit.SubmitTarget
var SubmitTarget=(function(){
	function SubmitTarget(){
		this._renderType=0;
		this._vb=null;
		this._ib=null;
		this._startIdx=0;
		this._numEle=0;
		this.shaderValue=null;
		this.blendType=0;
		this.proName=null;
		this.scope=null;
	}

	__class(SubmitTarget,'laya.webgl.submit.SubmitTarget');
	var __proto=SubmitTarget.prototype;
	Laya.imps(__proto,{"laya.webgl.submit.ISubmit":true})
	__proto.renderSubmit=function(){
		this._vb.bind_upload(this._ib);
		var target=this.scope.getValue(this.proName);
		if (target){
			this.shaderValue.texture=target.source;
			if (this.shaderValue["strength"] && !this.shaderValue["blurInfo"]){
				this.shaderValue["blurInfo"]=[target.width,target.height];
			}
			this.shaderValue.upload();
			this.blend();
			Stat.drawCall++;
			Stat.trianglesFaces+=this._numEle/3;
			WebGL.mainContext.drawElements(0x0004,this._numEle,0x1403,this._startIdx);
		}
		return 1;
	}

	__proto.blend=function(){
		if (BlendMode.activeBlendFunction!==BlendMode.fns[this.blendType]){
			var gl=WebGL.mainContext;
			gl.enable(0x0BE2);
			BlendMode.fns[this.blendType](gl);
			BlendMode.activeBlendFunction=BlendMode.fns[this.blendType];
		}
	}

	__proto.getRenderType=function(){
		return 0;
	}

	__proto.releaseRender=function(){
		var cache=SubmitTarget._cache;
		cache[cache._length++]=this;
	}

	SubmitTarget.create=function(context,ib,vb,pos,sv,proName){
		var o=SubmitTarget._cache._length?SubmitTarget._cache[--SubmitTarget._cache._length]:new SubmitTarget();
		o._ib=ib;
		o._vb=vb;
		o.proName=proName;
		o._startIdx=pos *CONST3D2D.BYTES_PIDX;
		o._numEle=0;
		o.blendType=context._nBlendType;
		o.shaderValue=sv;
		o.shaderValue.setValue(context._shader2D);
		return o;
	}

	SubmitTarget._cache=(SubmitTarget._cache=[],SubmitTarget._cache._length=0,SubmitTarget._cache);
	return SubmitTarget;
})()


/**
*...特殊的字符，如泰文，必须重新实现这个类
*/
//class laya.webgl.text.CharSegment
var CharSegment=(function(){
	function CharSegment(){
		this._sourceStr=null;
	}

	__class(CharSegment,'laya.webgl.text.CharSegment');
	var __proto=CharSegment.prototype;
	Laya.imps(__proto,{"laya.webgl.text.ICharSegment":true})
	__proto.textToSpit=function(str){
		this._sourceStr=str;
	}

	__proto.getChar=function(i){
		return this._sourceStr.charAt(i);
	}

	__proto.getCharCode=function(i){
		return this._sourceStr.charCodeAt(i);
	}

	__proto.length=function(){
		return this._sourceStr.length;
	}

	return CharSegment;
})()


//class laya.webgl.text.DrawText
var DrawText=(function(){
	var CharValue;
	function DrawText(){}
	__class(DrawText,'laya.webgl.text.DrawText');
	DrawText.__init__=function(){
		DrawText._charsTemp=new Array;
		DrawText._drawValue=new CharValue();
		DrawText._charSeg=new CharSegment();
	}

	DrawText.customCharSeg=function(charseg){
		DrawText._charSeg=charseg;
	}

	DrawText.getChar=function(char,id,drawValue){
		var result=WebGLCharImage.createOneChar(char,drawValue);
		if(id!=-1)
			DrawText._charsCache[id]=result;
		return result;
	}

	DrawText._drawSlow=function(save,ctx,txt,words,curMat,font,textAlign,fillColor,borderColor,lineWidth,x,y,sx,sy,underLine){
		var drawValue=DrawText._drawValue.value(font,fillColor,borderColor,lineWidth,sx,sy,underLine);
		var i=0,n=0;
		var chars=DrawText._charsTemp;
		var width=0,oneChar,htmlWord,id=NaN;
		if (words){
			chars.length=words.length;
			for (i=0,n=words.length;i < n;i++){
				htmlWord=words[i];
				id=htmlWord.charNum+drawValue.txtID;
				chars[i]=oneChar=DrawText._charsCache[id] || DrawText.getChar(htmlWord.char,id,drawValue);
				oneChar.active();
			}
			}else {
			var text=((txt instanceof laya.utils.WordText ))? txt.toString():txt;
			if (Text.CharacterCache){
				DrawText._charSeg.textToSpit(text);
				var len=/*if err,please use iflash.method.xmlLength()*/DrawText._charSeg.length();
				chars.length=len;
				for (i=0,n=len;i < n;i++){
					id=DrawText._charSeg.getCharCode(i)+drawValue.txtID;
					chars[i]=oneChar=DrawText._charsCache[id] || DrawText.getChar(DrawText._charSeg.getChar(i),id,drawValue);
					oneChar.active();
					width+=oneChar.cw;
				}
			}
			else {
				chars.length=0;
				oneChar=DrawText.getChar(text,-1,drawValue);
				oneChar.active();
				width+=oneChar.cw;
				chars[0]=oneChar;
			}
		};
		var dx=0;
		if (textAlign!==null && textAlign!=="left")
			dx=-(textAlign=="center" ? (width / 2):width);
		var uv,bdSz=NaN,texture,value,saveLength=0;
		if (words){
			for (i=0,n=chars.length;i < n;i++){
				oneChar=chars[i];
				if (!oneChar.isSpace){
					htmlWord=words[i];
					bdSz=oneChar.borderSize;
					texture=oneChar.texture;
					ctx._drawText(texture,x+dx+htmlWord.x *sx-bdSz,y+htmlWord.y *sy-bdSz,texture.width,texture.height,curMat,0,0,0,0);
				}
			}
			}else {
			for (i=0,n=chars.length;i < n;i++){
				oneChar=chars[i];
				if (!oneChar.isSpace){
					bdSz=oneChar.borderSize;
					texture=oneChar.texture;
					ctx._drawText(texture,x+dx-bdSz,y-bdSz,texture.width,texture.height,curMat,0,0,0,0);
					save && (value=save[saveLength++],value || (value=save[saveLength-1]=[]),value[0]=texture,value[1]=dx-bdSz,value[2]=-bdSz);
				}
				dx+=oneChar.cw;
			}
			save && (save.length=saveLength);
		}
	}

	DrawText._drawFast=function(save,ctx,curMat,x,y){
		var texture,value;
		for (var i=0,n=save.length;i < n;i++){
			value=save[i];
			texture=value[0];
			texture.active();
			ctx._drawText(texture,x+value[1],y+value[2],texture.width,texture.height,curMat,0,0,0,0);
		}
	}

	DrawText.drawText=function(ctx,txt,words,curMat,font,textAlign,fillColor,borderColor,lineWidth,x,y,underLine){
		(underLine===void 0)&& (underLine=0);
		if ((txt && txt.length===0)|| (words && words.length===0))
			return;
		var sx=curMat.a,sy=curMat.d;
		(curMat.b!==0 || curMat.c!==0)&& (sx=sy=1);
		var scale=sx!==1 || sy!==1;
		if (scale && Laya.stage.transform){
			var t=Laya.stage.transform;
			scale=t.a===sx && t.d===sy;
		}else scale=false;
		if (scale){
			curMat=curMat.copyTo(WebGLContext2D._tmpMatrix);
			var tempTx=curMat.tx;
			var tempTy=curMat.ty;
			curMat.scale(1 / sx,1 / sy);
			curMat._checkTransform();
			x *=sx;
			y *=sy;
			x+=tempTx-curMat.tx;
			y+=tempTy-curMat.ty;
		}else sx=sy=1;
		if (words){
			DrawText._drawSlow(null,ctx,txt,words,curMat,font,textAlign,fillColor,borderColor,lineWidth,x,y,sx,sy,underLine);
			}else {
			if (txt.toUpperCase===null){
				var idNum=sx+sy *100000;
				var myCache=txt;
				if (!myCache.changed && myCache.id===idNum){
					DrawText._drawFast(myCache.save,ctx,curMat,x,y);
					}else {
					myCache.id=idNum;
					myCache.changed=false;
					DrawText._drawSlow(myCache.save,ctx,txt,words,curMat,font,textAlign,fillColor,borderColor,lineWidth,x,y,sx,sy,underLine);
				}
				return;
			};
			var id=txt+font.toString()+fillColor+borderColor+lineWidth+sx+sy+textAlign;
			var cache=DrawText._textsCache[id];
			if (Text.CharacterCache){
				if (cache){
					DrawText._drawFast(cache,ctx,curMat,x,y);
					}else {
					DrawText._textsCache.__length || (DrawText._textsCache.__length=0);
					if (DrawText._textsCache.__length > Config.WebGLTextCacheCount){
						DrawText._textsCache={};
						DrawText._textsCache.__length=0;
						DrawText._curPoolIndex=0;
					}
					DrawText._textCachesPool[DrawText._curPoolIndex] ? (cache=DrawText._textsCache[id]=DrawText._textCachesPool[DrawText._curPoolIndex],cache.length=0):(DrawText._textCachesPool[DrawText._curPoolIndex]=cache=DrawText._textsCache[id]=[]);
					DrawText._textsCache.__length++
					DrawText._curPoolIndex++;
					DrawText._drawSlow(cache,ctx,txt,words,curMat,font,textAlign,fillColor,borderColor,lineWidth,x,y,sx,sy,underLine);
				}
			}
			else{
				DrawText._drawSlow(cache,ctx,txt,words,curMat,font,textAlign,fillColor,borderColor,lineWidth,x,y,sx,sy,underLine);
			}
		}
	}

	DrawText._charsTemp=null;
	DrawText._textCachesPool=[];
	DrawText._curPoolIndex=0;
	DrawText._charsCache={};
	DrawText._textsCache={};
	DrawText._drawValue=null;
	DrawText.d=[];
	DrawText._charSeg=null;
	DrawText.__init$=function(){
		//class CharValue
		CharValue=(function(){
			function CharValue(){
				//this.txtID=NaN;
				//this.font=null;
				//this.fillColor=null;
				//this.borderColor=null;
				//this.lineWidth=0;
				//this.scaleX=NaN;
				//this.scaleY=NaN;
				//this.underLine=0;
			}
			__class(CharValue,'');
			var __proto=CharValue.prototype;
			__proto.value=function(font,fillColor,borderColor,lineWidth,scaleX,scaleY,underLine){
				this.font=font;
				this.fillColor=fillColor;
				this.borderColor=borderColor;
				this.lineWidth=lineWidth;
				this.scaleX=scaleX;
				this.scaleY=scaleY;
				this.underLine=underLine;
				var key=font.toString()+scaleX+scaleY+lineWidth+fillColor+borderColor+underLine;
				this.txtID=CharValue._keymap[key];
				if (!this.txtID){
					this.txtID=(++CharValue._keymapCount)*0.0000001;
					CharValue._keymap[key]=this.txtID;
				}
				return this;
			}
			CharValue.clear=function(){
				CharValue._keymap={};
				CharValue._keymapCount=1;
			}
			CharValue._keymap={};
			CharValue._keymapCount=1;
			return CharValue;
		})()
	}

	return DrawText;
})()


//class laya.webgl.text.FontInContext
var FontInContext=(function(){
	function FontInContext(font){
		//this._text=null;
		//this._words=null;
		this._index=0;
		this._size=14;
		this._italic=-2;
		FontInContext._cache2=FontInContext._cache2|| [];
		this.setFont(font || "14px Arial");
	}

	__class(FontInContext,'laya.webgl.text.FontInContext');
	var __proto=FontInContext.prototype;
	__proto.setFont=function(value){
		var arr=FontInContext._cache2[value];
		if (!arr){
			this._words=value.split(' ');
			for (var i=0,n=this._words.length;i < n;i++){
				if (this._words[i].indexOf('px')> 0){
					this._index=i;
					break ;
				}
			}
			this._size=parseInt(this._words[this._index]);
			FontInContext._cache2[value]=[this._words,this._size];
			}else {
			this._words=arr[0];
			this._size=arr[1];
		}
		this._text=null;
		this._italic=-2;
	}

	__proto.getItalic=function(){
		this._italic===-2 && (this._italic=this.hasType("italic"));
		return this._italic;
	}

	__proto.hasType=function(name){
		for (var i=0,n=this._words.length;i < n;i++)
		if (this._words[i]===name)return i;
		return-1;
	}

	__proto.removeType=function(name){
		for (var i=0,n=this._words.length;i < n;i++)
		if (this._words[i]===name){
			this._words.splice(i,1);
			if (this._index > i)this._index--;
			break ;
		}
		this._text=null;
		this._italic=-2;
	}

	__proto.copyTo=function(dec){
		dec._text=this._text;
		dec._size=this._size;
		dec._index=this._index;
		dec._words=this._words.slice();
		dec._italic=-2;
		return dec;
	}

	__proto.toString=function(){
		return this._text ? this._text :(this._text=this._words.join(' '));
	}

	__getset(0,__proto,'size',function(){
		return this._size;
		},function(value){
		this._size=value;
		this._words[this._index]=value+"px";
		this._text=null;
	});

	FontInContext.create=function(font){
		var r=FontInContext._cache[font];
		if (r)return r;
		r=FontInContext._cache[font]=new FontInContext(font);
		return r;
	}

	FontInContext.EMPTY=new FontInContext();
	FontInContext._cache={};
	FontInContext._cache2=null;
	return FontInContext;
})()


//class laya.webgl.utils.CONST3D2D
var CONST3D2D=(function(){
	function CONST3D2D(){}
	__class(CONST3D2D,'laya.webgl.utils.CONST3D2D');
	CONST3D2D.defaultMatrix4=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];
	CONST3D2D.defaultMinusYMatrix4=[1,0,0,0,0,-1,0,0,0,0,1,0,0,0,0,1];
	CONST3D2D.uniformMatrix3=[1,0,0,0,0,1,0,0,0,0,1,0];
	CONST3D2D._TMPARRAY=[];
	CONST3D2D._OFFSETX=0;
	CONST3D2D._OFFSETY=0;
	__static(CONST3D2D,
	['BYTES_PE',function(){return this.BYTES_PE=Float32Array.BYTES_PER_ELEMENT;},'BYTES_PIDX',function(){return this.BYTES_PIDX=Uint16Array.BYTES_PER_ELEMENT;}
	]);
	return CONST3D2D;
})()


//class laya.webgl.utils.GlUtils
var GlUtils=(function(){
	function GlUtils(){}
	__class(GlUtils,'laya.webgl.utils.GlUtils');
	GlUtils.make2DProjection=function(width,height,depth){
		return [2.0 / width,0,0,0,0,-2.0 / height,0,0,0,0,2.0 / depth,0,-1,1,0,1,];
	}

	GlUtils.fillIBQuadrangle=function(buffer,count){
		if (count > 65535 / 4){
			throw Error("IBQuadrangle count:"+count+" must<:"+Math.floor(65535 / 4));
			return false;
		}
		count=Math.floor(count);
		buffer._resizeBuffer((count+1)*6 *2,false);
		buffer.byteLength=buffer.bufferLength;
		var bufferData=buffer.getUint16Array();
		var idx=0;
		for (var i=0;i < count;i++){
			bufferData[idx++]=i *4;
			bufferData[idx++]=i *4+2;
			bufferData[idx++]=i *4+1;
			bufferData[idx++]=i *4;
			bufferData[idx++]=i *4+3;
			bufferData[idx++]=i *4+2;
		}
		buffer.setNeedUpload();
		return true;
	}

	GlUtils.expandIBQuadrangle=function(buffer,count){
		buffer.bufferLength >=(count *6 *2)|| GlUtils.fillIBQuadrangle(buffer,count);
	}

	GlUtils.mathCeilPowerOfTwo=function(value){
		value--;
		value |=value >> 1;
		value |=value >> 2;
		value |=value >> 4;
		value |=value >> 8;
		value |=value >> 16;
		value++;
		return value;
	}

	GlUtils.fillQuadrangleImgVb=function(vb,x,y,point4,uv,m,_x,_y){
		'use strict';
		var vpos=(vb._byteLength >> 2)+16;
		vb.byteLength=(vpos << 2);
		var vbdata=vb.getFloat32Array();
		vpos-=16;
		vbdata[vpos+2]=uv[0];
		vbdata[vpos+3]=uv[1];
		vbdata[vpos+6]=uv[2];
		vbdata[vpos+7]=uv[3];
		vbdata[vpos+10]=uv[4];
		vbdata[vpos+11]=uv[5];
		vbdata[vpos+14]=uv[6];
		vbdata[vpos+15]=uv[7];
		var a=m.a,b=m.b,c=m.c,d=m.d;
		if (a!==1 || b!==0 || c!==0 || d!==1){
			m.bTransform=true;
			var tx=m.tx+_x,ty=m.ty+_y;
			vbdata[vpos]=(point4[0]+x)*a+(point4[1]+y)*c+tx;
			vbdata[vpos+1]=(point4[0]+x)*b+(point4[1]+y)*d+ty;
			vbdata[vpos+4]=(point4[2]+x)*a+(point4[3]+y)*c+tx;
			vbdata[vpos+5]=(point4[2]+x)*b+(point4[3]+y)*d+ty;
			vbdata[vpos+8]=(point4[4]+x)*a+(point4[5]+y)*c+tx;
			vbdata[vpos+9]=(point4[4]+x)*b+(point4[5]+y)*d+ty;
			vbdata[vpos+12]=(point4[6]+x)*a+(point4[7]+y)*c+tx;
			vbdata[vpos+13]=(point4[6]+x)*b+(point4[7]+y)*d+ty;
			}else {
			m.bTransform=false;
			x+=m.tx+_x;
			y+=m.ty+_y;
			vbdata[vpos]=x+point4[0];
			vbdata[vpos+1]=y+point4[1];
			vbdata[vpos+4]=x+point4[2];
			vbdata[vpos+5]=y+point4[3];
			vbdata[vpos+8]=x+point4[4];
			vbdata[vpos+9]=y+point4[5];
			vbdata[vpos+12]=x+point4[6];
			vbdata[vpos+13]=y+point4[7];
		}
		vb._upload=true;
		return true;
	}

	GlUtils.fillTranglesVB=function(vb,x,y,points,m,_x,_y){
		var vpos=(vb._byteLength >> 2)+points.length;
		vb.byteLength=(vpos << 2);
		var vbdata=vb.getFloat32Array();
		vpos-=points.length;
		var len=points.length;
		var a=m.a,b=m.b,c=m.c,d=m.d;
		for (var i=0;i < len;i+=4){
			vbdata[vpos+i+2]=points[i+2];
			vbdata[vpos+i+3]=points[i+3];
			if (a!==1 || b!==0 || c!==0 || d!==1){
				m.bTransform=true;
				var tx=m.tx+_x,ty=m.ty+_y;
				vbdata[vpos+i]=(points[i]+x)*a+(points[i+1]+y)*c+tx;
				vbdata[vpos+i+1]=(points[i]+x)*b+(points[i+1]+y)*d+ty;
				}else {
				m.bTransform=false;
				x+=m.tx+_x;
				y+=m.ty+_y;
				vbdata[vpos+i]=x+points[i];
				vbdata[vpos+i+1]=y+points[i+1];
			}
		}
		vb._upload=true;
		return true;
	}

	GlUtils.copyPreImgVb=function(vb,dx,dy){
		var vpos=(vb._byteLength >> 2);
		vb.byteLength=((vpos+16)<< 2);
		var vbdata=vb.getFloat32Array();
		for (var i=0,ci=vpos-16;i < 4;i++){
			vbdata[vpos]=vbdata[ci]+dx;
			++vpos;
			++ci;
			vbdata[vpos]=vbdata[ci]+dy;
			++vpos;
			++ci;
			vbdata[vpos]=vbdata[ci];
			++vpos;
			++ci;
			vbdata[vpos]=vbdata[ci];
			++vpos;
			++ci;
		}
		vb._upload=true;
	}

	GlUtils.fillRectImgVb=function(vb,clip,x,y,width,height,uv,m,_x,_y,dx,dy,round){
		(round===void 0)&& (round=false);
		var mType=1;
		var toBx,toBy,toEx,toEy;
		var cBx,cBy,cEx,cEy;
		var w0,h0,tx,ty;
		var finalX,finalY,offsetX,offsetY;
		var a=m.a,b=m.b,c=m.c,d=m.d;
		var useClip=clip && clip.width < 99999999;
		if (a!==1 || b!==0 || c!==0 || d!==1){
			m.bTransform=true;
			if (b===0 && c===0){
				mType=23;
				w0=width+x,h0=height+y;
				tx=m.tx+_x,ty=m.ty+_y;
				toBx=a *x+tx;
				toEx=a *w0+tx;
				toBy=d *y+ty;
				toEy=d *h0+ty;
			}
			}else {
			mType=23;
			m.bTransform=false;
			toBx=x+m.tx+_x;
			toEx=toBx+width;
			toBy=y+m.ty+_y;
			toEy=toBy+height;
		}
		if (useClip){
			cBx=clip.x,cBy=clip.y,cEx=clip.width+cBx,cEy=clip.height+cBy;
		}
		if (mType!==1){
			if (Math.min(toBx,toEx)>=cEx)return false;
			if (Math.min(toBy,toEy)>=cEy)return false;
			if (Math.max(toEx,toBx)<=cBx)return false;
			if (Math.max(toEy,toBy)<=cBy)return false;
		};
		var vpos=(vb._byteLength >> 2);
		vb.byteLength=((vpos+16)<< 2);
		var vbdata=vb.getFloat32Array();
		vbdata[vpos+2]=uv[0];
		vbdata[vpos+3]=uv[1];
		vbdata[vpos+6]=uv[2];
		vbdata[vpos+7]=uv[3];
		vbdata[vpos+10]=uv[4];
		vbdata[vpos+11]=uv[5];
		vbdata[vpos+14]=uv[6];
		vbdata[vpos+15]=uv[7];
		switch (mType){
			case 1:
				tx=m.tx+_x,ty=m.ty+_y;
				w0=width+x,h0=height+y;
				var w1=x,h1=y;
				var aw1=a *w1,ch1=c *h1,dh1=d *h1,bw1=b *w1;
				var aw0=a *w0,ch0=c *h0,dh0=d *h0,bw0=b *w0;
				if (round){
					finalX=aw1+ch1+tx;
					offsetX=Math.round(finalX)-finalX;
					finalY=dh1+bw1+ty;
					offsetY=Math.round(finalY)-finalY;
					vbdata[vpos]=finalX+offsetX;
					vbdata[vpos+1]=finalY+offsetY;
					vbdata[vpos+4]=aw0+ch1+tx+offsetX;
					vbdata[vpos+5]=dh1+bw0+ty+offsetY;
					vbdata[vpos+8]=aw0+ch0+tx+offsetX;
					vbdata[vpos+9]=dh0+bw0+ty+offsetY;
					vbdata[vpos+12]=aw1+ch0+tx+offsetX;
					vbdata[vpos+13]=dh0+bw1+ty+offsetY;
					}else {
					vbdata[vpos]=aw1+ch1+tx;
					vbdata[vpos+1]=dh1+bw1+ty;
					vbdata[vpos+4]=aw0+ch1+tx;
					vbdata[vpos+5]=dh1+bw0+ty;
					vbdata[vpos+8]=aw0+ch0+tx;
					vbdata[vpos+9]=dh0+bw0+ty;
					vbdata[vpos+12]=aw1+ch0+tx;
					vbdata[vpos+13]=dh0+bw1+ty;
				}
				break ;
			case 23:
				if (round){
					finalX=toBx+dx;
					offsetX=Math.round(finalX)-finalX;
					finalY=toBy;
					offsetY=Math.round(finalY)-finalY;
					vbdata[vpos]=finalX+offsetX;
					vbdata[vpos+1]=finalY+offsetY;
					vbdata[vpos+4]=toEx+dx+offsetX;
					vbdata[vpos+5]=toBy+offsetY;
					vbdata[vpos+8]=toEx+offsetX;
					vbdata[vpos+9]=toEy+offsetY;
					vbdata[vpos+12]=toBx+offsetX;
					vbdata[vpos+13]=toEy+offsetY;
					}else {
					vbdata[vpos]=toBx+dx;
					vbdata[vpos+1]=toBy;
					vbdata[vpos+4]=toEx+dx;
					vbdata[vpos+5]=toBy;
					vbdata[vpos+8]=toEx;
					vbdata[vpos+9]=toEy;
					vbdata[vpos+12]=toBx;
					vbdata[vpos+13]=toEy;
				}
				break ;
			}
		vb._upload=true;
		return true;
	}

	GlUtils.fillLineVb=function(vb,clip,fx,fy,tx,ty,width,mat){
		'use strict';
		var linew=width *.5;
		var data=GlUtils._fillLineArray;
		var perpx=-(fy-ty),perpy=fx-tx;
		var dist=Math.sqrt(perpx *perpx+perpy *perpy);
		perpx /=dist,perpy /=dist,perpx *=linew,perpy *=linew;
		data[0]=fx-perpx,data[1]=fy-perpy,data[4]=fx+perpx,data[5]=fy+perpy,data[8]=tx+perpx,data[9]=ty+perpy,data[12]=tx-perpx,data[13]=ty-perpy;
		mat && mat.transformPointArray(data,data);
		var vpos=(vb._byteLength >> 2)+16;
		vb.byteLength=(vpos << 2);
		vb.insertData(data,vpos-16);
		return true;
	}

	GlUtils._fillLineArray=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
	return GlUtils;
})()


//class laya.webgl.utils.MatirxArray
var MatirxArray=(function(){
	function MatirxArray(){}
	__class(MatirxArray,'laya.webgl.utils.MatirxArray');
	MatirxArray.ArrayMul=function(a,b,o){
		if (!a){
			MatirxArray.copyArray(b,o);
			return;
		}
		if (!b){
			MatirxArray.copyArray(a,o);
			return;
		};
		var ai0=NaN,ai1=NaN,ai2=NaN,ai3=NaN;
		for (var i=0;i < 4;i++){
			ai0=a[i];
			ai1=a[i+4];
			ai2=a[i+8];
			ai3=a[i+12];
			o[i]=ai0 *b[0]+ai1 *b[1]+ai2 *b[2]+ai3 *b[3];
			o[i+4]=ai0 *b[4]+ai1 *b[5]+ai2 *b[6]+ai3 *b[7];
			o[i+8]=ai0 *b[8]+ai1 *b[9]+ai2 *b[10]+ai3 *b[11];
			o[i+12]=ai0 *b[12]+ai1 *b[13]+ai2 *b[14]+ai3 *b[15];
		}
	}

	MatirxArray.copyArray=function(f,t){
		if (!f)return;
		if (!t)return;
		for (var i=0;i < f.length;i++){
			t[i]=f[i];
		}
	}

	return MatirxArray;
})()


/**
*Mesh2d只是保存数据。描述attribute用的。本身不具有渲染功能。
*/
//class laya.webgl.utils.Mesh2D
var Mesh2D=(function(){
	function Mesh2D(stride,vballoc,iballoc){
		this._stride=0;
		//顶点结构大小。每个mesh的顶点结构是固定的。
		this.vertNum=0;
		//当前的顶点的个数
		this.indexNum=0;
		//实际index 个数。例如一个三角形是3个。由于ib本身可能超过实际使用的数量，所以需要一个indexNum
		this._applied=false;
		//是否已经设置给webgl了
		this._vb=null;
		//vb和ib都可能需要在外部修改，所以public
		this._ib=null;
		this._vao=null;
		this._attribInfo=null;
		//保存起来的属性定义数组。
		this._quadNum=0;
		//public static var meshlist:Array=[];//活着的mesh对象列表。
		this.canReuse=false;
		this._stride=stride;
		this._vb=new VertexBuffer2D(stride,0x88E8);
		if (vballoc){
			this._vb._resizeBuffer(vballoc,false);
		}else{}
		this._ib=new IndexBuffer2D();
		if (iballoc){
			this._ib._resizeBuffer(iballoc,false);
		}
	}

	__class(Mesh2D,'laya.webgl.utils.Mesh2D');
	var __proto=Mesh2D.prototype;
	/**
	*重新创建一个mesh。复用这个对象的vertex结构，ib对象和attribinfo对象
	*/
	__proto.cloneWithNewVB=function(){
		var mesh=new Mesh2D(this._stride,0,0);
		mesh._ib=this._ib;
		mesh._quadNum=this._quadNum;
		mesh._attribInfo=this._attribInfo;
		return mesh;
	}

	/**
	*创建一个mesh，使用当前对象的vertex结构。vb和ib自己提供。
	*@return
	*/
	__proto.cloneWithNewVBIB=function(){
		var mesh=new Mesh2D(this._stride,0,0);
		mesh._attribInfo=this._attribInfo;
		return mesh;
	}

	/**
	*获得一个可以写的vb对象
	*/
	__proto.getVBW=function(){
		this._vb.setNeedUpload();
		return this._vb;
	}

	/**
	*获得一个只读vb
	*/
	__proto.getVBR=function(){
		return this._vb;
	}

	__proto.getIBR=function(){
		return this._ib;
	}

	/**
	*获得一个可写的ib
	*/
	__proto.getIBW=function(){
		this._ib.setNeedUpload();
		return this._ib;
	}

	/**
	*直接创建一个固定的ib。按照固定四边形的索引。
	*@param var QuadNum
	*/
	__proto.createQuadIB=function(QuadNum){
		this._quadNum=QuadNum;
		this._ib._resizeBuffer(QuadNum *6 *2,false);
		this._ib.byteLength=this._ib.bufferLength;
		var bd=this._ib.getUint16Array();
		var idx=0;
		var curvert=0;
		for (var i=0;i < QuadNum;i++){
			bd[idx++]=curvert;
			bd[idx++]=curvert+2;
			bd[idx++]=curvert+1;
			bd[idx++]=curvert;
			bd[idx++]=curvert+3;
			bd[idx++]=curvert+2;
			curvert+=4;
		}
		this._ib.setNeedUpload();
	}

	/**
	*设置mesh的属性。每3个一组，对应的location分别是0,1,2...
	*含义是：type,size,offset
	*不允许多流。因此stride是固定的，offset只是在一个vertex之内。
	*@param attribs
	*/
	__proto.setAttributes=function(attribs){
		this._attribInfo=attribs;
		if (this._attribInfo.length % 3 !=0){
			throw 'Mesh2D setAttributes error!';
		}
	}

	__proto.getEleNum=function(){
		return this._ib.getBuffer().byteLength / 2;
	}

	/**
	*子类实现。用来把自己放到对应的回收池中，以便复用。
	*/
	__proto.releaseMesh=function(){}
	/**
	*释放资源。
	*/
	__proto.destroy=function(){}
	/**
	*清理vb数据
	*/
	__proto.clearVB=function(){
		this._vb.clear();
	}

	Mesh2D._gvaoid=0;
	return Mesh2D;
})()


//class laya.webgl.utils.RenderState2D
var RenderState2D=(function(){
	function RenderState2D(){}
	__class(RenderState2D,'laya.webgl.utils.RenderState2D');
	RenderState2D.getMatrArray=function(){
		return [1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];
	}

	RenderState2D.mat2MatArray=function(mat,matArray){
		var m=mat;
		var m4=matArray;
		m4[0]=m.a;
		m4[1]=m.b;
		m4[2]=RenderState2D.EMPTYMAT4_ARRAY[2];
		m4[3]=RenderState2D.EMPTYMAT4_ARRAY[3];
		m4[4]=m.c;
		m4[5]=m.d;
		m4[6]=RenderState2D.EMPTYMAT4_ARRAY[6];
		m4[7]=RenderState2D.EMPTYMAT4_ARRAY[7];
		m4[8]=RenderState2D.EMPTYMAT4_ARRAY[8];
		m4[9]=RenderState2D.EMPTYMAT4_ARRAY[9];
		m4[10]=RenderState2D.EMPTYMAT4_ARRAY[10];
		m4[11]=RenderState2D.EMPTYMAT4_ARRAY[11];
		m4[12]=m.tx;
		m4[13]=m.ty;
		m4[14]=RenderState2D.EMPTYMAT4_ARRAY[14];
		m4[15]=RenderState2D.EMPTYMAT4_ARRAY[15];
		return matArray;
	}

	RenderState2D.restoreTempArray=function(){
		RenderState2D.TEMPMAT4_ARRAY[0]=1;
		RenderState2D.TEMPMAT4_ARRAY[1]=0;
		RenderState2D.TEMPMAT4_ARRAY[4]=0;
		RenderState2D.TEMPMAT4_ARRAY[5]=1;
		RenderState2D.TEMPMAT4_ARRAY[12]=0;
		RenderState2D.TEMPMAT4_ARRAY[13]=0;
	}

	RenderState2D.clear=function(){
		RenderState2D.worldScissorTest=false;
		RenderState2D.worldShaderDefines=null;
		RenderState2D.worldFilters=null;
		RenderState2D.worldAlpha=1;
		RenderState2D.worldClipRect.x=RenderState2D.worldClipRect.y=0;
		RenderState2D.worldClipRect.width=RenderState2D.width;
		RenderState2D.worldClipRect.height=RenderState2D.height;
		RenderState2D.curRenderTarget=null;
	}

	RenderState2D._MAXSIZE=99999999;
	RenderState2D.EMPTYMAT4_ARRAY=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];
	RenderState2D.TEMPMAT4_ARRAY=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];
	RenderState2D.worldMatrix4=RenderState2D.TEMPMAT4_ARRAY;
	RenderState2D.worldAlpha=1.0;
	RenderState2D.worldScissorTest=false;
	RenderState2D.worldFilters=null;
	RenderState2D.worldShaderDefines=null;
	RenderState2D.curRenderTarget=null;
	RenderState2D.width=0;
	RenderState2D.height=0;
	__static(RenderState2D,
	['worldMatrix',function(){return this.worldMatrix=new Matrix();},'worldClipRect',function(){return this.worldClipRect=new Rectangle(0,0,99999999,99999999);}
	]);
	return RenderState2D;
})()


/**
*@private
*/
//class laya.webgl.WebGL
var WebGL=(function(){
	function WebGL(){}
	__class(WebGL,'laya.webgl.WebGL');
	WebGL._uint8ArraySlice=function(){
		var _this=this;
		var sz=_this.length;
		var dec=new Uint8Array(_this.length);
		for (var i=0;i < sz;i++)dec[i]=_this[i];
		return dec;
	}

	WebGL._float32ArraySlice=function(){
		var _this=this;
		var sz=_this.length;
		var dec=new Float32Array(_this.length);
		for (var i=0;i < sz;i++)dec[i]=_this[i];
		return dec;
	}

	WebGL._uint16ArraySlice=function(__arg){
		var arg=arguments;
		var _this=this;
		var sz=0;
		var dec;
		var i=0;
		if (arg.length===0){
			sz=_this.length;
			dec=new Uint16Array(sz);
			for (i=0;i < sz;i++)
			dec[i]=_this[i];
			}else if (arg.length===2){
			var start=arg[0];
			var end=arg[1];
			if (end > start){
				sz=end-start;
				dec=new Uint16Array(sz);
				for (i=start;i < end;i++)
				dec[i-start]=_this[i];
				}else {
				dec=new Uint16Array(0);
			}
		}
		return dec;
	}

	WebGL.expandContext=function(){
		var from=Context.prototype;
		var to=CanvasRenderingContext2D.prototype;
		to.fillTrangles=from.fillTrangles;
		Buffer2D.__int__(null);
		to.setIBVB=function (x,y,ib,vb,numElement,mat,shader,shaderValues,startIndex,offset){
			(startIndex===void 0)&& (startIndex=0);
			(offset===void 0)&& (offset=0);
			if (ib===null){
				this._ib=this._ib || IndexBuffer2D.QuadrangleIB;
				ib=this._ib;
				GlUtils.expandIBQuadrangle(ib,(vb._byteLength / (4 *16)+8));
			}
			this._setIBVB(x,y,ib,vb,numElement,mat,shader,shaderValues,startIndex,offset);
		};
		to.fillTrangles=function (tex,x,y,points,m){
			this._curMat=this._curMat || Matrix.create();
			this._vb=this._vb || VertexBuffer2D.create();
			if (!this._ib){
				this._ib=IndexBuffer2D.create();
				GlUtils.fillIBQuadrangle(this._ib,length / 4);
			};
			var vb=this._vb;
			var length=points.length >> 4;
			GlUtils.fillTranglesVB(vb,x,y,points,m || this._curMat,0,0);
			GlUtils.expandIBQuadrangle(this._ib,(vb._byteLength / (4 *16)+8));
			var shaderValues=new Value2D(0x01,0);
			shaderValues.textureHost=tex;
			var sd=new Shader2X("attribute vec2 position; attribute vec2 texcoord; uniform vec2 size; uniform mat4 mmat; varying vec2 v_texcoord; void main() { vec4 p=vec4(position.xy,0.0,1.0);vec4 pos=mmat*p; gl_Position =vec4((pos.x/size.x-0.5)*2.0,(0.5-pos.y/size.y)*2.0,pos.z,1.0); v_texcoord = texcoord; }","precision mediump float; varying vec2 v_texcoord; uniform sampler2D texture; void main() {vec4 color= texture2D(texture, v_texcoord); color.a*=1.0; gl_FragColor= color;}");
			vb._vertType=3;
			this._setIBVB(x,y,this._ib,vb,length *6,m,sd,shaderValues,0,0);
		}
	}

	WebGL.enable=function(){
		Browser.__init__();
		if (Render.isConchApp){
			if (!Render.isConchWebGL){
				RunDriver.skinAniSprite=function (){
					var tSkinSprite=new SkinMesh()
					return tSkinSprite;
				}
				WebGL.expandContext();
				return false;
			}
		}
		RunDriver.getWebGLContext=function getWebGLContext (canvas){
			var gl;
			var names=["webgl","experimental-webgl","webkit-3d","moz-webgl"];
			for (var i=0;i < names.length;i++){
				try {
					gl=canvas.getContext(names[i],{stencil:Config.isStencil,alpha:Config.isAlpha,antialias:Config.isAntialias,premultipliedAlpha:Config.premultipliedAlpha,preserveDrawingBuffer:Config.preserveDrawingBuffer});
				}catch (e){}
				if (gl)
					return gl;
			}
			return null;
		}
		WebGL.mainContext=RunDriver.getWebGLContext(Render._mainCanvas);
		if (WebGL.mainContext==null)
			return false;
		if (Render.isWebGL)return true;
		HTMLImage.create=function (src,def){
			return new WebGLImage(src,def);
		}
		HTMLSubImage.create=function (canvas,offsetX,offsetY,width,height,atlasImage,src){
			return new WebGLSubImage(canvas,offsetX,offsetY,width,height,atlasImage,src);
		}
		Render.WebGL=WebGL;
		Render.isWebGL=true;
		DrawText.__init__();
		RunDriver.createRenderSprite=function (type,next){
			return new RenderSprite3D(type,next);
		}
		RunDriver.createWebGLContext2D=function (c){
			return new WebGLContext2D(c);
		}
		RunDriver.changeWebGLSize=function (width,height){
			laya.webgl.WebGL.onStageResize(width,height);
		}
		RunDriver.createGraphics=function (){
			return new GraphicsGL();
		};
		var action=RunDriver.createFilterAction;
		RunDriver.createFilterAction=action ? action :function (type){
			return new ColorFilterActionGL()
		}
		RunDriver.clear=function (color){
			RenderState2D.worldScissorTest && laya.webgl.WebGL.mainContext.disable(0x0C11);
			var ctx=Render.context.ctx;
			var c=(ctx._submits._length==0 || Config.preserveDrawingBuffer)? Color$1.create(color)._color :Stage._wgColor;
			if (c)ctx.clearBG(c[0],c[1],c[2],c[3]);
			RenderState2D.clear();
		}
		RunDriver.addToAtlas=function (texture,force){
			(force===void 0)&& (force=false);
			var bitmap=texture.bitmap;
			if (!Render.optimizeTextureMemory(texture.url,texture)){
				(bitmap).enableMerageInAtlas=false;
				return;
			}
			if ((Laya.__typeof(bitmap,'laya.webgl.resource.IMergeAtlasBitmap'))&& ((bitmap).allowMerageInAtlas)){
				bitmap.on("recovered",texture,texture.addTextureToAtlas);
			}
		}
		RunDriver.isAtlas=function (bitmap){
			return (bitmap instanceof laya.webgl.atlas.AtlasWebGLCanvas );
		}
		AtlasResourceManager._enable();
		RunDriver.beginFlush=function (){
			var atlasResourceManager=AtlasResourceManager.instance;
			var count=atlasResourceManager.getAtlaserCount();
			for (var i=0;i < count;i++){
				var atlerCanvas=atlasResourceManager.getAtlaserByIndex(i).texture;
				(atlerCanvas._flashCacheImageNeedFlush)&& (RunDriver.flashFlushImage(atlerCanvas));
			}
		}
		RunDriver.drawToCanvas=function (sprite,_renderType,canvasWidth,canvasHeight,offsetX,offsetY){
			if (canvasWidth <=0 || canvasHeight <=0){
				console.log("[error] canvasWidth and canvasHeight should greater than zero");
			}
			offsetX-=sprite.x;
			offsetY-=sprite.y;
			var renderTarget=RenderTarget2D.create(canvasWidth,canvasHeight,0x1908,0x1401,0,false);
			renderTarget.start();
			renderTarget.clear(0,0,0,0);
			Render.context.clear();
			RenderSprite.renders[_renderType]._fun(sprite,Render.context,offsetX,RenderState2D.height-canvasHeight+offsetY);
			Render.context.flush();
			renderTarget.end();
			var pixels=renderTarget.getData(0,0,renderTarget.width,renderTarget.height);
			renderTarget.recycle();
			var htmlCanvas=new WebGLCanvas();
			htmlCanvas._canvas=Browser.createElement("canvas");
			htmlCanvas.size(canvasWidth,canvasHeight);
			var context=htmlCanvas._canvas.getContext('2d');
			Browser.canvas.size(canvasWidth,canvasHeight);
			var tempContext=Browser.context;
			var imgData=tempContext.createImageData(canvasWidth,canvasHeight);
			imgData.data.set(new Uint8ClampedArray(pixels.buffer));
			htmlCanvas._imgData=imgData;
			tempContext.putImageData(imgData,0,0);
			context.save();
			context.translate(0,canvasHeight);
			context.scale(1,-1);
			context.drawImage(Browser.canvas.source,0,0);
			context.restore();
			return htmlCanvas;
		}
		RunDriver.createFilterAction=function (type){
			var action;
			switch (type){
				case 0x20:
					action=new ColorFilterActionGL();
					break ;
				}
			return action;
		}
		RunDriver.addTextureToAtlas=function (texture){
			texture._uvID++;
			AtlasResourceManager._atlasRestore++;
			((texture.bitmap).enableMerageInAtlas)&& (AtlasResourceManager.instance.addToAtlas(texture));
		}
		RunDriver.getTexturePixels=function (value,x,y,width,height){
			(Render.context.ctx).clear();
			var tSprite=new Sprite();
			tSprite.graphics.drawTexture(value,-x,-y);
			var tRenderTarget=RenderTarget2D.create(width,height);
			tRenderTarget.start();
			tRenderTarget.clear(0,0,0,0);
			tSprite.render(Render.context,0,0);
			(Render.context.ctx).flush();
			tRenderTarget.end();
			var tUint8Array=tRenderTarget.getData(0,0,width,height);
			var tArray=[];
			var tIndex=0;
			for (var i=height-1;i >=0;i--){
				for (var j=0;j < width;j++){
					tIndex=(i *width+j)*4;
					tArray.push(tUint8Array[tIndex]);
					tArray.push(tUint8Array[tIndex+1]);
					tArray.push(tUint8Array[tIndex+2]);
					tArray.push(tUint8Array[tIndex+3]);
				}
			}
			return tArray;
		}
		RunDriver.skinAniSprite=function (){
			var tSkinSprite=new SkinMesh()
			return tSkinSprite;
		}
		HTMLCanvas.create=function (type,canvas){
			var ret=new WebGLCanvas();
			ret._imgData=canvas;
			ret.flipY=false;
			return ret;
		}
		Filter._filterStart=function (scope,sprite,context,x,y){
			var b=scope.getValue("bounds");
			var source=RenderTarget2D.create(b.width,b.height);
			source.start();
			source.clear(0,0,0,0);
			scope.addValue("src",source);
			scope.addValue("ScissorTest",RenderState2D.worldScissorTest);
			if (RenderState2D.worldScissorTest){
				var tClilpRect=new Rectangle();
				tClilpRect.copyFrom((context.ctx)._clipRect)
				scope.addValue("clipRect",tClilpRect);
				RenderState2D.worldScissorTest=false;
				laya.webgl.WebGL.mainContext.disable(0x0C11);
			}
		}
		Filter._filterEnd=function (scope,sprite,context,x,y){
			var b=scope.getValue("bounds");
			var source=scope.getValue("src");
			source.end();
			var out=RenderTarget2D.create(b.width,b.height);
			out.start();
			out.clear(0,0,0,0);
			scope.addValue("out",out);
			sprite._set$P('_filterCache',out);
			sprite._set$P('_isHaveGlowFilter',scope.getValue("_isHaveGlowFilter"));
		}
		Filter._EndTarget=function (scope,context){
			var source=scope.getValue("src");
			source.recycle();
			var out=scope.getValue("out");
			out.end();
			var b=scope.getValue("ScissorTest");
			if (b){
				RenderState2D.worldScissorTest=true;
				laya.webgl.WebGL.mainContext.enable(0x0C11);
				context.ctx.save();
				var tClipRect=scope.getValue("clipRect");
				(context.ctx).clipRect(tClipRect.x,tClipRect.y,tClipRect.width,tClipRect.height);
			}
		}
		Filter._useSrc=function (scope){
			var source=scope.getValue("out");
			source.end();
			source=scope.getValue("src");
			source.start();
			source.clear(0,0,0,0);
		}
		Filter._endSrc=function (scope){
			var source=scope.getValue("src");
			source.end();
		}
		Filter._useOut=function (scope){
			var source=scope.getValue("src");
			source.end();
			source=scope.getValue("out");
			source.start();
			source.clear(0,0,0,0);
		}
		Filter._endOut=function (scope){
			var source=scope.getValue("out");
			source.end();
		}
		Filter._recycleScope=function (scope){
			scope.recycle();
		}
		Filter._filter=function (sprite,context,x,y){
			var next=this._next;
			if (next){
				var filters=sprite.filters,len=filters.length;
				if (len==1 && (filters[0].type==0x20)){
					context.ctx.save();
					context.ctx.setFilters([filters[0]]);
					next._fun.call(next,sprite,context,x,y);
					context.ctx.restore();
					return;
				};
				var shaderValue;
				var b;
				var scope=SubmitCMDScope.create();
				var p=Point.TEMP;
				var tMatrix=context.ctx._getTransformMatrix();
				var mat=Matrix.create();
				tMatrix.copyTo(mat);
				var tPadding=0;
				var tHalfPadding=0;
				var tIsHaveGlowFilter=false;
				var out=sprite._$P._filterCache ? sprite._$P._filterCache :null;
				if (!out || sprite._repaint){
					tIsHaveGlowFilter=sprite._isHaveGlowFilter();
					scope.addValue("_isHaveGlowFilter",tIsHaveGlowFilter);
					if (tIsHaveGlowFilter){
						tPadding=50;
						tHalfPadding=25;
					}
					b=new Rectangle();
					b.copyFrom((sprite).getSelfBounds());
					b.x+=(sprite).x;
					b.y+=(sprite).y;
					b.x-=(sprite).pivotX+4;
					b.y-=(sprite).pivotY+4;
					var tSX=b.x;
					var tSY=b.y;
					b.width+=(tPadding+8);
					b.height+=(tPadding+8);
					p.x=b.x *mat.a+b.y *mat.c;
					p.y=b.y *mat.d+b.x *mat.b;
					b.x=p.x;
					b.y=p.y;
					p.x=b.width *mat.a+b.height *mat.c;
					p.y=b.height *mat.d+b.width *mat.b;
					b.width=p.x;
					b.height=p.y;
					if (b.width <=0 || b.height <=0){
						return;
					}
					out && out.recycle();
					scope.addValue("bounds",b);
					var submit=SubmitCMD.create([scope,sprite,context,0,0],Filter._filterStart);
					context.addRenderObject(submit);
					(context.ctx)._renderKey=0;
					(context.ctx)._shader2D.glTexture=null;
					var tX=sprite.x-tSX+tHalfPadding;
					var tY=sprite.y-tSY+tHalfPadding;
					next._fun.call(next,sprite,context,tX,tY);
					submit=SubmitCMD.create([scope,sprite,context,0,0],Filter._filterEnd);
					context.addRenderObject(submit);
					for (var i=0;i < len;i++){
						if (i !=0){
							submit=SubmitCMD.create([scope],Filter._useSrc);
							context.addRenderObject(submit);
							shaderValue=Value2D.create(0x01,0);
							Matrix.TEMP.identity();
							context.ctx.drawTarget(scope,0,0,b.width,b.height,Matrix.TEMP,"out",shaderValue,null,BlendMode.TOINT.overlay);
							submit=SubmitCMD.create([scope],Filter._useOut);
							context.addRenderObject(submit);
						};
						var fil=filters[i];
						fil.action.apply3d(scope,sprite,context,0,0);
					}
					submit=SubmitCMD.create([scope,context],Filter._EndTarget);
					context.addRenderObject(submit);
					}else {
					tIsHaveGlowFilter=sprite._$P._isHaveGlowFilter ? sprite._$P._isHaveGlowFilter :false;
					if (tIsHaveGlowFilter){
						tPadding=50;
						tHalfPadding=25;
					}
					b=sprite.getBounds();
					if (b.width <=0 || b.height <=0){
						return;
					}
					b.width+=tPadding;
					b.height+=tPadding;
					p.x=b.x *mat.a+b.y *mat.c;
					p.y=b.y *mat.d+b.x *mat.b;
					b.x=p.x;
					b.y=p.y;
					p.x=b.width *mat.a+b.height *mat.c;
					p.y=b.height *mat.d+b.width *mat.b;
					b.width=p.x;
					b.height=p.y;
					scope.addValue("out",out);
				}
				x=x-tHalfPadding-sprite.x;
				y=y-tHalfPadding-sprite.y;
				p.setTo(x,y);
				mat.transformPoint(p);
				x=p.x+b.x;
				y=p.y+b.y;
				shaderValue=Value2D.create(0x01,0);
				Matrix.TEMP.identity();
				(context.ctx).drawTarget(scope,x,y,b.width,b.height,Matrix.TEMP,"out",shaderValue,null,BlendMode.TOINT.overlay);
				submit=SubmitCMD.create([scope],Filter._recycleScope);
				context.addRenderObject(submit);
				mat.destroy();
			}
		}
		Float32Array.prototype.slice || (Float32Array.prototype.slice=WebGL._float32ArraySlice);
		Uint16Array.prototype.slice || (Uint16Array.prototype.slice=WebGL._uint16ArraySlice);
		Uint8Array.prototype.slice || (Uint8Array.prototype.slice=WebGL._uint8ArraySlice);
		return true;
	}

	WebGL.onStageResize=function(width,height){
		if (WebGL.mainContext==null)return;
		WebGL.mainContext.viewport(0,0,width,height);
		RenderState2D.width=width;
		RenderState2D.height=height;
	}

	WebGL.onInvalidGLRes=function(){
		AtlasResourceManager.instance.freeAll();
		ResourceManager.releaseContentManagers(true);
		WebGL.doNodeRepaint(Laya.stage);
		WebGL.mainContext.viewport(0,0,RenderState2D.width,RenderState2D.height);
		Laya.stage.event("devicelost");
	}

	WebGL.doNodeRepaint=function(sprite){
		(sprite.numChildren==0)&& (sprite.repaint());
		for (var i=0;i < sprite.numChildren;i++)
		WebGL.doNodeRepaint(sprite.getChildAt(i));
	}

	WebGL.init=function(canvas,width,height){
		WebGL.mainCanvas=canvas;
		HTMLCanvas._createContext=function (canvas){
			return new WebGLContext2D(canvas);
		}
		WebGLCanvas._createContext=function (canvas){
			return new WebGLContext2D(canvas);
		};
		var gl=laya.webgl.WebGL.mainContext;
		if (gl.getShaderPrecisionFormat !=null){
			var vertexPrecisionFormat=gl.getShaderPrecisionFormat(0x8B31,0x8DF2);
			var framePrecisionFormat=gl.getShaderPrecisionFormat(0x8B30,0x8DF2);
			WebGL.shaderHighPrecision=(vertexPrecisionFormat.precision&&framePrecisionFormat.precision)? true :false;
			}else {
			WebGL.shaderHighPrecision=false;
		}
		WebGL.compressAstc=gl.getExtension("WEBGL_compressed_texture_astc");
		WebGL.compressAtc=gl.getExtension("WEBGL_compressed_texture_atc");
		WebGL.compressEtc=gl.getExtension("WEBGL_compressed_texture_etc");
		WebGL.compressEtc1=gl.getExtension("WEBGL_compressed_texture_etc1");
		WebGL.compressPvrtc=gl.getExtension("WEBGL_compressed_texture_pvrtc");
		WebGL.compressS3tc=gl.getExtension("WEBGL_compressed_texture_s3tc");
		WebGL.compressS3tc_srgb=gl.getExtension("WEBGL_compressed_texture_s3tc_srgb");
		gl.deleteTexture1=gl.deleteTexture;
		gl.deleteTexture=function (t){
			if (t==WebGLContext.curBindTexValue){
				WebGLContext.curBindTexValue=null;
			}
			gl.deleteTexture1(t);
		}
		WebGL.onStageResize(width,height);
		if (WebGL.mainContext==null)
			throw new Error("webGL getContext err!");
		System.__init__();
		AtlasResourceManager.__init__();
		ShaderDefines2D.__init__();
		Submit.__init__();
		WebGLContext2D.__init__();
		Value2D.__init__();
		Shader2D.__init__();
		Buffer2D.__int__(gl);
		BlendMode._init_(gl);
		if (Render.isConchApp){
			conch.setOnInvalidGLRes(WebGL.onInvalidGLRes);
		}
	}

	WebGL.compressAstc=null;
	WebGL.compressAtc=null;
	WebGL.compressEtc=null;
	WebGL.compressEtc1=null;
	WebGL.compressPvrtc=null;
	WebGL.compressS3tc=null;
	WebGL.compressS3tc_srgb=null;
	WebGL.mainCanvas=null;
	WebGL.mainContext=null;
	WebGL.antialias=true;
	WebGL.shaderHighPrecision=false;
	WebGL._bg_null=[0,0,0,0];
	return WebGL;
})()


//class laya.webgl.WebGLContext
var WebGLContext=(function(){
	function WebGLContext(){}
	__class(WebGLContext,'laya.webgl.WebGLContext');
	WebGLContext.UseProgram=function(program){
		if (WebGLContext._useProgram===program)return false;
		WebGL.mainContext.useProgram(program);
		WebGLContext._useProgram=program;
		return true;
	}

	WebGLContext.setDepthTest=function(gl,value){
		value!==WebGLContext._depthTest && (WebGLContext._depthTest=value,value?gl.enable(0x0B71):gl.disable(0x0B71));
	}

	WebGLContext.setDepthMask=function(gl,value){
		value!==WebGLContext._depthMask && (WebGLContext._depthMask=value,gl.depthMask(value));
	}

	WebGLContext.setDepthFunc=function(gl,value){
		value!==WebGLContext._depthFunc && (WebGLContext._depthFunc=value,gl.depthFunc(value));
	}

	WebGLContext.setBlend=function(gl,value){
		value!==WebGLContext._blend && (WebGLContext._blend=value,value?gl.enable(0x0BE2):gl.disable(0x0BE2));
	}

	WebGLContext.setBlendFunc=function(gl,sFactor,dFactor){
		(sFactor!==WebGLContext._sFactor||dFactor!==WebGLContext._dFactor)&& (WebGLContext._sFactor=sFactor,WebGLContext._dFactor=dFactor,gl.blendFunc(sFactor,dFactor));
	}

	WebGLContext.setCullFace=function(gl,value){
		value!==WebGLContext._cullFace && (WebGLContext._cullFace=value,value?gl.enable(0x0B44):gl.disable(0x0B44));
	}

	WebGLContext.setFrontFace=function(gl,value){
		value!==WebGLContext._frontFace && (WebGLContext._frontFace=value,gl.frontFace(value));
	}

	WebGLContext.bindTexture=function(gl,target,texture){
		gl.bindTexture(target,texture);
		WebGLContext.curBindTexTarget=target;
		WebGLContext.curBindTexValue=texture;
	}

	WebGLContext.DEPTH_BUFFER_BIT=0x00000100;
	WebGLContext.STENCIL_BUFFER_BIT=0x00000400;
	WebGLContext.COLOR_BUFFER_BIT=0x00004000;
	WebGLContext.POINTS=0x0000;
	WebGLContext.LINES=0x0001;
	WebGLContext.LINE_LOOP=0x0002;
	WebGLContext.LINE_STRIP=0x0003;
	WebGLContext.TRIANGLES=0x0004;
	WebGLContext.TRIANGLE_STRIP=0x0005;
	WebGLContext.TRIANGLE_FAN=0x0006;
	WebGLContext.ZERO=0;
	WebGLContext.ONE=1;
	WebGLContext.SRC_COLOR=0x0300;
	WebGLContext.ONE_MINUS_SRC_COLOR=0x0301;
	WebGLContext.SRC_ALPHA=0x0302;
	WebGLContext.ONE_MINUS_SRC_ALPHA=0x0303;
	WebGLContext.DST_ALPHA=0x0304;
	WebGLContext.ONE_MINUS_DST_ALPHA=0x0305;
	WebGLContext.DST_COLOR=0x0306;
	WebGLContext.ONE_MINUS_DST_COLOR=0x0307;
	WebGLContext.SRC_ALPHA_SATURATE=0x0308;
	WebGLContext.FUNC_ADD=0x8006;
	WebGLContext.BLEND_EQUATION=0x8009;
	WebGLContext.BLEND_EQUATION_RGB=0x8009;
	WebGLContext.BLEND_EQUATION_ALPHA=0x883D;
	WebGLContext.FUNC_SUBTRACT=0x800A;
	WebGLContext.FUNC_REVERSE_SUBTRACT=0x800B;
	WebGLContext.BLEND_DST_RGB=0x80C8;
	WebGLContext.BLEND_SRC_RGB=0x80C9;
	WebGLContext.BLEND_DST_ALPHA=0x80CA;
	WebGLContext.BLEND_SRC_ALPHA=0x80CB;
	WebGLContext.CONSTANT_COLOR=0x8001;
	WebGLContext.ONE_MINUS_CONSTANT_COLOR=0x8002;
	WebGLContext.CONSTANT_ALPHA=0x8003;
	WebGLContext.ONE_MINUS_CONSTANT_ALPHA=0x8004;
	WebGLContext.BLEND_COLOR=0x8005;
	WebGLContext.ARRAY_BUFFER=0x8892;
	WebGLContext.ELEMENT_ARRAY_BUFFER=0x8893;
	WebGLContext.ARRAY_BUFFER_BINDING=0x8894;
	WebGLContext.ELEMENT_ARRAY_BUFFER_BINDING=0x8895;
	WebGLContext.STREAM_DRAW=0x88E0;
	WebGLContext.STATIC_DRAW=0x88E4;
	WebGLContext.DYNAMIC_DRAW=0x88E8;
	WebGLContext.BUFFER_SIZE=0x8764;
	WebGLContext.BUFFER_USAGE=0x8765;
	WebGLContext.CURRENT_VERTEX_ATTRIB=0x8626;
	WebGLContext.FRONT=0x0404;
	WebGLContext.BACK=0x0405;
	WebGLContext.CULL_FACE=0x0B44;
	WebGLContext.FRONT_AND_BACK=0x0408;
	WebGLContext.BLEND=0x0BE2;
	WebGLContext.DITHER=0x0BD0;
	WebGLContext.STENCIL_TEST=0x0B90;
	WebGLContext.DEPTH_TEST=0x0B71;
	WebGLContext.SCISSOR_TEST=0x0C11;
	WebGLContext.POLYGON_OFFSET_FILL=0x8037;
	WebGLContext.SAMPLE_ALPHA_TO_COVERAGE=0x809E;
	WebGLContext.SAMPLE_COVERAGE=0x80A0;
	WebGLContext.NO_ERROR=0;
	WebGLContext.INVALID_ENUM=0x0500;
	WebGLContext.INVALID_VALUE=0x0501;
	WebGLContext.INVALID_OPERATION=0x0502;
	WebGLContext.OUT_OF_MEMORY=0x0505;
	WebGLContext.CW=0x0900;
	WebGLContext.CCW=0x0901;
	WebGLContext.LINE_WIDTH=0x0B21;
	WebGLContext.ALIASED_POINT_SIZE_RANGE=0x846D;
	WebGLContext.ALIASED_LINE_WIDTH_RANGE=0x846E;
	WebGLContext.CULL_FACE_MODE=0x0B45;
	WebGLContext.FRONT_FACE=0x0B46;
	WebGLContext.DEPTH_RANGE=0x0B70;
	WebGLContext.DEPTH_WRITEMASK=0x0B72;
	WebGLContext.DEPTH_CLEAR_VALUE=0x0B73;
	WebGLContext.DEPTH_FUNC=0x0B74;
	WebGLContext.STENCIL_CLEAR_VALUE=0x0B91;
	WebGLContext.STENCIL_FUNC=0x0B92;
	WebGLContext.STENCIL_FAIL=0x0B94;
	WebGLContext.STENCIL_PASS_DEPTH_FAIL=0x0B95;
	WebGLContext.STENCIL_PASS_DEPTH_PASS=0x0B96;
	WebGLContext.STENCIL_REF=0x0B97;
	WebGLContext.STENCIL_VALUE_MASK=0x0B93;
	WebGLContext.STENCIL_WRITEMASK=0x0B98;
	WebGLContext.STENCIL_BACK_FUNC=0x8800;
	WebGLContext.STENCIL_BACK_FAIL=0x8801;
	WebGLContext.STENCIL_BACK_PASS_DEPTH_FAIL=0x8802;
	WebGLContext.STENCIL_BACK_PASS_DEPTH_PASS=0x8803;
	WebGLContext.STENCIL_BACK_REF=0x8CA3;
	WebGLContext.STENCIL_BACK_VALUE_MASK=0x8CA4;
	WebGLContext.STENCIL_BACK_WRITEMASK=0x8CA5;
	WebGLContext.VIEWPORT=0x0BA2;
	WebGLContext.SCISSOR_BOX=0x0C10;
	WebGLContext.COLOR_CLEAR_VALUE=0x0C22;
	WebGLContext.COLOR_WRITEMASK=0x0C23;
	WebGLContext.UNPACK_ALIGNMENT=0x0CF5;
	WebGLContext.PACK_ALIGNMENT=0x0D05;
	WebGLContext.MAX_TEXTURE_SIZE=0x0D33;
	WebGLContext.MAX_VIEWPORT_DIMS=0x0D3A;
	WebGLContext.SUBPIXEL_BITS=0x0D50;
	WebGLContext.RED_BITS=0x0D52;
	WebGLContext.GREEN_BITS=0x0D53;
	WebGLContext.BLUE_BITS=0x0D54;
	WebGLContext.ALPHA_BITS=0x0D55;
	WebGLContext.DEPTH_BITS=0x0D56;
	WebGLContext.STENCIL_BITS=0x0D57;
	WebGLContext.POLYGON_OFFSET_UNITS=0x2A00;
	WebGLContext.POLYGON_OFFSET_FACTOR=0x8038;
	WebGLContext.TEXTURE_BINDING_2D=0x8069;
	WebGLContext.SAMPLE_BUFFERS=0x80A8;
	WebGLContext.SAMPLES=0x80A9;
	WebGLContext.SAMPLE_COVERAGE_VALUE=0x80AA;
	WebGLContext.SAMPLE_COVERAGE_INVERT=0x80AB;
	WebGLContext.NUM_COMPRESSED_TEXTURE_FORMATS=0x86A2;
	WebGLContext.COMPRESSED_TEXTURE_FORMATS=0x86A3;
	WebGLContext.DONT_CARE=0x1100;
	WebGLContext.FASTEST=0x1101;
	WebGLContext.NICEST=0x1102;
	WebGLContext.GENERATE_MIPMAP_HINT=0x8192;
	WebGLContext.BYTE=0x1400;
	WebGLContext.UNSIGNED_BYTE=0x1401;
	WebGLContext.SHORT=0x1402;
	WebGLContext.UNSIGNED_SHORT=0x1403;
	WebGLContext.INT=0x1404;
	WebGLContext.UNSIGNED_INT=0x1405;
	WebGLContext.FLOAT=0x1406;
	WebGLContext.DEPTH_COMPONENT=0x1902;
	WebGLContext.ALPHA=0x1906;
	WebGLContext.RGB=0x1907;
	WebGLContext.RGBA=0x1908;
	WebGLContext.LUMINANCE=0x1909;
	WebGLContext.LUMINANCE_ALPHA=0x190A;
	WebGLContext.UNSIGNED_SHORT_4_4_4_4=0x8033;
	WebGLContext.UNSIGNED_SHORT_5_5_5_1=0x8034;
	WebGLContext.UNSIGNED_SHORT_5_6_5=0x8363;
	WebGLContext.FRAGMENT_SHADER=0x8B30;
	WebGLContext.VERTEX_SHADER=0x8B31;
	WebGLContext.MAX_VERTEX_ATTRIBS=0x8869;
	WebGLContext.MAX_VERTEX_UNIFORM_VECTORS=0x8DFB;
	WebGLContext.MAX_VARYING_VECTORS=0x8DFC;
	WebGLContext.MAX_COMBINED_TEXTURE_IMAGE_UNITS=0x8B4D;
	WebGLContext.MAX_VERTEX_TEXTURE_IMAGE_UNITS=0x8B4C;
	WebGLContext.MAX_TEXTURE_IMAGE_UNITS=0x8872;
	WebGLContext.MAX_FRAGMENT_UNIFORM_VECTORS=0x8DFD;
	WebGLContext.SHADER_TYPE=0x8B4F;
	WebGLContext.DELETE_STATUS=0x8B80;
	WebGLContext.LINK_STATUS=0x8B82;
	WebGLContext.VALIDATE_STATUS=0x8B83;
	WebGLContext.ATTACHED_SHADERS=0x8B85;
	WebGLContext.ACTIVE_UNIFORMS=0x8B86;
	WebGLContext.ACTIVE_ATTRIBUTES=0x8B89;
	WebGLContext.SHADING_LANGUAGE_VERSION=0x8B8C;
	WebGLContext.CURRENT_PROGRAM=0x8B8D;
	WebGLContext.NEVER=0x0200;
	WebGLContext.LESS=0x0201;
	WebGLContext.EQUAL=0x0202;
	WebGLContext.LEQUAL=0x0203;
	WebGLContext.GREATER=0x0204;
	WebGLContext.NOTEQUAL=0x0205;
	WebGLContext.GEQUAL=0x0206;
	WebGLContext.ALWAYS=0x0207;
	WebGLContext.KEEP=0x1E00;
	WebGLContext.REPLACE=0x1E01;
	WebGLContext.INCR=0x1E02;
	WebGLContext.DECR=0x1E03;
	WebGLContext.INVERT=0x150A;
	WebGLContext.INCR_WRAP=0x8507;
	WebGLContext.DECR_WRAP=0x8508;
	WebGLContext.VENDOR=0x1F00;
	WebGLContext.RENDERER=0x1F01;
	WebGLContext.VERSION=0x1F02;
	WebGLContext.NEAREST=0x2600;
	WebGLContext.LINEAR=0x2601;
	WebGLContext.NEAREST_MIPMAP_NEAREST=0x2700;
	WebGLContext.LINEAR_MIPMAP_NEAREST=0x2701;
	WebGLContext.NEAREST_MIPMAP_LINEAR=0x2702;
	WebGLContext.LINEAR_MIPMAP_LINEAR=0x2703;
	WebGLContext.TEXTURE_MAG_FILTER=0x2800;
	WebGLContext.TEXTURE_MIN_FILTER=0x2801;
	WebGLContext.TEXTURE_WRAP_S=0x2802;
	WebGLContext.TEXTURE_WRAP_T=0x2803;
	WebGLContext.TEXTURE_2D=0x0DE1;
	WebGLContext.TEXTURE=0x1702;
	WebGLContext.TEXTURE_CUBE_MAP=0x8513;
	WebGLContext.TEXTURE_BINDING_CUBE_MAP=0x8514;
	WebGLContext.TEXTURE_CUBE_MAP_POSITIVE_X=0x8515;
	WebGLContext.TEXTURE_CUBE_MAP_NEGATIVE_X=0x8516;
	WebGLContext.TEXTURE_CUBE_MAP_POSITIVE_Y=0x8517;
	WebGLContext.TEXTURE_CUBE_MAP_NEGATIVE_Y=0x8518;
	WebGLContext.TEXTURE_CUBE_MAP_POSITIVE_Z=0x8519;
	WebGLContext.TEXTURE_CUBE_MAP_NEGATIVE_Z=0x851A;
	WebGLContext.MAX_CUBE_MAP_TEXTURE_SIZE=0x851C;
	WebGLContext.TEXTURE0=0x84C0;
	WebGLContext.TEXTURE1=0x84C1;
	WebGLContext.TEXTURE2=0x84C2;
	WebGLContext.TEXTURE3=0x84C3;
	WebGLContext.TEXTURE4=0x84C4;
	WebGLContext.TEXTURE5=0x84C5;
	WebGLContext.TEXTURE6=0x84C6;
	WebGLContext.TEXTURE7=0x84C7;
	WebGLContext.TEXTURE8=0x84C8;
	WebGLContext.TEXTURE9=0x84C9;
	WebGLContext.TEXTURE10=0x84CA;
	WebGLContext.TEXTURE11=0x84CB;
	WebGLContext.TEXTURE12=0x84CC;
	WebGLContext.TEXTURE13=0x84CD;
	WebGLContext.TEXTURE14=0x84CE;
	WebGLContext.TEXTURE15=0x84CF;
	WebGLContext.TEXTURE16=0x84D0;
	WebGLContext.TEXTURE17=0x84D1;
	WebGLContext.TEXTURE18=0x84D2;
	WebGLContext.TEXTURE19=0x84D3;
	WebGLContext.TEXTURE20=0x84D4;
	WebGLContext.TEXTURE21=0x84D5;
	WebGLContext.TEXTURE22=0x84D6;
	WebGLContext.TEXTURE23=0x84D7;
	WebGLContext.TEXTURE24=0x84D8;
	WebGLContext.TEXTURE25=0x84D9;
	WebGLContext.TEXTURE26=0x84DA;
	WebGLContext.TEXTURE27=0x84DB;
	WebGLContext.TEXTURE28=0x84DC;
	WebGLContext.TEXTURE29=0x84DD;
	WebGLContext.TEXTURE30=0x84DE;
	WebGLContext.TEXTURE31=0x84DF;
	WebGLContext.ACTIVE_TEXTURE=0x84E0;
	WebGLContext.REPEAT=0x2901;
	WebGLContext.CLAMP_TO_EDGE=0x812F;
	WebGLContext.MIRRORED_REPEAT=0x8370;
	WebGLContext.FLOAT_VEC2=0x8B50;
	WebGLContext.FLOAT_VEC3=0x8B51;
	WebGLContext.FLOAT_VEC4=0x8B52;
	WebGLContext.INT_VEC2=0x8B53;
	WebGLContext.INT_VEC3=0x8B54;
	WebGLContext.INT_VEC4=0x8B55;
	WebGLContext.BOOL=0x8B56;
	WebGLContext.BOOL_VEC2=0x8B57;
	WebGLContext.BOOL_VEC3=0x8B58;
	WebGLContext.BOOL_VEC4=0x8B59;
	WebGLContext.FLOAT_MAT2=0x8B5A;
	WebGLContext.FLOAT_MAT3=0x8B5B;
	WebGLContext.FLOAT_MAT4=0x8B5C;
	WebGLContext.SAMPLER_2D=0x8B5E;
	WebGLContext.SAMPLER_CUBE=0x8B60;
	WebGLContext.VERTEX_ATTRIB_ARRAY_ENABLED=0x8622;
	WebGLContext.VERTEX_ATTRIB_ARRAY_SIZE=0x8623;
	WebGLContext.VERTEX_ATTRIB_ARRAY_STRIDE=0x8624;
	WebGLContext.VERTEX_ATTRIB_ARRAY_TYPE=0x8625;
	WebGLContext.VERTEX_ATTRIB_ARRAY_NORMALIZED=0x886A;
	WebGLContext.VERTEX_ATTRIB_ARRAY_POINTER=0x8645;
	WebGLContext.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING=0x889F;
	WebGLContext.COMPILE_STATUS=0x8B81;
	WebGLContext.LOW_FLOAT=0x8DF0;
	WebGLContext.MEDIUM_FLOAT=0x8DF1;
	WebGLContext.HIGH_FLOAT=0x8DF2;
	WebGLContext.LOW_INT=0x8DF3;
	WebGLContext.MEDIUM_INT=0x8DF4;
	WebGLContext.HIGH_INT=0x8DF5;
	WebGLContext.FRAMEBUFFER=0x8D40;
	WebGLContext.RENDERBUFFER=0x8D41;
	WebGLContext.RGBA4=0x8056;
	WebGLContext.RGB5_A1=0x8057;
	WebGLContext.RGB565=0x8D62;
	WebGLContext.DEPTH_COMPONENT16=0x81A5;
	WebGLContext.STENCIL_INDEX=0x1901;
	WebGLContext.STENCIL_INDEX8=0x8D48;
	WebGLContext.DEPTH_STENCIL=0x84F9;
	WebGLContext.RENDERBUFFER_WIDTH=0x8D42;
	WebGLContext.RENDERBUFFER_HEIGHT=0x8D43;
	WebGLContext.RENDERBUFFER_INTERNAL_FORMAT=0x8D44;
	WebGLContext.RENDERBUFFER_RED_SIZE=0x8D50;
	WebGLContext.RENDERBUFFER_GREEN_SIZE=0x8D51;
	WebGLContext.RENDERBUFFER_BLUE_SIZE=0x8D52;
	WebGLContext.RENDERBUFFER_ALPHA_SIZE=0x8D53;
	WebGLContext.RENDERBUFFER_DEPTH_SIZE=0x8D54;
	WebGLContext.RENDERBUFFER_STENCIL_SIZE=0x8D55;
	WebGLContext.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE=0x8CD0;
	WebGLContext.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME=0x8CD1;
	WebGLContext.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL=0x8CD2;
	WebGLContext.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE=0x8CD3;
	WebGLContext.COLOR_ATTACHMENT0=0x8CE0;
	WebGLContext.DEPTH_ATTACHMENT=0x8D00;
	WebGLContext.STENCIL_ATTACHMENT=0x8D20;
	WebGLContext.DEPTH_STENCIL_ATTACHMENT=0x821A;
	WebGLContext.NONE=0;
	WebGLContext.FRAMEBUFFER_COMPLETE=0x8CD5;
	WebGLContext.FRAMEBUFFER_INCOMPLETE_ATTACHMENT=0x8CD6;
	WebGLContext.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT=0x8CD7;
	WebGLContext.FRAMEBUFFER_INCOMPLETE_DIMENSIONS=0x8CD9;
	WebGLContext.FRAMEBUFFER_UNSUPPORTED=0x8CDD;
	WebGLContext.FRAMEBUFFER_BINDING=0x8CA6;
	WebGLContext.RENDERBUFFER_BINDING=0x8CA7;
	WebGLContext.MAX_RENDERBUFFER_SIZE=0x84E8;
	WebGLContext.INVALID_FRAMEBUFFER_OPERATION=0x0506;
	WebGLContext.UNPACK_FLIP_Y_WEBGL=0x9240;
	WebGLContext.UNPACK_PREMULTIPLY_ALPHA_WEBGL=0x9241;
	WebGLContext.CONTEXT_LOST_WEBGL=0x9242;
	WebGLContext.UNPACK_COLORSPACE_CONVERSION_WEBGL=0x9243;
	WebGLContext.BROWSER_DEFAULT_WEBGL=0x9244;
	WebGLContext._useProgram=null;
	WebGLContext._depthTest=true;
	WebGLContext._depthMask=true;
	WebGLContext._depthFunc=0x0201;
	WebGLContext._blend=false;
	WebGLContext._sFactor=1;
	WebGLContext._dFactor=0;
	WebGLContext._cullFace=false;
	WebGLContext._frontFace=0x0901;
	WebGLContext.curBindTexTarget=null;
	WebGLContext.curBindTexValue=null;
	return WebGLContext;
})()


/**
*...
*@author dongketao
*/
//class PathFinding.core.Node
var Node$1=(function(){
	function Node(x,y,walkable){
		this.x=0;
		this.y=0;
		this.g=0;
		this.f=0;
		this.h=0;
		this.by=0;
		this.parent=null;
		this.opened=null;
		this.closed=null;
		this.tested=null;
		this.retainCount=null;
		this.walkable=false;
		(walkable===void 0)&& (walkable=true);
		this.x=x;
		this.y=y;
		this.walkable=walkable;
	}

	__class(Node,'PathFinding.core.Node',null,'Node$1');
	return Node;
})()


/**全局配置*/
//class UIConfig
var UIConfig=(function(){
	function UIConfig(){}
	__class(UIConfig,'UIConfig');
	UIConfig.touchScrollEnable=true;
	UIConfig.mouseWheelEnable=true;
	UIConfig.showButtons=true;
	UIConfig.popupBgColor="#000000";
	UIConfig.popupBgAlpha=0.5;
	UIConfig.closeDialogOnSide=true;
	return UIConfig;
})()


/**
*<code>Node</code> 类是可放在显示列表中的所有对象的基类。该显示列表管理 Laya 运行时中显示的所有对象。使用 Node 类排列显示列表中的显示对象。Node 对象可以有子显示对象。
*/
//class laya.display.Node extends laya.events.EventDispatcher
var Node=(function(_super){
	function Node(){
		/**@private */
		this._bits=0;
		/**@private 是否在显示列表中显示*/
		this._displayedInStage=false;
		/**@private 父节点对象*/
		this._parent=null;
		/**@private */
		this.conchModel=null;
		/**节点名称。*/
		this.name="";
		/**[只读]是否已经销毁。对象销毁后不能再使用。*/
		this._destroyed=false;
		Node.__super.call(this);
		this._childs=Node.ARRAY_EMPTY;
		this._$P=Node.PROP_EMPTY;
		this.timer=Laya.scaleTimer;
		this.conchModel=Render.isConchNode ? this.createConchModel():null;
	}

	__class(Node,'laya.display.Node',_super);
	var __proto=Node.prototype;
	/**@private */
	__proto._setBit=function(type,value){
		if (type==0x1){
			var preValue=this._getBit(type);
			if (preValue !=value){
				this._updateDisplayedInstage();
			}
		}
		if (value){
			this._bits |=type;
			}else {
			this._bits &=~type;
		}
	}

	/**@private */
	__proto._getBit=function(type){
		return (this._bits & type)!=0;
	}

	/**@private */
	__proto._setUpNoticeChain=function(){
		if (this._getBit(0x1)){
			this._setUpNoticeType(0x1);
		}
	}

	/**@private */
	__proto._setUpNoticeType=function(type){
		var ele=this;
		ele._setBit(type,true);
		ele=ele.parent;
		while (ele){
			if (ele._getBit(type))return;
			ele._setBit(type,true);
			ele=ele.parent;
		}
	}

	/**
	*<p>增加事件侦听器，以使侦听器能够接收事件通知。</p>
	*<p>如果侦听鼠标事件，则会自动设置自己和父亲节点的属性 mouseEnabled 的值为 true(如果父节点mouseEnabled=false，则停止设置父节点mouseEnabled属性)。</p>
	*@param type 事件的类型。
	*@param caller 事件侦听函数的执行域。
	*@param listener 事件侦听函数。
	*@param args （可选）事件侦听函数的回调参数。
	*@return 此 EventDispatcher 对象。
	*/
	__proto.on=function(type,caller,listener,args){
		if (type==="display" || type==="undisplay"){
			if (!this._getBit(0x1)){
				this._setUpNoticeType(0x1);
			}
		}
		return this._createListener(type,caller,listener,args,false);
	}

	/**
	*<p>增加事件侦听器，以使侦听器能够接收事件通知，此侦听事件响应一次后则自动移除侦听。</p>
	*<p>如果侦听鼠标事件，则会自动设置自己和父亲节点的属性 mouseEnabled 的值为 true(如果父节点mouseEnabled=false，则停止设置父节点mouseEnabled属性)。</p>
	*@param type 事件的类型。
	*@param caller 事件侦听函数的执行域。
	*@param listener 事件侦听函数。
	*@param args （可选）事件侦听函数的回调参数。
	*@return 此 EventDispatcher 对象。
	*/
	__proto.once=function(type,caller,listener,args){
		if (type==="display" || type==="undisplay"){
			if (!this._getBit(0x1)){
				this._setUpNoticeType(0x1);
			}
		}
		return this._createListener(type,caller,listener,args,true);
	}

	/**@private */
	__proto.createConchModel=function(){
		return null;
	}

	/**
	*<p>销毁此对象。destroy对象默认会把自己从父节点移除，并且清理自身引用关系，等待js自动垃圾回收机制回收。destroy后不能再使用。</p>
	*<p>destroy时会移除自身的事情监听，自身的timer监听，移除子对象及从父节点移除自己。</p>
	*@param destroyChild （可选）是否同时销毁子节点，若值为true,则销毁子节点，否则不销毁子节点。
	*/
	__proto.destroy=function(destroyChild){
		(destroyChild===void 0)&& (destroyChild=true);
		this._destroyed=true;
		this._parent && this._parent.removeChild(this);
		if (this._childs){
			if (destroyChild)this.destroyChildren();
			else this.removeChildren();
		}
		this._childs=null;
		this._$P=null;
		this.offAll();
		this.timer.clearAll(this);
	}

	/**
	*销毁所有子对象，不销毁自己本身。
	*/
	__proto.destroyChildren=function(){
		if (this._childs){
			for (var i=this._childs.length-1;i >-1;i--){
				this._childs[i].destroy(true);
			}
		}
	}

	/**
	*添加子节点。
	*@param node 节点对象
	*@return 返回添加的节点
	*/
	__proto.addChild=function(node){
		if (!node || this.destroyed || node===this)return node;
		if ((node).zOrder)this._set$P("hasZorder",true);
		if (node._parent===this){
			var index=this.getChildIndex(node);
			if (index!==this._childs.length-1){
				this._childs.splice(index,1);
				this._childs.push(node);
				if (this.conchModel){
					this.conchModel.removeChild(node.conchModel);
					this.conchModel.addChildAt(node.conchModel,this._childs.length-1);
				}
				this._childChanged();
			}
			}else {
			node.parent && node.parent.removeChild(node);
			this._childs===Node.ARRAY_EMPTY && (this._childs=[]);
			this._childs.push(node);
			this.conchModel && this.conchModel.addChildAt(node.conchModel,this._childs.length-1);
			node.parent=this;
			this._childChanged();
		}
		return node;
	}

	/**
	*批量增加子节点
	*@param ...args 无数子节点。
	*/
	__proto.addChildren=function(__args){
		var args=arguments;
		var i=0,n=args.length;
		while (i < n){
			this.addChild(args[i++]);
		}
	}

	/**
	*添加子节点到指定的索引位置。
	*@param node 节点对象。
	*@param index 索引位置。
	*@return 返回添加的节点。
	*/
	__proto.addChildAt=function(node,index){
		if (!node || this.destroyed || node===this)return node;
		if ((node).zOrder)this._set$P("hasZorder",true);
		if (index >=0 && index <=this._childs.length){
			if (node._parent===this){
				var oldIndex=this.getChildIndex(node);
				this._childs.splice(oldIndex,1);
				this._childs.splice(index,0,node);
				if (this.conchModel){
					this.conchModel.removeChild(node.conchModel);
					this.conchModel.addChildAt(node.conchModel,index);
				}
				this._childChanged();
				}else {
				node.parent && node.parent.removeChild(node);
				this._childs===Node.ARRAY_EMPTY && (this._childs=[]);
				this._childs.splice(index,0,node);
				this.conchModel && this.conchModel.addChildAt(node.conchModel,index);
				node.parent=this;
			}
			return node;
			}else {
			throw new Error("appendChildAt:The index is out of bounds");
		}
	}

	/**
	*根据子节点对象，获取子节点的索引位置。
	*@param node 子节点。
	*@return 子节点所在的索引位置。
	*/
	__proto.getChildIndex=function(node){
		return this._childs.indexOf(node);
	}

	/**
	*根据子节点的名字，获取子节点对象。
	*@param name 子节点的名字。
	*@return 节点对象。
	*/
	__proto.getChildByName=function(name){
		var nodes=this._childs;
		if (nodes){
			for (var i=0,n=nodes.length;i < n;i++){
				var node=nodes[i];
				if (node.name===name)return node;
			}
		}
		return null;
	}

	/**@private */
	__proto._get$P=function(key){
		return this._$P[key];
	}

	/**@private */
	__proto._set$P=function(key,value){
		if (!this.destroyed){
			this._$P===Node.PROP_EMPTY && (this._$P={});
			this._$P[key]=value;
		}
		return value;
	}

	/**
	*根据子节点的索引位置，获取子节点对象。
	*@param index 索引位置
	*@return 子节点
	*/
	__proto.getChildAt=function(index){
		return this._childs[index];
	}

	/**
	*设置子节点的索引位置。
	*@param node 子节点。
	*@param index 新的索引。
	*@return 返回子节点本身。
	*/
	__proto.setChildIndex=function(node,index){
		var childs=this._childs;
		if (index < 0 || index >=childs.length){
			throw new Error("setChildIndex:The index is out of bounds.");
		};
		var oldIndex=this.getChildIndex(node);
		if (oldIndex < 0)throw new Error("setChildIndex:node is must child of this object.");
		childs.splice(oldIndex,1);
		childs.splice(index,0,node);
		if (this.conchModel){
			this.conchModel.removeChild(node.conchModel);
			this.conchModel.addChildAt(node.conchModel,index);
		}
		this._childChanged();
		return node;
	}

	/**
	*@private
	*子节点发生改变。
	*@param child 子节点。
	*/
	__proto._childChanged=function(child){}
	/**
	*删除子节点。
	*@param node 子节点
	*@return 被删除的节点
	*/
	__proto.removeChild=function(node){
		if (!this._childs)return node;
		var index=this._childs.indexOf(node);
		return this.removeChildAt(index);
	}

	/**
	*从父容器删除自己，如已经被删除不会抛出异常。
	*@return 当前节点（ Node ）对象。
	*/
	__proto.removeSelf=function(){
		this._parent && this._parent.removeChild(this);
		return this;
	}

	/**
	*根据子节点名字删除对应的子节点对象，如果找不到不会抛出异常。
	*@param name 对象名字。
	*@return 查找到的节点（ Node ）对象。
	*/
	__proto.removeChildByName=function(name){
		var node=this.getChildByName(name);
		node && this.removeChild(node);
		return node;
	}

	/**
	*根据子节点索引位置，删除对应的子节点对象。
	*@param index 节点索引位置。
	*@return 被删除的节点。
	*/
	__proto.removeChildAt=function(index){
		var node=this.getChildAt(index);
		if (node){
			this._childs.splice(index,1);
			this.conchModel && this.conchModel.removeChild(node.conchModel);
			node.parent=null;
		}
		return node;
	}

	/**
	*删除指定索引区间的所有子对象。
	*@param beginIndex 开始索引。
	*@param endIndex 结束索引。
	*@return 当前节点对象。
	*/
	__proto.removeChildren=function(beginIndex,endIndex){
		(beginIndex===void 0)&& (beginIndex=0);
		(endIndex===void 0)&& (endIndex=0x7fffffff);
		if (this._childs && this._childs.length > 0){
			var childs=this._childs;
			if (beginIndex===0 && endIndex >=n){
				var arr=childs;
				this._childs=Node.ARRAY_EMPTY;
				}else {
				arr=childs.splice(beginIndex,endIndex-beginIndex);
			}
			for (var i=0,n=arr.length;i < n;i++){
				arr[i].parent=null;
				this.conchModel && this.conchModel.removeChild(arr[i].conchModel);
			}
		}
		return this;
	}

	/**
	*替换子节点。
	*@internal 将传入的新节点对象替换到已有子节点索引位置处。
	*@param newNode 新节点。
	*@param oldNode 老节点。
	*@return 返回新节点。
	*/
	__proto.replaceChild=function(newNode,oldNode){
		var index=this._childs.indexOf(oldNode);
		if (index >-1){
			this._childs.splice(index,1,newNode);
			if (this.conchModel){
				this.conchModel.removeChild(oldNode.conchModel);
				this.conchModel.addChildAt(newNode.conchModel,index);
			}
			oldNode.parent=null;
			newNode.parent=this;
			return newNode;
		}
		return null;
	}

	/**@private */
	__proto._updateDisplayedInstage=function(){
		var ele;
		ele=this;
		var stage=Laya.stage;
		this._displayedInStage=false;
		while (ele){
			if (ele._getBit(0x1)){
				this._displayedInStage=ele._displayedInStage;
				break ;
			}
			if (ele==stage || ele._displayedInStage){
				this._displayedInStage=true;
				break ;
			}
			ele=ele.parent;
		}
	}

	/**@private */
	__proto._setDisplay=function(value){
		if (this._displayedInStage!==value){
			this._displayedInStage=value;
			if (value)this.event("display");
			else this.event("undisplay");
		}
	}

	/**
	*@private
	*设置指定节点对象是否可见(是否在渲染列表中)。
	*@param node 节点。
	*@param display 是否可见。
	*/
	__proto._displayChild=function(node,display){
		var childs=node._childs;
		if (childs){
			for (var i=0,n=childs.length;i < n;i++){
				var child=childs[i];
				if (!child._getBit(0x1))continue ;
				if (child._childs.length > 0){
					this._displayChild(child,display);
					}else {
					child._setDisplay(display);
				}
			}
		}
		node._setDisplay(display);
	}

	/**
	*当前容器是否包含指定的 <code>Node</code> 节点对象 。
	*@param node 指定的 <code>Node</code> 节点对象 。
	*@return 一个布尔值表示是否包含指定的 <code>Node</code> 节点对象 。
	*/
	__proto.contains=function(node){
		if (node===this)return true;
		while (node){
			if (node.parent===this)return true;
			node=node.parent;
		}
		return false;
	}

	/**
	*定时重复执行某函数。功能同Laya.timer.timerLoop()。
	*@param delay 间隔时间(单位毫秒)。
	*@param caller 执行域(this)。
	*@param method 结束时的回调方法。
	*@param args （可选）回调参数。
	*@param coverBefore （可选）是否覆盖之前的延迟执行，默认为true。
	*@param jumpFrame 时钟是否跳帧。基于时间的循环回调，单位时间间隔内，如能执行多次回调，出于性能考虑，引擎默认只执行一次，设置jumpFrame=true后，则回调会连续执行多次
	*/
	__proto.timerLoop=function(delay,caller,method,args,coverBefore,jumpFrame){
		(coverBefore===void 0)&& (coverBefore=true);
		(jumpFrame===void 0)&& (jumpFrame=false);
		this.timer.loop(delay,caller,method,args,coverBefore,jumpFrame);
	}

	/**
	*定时执行某函数一次。功能同Laya.timer.timerOnce()。
	*@param delay 延迟时间(单位毫秒)。
	*@param caller 执行域(this)。
	*@param method 结束时的回调方法。
	*@param args （可选）回调参数。
	*@param coverBefore （可选）是否覆盖之前的延迟执行，默认为true。
	*/
	__proto.timerOnce=function(delay,caller,method,args,coverBefore){
		(coverBefore===void 0)&& (coverBefore=true);
		this.timer._create(false,false,delay,caller,method,args,coverBefore);
	}

	/**
	*定时重复执行某函数(基于帧率)。功能同Laya.timer.frameLoop()。
	*@param delay 间隔几帧(单位为帧)。
	*@param caller 执行域(this)。
	*@param method 结束时的回调方法。
	*@param args （可选）回调参数。
	*@param coverBefore （可选）是否覆盖之前的延迟执行，默认为true。
	*/
	__proto.frameLoop=function(delay,caller,method,args,coverBefore){
		(coverBefore===void 0)&& (coverBefore=true);
		this.timer._create(true,true,delay,caller,method,args,coverBefore);
	}

	/**
	*定时执行一次某函数(基于帧率)。功能同Laya.timer.frameOnce()。
	*@param delay 延迟几帧(单位为帧)。
	*@param caller 执行域(this)
	*@param method 结束时的回调方法
	*@param args （可选）回调参数
	*@param coverBefore （可选）是否覆盖之前的延迟执行，默认为true
	*/
	__proto.frameOnce=function(delay,caller,method,args,coverBefore){
		(coverBefore===void 0)&& (coverBefore=true);
		this.timer._create(true,false,delay,caller,method,args,coverBefore);
	}

	/**
	*清理定时器。功能同Laya.timer.clearTimer()。
	*@param caller 执行域(this)。
	*@param method 结束时的回调方法。
	*/
	__proto.clearTimer=function(caller,method){
		this.timer.clear(caller,method);
	}

	/**
	*子对象数量。
	*/
	__getset(0,__proto,'numChildren',function(){
		return this._childs.length;
	});

	/**
	*[只读]是否已经销毁。对象销毁后不能再使用。
	*@return
	*/
	__getset(0,__proto,'destroyed',function(){
		return this._destroyed;
	});

	/**父节点。*/
	__getset(0,__proto,'parent',function(){
		return this._parent;
		},function(value){
		if (this._parent!==value){
			if (value){
				this._parent=value;
				this.event("added");
				if (this._getBit(0x1)){
					this._setUpNoticeChain();
					value.displayedInStage && this._displayChild(this,true);
				}
				value._childChanged(this);
				}else {
				this.event("removed");
				this._parent._childChanged();
				if (this._getBit(0x1))this._displayChild(this,false);
				this._parent=value;
			}
		}
	});

	/**表示是否在显示列表中显示。*/
	__getset(0,__proto,'displayedInStage',function(){
		if (this._getBit(0x1))return this._displayedInStage;
		this._setUpNoticeType(0x1);
		return this._displayedInStage;
	});

	Node.ARRAY_EMPTY=[];
	Node.PROP_EMPTY={};
	Node.NOTICE_DISPLAY=0x1;
	Node.MOUSEENABLE=0x2;
	return Node;
})(EventDispatcher)


/**
*地图块加载
*@author guowc
*
*/
//class game.control.loadmap.BaseMap extends laya.events.EventDispatcher
var BaseMap=(function(_super){
	function BaseMap(){
		this._preFillRect=null;
		this._preRenders=null;
		this.tilemap=null;
		this.dic=[];
		BaseMap.__super.call(this);
		this._preRenders=[];
		this._preFillRect=new Rectangle();
		this.tilemap=BornBigMapTiles.getInstance();
	}

	__class(BaseMap,'game.control.loadmap.BaseMap',_super);
	var __proto=BaseMap.prototype;
	__proto.fillRect=function(container,viewRect){
		var j=0;
		var key;
		var disObj;
		if (this._preFillRect.x+this._preFillRect.width>=viewRect.x+viewRect.width
			&& this._preFillRect.x<=viewRect.x
		&& this._preFillRect.y<=viewRect.y
		&& this._preFillRect.y+this._preFillRect.height>=viewRect.y+viewRect.height){
			return;
		};
		var startTileY=(viewRect.y-0)*SceneConfig.TILE_SIZE_H_R>>0;
		var startTileX=(viewRect.x-0)*SceneConfig.TILE_SIZE_W_R>>0;
		startTileY=startTileY < 0 ? (0):(startTileY);
		startTileX=startTileX < 0 ? (0):(startTileX);
		var endTileY=Math.ceil((viewRect.y+viewRect.height-0)*SceneConfig.TILE_SIZE_H_R);
		var endTileX=Math.ceil((viewRect.x+viewRect.width-0)*SceneConfig.TILE_SIZE_W_R);
		this._preFillRect.x=startTileX *SceneConfig.TILE_SIZE_W;
		this._preFillRect.y=startTileY *SceneConfig.TILE_SIZE_H;
		this._preFillRect.width=(endTileX-startTileX)*SceneConfig.TILE_SIZE_W>>0;
		this._preFillRect.height=(endTileY-startTileY)*SceneConfig.TILE_SIZE_H>>0;
		this.dic.length=0;
		var i=startTileY;
		while (i < endTileY){
			j=startTileX;
			while (j < endTileX){
				if (i >=0 && j >=0){
					key=i+"_"+j;
					disObj=this.tilemap.tiles[key];
					if((disObj instanceof laya.display.Sprite )){
						if (this._preRenders[i*100+j]){
							this._preRenders[i*100+j]=null;
							delete this._preRenders[i*100+j];
							}else{
							disObj.x=SceneConfig.TILE_SIZE_W *j;
							disObj.y=SceneConfig.TILE_SIZE_H *i;
							container.addChild(disObj);
						}
						this.dic[i*100+j]=disObj;
					}
				}
				j++;
			}
			i++;
		}
		var $each_disObj;
		for($each_disObj in this._preRenders){
			disObj=this._preRenders[$each_disObj];
			if(disObj.parent){
				disObj.parent.removeChild(disObj);
			}
		};
		var tmp=this._preRenders;
		this._preRenders=this.dic;
		this.dic=tmp;
	}

	__proto.clear=function(){
		this._preRenders.length=0;
		this.dic.length=0;
		this._preFillRect=new Rectangle();
		BornBigMapTiles.getInstance().clear();
	}

	return BaseMap;
})(EventDispatcher)


//class game.modal.data.EnemyRoleVO extends game.modal.BaseRoleVO
var EnemyRoleVO=(function(_super){
	function EnemyRoleVO(){
		this.ai=0;
		//ai类型
		this.rw=0;
		//运动宽度范围
		this.rh=0;
		//运动高度范围
		this.isBoss=false;
		EnemyRoleVO.__super.call(this);
	}

	__class(EnemyRoleVO,'game.modal.data.EnemyRoleVO',_super);
	EnemyRoleVO.setData=function(type,tlev){
		(tlev===void 0)&& (tlev=1);
		type=EnemyRoleVO.getEnemyType(type,tlev);
		var vo=new EnemyRoleVO;
		var data=MapData.enemyData[type];
		vo.ai=data.ai;
		vo.skin=data.skin;
		vo.rw=data.rw;
		vo.rh=data.rh;
		vo.dir=data.dir;
		vo.thing=data.thing;
		vo.speed=data.speed;
		var lev=NaN;
		if(data.hurt==0){
			lev=1;
			}else{
			lev=tlev+(tlev-1)*2+MapData.mapLevel*0.5;
		}
		if(vo.thing==0 && vo.speed>0){
			if(tlev>3){
				vo.speed=data.speed+(Math.random()*2>>0)+1;
				}else if(tlev>2){
				vo.speed=data.speed+1;
				}else{
				vo.speed=data.speed;
			}
			vo.speed=vo.speed>5 ? 5 :vo.speed;
		}
		vo.basehp=data.hp;
		vo.maxhp=vo.hp=data.hp*lev>>0;
		vo.gold=data.gold+(lev-1)*0.5*data.gold>>0;
		if(GlobalAPI.levelMgr.sort==1){
			vo.gold=vo.gold*2;
		}
		vo.score=data.score;
		vo.enemyexp=vo.hp>0 ? vo.maxhp*0.1>>0 :0;
		vo.stronghp=vo.hp<0;
		vo.hurt=data.hurt*lev>>0;
		vo.noMagnet=GlobalAPI.propMgr.isNoMagnetProp(vo.skin);
		vo.id=GlobalAPI.activeMgr.enemyid++;
		return vo;
	}

	EnemyRoleVO.getEnemyType=function(type,lev){
		if(lev==1)return type;
		var idx=EnemyRoleVO.etype.indexOf(type);
		if(idx<0)return type;
		if(idx>4){
			idx+=Math.random()*3>>0;
			}else if(idx>-1){
			switch(lev){
				case 2:
					idx+=Math.random()*lev>>0;
					break ;
				case 3:
					idx+=Math.random()*lev>>0;
					break ;
				case 4:
					idx+=Math.random()*3+1>>0;
					break ;
				}
		}
		if(idx>EnemyRoleVO.etype.length-1){
			idx=EnemyRoleVO.etype.length-1;
		}
		type=EnemyRoleVO.etype[idx];
		return type;
	}

	__static(EnemyRoleVO,
	['etype',function(){return this.etype=[10001,10101,10401,10701,10201,10501,10601,10301,10801];}
	]);
	return EnemyRoleVO;
})(BaseRoleVO)


/**
*@private
*<code>Resource</code> 资源存取类。
*/
//class laya.resource.Resource extends laya.events.EventDispatcher
var Resource=(function(_super){
	function Resource(){
		/**@private */
		//this.__loaded=false;
		/**@private */
		//this._id=0;
		/**@private */
		//this._memorySize=0;
		/**@private */
		//this._released=false;
		/**@private */
		//this._destroyed=false;
		/**@private */
		//this._referenceCount=0;
		/**@private */
		//this._group=null;
		/**@private */
		//this._url=null;
		/**@private */
		//this._resourceManager=null;
		/**@private */
		//this._lastUseFrameCount=0;
		/**是否加锁，如果true为不能使用自动释放机制。*/
		//this.lock=false;
		/**名称。 */
		//this.name=null;
		Resource.__super.call(this);
		this._$1__id=++Resource._uniqueIDCounter;
		this.__loaded=true;
		this._destroyed=false;
		this._referenceCount=0;
		Resource._idResourcesMap[this.id]=this;
		this._released=true;
		this.lock=false;
		this._memorySize=0;
		this._lastUseFrameCount=-1;
		(ResourceManager.currentResourceManager)&& (ResourceManager.currentResourceManager.addResource(this));
	}

	__class(Resource,'laya.resource.Resource',_super);
	var __proto=Resource.prototype;
	Laya.imps(__proto,{"laya.resource.ICreateResource":true,"laya.resource.IDispose":true})
	/**
	*@private
	*/
	__proto._setUrl=function(url){
		if (this._url!==url){
			var resList;
			if (this._url){
				resList=Resource._urlResourcesMap[this._url];
				resList.splice(resList.indexOf(this),1);
				(resList.length===0)&& (delete Resource._urlResourcesMap[this._url]);
			}
			if (url){
				resList=Resource._urlResourcesMap[url];
				(resList)|| (Resource._urlResourcesMap[url]=resList=[]);
				resList.push(this);
			}
			this._url=url;
		}
	}

	/**
	*@private
	*/
	__proto._getGroup=function(){
		return this._group;
	}

	/**
	*@private
	*/
	__proto._setGroup=function(value){
		if (this._group!==value){
			var groupList;
			if (this._group){
				groupList=Resource._groupResourcesMap[this._group];
				groupList.splice(groupList.indexOf(this),1);
				(groupList.length===0)&& (delete Resource._groupResourcesMap[this._group]);
			}
			if (value){
				groupList=Resource._groupResourcesMap[value];
				(groupList)|| (Resource._groupResourcesMap[value]=groupList=[]);
				groupList.push(this);
			}
			this._group=value;
		}
	}

	/**
	*@private
	*/
	__proto._addReference=function(){
		this._referenceCount++;
	}

	/**
	*@private
	*/
	__proto._removeReference=function(){
		this._referenceCount--;
	}

	/**
	*@private
	*/
	__proto._clearReference=function(){
		this._referenceCount=0;
	}

	/**
	*@private
	*/
	__proto._endLoaded=function(){
		this.__loaded=true;
		this.event("loaded",this);
	}

	/**
	*@private
	*/
	__proto.recreateResource=function(){
		this.completeCreate();
	}

	/**
	*@private
	*/
	__proto.disposeResource=function(){}
	/**
	*激活资源，使用资源前应先调用此函数激活。
	*@param force 是否强制创建。
	*/
	__proto.activeResource=function(force){
		(force===void 0)&& (force=false);
		this._lastUseFrameCount=Stat.loopCount;
		if (!this._destroyed && this.__loaded && (this._released || force))
			this.recreateResource();
	}

	/**
	*释放资源。
	*@param force 是否强制释放。
	*@return 是否成功释放。
	*/
	__proto.releaseResource=function(force){
		(force===void 0)&& (force=false);
		if (!force && this.lock)
			return false;
		if (!this._released || force){
			this.disposeResource();
			this._released=true;
			this._lastUseFrameCount=-1;
			this.event("released",this);
			return true;
			}else {
			return false;
		}
	}

	/**
	*@private
	*/
	__proto.onAsynLoaded=function(url,data,params){
		throw new Error("Resource: must override this function!");
	}

	/**
	*<p>彻底处理资源，处理后不能恢复。</p>
	*<p><b>注意：</b>会强制解锁清理。</p>
	*/
	__proto.destroy=function(){
		if (this._destroyed)
			return;
		if (this._resourceManager!==null)
			this._resourceManager.removeResource(this);
		this._destroyed=true;
		this.lock=false;
		this.releaseResource();
		delete Resource._idResourcesMap[this.id];
		var resList;
		if (this._url){
			resList=Resource._urlResourcesMap[this._url];
			if (resList){
				resList.splice(resList.indexOf(this),1);
				(resList.length===0)&& (delete Resource._urlResourcesMap[this.url]);
			}
			Loader.clearRes(this._url);
			(this.__loaded)||(RunDriver.cancelLoadByUrl(this._url));
		}
		if (this._group){
			resList=Resource._groupResourcesMap[this._group];
			resList.splice(resList.indexOf(this),1);
			(resList.length===0)&& (delete Resource._groupResourcesMap[this.url]);
		}
	}

	/**完成资源激活。*/
	__proto.completeCreate=function(){
		this._released=false;
		this.event("recovered",this);
	}

	/**
	*@private
	*/
	__proto.dispose=function(){
		this.destroy();
	}

	/**
	*@private
	*/
	/**
	*占用内存尺寸。
	*/
	__getset(0,__proto,'memorySize',function(){
		return this._memorySize;
		},function(value){
		var offsetValue=value-this._memorySize;
		this._memorySize=value;
		this.resourceManager && this.resourceManager.addSize(offsetValue);
	});

	/**
	*@private
	*/
	__getset(0,__proto,'_loaded',null,function(value){
		this.__loaded=value;
	});

	/**
	*获取是否已加载完成。
	*/
	__getset(0,__proto,'loaded',function(){
		return this.__loaded;
	});

	/**
	*获取唯一标识ID,通常用于识别。
	*/
	__getset(0,__proto,'id',function(){
		return this._$1__id;
	});

	/**
	*是否已处理。
	*/
	__getset(0,__proto,'destroyed',function(){
		return this._destroyed;
	});

	/**
	*设置资源组名。
	*/
	/**
	*获取资源组名。
	*/
	__getset(0,__proto,'group',function(){
		return this._getGroup();
		},function(value){
		this._setGroup(value);
	});

	/**
	*资源管理员。
	*/
	__getset(0,__proto,'resourceManager',function(){
		return this._resourceManager;
	});

	/**
	*获取资源的URL地址。
	*@return URL地址。
	*/
	__getset(0,__proto,'url',function(){
		return this._url;
	});

	/**
	*是否已释放。
	*/
	__getset(0,__proto,'released',function(){
		return this._released;
	});

	/**
	*获取资源的引用计数。
	*/
	__getset(0,__proto,'referenceCount',function(){
		return this._referenceCount;
	});

	Resource.getResourceByID=function(id){
		return Resource._idResourcesMap[id];
	}

	Resource.getResourceByURL=function(url,index){
		(index===void 0)&& (index=0);
		return Resource._urlResourcesMap[url][index];
	}

	Resource.getResourceCountByURL=function(url){
		return Resource._urlResourcesMap[url].length;
	}

	Resource.destroyUnusedResources=function(group){
		var res;
		if (group){
			var resouList=Resource._groupResourcesMap[group];
			if (resouList){
				var tempResouList=resouList.slice();
				for (var i=0,n=tempResouList.length;i < n;i++){
					res=tempResouList[i];
					if (!res.lock && res._referenceCount===0)
						res.destroy();
				}
			}
			}else {
			for (var k in Resource._idResourcesMap){
				res=Resource._idResourcesMap[k];
				if (!res.lock && res._referenceCount===0)
					res.destroy();
			}
		}
	}

	Resource._uniqueIDCounter=0;
	Resource._idResourcesMap={};
	Resource._urlResourcesMap={};
	Resource._groupResourcesMap={};
	return Resource;
})(EventDispatcher)


/**
*追踪弹
*@author guowc
*
*/
//class mylaya.effects.FollowBomb extends mylaya.effects.BaseEffect
var FollowBomb=(function(_super){
	function FollowBomb(){
		this.bomb=null;
		this._container=null;
		this.oldpt=null;
		this.quicktoAng=0;
		this._angid=0;
		this._oid=0;
		this._nid=0;
		this.flycirlFun=null;
		this.flycirlFunCaller=null;
		this.delayGas=0;
		this._endGasColor="#777777";
		this._endGasDelay=0;
		this.quickto=false;
		//在一定范围内正确角度进行
		this.speed=6;
		//速度
		this.stepAng=5;
		//角度增量
		this.startAng=-90;
		this._ang=0;
		this.dx=0;
		this.dy=0;
		this.endAng=0;
		this._targetPt=null;
		this._startPt=null;
		this.isAdd=false;
		this.movedir=0;
		//移动X方向
		this.sp=null;
		this._rect=null;
		FollowBomb.__super.call(this);
		this._startPt=new Point;
		this._targetPt=new Point;
		this.oldpt=new Point;
		this._rect=new Rectangle;
		this.sp=new Sprite;
	}

	__class(FollowBomb,'mylaya.effects.FollowBomb',_super);
	var __proto=FollowBomb.prototype;
	__proto.start=function(container,startPt,targetPt,bomSkin){
		this._dispose=false;
		this._container=container;
		if(!this.bomb){
			if(bomSkin){
				this.bomb=bomSkin;
				}else{
				this.bomb=new Sprite;
				this.bomb.graphics.drawRect(-5,-5,10,10,"#ff0000");
			}
			this._rect.width=this.bomb.width;
			this._rect.height=this.bomb.height;
			this.bomb.pos(-this._rect.width>>1,-this._rect.height>>1);
		}
		this.sp.rotation=this.startAng;
		this._ang=this.startAng-1;
		this.setSpeed(this.speed);
		this.oldpt.x=this.sp.x=this._startPt.x=startPt.x+this.dx;
		this.oldpt.x=this.sp.y=this._startPt.y=startPt.y+this.dy;
		this.sp.addChild(this.bomb);
		this._container.addChild(this.sp);
		if(targetPt){
			this.updateTargetPt(targetPt.x,targetPt.y);
			}else{
			this.endAng=this.startAng;
		}
		HeartManager.getInstance().add(this,this.move);
		this.move();
	}

	__proto.getSkinBmp=function(){
		return this.bomb;
	}

	__proto.updateTargetPt=function(x,y){
		if(x==this._targetPt.x && y==this._targetPt.y)
			return;
		this.quickto=false;
		this._angid=0;
		this._targetPt.x=x;
		this._targetPt.y=y;
		this.startAng=this.startAng%360;
		var dy=this._targetPt.y-this._startPt.y;
		var dx=this._targetPt.x-this._startPt.x;
		this.endAng=Math.atan2(dy,dx)*MathUtil.rotation;
		var ang=this.startAng;
		var ange=this.endAng;
		if(ang<0)ang+=360;
		if(ange<0)ange+=360;
		if(ang < ange)ang+=360;
		if(ang-ange< 180){
			this.isAdd=false;
			}else{
			this.isAdd=true;
		}
	}

	/**
	*取得目标点
	*@return
	*
	*/
	__proto.getTargetPt=function(){
		return this._targetPt;
	}

	/**
	*起始追踪角度
	*@param val
	*
	*/
	__proto.setStartAng=function(val){
		this.startAng=val;
	}

	/**
	*追踪速度
	*@param val
	*
	*/
	__proto.setSpeed=function(val){
		this.speed=val;
		this.startAng=this.startAng%360;
		this.dx=MathUtil.coss[this.startAng]*this.speed>>0;
		this.dy=MathUtil.sins[this.startAng]*this.speed>>0;
	}

	/**
	*每步追踪角度递增
	*@param val
	*
	*/
	__proto.setStepAng=function(val){
		this.stepAng=val;
	}

	/**
	*尾气着色设定
	*@param val
	*
	*/
	__proto.setEndGasColor=function(val){
		this._endGasColor=val;
	}

	/**
	*尾气间隔
	*@param val
	*
	*/
	__proto.setEndGasDelay=function(val){
		this._endGasDelay=val;
	}

	/**
	*转一次圈
	*@param val
	*
	*/
	__proto.setFlyCirlOver=function(caller,val){
		this.flycirlFun=val;
		this.flycirlFunCaller=caller;
	}

	__proto.moveOver=function(){
		this._targetPt.x=this._startPt.x+Math.cos(MathUtil.radian*this.startAng)*1000;
		this._targetPt.y=this._startPt.y+Math.sin(MathUtil.radian*this.startAng)*1000;
	}

	/**
	*设定多短距离直接转为目标角度
	*@param val
	*
	*/
	__proto.setQuicktoAng=function(val){
		this.quicktoAng=val;
	}

	__proto.move=function(){
		if(!this.quickto){
			if(this.startAng !=this.endAng){
				this.endAng=MathUtil.getAngPoint(this._startPt,this._targetPt)>>0;
				if(this.isAdd){
					while(this.startAng > this.endAng){
						this.endAng+=360;
					}
					}else{
					while(this.startAng < this.endAng){
						this.endAng-=360;
					}
				};
				var ax=this.startAng+this.stepAng;
				var bx=this.startAng-this.stepAng;
				if(ax > this.endAng && bx < this.endAng){
					this._nid=0;
					this.startAng=this.endAng;
					}else if(this.startAng > this.endAng){
					this._nid=1;
					this.startAng=bx;
					}else if(this.startAng < this.endAng){
					this._nid=2;
					this.startAng=ax;
				}
				if(this._oid==this._nid){
					this._angid++;
					if(this._angid*this.stepAng>360){
						console.log("FollowBomb fly cirl....",this._angid,this._angid*this.stepAng,this.flycirlFun);
						this._angid=0;
						if(this.flycirlFun==null){
							this.moveOver();
							}else{
							this.flycirlFun.apply(this.flycirlFunCaller,[this]);
						}
					}
					}else{
					this._angid=0;
				}
				this._oid=this._nid;
				if(this.quicktoAng>0){
					var dis=this._startPt.distance(this._targetPt.x,this._targetPt.y)>>0;
					if(dis<this.quicktoAng){
						this.quickto=true;
					}
				}
			}
			}else{
			this.startAng=MathUtil.getAngPoint(this._startPt,this._targetPt)+0.5>>0;
		}
		this.going();
	}

	__proto.going=function(){
		if(this.startAng!=this._ang){
			this._ang=this.startAng;
			this.sp.rotation=this.startAng;
			this.dx=Math.cos(this.startAng*MathUtil.radian)*this.speed>>0;
			this.dy=Math.sin(this.startAng*MathUtil.radian)*this.speed>>0;
		};
		var tx=this._startPt.x;
		this.oldpt.x=this._startPt.x;
		this.oldpt.y=this._startPt.y;
		this._startPt.x+=this.dx;
		this._startPt.y+=this.dy;
		this.sp.x=this._startPt.x;
		this.sp.y=this._startPt.y;
		if(this._startPt.x < tx){
			this.movedir=-1;
			}else{
			this.movedir=1;
		}
		this.addGas();
		if(this._startPt.distance(this._targetPt.x,this._targetPt.y)<15){
			this._startPt.x=this._targetPt.x;
			this._startPt.y=this._targetPt.y;
			this.dispose();
			}else if(this.limitRect && !this.limitRect.contains(this._startPt.x,this._startPt.y)){
			this.dispose();
		}
	}

	__proto.addGas=function(){}
	__proto.dispose=function(){
		if(this._dispose)return;
		_super.prototype.dispose.call(this);
		this._angid=0;
		this.flycirlFun=null;
		HeartManager.getInstance().remove(this,this.move);
		this.sp.removeSelf();
		this.quickto=false;
		this._ang=this.startAng=-90;
		this.isAdd=false;
		this.limitRect=null;
		this._targetPt.x=this._targetPt.y=0;
	}

	return FollowBomb;
})(BaseEffect)


/**
*射击
*@author guowc
*
*/
//class game.weapon.ShootBullet extends mylaya.effects.BaseEffect
var ShootBullet=(function(_super){
	function ShootBullet(){
		this._container=null;
		this.oldpt=null;
		this.dx=0;
		this.dy=0;
		this._clear=false;
		this._ang=0;
		this.movedir=1;
		this.arrow=null;
		this._type=0;
		this.speed=10;
		this.pt=null;
		this._hurt=0;
		this._crit=0;
		this._rect=null;
		this._id=0;
		this._roleid=0;
		this._aoe=0;
		ShootBullet.__super.call(this);
		this.pt=new Point;
		this.oldpt=new Point;
		this._rect=new Rectangle;
	}

	__class(ShootBullet,'game.weapon.ShootBullet',_super);
	var __proto=ShootBullet.prototype;
	Laya.imps(__proto,{"game.weapon.Iweapon":true})
	__proto.start=function(container,startPt,arrowSkin){
		this._dispose=false;
		this._container=container;
		if(!this.arrow){
			if(arrowSkin){
				this.arrow=arrowSkin;
				}else{
				this.arrow=new Sprite;
				this.arrow.graphics.drawRect(0,0,10,10,"#ff0000");
			}
			if((this.arrow instanceof laya.display.Animation )){
				(this.arrow).play();
				this._rect.width=this.arrow.getBounds().width;
				this._rect.height=this.arrow.getBounds().height;
				}else{
				this._rect.width=this.arrow.getBounds().width;
				this._rect.height=this.arrow.getBounds().height;
				this.arrow.pivot(this._rect.width>>1,this._rect.height>>1);
			}
			}else if((this.arrow instanceof laya.display.Animation )){
			(this.arrow).play();
		}
		this.oldpt.x=this.arrow.x=this.pt.x=startPt.x;
		this.oldpt.y=this.arrow.y=this.pt.y=startPt.y;
		GlobalAPI.heartMgr.add(this,this.move);
		this._container.addChild(this.arrow);
		return this.arrow;
	}

	/**
	*设定移动角度
	*@param val
	*
	*/
	__proto.setAng=function(val){
		this._ang=val%360;
		this.arrow.rotation=this._ang;
		this.dx=MathUtil.coss[this._ang]*this.speed;
		this.dy=MathUtil.sins[this._ang]*this.speed;
		if(this.dx > 0)
			this.movedir=1;
		else
		this.movedir=-1;
	}

	__proto.move=function(){
		if(this._dispose)return;
		this.oldpt.x=this.pt.x;
		this.oldpt.y=this.pt.y;
		this.pt.x+=this.dx;
		this.pt.y+=this.dy;
		this.arrow.x=this.pt.x;
		this.arrow.y=this.pt.y;
		if(this.limitRect){
			if(!this.limitRect.contains(this.pt.x,this.pt.y)){
				this.dispose();
			}
		}
	}

	__proto.setSpeed=function(val){
		this.speed=val;
	}

	__proto.setType=function(val){
		this._type=val;
	}

	__proto.getType=function(){
		return this._type;
	}

	__proto.getSkin=function(){
		return this.arrow;
	}

	__proto.getSkinPt=function(){
		return this.pt;
	}

	__proto.getMoveDir=function(){
		return this.movedir;
	}

	__proto.setHurt=function(val){
		this._hurt=val;
	}

	__proto.getHurt=function(){
		return this._hurt;
	}

	__proto.setCrit=function(val){
		this._crit=val;
	}

	__proto.getCrit=function(){
		return this._crit;
	}

	__proto.getOldPt=function(){
		return this.oldpt;
	}

	__proto.setAoe=function(val){
		this._aoe=val;
	}

	__proto.getAoe=function(){
		return this._aoe;
	}

	__proto.getRect=function(){
		this._rect.x=this.pt.x-this._rect.width*0.5;
		this._rect.y=this.pt.y-this._rect.height*0.5;
		return this._rect;
	}

	__proto.setid=function(val){
		this._id=val;
	}

	__proto.getid=function(){
		return this._id;
	}

	__proto.setRoleid=function(val){
		this._roleid=val;
	}

	__proto.getRoleid=function(){
		return this._roleid;
	}

	__proto.clear=function(){
		this._clear=true;
		this.dispose();
	}

	__proto.dispose=function(){
		if(this._dispose)return;
		_super.prototype.dispose.call(this);
		if(!this._clear){
			GlobalAPI.miniAniEffect.start(null,this.pt.x,this.pt.y,"hurt");
			}else{
			this._clear=false;
		}
		this.movedir=1;
		if((this.arrow instanceof laya.display.Animation )){
			(this.arrow).stop();
		}
		this.arrow.removeSelf();
		GlobalAPI.heartMgr.remove(this,this.move);
		if(!this._disposeCheck){
			GlobalAPI.weaponMgr.remove(this);
			GlobalAPI.poolMgr.disposeWeapon(this);
		}
	}

	return ShootBullet;
})(BaseEffect)


/**
*射箭效果
*@author guowc
*
*/
//class mylaya.effects.ShootArrow extends mylaya.effects.BaseEffect
var ShootArrow=(function(_super){
	function ShootArrow(){
		this.pt=null;
		this.oldpt=null;
		this.movedir=1;
		//移动方向
		this._container=null;
		this.arrow=null;
		this.xSpeed=NaN;
		this.ySpeed=NaN;
		this.t0=0;
		this.t1=15;
		//几帧后达到目标点
		this.g=1;
		this.sx=0;
		this.sy=0;
		this._rect=null;
		ShootArrow.__super.call(this);
		this.pt=new Point;
		this.oldpt=new Point;
		this._rect=new Rectangle;
	}

	__class(ShootArrow,'mylaya.effects.ShootArrow',_super);
	var __proto=ShootArrow.prototype;
	__proto.start=function(container,startPt,targetPt,arrowSkin){
		this._dispose=false;
		this._container=container;
		if(!this.arrow){
			if(arrowSkin){
				this.arrow=arrowSkin;
				}else{
				this.arrow=new Sprite;
				this.arrow.graphics.drawRect(-5,-5,10,10,"#ff0000");
			}
			this._rect.width=this.arrow.getBounds().width;
			this._rect.height=this.arrow.getBounds().height;
		}
		this.pt.x=this.oldpt.x=this.arrow.x=this.sx=startPt.x;
		this.pt.y=this.oldpt.y=this.arrow.y=this.sy=startPt.y;
		this.xSpeed=(targetPt.x-this.sx)/ this.t1;
		this.movedir=this.xSpeed<0 ?-1 :1;
		this.ySpeed=((targetPt.y-this.sy)-this.g *this.t1 *this.t1*0.5)/ this.t1;
		this.t0=0;
		this.move();
		if(!this._dispose){
			HeartManager.getInstance().add(this,this.move);
			this._container.addChild(this.arrow);
		}
		return this.arrow;
	}

	//val帧后达到目标点
	__proto.setFrameOk=function(val){
		this.t1=val;
	}

	__proto.move=function(){
		if(this._dispose)return;
		this.t0+=0.1;
		this.oldpt.x=this.pt.x;
		this.oldpt.y=this.pt.y;
		this.pt.x=this.arrow.x=this.sx+this.t0 *this.xSpeed>>0;
		this.pt.y=this.arrow.y=this.sy+this.t0 *this.ySpeed+this.g *this.t0 *this.t0 *0.5>>0;
	}

	__proto.dispose=function(){
		this.arrow.removeSelf();
		HeartManager.getInstance().remove(this,this.move);
		_super.prototype.dispose.call(this);
	}

	return ShootArrow;
})(BaseEffect)


/**
*加载食物数据
*[{sort:5000,type:5001-5999,skin:图块资源编号,score:加分,gold:加钱,hp:加血},...]]
*格式[[{url:地址,sort:类型},...],[]]
*@author guowc
*
*/
//class modal.config.FoodData extends modal.config.FmData
var FoodData=(function(_super){
	function FoodData(){
		FoodData.__super.call(this);
		if(FoodData.instance)return;
		FoodData.instance=this;
	}

	__class(FoodData,'modal.config.FoodData',_super);
	var __proto=FoodData.prototype;
	//==========================数据
	__proto.start=function(){
		var xl;
		var txt=new Text;
		var dic=[];
		var $each_xl;
		for($each_xl in this.data[1]){
			xl=this.data[1][$each_xl];
			var box=new BoxData;
			dic[xl.type]=box;
			box.sort=String(MapData.foodSort);
			box.type=xl.type;
			box.score=xl.score;
			box.gold=xl.gold;
			box.skin=xl.skin;
			box.hp=xl.hp;
			if(box.skin==400){
				MapData.monsterSortlen++;
			}
			box.bitmapData=this.skin[box.skin].bitmapData;
			box.monsters=String(xl.monster).split("-");
			var num=NaN;
			for(num=0;num<box.monsters.length;num++){
				box.monsters[num]=parseInt(box.monsters[num]);
			}
		}
		MapData.foodData=dic;
		this.handler.run();
	}

	FoodData.getInstance=function(){
		if(!FoodData.instance)
			new FoodData;
		return FoodData.instance;
	}

	FoodData.instance=null;
	return FoodData;
})(FmData)


/**
*移动物体数据
*@author guowc
*格式[{img:ByteArray图片,data:[{type:图块资源编号,x:图块X坐标,y:图块Y坐标,wid:图块宽度,hei:图块高度},...]}图块资源,
*[{sort:2000,type:2001-2999,wid:移动宽度,hei:移动高度,dir:方向,skin:图块资源编号},...]图块配置]
*格式[[{url:地址,sort:类型},...],[]]
*/
//class modal.config.MoveIconData extends modal.config.FmData
var MoveIconData=(function(_super){
	function MoveIconData(){
		MoveIconData.__super.call(this);
		if(MoveIconData.instance)return;
		MoveIconData.instance=this;
	}

	__class(MoveIconData,'modal.config.MoveIconData',_super);
	var __proto=MoveIconData.prototype;
	__proto.start=function(){
		var dic=[];
		var xl;
		var $each_xl;
		for($each_xl in this.data[1]){
			xl=this.data[1][$each_xl];
			var box=new BoxData;
			dic[xl.type]=box;
			box.sort=MapData.moveBoxSort+"";
			box.type=xl.type;
			box.rw=xl.wid;
			box.rh=xl.hei;
			box.skin=xl.skin;
			box.xdir=xl.xdir;
			box.ydir=xl.ydir;
			box.bitmapData=this.skin[box.skin].bitmapData;
		}
		MapData.moveBoxData=dic;
		this.handler.run();
	}

	MoveIconData.getInstance=function(){
		if(!MoveIconData.instance)
			new MoveIconData;
		return MoveIconData.instance;
	}

	MoveIconData.instance=null;
	return MoveIconData;
})(FmData)


//class mylaya.common.util.ByteArray extends laya.utils.Byte
var ByteArray=(function(_super){
	function ByteArray(){
		//private var _length:int=0;
		this._objectEncoding_=0;
		this._position_=0;
		this._$1__allocated_=8;
		this._data_=null;
		//arrayBuffer
		this._littleEndian_=false;
		this._byteView_=null;
		this._strTable=null;
		//=[];
		this._objTable=null;
		//=[];
		this._traitsTable=null;
		ByteArray.__super.call(this);
		this.___resizeBuffer(this._allocated_);
	}

	__class(ByteArray,'mylaya.common.util.ByteArray',_super);
	var __proto=ByteArray.prototype;
	__proto.clear=function(){
		this._strTable=[];
		this._objTable=[];
		this._traitsTable=[];
		this._position_=0;
		this.length=0;
	}

	__proto.ensureWrite=function(lengthToEnsure){
		if (this._length < lengthToEnsure)this.length=lengthToEnsure;
	}

	__proto.readBoolean=function(){
		return (this.readByte ()!=0);
	}

	__proto.readByte=function(){
		return this._data_.getInt8 (this._position_++);
	}

	__proto.readBytes=function(bytes,offset,length){
		(offset===void 0)&& (offset=0);
		(length===void 0)&& (length=0);
		if (offset < 0 || length < 0){
			throw "Read error - Out of bounds";
		}
		if (length==0)length=this._length-this._position_;
		bytes.ensureWrite (offset+length);
		bytes._byteView_.set (this._byteView_.subarray(this._position_,this._position_+length),offset);
		bytes.position=offset;
		this._position_+=length;
		if (bytes.position+length > bytes.length)bytes.length=bytes.position+length;
	}

	__proto.readDouble=function(){
		var double=this._data_.getFloat64 (this._position_,this._littleEndian_);
		this._position_+=8;
		return double;
	}

	__proto.readFloat=function(){
		var float=this._data_.getFloat32 (this._position_,this._littleEndian_);
		this._position_+=4;
		return float;
	}

	__proto.readFullBytes=function(bytes,pos,len){
		this.ensureWrite (len);
		for(var i=pos;i < pos+len;i++){
			this._data_.setInt8 (this._position_++,bytes.get(i));
		}
	}

	__proto.readInt=function(){
		var tInt=this._data_.getInt32 (this._position_,this._littleEndian_);
		this._position_+=4;
		return tInt;
	}

	__proto.readShort=function(){
		var short=this._data_.getInt16 (this._position_,this._littleEndian_);
		this._position_+=2;
		return short;
	}

	__proto.readUnsignedByte=function(){
		return this._data_.getUint8 (this._position_++);
	}

	__proto.readUnsignedInt=function(){
		var uInt=this._data_.getUint32 (this._position_,this._littleEndian_);
		this._position_+=4;
		return int(uInt);
	}

	//add by ch.ji 解决读取整数时读到负整数的问题
	__proto.readUnsignedShort=function(){
		var uShort=this._data_.getUint16 (this._position_,this._littleEndian_);
		this._position_+=2;
		return uShort;
	}

	__proto.readUTF=function(){
		return this.readUTFBytes (this.readUnsignedShort ());
	}

	__proto.readUnicode=function(length){
		var value="";
		var max=this._position_+length;
		var c1=0,c2=0;
		while (this._position_ < max){
			c2=this._byteView_[this._position_++];
			c1=this._byteView_[this._position_++];
			value+=String.fromCharCode(c1<<8 | c2);
		}
		return value;
	}

	__proto.readMultiByte=function(length,charSet){
		if(charSet=="UNICODE" || charSet=="unicode"){
			return this.readUnicode(length);
		}
		return this.readUTFBytes (length);
	}

	__proto.readUTFBytes=function(len){
		(len===void 0)&& (len=-1);
		var value="";
		var max=this._position_+len;
		var c=0,c2=0,c3=0;
		while (this._position_ < max){
			c=this._data_.getUint8 (this._position_++);
			if (c < 0x80){
				if (c !=0){
					value+=String.fromCharCode (c);
				}
				}else if (c < 0xE0){
				value+=String.fromCharCode (((c & 0x3F)<< 6)| (this._data_.getUint8 (this._position_++)& 0x7F));
				}else if (c < 0xF0){
				c2=this._data_.getUint8 (this._position_++);
				value+=String.fromCharCode (((c & 0x1F)<< 12)| ((c2 & 0x7F)<< 6)| (this._data_.getUint8 (this._position_++)& 0x7F));
				}else {
				c2=this._data_.getUint8 (this._position_++);
				c3=this._data_.getUint8 (this._position_++);
				value+=String.fromCharCode (((c & 0x0F)<< 18)| ((c2 & 0x7F)<< 12)| ((c3 << 6)& 0x7F)| (this._data_.getUint8 (this._position_++)& 0x7F));
			}
		}
		return value;
	}

	__proto.toString=function(){
		var cachePosition=this._position_;
		this._position_=0;
		var value=this.readUTFBytes (this.length);
		this._position_=cachePosition;
		return value;
	}

	__proto.writeBoolean=function(value){
		this.writeByte (value ? 1 :0);
	}

	__proto.writeByte=function(value){
		this.ensureWrite (this._position_+1);
		this._data_.setInt8 (this._position_,value);
		this._position_+=1;
	}

	__proto.writeBytes=function(bytes,offset,length){
		(offset===void 0)&& (offset=0);
		(length===void 0)&& (length=0);
		if (offset < 0 || length < 0)throw "writeBytes error - Out of bounds";
		if(length==0)length=bytes.length-offset;
		this.ensureWrite (this._position_+length);
		this._byteView_.set(bytes._byteView_.subarray (offset,offset+length),this._position_);
		this._position_+=length;
	}

	__proto.writeArrayBuffer=function(arraybuffer,offset,length){
		(offset===void 0)&& (offset=0);
		(length===void 0)&& (length=0);
		if (offset < 0 || length < 0)throw "writeArrayBuffer error - Out of bounds";
		if(length==0)length=arraybuffer.byteLength-offset;
		this.ensureWrite (this._position_+length);
		var uint8array=new Uint8Array(arraybuffer);
		this._byteView_.set(uint8array.subarray (offset,offset+length),this._position_);
		this._position_+=length;
	}

	__proto.writeDouble=function(x){
		this.ensureWrite (this._position_+8);
		this._data_.setFloat64 (this._position_,x,this._littleEndian_);
		this._position_+=8;
	}

	__proto.writeFloat=function(x){
		this.ensureWrite (this._position_+4);
		this._data_.setFloat32 (this._position_,x,this._littleEndian_);
		this._position_+=4;
	}

	__proto.writeInt=function(value){
		this.ensureWrite (this._position_+4);
		this._data_.setInt32 (this._position_,value,this._littleEndian_);
		this._position_+=4;
	}

	__proto.writeShort=function(value){
		this.ensureWrite (this._position_+2);
		this._data_.setInt16 (this._position_,value,this._littleEndian_);
		this._position_+=2;
	}

	__proto.writeUnsignedInt=function(value){
		this.ensureWrite (this._position_+4);
		this._data_.setUint32 (this._position_,value,this._littleEndian_);
		this._position_+=4;
	}

	__proto.writeUnsignedShort=function(value){
		this.ensureWrite (this._position_+2);
		this._data_.setUint16 (this._position_,value,this._littleEndian_);
		this._position_+=2;
	}

	__proto.writeUTF=function(value){
		value=value+"";
		this.writeUnsignedShort (this._getUTFBytesCount(value));this.writeUTFBytes (value);
	}

	__proto.writeUnicode=function(value){
		value=value+"";
		this.ensureWrite (this._position_+value.length*2);
		var c=0;
		for(var i=0,sz=value.length;i<sz;i++){
			c=value.charCodeAt(i);
			this._byteView_[this._position_++]=c&0xff;
			this._byteView_[this._position_++]=c>>8;
		}
	}

	__proto.writeMultiByte=function(value,charSet){
		value=value+"";
		if(charSet=="UNICODE" || charSet=="unicode"){
			return this.writeUnicode(value);
		}
		this.writeUTFBytes(value);
	}

	__proto.writeUTFBytes=function(value){
		value=value+"";
		this.ensureWrite(this._position_+value.length*4);
		for (var i=0,sz=value.length;i < sz;i++){
			var c=value.charCodeAt(i);
			if (c <=0x7F){
				this.writeByte (c);
				}else if (c <=0x7FF){
				this.writeByte (0xC0 | (c >> 6));
				this.writeByte (0x80 | (c & 63));
				}else if (c <=0xFFFF){
				this.writeByte(0xE0 | (c >> 12));
				this.writeByte(0x80 | ((c >> 6)& 63));
				this.writeByte(0x80 | (c & 63));
				}else {
				this.writeByte(0xF0 | (c >> 18));
				this.writeByte(0x80 | ((c >> 12)& 63));
				this.writeByte(0x80 | ((c >> 6)& 63));
				this.writeByte(0x80 | (c & 63));
			}
		}
		this.length=this._position_;
	}

	__proto.__fromBytes=function(inBytes){
		this._byteView_=new Uint8Array(inBytes.getData ());
		this.length=this._byteView_.length;
		this._$1__allocated_=this.length;
	}

	__proto.__get=function(pos){
		return this._data_.getUint8(pos);
	}

	__proto._getUTFBytesCount=function(value){
		var count=0;
		value=value+"";
		for (var i=0,sz=value.length;i < sz;i++){
			var c=value.charCodeAt(i);
			if (c <=0x7F){
				count+=1;
				}else if (c <=0x7FF){
				count+=2;
				}else if (c <=0xFFFF){
				count+=3;
				}else {
				count+=4;
			}
		}
		return count;
	}

	__proto._byteAt_=function(index){
		return this._byteView_[index];
	}

	__proto._byteSet_=function(index,value){
		this.ensureWrite (index+1);
		this._byteView_[index]=value;
	}

	//this._position_+=1;
	__proto.uncompress=function(algorithm){
		(algorithm===void 0)&& (algorithm="zlib");
		var inflate=new Zlib.Inflate(this._byteView_);
		this._byteView_=inflate.decompress();
		this._data_=new DataView(this._byteView_ .buffer);;
		this._$1__allocated_=this._length=this._byteView_.byteLength;
		this._position_=0;
	}

	__proto.compress=function(algorithm){
		(algorithm===void 0)&& (algorithm="zlib");
		var deflate=new Zlib.Deflate(this._byteView_);
		this._byteView_=deflate.compress();
		this._data_=new DataView(this._byteView_.buffer);;
		this._position_=this._$1__allocated_=this._length=this._byteView_.byteLength;
	}

	__proto._$1____resizeBuffer=function(len){
		try{
			var newByteView=new Uint8Array(len);
			if (this._byteView_!=null){
				if (this._byteView_.length <=len)newByteView.set (this._byteView_);
				else newByteView.set (this._byteView_.subarray (0,len));
			}
			this._byteView_=newByteView;
			this._data_=new DataView(newByteView.buffer);
		}
		catch (err){
			throw "___resizeBuffer err:"+len;
		}
	}

	__proto.__getBuffer=function(){
		this._data_.buffer.byteLength=this.length;
		return this._data_.buffer;
	}

	__proto.__set=function(pos,v){
		this._data_.setUint8 (pos,v);
	}

	__proto.setUint8Array=function(data){
		this._byteView_=data;
		this._data_=new DataView(data.buffer);
		this._length=data.byteLength;
		this._position_=0;
	}

	/**从字节数组中读取一个以 AMF 序列化格式进行编码的对象 **/
	__proto.readObject=function(){
		this._strTable=[];
		this._objTable=[];
		this._traitsTable=[];
		return this.readObject2();
	}

	__proto.readObject2=function(){
		var type=this.readByte();
		return this.readObjectValue(type);
	}

	__proto.readObjectValue=function(type){
		var value;
		switch (type){
			case 1:
				break ;
			case 6:
				value=this.__readString();
				break ;
			case 4:
				value=this.readInterger();
				break ;
			case 2:
				value=false;
				break ;
			case 3:
				value=true;
				break ;
			case 10:
				value=this.readScriptObject();
				break ;
			case 9:
				value=this.readArray();
				break ;
			case 5:
				value=this.readDouble();
				break ;
			case 12:
				value=this.readByteArray();
				break ;
			default :
				console.log("Unknown object type tag!!!"+type);
			}
		return value;
	}

	__proto.readByteArray=function(){
		var ref=this.readUInt29();
		if ((ref & 1)==0){
			return this.getObjRef(ref >> 1);
		}
		else{
			var len=(ref >> 1);
			var ba=new ByteArray();
			this._objTable.push(ba);
			this.readBytes(ba,0,len);
			return ba;
		}
	}

	__proto.readInterger=function(){
		var i=this.readUInt29();
		i=(i << 3)>> 3;
		return parseInt(i+"");
	}

	__proto.getStrRef=function(ref){
		return this._strTable[ref];
	}

	__proto.getObjRef=function(ref){
		return this._objTable[ref];
	}

	__proto.__readString=function(){
		var ref=this.readUInt29();
		if ((ref & 1)==0){
			return this.getStrRef(ref >> 1);
		};
		var len=(ref >> 1);
		if (0==len){
			return "";
		};
		var str=this.readUTFBytes(len);
		this._strTable.push(str);
		return str;
	}

	__proto.readTraits=function(ref){
		var ti;
		if ((ref & 3)==1){
			ti=this.getTraitReference(ref >> 2);
			return ti.propoties?ti:{obj:{}};
		}
		else{
			var externalizable=((ref & 4)==4);
			var isDynamic=((ref & 8)==8);
			var count=(ref >> 4);
			var className=this.__readString();
			ti={};
			ti.className=className;
			ti.propoties=[];
			ti.dynamic=isDynamic;
			ti.externalizable=externalizable;
			if(count>0){
				for(var i=0;i<count;i++){
					var propName=this.__readString();
					ti.propoties.push(propName);
				}
			}
			this._traitsTable.push(ti);
			return ti;
		}
	}

	__proto.readScriptObject=function(){
		var ref=this.readUInt29();
		if ((ref & 1)==0){
			return this.getObjRef(ref >> 1);
		}
		else{
			var objref=this.readTraits(ref);
			var className=objref.className;
			var externalizable=objref.externalizable;
			var obj;
			var propName;
			var pros=objref.propoties;
			if(className&&className!=""){
				var rst=ClassUtils.getRegClass(className);
				if(rst){
					obj=new rst();
					}else{
					obj={};
				}
				}else{
				obj={};
			}
			this._objTable.push(obj);
			if(pros){
				for(var d=0;d<pros.length;d++){
					obj[pros[d]]=this.readObject2();
				}
			}
			if(objref.dynamic){
				for (;;){
					propName=this.__readString();
					if (propName==null || propName.length==0)break ;
					obj[propName]=this.readObject2();
				}
			}
			return obj;
		}
	}

	__proto.readArray=function(){
		var ref=this.readUInt29();
		if ((ref & 1)==0){
			return this.getObjRef(ref >> 1);
		};
		var obj=null;
		var count=(ref >> 1);
		var propName;
		for (;;){
			propName=this.__readString();
			if (propName==null || propName.length==0)break ;
			if (obj==null){
				obj={};
				this._objTable.push(obj);
			}
			obj[propName]=this.readObject2();
		}
		if (obj==null){
			obj=[];
			this._objTable.push(obj);
			var i=0;
			for (i=0;i < count;i++){
				obj.push(this.readObject2());
			}
			}else {
			for (i=0;i < count;i++){
				obj[i.toString()]=this.readObject2();
			}
		}
		return obj;
	}

	/**
	*AMF 3 represents smaller integers with fewer bytes using the most
	*significant bit of each byte. The worst case uses 32-bits
	*to represent a 29-bit number,which is what we would have
	*done with no compression.
	*<pre>
	*0x00000000-0x0000007F :0xxxxxxx
	*0x00000080-0x00003FFF :1xxxxxxx 0xxxxxxx
	*0x00004000-0x001FFFFF :1xxxxxxx 1xxxxxxx 0xxxxxxx
	*0x00200000-0x3FFFFFFF :1xxxxxxx 1xxxxxxx 1xxxxxxx xxxxxxxx
	*0x40000000-0xFFFFFFFF :throw range exception
	*</pre>
	*
	*@return A int capable of holding an unsigned 29 bit integer.
	*@throws IOException
	*@exclude
	*/
	__proto.readUInt29=function(){
		var value=0;
		var b=this.readByte()& 0xFF;
		if (b < 128){
			return b;
		}
		value=(b & 0x7F)<< 7;
		b=this.readByte()& 0xFF;
		if (b < 128){
			return (value | b);
		}
		value=(value | (b & 0x7F))<< 7;
		b=this.readByte()& 0xFF;
		if (b < 128){
			return (value | b);
		}
		value=(value | (b & 0x7F))<< 8;
		b=this.readByte()& 0xFF;
		return (value | b);
	}

	//============================================================================================
	__proto.writeObject=function(o){
		this._strTable=[];
		this._objTable=[];
		this._traitsTable=[];
		this.writeObject2(o);
	}

	__proto.writeObject2=function(o){
		if(o==null){
			this.writeAMFNull();
			return;
		};
		var type=typeof(o);
		if("string"===type){
			this.writeAMFString(o);
		}
		else if("boolean"===type){
			this.writeAMFBoolean(o);
		}
		else if("number"===type){
			if(String(o).indexOf(".")!=-1){
				this.writeAMFDouble(o);
			}
			else{
				this.writeAMFInt(o);
			}
		}
		else if("object"===type){
			if((o instanceof Array)){
				this.writeArray(o);
			}
			else if((o instanceof mylaya.common.util.ByteArray )){
				this.writeAMFByteArray(o);
			}
			else{
				this.writeCustomObject(o);
			}
		}
	}

	__proto.writeAMFNull=function(){
		this.writeByte(1);
	}

	__proto.writeAMFString=function(s){
		this.writeByte(6);
		this.writeStringWithoutType(s);
	}

	__proto.writeStringWithoutType=function(s){
		if (s.length==0){
			this.writeUInt29(1);
			return;
		};
		var ref=this._strTable.indexOf(s);
		if(ref>=0){
			this.writeUInt29(ref << 1);
			}else{
			var utflen=this._getUTFBytesCount(s);
			this.writeUInt29((utflen << 1)| 1);
			this.writeUTFBytes(s);
			this._strTable.push(s);
		}
	}

	__proto.writeAMFInt=function(i){
		if (i >=ByteArray.INT28_MIN_VALUE && i <=0x0FFFFFFF){
			i=i & 0x1FFFFFFF;
			this.writeByte(4);
			this.writeUInt29(i);
			}else {
			this.writeAMFDouble(i);
		}
	}

	__proto.writeAMFDouble=function(d){
		this.writeByte(5);
		this.writeDouble(d);
	}

	__proto.writeAMFBoolean=function(b){
		if (b)
			this.writeByte(3);
		else
		this.writeByte(2);
	}

	__proto.writeCustomObject=function(o){
		this.writeByte(10);
		var refNum=this._objTable.indexOf(o);
		if(refNum!=-1){
			this.writeUInt29(refNum << 1);
		}
		else{
			this._objTable.push(o);
			var traitsInfo=new Object();
			traitsInfo.className=this.getAliasByObj(o);
			traitsInfo.dynamic=false;
			traitsInfo.externalizable=false;
			traitsInfo.properties=[];
			for(var prop in o){
				if((typeof (o[prop])=='function'))continue ;
				traitsInfo.properties.push(prop);
				traitsInfo.properties.sort();
			};
			var tRef=ByteArray.getTraitsInfoRef(this._traitsTable,traitsInfo);
			var count=traitsInfo.properties.length;
			var i=0;
			if(tRef>=0){
				this.writeUInt29((tRef << 2)| 1);
				}else{
				this._traitsTable.push(traitsInfo);
				this.writeUInt29(3 | (traitsInfo.externalizable ? 4 :0)| (traitsInfo.dynamic ? 8 :0)| (count << 4));
				this.writeStringWithoutType(traitsInfo.className);
				for(i=0;i<count;i++){
					this.writeStringWithoutType(traitsInfo.properties[i]);
				}
			}
			for(i=0;i<count;i++){
				this.writeObject2(o[traitsInfo.properties[i]]);
			}
		}
	}

	/**
	*获取实例的注册别名
	*@param obj
	*@return
	*/
	__proto.getAliasByObj=function(obj){
		var tClassName=ClassUtils.getRegClass(obj);
		if(tClassName==null || tClassName=="")return "";
		var tClass=ClassUtils.getClass(tClassName);
		if(tClass==null)return "";
		return "";
	}

	__proto.writeArray=function(value){
		this.writeByte(9);
		var len=value.length;
		var ref=this._objTable.indexOf(value);
		if(ref>-1){
			this.writeUInt29(len<<1);
		}
		else{
			this.writeUInt29((len << 1)| 1);
			this.writeStringWithoutType("");
			for (var i=0;i < len;i++){
				this.writeObject2(value[i]);
			}
			this._objTable.push(value);
		}
	}

	__proto.writeAMFByteArray=function(ba){
		this.writeByte(12);
		var ref=this._objTable.indexOf(ba);
		if(ref>=0){
			this.writeUInt29(ref << 1);
			}else{
			var len=ba.length;
			this.writeUInt29((len << 1)| 1);
			this.writeBytes(ba,0,len);
		}
	}

	__proto.writeMapAsECMAArray=function(o){
		this.writeByte(9);
		this.writeUInt29((0 << 1)| 1);
		var count=0,key;
		for (key in o){
			count++;
			this.writeStringWithoutType(key);
			this.writeObject2(o[key]);
		}
		this.writeStringWithoutType("");
	}

	__proto.writeUInt29=function(ref){
		if (ref < 0x80){
			this.writeByte(ref);
			}else if (ref < 0x4000){
			this.writeByte(((ref >> 7)& 0x7F)| 0x80);
			this.writeByte(ref & 0x7F);
			}else if (ref < 0x200000){
			this.writeByte(((ref >> 14)& 0x7F)| 0x80);
			this.writeByte(((ref >> 7)& 0x7F)| 0x80);
			this.writeByte(ref & 0x7F);
			}else if (ref < 0x40000000){
			this.writeByte(((ref >> 22)& 0x7F)| 0x80);
			this.writeByte(((ref >> 15)& 0x7F)| 0x80);
			this.writeByte(((ref >> 8)& 0x7F)| 0x80);
			this.writeByte(ref & 0xFF);
			}else {
			console.log("Integer out of range: "+ref);
		}
	}

	/**
	*@exclude
	*/
	__proto.getTraitReference=function(ref){
		return this._traitsTable[ref];
	}

	// Getters & Setters
	__getset(0,__proto,'bytesAvailable',function(){
		return this.length-this._position_;
	});

	__getset(0,__proto,'position',function(){
		return this._position_;
		},function(pos){
		if (pos < this._length)
			this._position_=pos < 0?0:pos;
		else{
			this._position_=pos;
			this.length=pos;
		}
	});

	__getset(0,__proto,'endian',function(){
		return this._littleEndian_ ? "littleEndian" :"bigEndian";
		},function(endianStr){
		this._littleEndian_=(endianStr=="littleEndian");
	});

	__getset(0,__proto,'length',function(){
		return this._length;
		},function(value){
		this._$1____resizeBuffer (this._$1__allocated_=value);
		this._length=value;
	});

	ByteArray.__ofBuffer=function(buffer){
		var bytes=new ByteArray ();
		bytes.length=bytes.allocated=buffer.byteLength;
		bytes.data=new DataView(buffer);
		bytes.byteView=new Uint8Array(buffer);
		return bytes;
	}

	ByteArray.getTraitsInfoRef=function(arr,ti){
		var i=0,len=arr.length;
		for(i=0;i<len;i++){
			if (ByteArray.equalsTraitsInfo(ti,arr[i]))return i;
		}
		return-1;
	}

	ByteArray.equalsTraitsInfo=function(ti1,ti2){
		if (ti1==ti2){
			return true;
		}
		if (!ti1.className===ti2.className){
			return false;
		}
		if(ti1.properties.length !=ti2.properties.length){
			return false;
		};
		var len=ti1.properties.length;
		var prop;
		ti1.properties.sort();ti2.properties.sort();
		for(var i=0;i<len;i++){
			if(ti1.properties[i] !=ti2.properties[i]){
				return false;
			}
		}
		return true;
	}

	ByteArray.BIG_ENDIAN="bigEndian";
	ByteArray.LITTLE_ENDIAN="littleEndian";
	ByteArray.UNDEFINED_TYPE=0;
	ByteArray.NULL_TYPE=1;
	ByteArray.FALSE_TYPE=2;
	ByteArray.TRUE_TYPE=3;
	ByteArray.INTEGER_TYPE=4;
	ByteArray.DOUBLE_TYPE=5;
	ByteArray.STRING_TYPE=6;
	ByteArray.XML_TYPE=7;
	ByteArray.DATE_TYPE=8;
	ByteArray.ARRAY_TYPE=9;
	ByteArray.OBJECT_TYPE=10;
	ByteArray.AVMPLUSXML_TYPE=11;
	ByteArray.BYTEARRAY_TYPE=12;
	ByteArray.EMPTY_STRING="";
	ByteArray.UINT29_MASK=0x1FFFFFFF;
	ByteArray.INT28_MAX_VALUE=0x0FFFFFFF;
	ByteArray.INT28_MIN_VALUE=-268435456;
	return ByteArray;
})(Byte)


/**
*<p> <code>LoaderManager</code> 类用于用于批量加载资源。此类是单例，不要手动实例化此类，请通过Laya.loader访问。</p>
*<p>全部队列加载完成，会派发 Event.COMPLETE 事件；如果队列中任意一个加载失败，会派发 Event.ERROR 事件，事件回调参数值为加载出错的资源地址。</p>
*<p> <code>LoaderManager</code> 类提供了以下几种功能：<br/>
*多线程：默认5个加载线程，可以通过maxLoader属性修改线程数量；<br/>
*多优先级：有0-4共5个优先级，优先级高的优先加载。0最高，4最低；<br/>
*重复过滤：自动过滤重复加载（不会有多个相同地址的资源同时加载）以及复用缓存资源，防止重复加载；<br/>
*错误重试：资源加载失败后，会重试加载（以最低优先级插入加载队列），retryNum设定加载失败后重试次数，retryDelay设定加载重试的时间间隔。</p>
*@see laya.net.Loader
*/
//class laya.net.LoaderManager extends laya.events.EventDispatcher
var LoaderManager=(function(_super){
	var ResInfo;
	function LoaderManager(){
		/**加载出错后的重试次数，默认重试一次*/
		this.retryNum=1;
		/**延迟时间多久再进行错误重试，默认立即重试*/
		this.retryDelay=0;
		/**最大下载线程，默认为5个*/
		this.maxLoader=5;
		/**@private */
		this._loaders=[];
		/**@private */
		this._loaderCount=0;
		/**@private */
		this._resInfos=[];
		/**@private */
		this._infoPool=[];
		/**@private */
		this._maxPriority=5;
		/**@private */
		this._failRes={};
		LoaderManager.__super.call(this);
		for (var i=0;i < this._maxPriority;i++)this._resInfos[i]=[];
	}

	__class(LoaderManager,'laya.net.LoaderManager',_super);
	var __proto=LoaderManager.prototype;
	/**
	*<p>根据clas类型创建一个未初始化资源的对象，随后进行异步加载，资源加载完成后，初始化对象的资源，并通过此对象派发 Event.LOADED 事件，事件回调参数值为此对象本身。套嵌资源的子资源会保留资源路径"?"后的部分。</p>
	*<p>如果url为数组，返回true；否则返回指定的资源类对象，可以通过侦听此对象的 Event.LOADED 事件来判断资源是否已经加载完毕。</p>
	*<p><b>注意：</b>cache参数只能对文件后缀为atlas的资源进行缓存控制，其他资源会忽略缓存，强制重新加载。</p>
	*@param url 资源地址或者数组。如果url和clas同时指定了资源类型，优先使用url指定的资源类型。参数形如：[{url:xx,clas:xx,priority:xx,params:xx},{url:xx,clas:xx,priority:xx,params:xx}]。
	*@param complete 加载结束回调。根据url类型不同分为2种情况：1. url为String类型，也就是单个资源地址，如果加载成功，则回调参数值为加载完成的资源，否则为null；2. url为数组类型，指定了一组要加载的资源，如果全部加载成功，则回调参数值为true，否则为false。
	*@param progress 资源加载进度回调，回调参数值为当前资源加载的进度信息(0-1)。
	*@param clas 资源类名。如果url和clas同时指定了资源类型，优先使用url指定的资源类型。参数形如：Texture。
	*@param params 资源构造参数。
	*@param priority (default=1)加载的优先级，优先级高的优先加载。有0-4共5个优先级，0最高，4最低。
	*@param cache 是否缓存加载的资源。
	*@return 如果url为数组，返回true；否则返回指定的资源类对象。
	*/
	__proto.create=function(url,complete,progress,clas,params,priority,cache,group){
		(priority===void 0)&& (priority=1);
		(cache===void 0)&& (cache=true);
		if ((url instanceof Array)){
			var items=url;
			var itemCount=items.length;
			var loadedCount=0;
			if (progress){
				var progress2=Handler.create(progress.caller,progress.method,progress.args,false);
			}
			for (var i=0;i < itemCount;i++){
				var item=items[i];
				if ((typeof item=='string'))item=items[i]={url:item};
				item.progress=0;
				var progressHandler=progress ? Handler.create(null,onProgress,[item],false):null;
				var completeHandler=(progress || complete)? Handler.create(null,onComplete,[item]):null;
				this._create(item.url,completeHandler,progressHandler,item.clas || clas,item.params || params,item.priority || priority,cache,item.group || group);
			}
			function onComplete (item,content){
				loadedCount++;
				item.progress=1;
				if (loadedCount===itemCount && complete){
					complete.run();
				}
			}
			function onProgress (item,value){
				item.progress=value;
				var num=0;
				for (var j=0;j < itemCount;j++){
					var item1=items[j];
					num+=item1.progress;
				};
				var v=num / itemCount;
				progress2.runWith(v);
			}
			return true;
		}else return this._create(url,complete,progress,clas,params,priority,cache,group);
	}

	__proto._create=function(url,complete,progress,clas,params,priority,cache,group){
		(priority===void 0)&& (priority=1);
		(cache===void 0)&& (cache=true);
		var formarUrl=URL.formatURL(url);
		var item=this.getRes(formarUrl);
		if (!item){
			var extension=Utils.getFileExtension(url);
			var creatItem=LoaderManager.createMap[extension];
			if (!creatItem)
				throw new Error("LoaderManager:unknown file("+url+") extension with: "+extension+".");
			if (!clas)clas=creatItem[0];
			var type=creatItem[1];
			if (extension=="atlas"){
				this.load(url,complete,progress,type,priority,cache);
				}else {
				if (clas===Texture)type="htmlimage";
				item=clas ? new clas():null;
				if (item.hasOwnProperty("_loaded"))
					item._loaded=false;
				item._setUrl(url);
				(group)&& (item._setGroup(group));
				this._createLoad(item,url,Handler.create(null,onLoaded),progress,type,priority,false,group,true);
				function onLoaded (data){
					(item && !item.destroyed && data)&& (item.onAsynLoaded.call(item,url,data,params));
					if (complete)complete.run();
					Laya.loader.event(url);
				}
				(cache)&& (this.cacheRes(formarUrl,item));
			}
			}else {
			if (!item.hasOwnProperty("loaded")|| item.loaded){
				progress && progress.runWith(1);
				complete && complete.run();
				}else if (complete){
				Laya.loader._createListener(url,complete.caller,complete.method,complete.args,true,false);
			}
		}
		return item;
	}

	/**
	*<p>加载资源。资源加载错误时，本对象会派发 Event.ERROR 事件，事件回调参数值为加载出错的资源地址。</p>
	*<p>因为返回值为 LoaderManager 对象本身，所以可以使用如下语法：Laya.loader.load(...).load(...);</p>
	*@param url 要加载的单个资源地址或资源信息数组。比如：简单数组：["a.png","b.png"]；复杂数组[{url:"a.png",type:Loader.IMAGE,size:100,priority:1},{url:"b.json",type:Loader.JSON,size:50,priority:1}]。
	*@param complete 加载结束回调。根据url类型不同分为2种情况：1. url为String类型，也就是单个资源地址，如果加载成功，则回调参数值为加载完成的资源，否则为null；2. url为数组类型，指定了一组要加载的资源，如果全部加载成功，则回调参数值为true，否则为false。
	*@param progress 加载进度回调。回调参数值为当前资源的加载进度信息(0-1)。
	*@param type 资源类型。比如：Loader.IMAGE。
	*@param priority (default=1)加载的优先级，优先级高的优先加载。有0-4共5个优先级，0最高，4最低。
	*@param cache 是否缓存加载结果。
	*@param group 分组，方便对资源进行管理。
	*@param ignoreCache 是否忽略缓存，强制重新加载。
	*@return 此 LoaderManager 对象本身。
	*/
	__proto.load=function(url,complete,progress,type,priority,cache,group,ignoreCache){
		var _$this=this;
		(priority===void 0)&& (priority=1);
		(cache===void 0)&& (cache=true);
		(ignoreCache===void 0)&& (ignoreCache=false);
		if ((url instanceof Array))return this._loadAssets(url,complete,progress,type,priority,cache,group);
		var content=Loader.getRes(url);
		if (content !=null){
			Laya.timer.frameOnce(1,null,function(){
				progress && progress.runWith(1);
				complete && complete.runWith(content);
				_$this._loaderCount || _$this.event("complete");
			});
			}else {
			var info=LoaderManager._resMap[url];
			if (!info){
				info=this._infoPool.length ? this._infoPool.pop():new ResInfo();
				info.url=url;
				info.type=type;
				info.cache=cache;
				info.group=group;
				info.ignoreCache=ignoreCache;
				complete && info.on("complete",complete.caller,complete.method,complete.args);
				progress && info.on("progress",progress.caller,progress.method,progress.args);
				LoaderManager._resMap[url]=info;
				priority=priority < this._maxPriority ? priority :this._maxPriority-1;
				this._resInfos[priority].push(info);
				this._next();
				}else {
				complete && info._createListener("complete",complete.caller,complete.method,complete.args,false,false);
				progress && info._createListener("progress",progress.caller,progress.method,progress.args,false,false);
			}
		}
		return this;
	}

	/**
	*@private
	*/
	__proto._createLoad=function(item,url,complete,progress,type,priority,cache,group,ignoreCache){
		var _$this=this;
		(priority===void 0)&& (priority=1);
		(cache===void 0)&& (cache=true);
		(ignoreCache===void 0)&& (ignoreCache=false);
		if ((url instanceof Array))return this._loadAssets(url,complete,progress,type,priority,cache,group);
		var content=Loader.getRes(url);
		if (content !=null){
			Laya.timer.frameOnce(1,null,function(){
				progress && progress.runWith(1);
				complete && complete.runWith(content);
				_$this._loaderCount || _$this.event("complete");
			});
			}else {
			var info=LoaderManager._resMap[url];
			if (!info){
				info=this._infoPool.length ? this._infoPool.pop():new ResInfo();
				info.url=url;
				info.clas=item;
				info.type=type;
				info.cache=cache;
				info.group=group;
				info.ignoreCache=ignoreCache;
				complete && info.on("complete",complete.caller,complete.method,complete.args);
				progress && info.on("progress",progress.caller,progress.method,progress.args);
				LoaderManager._resMap[url]=info;
				priority=priority < this._maxPriority ? priority :this._maxPriority-1;
				this._resInfos[priority].push(info);
				this._next();
				}else {
				complete && info._createListener("complete",complete.caller,complete.method,complete.args,false,false);
				progress && info._createListener("progress",progress.caller,progress.method,progress.args,false,false);
			}
		}
		return this;
	}

	__proto._next=function(){
		if (this._loaderCount >=this.maxLoader)return;
		for (var i=0;i < this._maxPriority;i++){
			var infos=this._resInfos[i];
			while (infos.length > 0){
				var info=infos.shift();
				if (info)return this._doLoad(info);
			}
		}
		this._loaderCount || this.event("complete");
	}

	__proto._doLoad=function(resInfo){
		this._loaderCount++;
		var loader=this._loaders.length ? this._loaders.pop():new Loader();
		loader.on("complete",null,onLoaded);
		loader.on("progress",null,function(num){
			resInfo.event("progress",num);
		});
		loader.on("error",null,function(msg){
			onLoaded(null);
		});
		var _this=this;
		function onLoaded (data){
			loader.offAll();
			loader._data=null;
			_this._loaders.push(loader);
			_this._endLoad(resInfo,(data instanceof Array)? [data] :data);
			_this._loaderCount--;
			_this._next();
		}
		loader._class=resInfo.clas;
		loader.load(resInfo.url,resInfo.type,resInfo.cache,resInfo.group,resInfo.ignoreCache);
	}

	__proto._endLoad=function(resInfo,content){
		var url=resInfo.url;
		if (content==null){
			var errorCount=this._failRes[url] || 0;
			if (errorCount < this.retryNum){
				console.warn("[warn]Retry to load:",url);
				this._failRes[url]=errorCount+1;
				Laya.timer.once(this.retryDelay,this,this._addReTry,[resInfo],false);
				return;
				}else {
				console.warn("[error]Failed to load:",url);
				this.event("error",url);
			}
		}
		if (this._failRes[url])this._failRes[url]=0;
		delete LoaderManager._resMap[url];
		resInfo.event("complete",content);
		resInfo.offAll();
		this._infoPool.push(resInfo);
	}

	__proto._addReTry=function(resInfo){
		this._resInfos[this._maxPriority-1].push(resInfo);
		this._next();
	}

	/**
	*清理指定资源地址缓存。
	*@param url 资源地址。
	*@param forceDispose 是否强制销毁，有些资源是采用引用计数方式销毁，如果forceDispose=true，则忽略引用计数，直接销毁，比如Texture，默认为false
	*/
	__proto.clearRes=function(url,forceDispose){
		(forceDispose===void 0)&& (forceDispose=false);
		console.log("clear....",url);
		Loader.clearRes(url,forceDispose);
	}

	/**
	*获取指定资源地址的资源。
	*@param url 资源地址。
	*@return 返回资源。
	*/
	__proto.getRes=function(url){
		return Loader.getRes(url);
	}

	/**
	*缓存资源。
	*@param url 资源地址。
	*@param data 要缓存的内容。
	*/
	__proto.cacheRes=function(url,data){
		Loader.cacheRes(url,data);
	}

	/**
	*销毁Texture使用的图片资源，保留texture壳，如果下次渲染的时候，发现texture使用的图片资源不存在，则会自动恢复
	*相比clearRes，clearTextureRes只是清理texture里面使用的图片资源，并不销毁texture，再次使用到的时候会自动恢复图片资源
	*而clearRes会彻底销毁texture，导致不能再使用；clearTextureRes能确保立即销毁图片资源，并且不用担心销毁错误，clearRes则采用引用计数方式销毁
	*【注意】如果图片本身在自动合集里面（默认图片小于512*512），内存是不能被销毁的，此图片被大图合集管理器管理
	*@param url 图集地址或者texture地址，比如 Loader.clearTextureRes("t44sd/atlas/comp.atlas");Loader.clearTextureRes("hall/bg.jpg");
	*/
	__proto.clearTextureRes=function(url){
		Loader.clearTextureRes(url);
	}

	/**
	*设置资源分组。
	*@param url 资源地址。
	*@param group 分组名
	*/
	__proto.setGroup=function(url,group){
		Loader.setGroup(url,group);
	}

	/**
	*根据分组清理资源。
	*@param group 分组名
	*/
	__proto.clearResByGroup=function(group){
		Loader.clearResByGroup(group);
	}

	/**清理当前未完成的加载，所有未加载的内容全部停止加载。*/
	__proto.clearUnLoaded=function(){
		for (var i=0;i < this._maxPriority;i++){
			var infos=this._resInfos[i];
			for (var j=infos.length-1;j >-1;j--){
				var info=infos[j];
				if (info){
					info.offAll();
					this._infoPool.push(info);
				}
			}
			infos.length=0;
		}
		this._loaderCount=0;
		LoaderManager._resMap={};
	}

	/**
	*根据地址集合清理掉未加载的内容
	*@param urls 资源地址集合
	*/
	__proto.cancelLoadByUrls=function(urls){
		if (!urls)return;
		for (var i=0,n=urls.length;i < n;i++){
			this.cancelLoadByUrl(urls[i]);
		}
	}

	/**
	*根据地址清理掉未加载的内容
	*@param url 资源地址
	*/
	__proto.cancelLoadByUrl=function(url){
		for (var i=0;i < this._maxPriority;i++){
			var infos=this._resInfos[i];
			for (var j=infos.length-1;j >-1;j--){
				var info=infos[j];
				if (info && info.url===url){
					infos[j]=null;
					info.offAll();
					this._infoPool.push(info);
				}
			}
		}
		if (LoaderManager._resMap[url])delete LoaderManager._resMap[url];
	}

	/**
	*@private
	*加载数组里面的资源。
	*@param arr 简单：["a.png","b.png"]，复杂[{url:"a.png",type:Loader.IMAGE,size:100,priority:1},{url:"b.json",type:Loader.JSON,size:50,priority:1}]*/
	__proto._loadAssets=function(arr,complete,progress,type,priority,cache,group){
		(priority===void 0)&& (priority=1);
		(cache===void 0)&& (cache=true);
		var itemCount=arr.length;
		var loadedCount=0;
		var totalSize=0;
		var items=[];
		var success=true;
		for (var i=0;i < itemCount;i++){
			var item=arr[i];
			if ((typeof item=='string'))item={url:item,type:type,size:1,priority:priority};
			if (!item.size)item.size=1;
			item.progress=0;
			totalSize+=item.size;
			items.push(item);
			var progressHandler=progress ? Handler.create(null,loadProgress,[item],false):null;
			var completeHandler=(complete || progress)? Handler.create(null,loadComplete,[item]):null;
			this.load(item.url,completeHandler,progressHandler,item.type,item.priority || 1,cache,item.group || group);
		}
		function loadComplete (item,content){
			loadedCount++;
			item.progress=1;
			if (!content)success=false;
			if (loadedCount===itemCount && complete){
				complete.runWith(success);
			}
		}
		function loadProgress (item,value){
			if (progress !=null){
				item.progress=value;
				var num=0;
				for (var j=0;j < items.length;j++){
					var item1=items[j];
					num+=item1.size *item1.progress;
				};
				var v=num / totalSize;
				progress.runWith(v);
			}
		}
		return this;
	}

	LoaderManager.cacheRes=function(url,data){
		Loader.cacheRes(url,data);
	}

	LoaderManager._resMap={};
	__static(LoaderManager,
	['createMap',function(){return this.createMap={atlas:[null,"atlas"]};}
	]);
	LoaderManager.__init$=function(){
		//class ResInfo extends laya.events.EventDispatcher
		ResInfo=(function(_super){
			function ResInfo(){
				this.url=null;
				this.type=null;
				this.cache=false;
				this.group=null;
				this.ignoreCache=false;
				this.clas=null;
				ResInfo.__super.call(this);
			}
			__class(ResInfo,'',_super);
			return ResInfo;
		})(EventDispatcher)
	}

	return LoaderManager;
})(EventDispatcher)


/**
*@private
*使用Audio标签播放声音
*/
//class laya.media.h5audio.AudioSound extends laya.events.EventDispatcher
var AudioSound=(function(_super){
	function AudioSound(){
		/**
		*声音URL
		*/
		this.url=null;
		/**
		*播放用的audio标签
		*/
		this.audio=null;
		/**
		*是否已加载完成
		*/
		this.loaded=false;
		AudioSound.__super.call(this);
	}

	__class(AudioSound,'laya.media.h5audio.AudioSound',_super);
	var __proto=AudioSound.prototype;
	/**
	*释放声音
	*
	*/
	__proto.dispose=function(){
		var ad=AudioSound._audioCache[this.url];
		if (ad){
			ad.src="";
			delete AudioSound._audioCache[this.url];
		}
	}

	/**
	*加载声音
	*@param url
	*
	*/
	__proto.load=function(url){
		url=URL.formatURL(url);
		this.url=url;
		var ad;
		if (url==SoundManager._tMusic){
			AudioSound._initMusicAudio();
			ad=AudioSound._musicAudio;
			if (ad.src !=url){
				AudioSound._audioCache[ad.src]=null;
				ad=null;
			}
			}else{
			ad=AudioSound._audioCache[url];
		}
		if (ad && ad.readyState >=2){
			this.event("complete");
			return;
		}
		if (!ad){
			if (url==SoundManager._tMusic){
				AudioSound._initMusicAudio();
				ad=AudioSound._musicAudio;
				}else{
				ad=Browser.createElement("audio");
			}
			AudioSound._audioCache[url]=ad;
			ad.src=url;
		}
		ad.addEventListener("canplaythrough",onLoaded);
		ad.addEventListener("error",onErr);
		var me=this;
		function onLoaded (){
			offs();
			me.loaded=true;
			me.event("complete");
		}
		function onErr (){
			ad.load=null;
			offs();
			me.event("error");
		}
		function offs (){
			ad.removeEventListener("canplaythrough",onLoaded);
			ad.removeEventListener("error",onErr);
		}
		this.audio=ad;
		if (ad.load){
			ad.load();
			}else {
			onErr();
		}
	}

	/**
	*播放声音
	*@param startTime 起始时间
	*@param loops 循环次数
	*@return
	*
	*/
	__proto.play=function(startTime,loops){
		(startTime===void 0)&& (startTime=0);
		(loops===void 0)&& (loops=0);
		if (!this.url)return null;
		var ad;
		if (this.url==SoundManager._tMusic){
			ad=AudioSound._musicAudio;
			}else{
			ad=AudioSound._audioCache[this.url];
		}
		if (!ad)return null;
		var tAd;
		tAd=Pool.getItem("audio:"+this.url);
		if (Render.isConchApp){
			if (!tAd){
				tAd=Browser.createElement("audio");
				tAd.src=this.url;
			}
		}
		else {
			if (this.url==SoundManager._tMusic){
				AudioSound._initMusicAudio();
				tAd=AudioSound._musicAudio;
				tAd.src=this.url;
				}else{
				tAd=tAd ? tAd :ad.cloneNode(true);
			}
		};
		var channel=new AudioSoundChannel(tAd);
		channel.url=this.url;
		channel.loops=loops;
		channel.startTime=startTime;
		channel.play();
		SoundManager.addChannel(channel);
		return channel;
	}

	/**
	*获取总时间。
	*/
	__getset(0,__proto,'duration',function(){
		var ad;
		ad=AudioSound._audioCache[this.url];
		if (!ad)
			return 0;
		return ad.duration;
	});

	AudioSound._initMusicAudio=function(){
		if (AudioSound._musicAudio)return;
		if (!AudioSound._musicAudio)AudioSound._musicAudio=Browser.createElement("audio");
		if (!Render.isConchApp){
			Browser.document.addEventListener("mousedown",AudioSound._makeMusicOK);
		}
	}

	AudioSound._makeMusicOK=function(){
		Browser.document.removeEventListener("mousedown",AudioSound._makeMusicOK);
		if (!AudioSound._musicAudio.src){
			AudioSound._musicAudio.src="";
			AudioSound._musicAudio.load();
			}else{
			AudioSound._musicAudio.play();
		}
	}

	AudioSound._audioCache={};
	AudioSound._musicAudio=null;
	return AudioSound;
})(EventDispatcher)


/**
*<p> <code>SoundChannel</code> 用来控制程序中的声音。每个声音均分配给一个声道，而且应用程序可以具有混合在一起的多个声道。</p>
*<p> <code>SoundChannel</code> 类包含控制声音的播放、暂停、停止、音量的方法，以及获取声音的播放状态、总时间、当前播放时间、总循环次数、播放地址等信息的方法。</p>
*/
//class laya.media.SoundChannel extends laya.events.EventDispatcher
var SoundChannel=(function(_super){
	function SoundChannel(){
		/**
		*声音地址。
		*/
		this.url=null;
		/**
		*循环次数。
		*/
		this.loops=0;
		/**
		*开始时间。
		*/
		this.startTime=NaN;
		/**
		*表示声音是否已暂停。
		*/
		this.isStopped=false;
		/**
		*播放完成处理器。
		*/
		this.completeHandler=null;
		SoundChannel.__super.call(this);
	}

	__class(SoundChannel,'laya.media.SoundChannel',_super);
	var __proto=SoundChannel.prototype;
	/**
	*播放。
	*/
	__proto.play=function(){}
	/**
	*停止。
	*/
	__proto.stop=function(){}
	/**
	*暂停。
	*/
	__proto.pause=function(){}
	/**
	*继续播放。
	*/
	__proto.resume=function(){}
	/**
	*private
	*/
	__proto.__runComplete=function(handler){
		if (handler){
			handler.run();
		}
	}

	/**
	*音量范围从 0（静音）至 1（最大音量）。
	*/
	__getset(0,__proto,'volume',function(){
		return 1;
		},function(v){
	});

	/**
	*获取当前播放时间。
	*/
	__getset(0,__proto,'position',function(){
		return 0;
	});

	/**
	*获取总时间。
	*/
	__getset(0,__proto,'duration',function(){
		return 0;
	});

	return SoundChannel;
})(EventDispatcher)


/**
*<code>Sound</code> 类是用来播放控制声音的类。
*/
//class laya.media.Sound extends laya.events.EventDispatcher
var Sound=(function(_super){
	function Sound(){
		Sound.__super.call(this);;
	}

	__class(Sound,'laya.media.Sound',_super);
	var __proto=Sound.prototype;
	/**
	*加载声音。
	*@param url 地址。
	*
	*/
	__proto.load=function(url){}
	/**
	*播放声音。
	*@param startTime 开始时间,单位秒
	*@param loops 循环次数,0表示一直循环
	*@return 声道 SoundChannel 对象。
	*
	*/
	__proto.play=function(startTime,loops){
		(startTime===void 0)&& (startTime=0);
		(loops===void 0)&& (loops=0);
		return null;
	}

	/**
	*释放声音资源。
	*
	*/
	__proto.dispose=function(){}
	/**
	*获取总时间。
	*/
	__getset(0,__proto,'duration',function(){
		return 0;
	});

	return Sound;
})(EventDispatcher)


/**
*@private
*web audio api方式播放声音
*/
//class laya.media.webaudio.WebAudioSound extends laya.events.EventDispatcher
var WebAudioSound=(function(_super){
	function WebAudioSound(){
		/**
		*声音URL
		*/
		this.url=null;
		/**
		*是否已加载完成
		*/
		this.loaded=false;
		/**
		*声音文件数据
		*/
		this.data=null;
		/**
		*声音原始文件数据
		*/
		this.audioBuffer=null;
		/**
		*待播放的声音列表
		*/
		this.__toPlays=null;
		/**
		*@private
		*/
		this._disposed=false;
		WebAudioSound.__super.call(this);
	}

	__class(WebAudioSound,'laya.media.webaudio.WebAudioSound',_super);
	var __proto=WebAudioSound.prototype;
	/**
	*加载声音
	*@param url
	*
	*/
	__proto.load=function(url){
		var me=this;
		url=URL.formatURL(url);
		this.url=url;
		this.audioBuffer=WebAudioSound._dataCache[url];
		if (this.audioBuffer){
			this._loaded(this.audioBuffer);
			return;
		}
		WebAudioSound.e.on("loaded:"+url,this,this._loaded);
		WebAudioSound.e.on("err:"+url,this,this._err);
		if (WebAudioSound.__loadingSound[url]){
			return;
		}
		WebAudioSound.__loadingSound[url]=true;
		var request=new Browser.window.XMLHttpRequest();
		request.open("GET",url,true);
		request.responseType="arraybuffer";
		request.onload=function (){
			if (me._disposed){
				me._removeLoadEvents();
				return;
			}
			me.data=request.response;
			WebAudioSound.buffs.push({"buffer":me.data,"url":me.url});
			WebAudioSound.decode();
		};
		request.onerror=function (e){
			me._err();
		}
		request.send();
	}

	__proto._err=function(){
		this._removeLoadEvents();
		WebAudioSound.__loadingSound[this.url]=false;
		this.event("error");
	}

	__proto._loaded=function(audioBuffer){
		this._removeLoadEvents();
		if (this._disposed){
			return;
		}
		this.audioBuffer=audioBuffer;
		WebAudioSound._dataCache[this.url]=this.audioBuffer;
		this.loaded=true;
		this.event("complete");
	}

	__proto._removeLoadEvents=function(){
		WebAudioSound.e.off("loaded:"+this.url,this,this._loaded);
		WebAudioSound.e.off("err:"+this.url,this,this._err);
	}

	__proto.__playAfterLoaded=function(){
		if (!this.__toPlays)return;
		var i=0,len=0;
		var toPlays;
		toPlays=this.__toPlays;
		len=toPlays.length;
		var tParams;
		for (i=0;i < len;i++){
			tParams=toPlays[i];
			if (tParams[2] && !(tParams [2]).isStopped){
				this.play(tParams[0],tParams[1],tParams[2]);
			}
		}
		this.__toPlays.length=0;
	}

	/**
	*播放声音
	*@param startTime 起始时间
	*@param loops 循环次数
	*@return
	*
	*/
	__proto.play=function(startTime,loops,channel){
		(startTime===void 0)&& (startTime=0);
		(loops===void 0)&& (loops=0);
		channel=channel ? channel :new WebAudioSoundChannel();
		if (!this.audioBuffer){
			if (this.url){
				if (!this.__toPlays)this.__toPlays=[];
				this.__toPlays.push([startTime,loops,channel]);
				this.once("complete",this,this.__playAfterLoaded);
				this.load(this.url);
			}
		}
		channel.url=this.url;
		channel.loops=loops;
		channel["audioBuffer"]=this.audioBuffer;
		channel.startTime=startTime;
		channel.play();
		SoundManager.addChannel(channel);
		return channel;
	}

	__proto.dispose=function(){
		this._disposed=true;
		delete WebAudioSound._dataCache[this.url];
		delete WebAudioSound.__loadingSound[this.url];
		this.audioBuffer=null;
		this.data=null;
		this.__toPlays=[];
	}

	__getset(0,__proto,'duration',function(){
		if (this.audioBuffer){
			return this.audioBuffer.duration;
		}
		return 0;
	});

	WebAudioSound.decode=function(){
		if (WebAudioSound.buffs.length <=0 || WebAudioSound.isDecoding){
			return;
		}
		WebAudioSound.isDecoding=true;
		WebAudioSound.tInfo=WebAudioSound.buffs.shift();
		WebAudioSound.ctx.decodeAudioData(WebAudioSound.tInfo["buffer"],WebAudioSound._done,WebAudioSound._fail);
	}

	WebAudioSound._done=function(audioBuffer){
		WebAudioSound.e.event("loaded:"+WebAudioSound.tInfo.url,audioBuffer);
		WebAudioSound.isDecoding=false;
		WebAudioSound.decode();
	}

	WebAudioSound._fail=function(){
		WebAudioSound.e.event("err:"+WebAudioSound.tInfo.url,null);
		WebAudioSound.isDecoding=false;
		WebAudioSound.decode();
	}

	WebAudioSound._playEmptySound=function(){
		if (WebAudioSound.ctx==null){
			return;
		};
		var source=WebAudioSound.ctx.createBufferSource();
		source.buffer=WebAudioSound._miniBuffer;
		source.connect(WebAudioSound.ctx.destination);
		source.start(0,0,0);
	}

	WebAudioSound._unlock=function(){
		if (WebAudioSound._unlocked){
			return;
		}
		WebAudioSound._playEmptySound();
		if (WebAudioSound.ctx.state=="running"){
			Browser.document.removeEventListener("mousedown",WebAudioSound._unlock,true);
			Browser.document.removeEventListener("touchend",WebAudioSound._unlock,true);
			WebAudioSound._unlocked=true;
		}
	}

	WebAudioSound.initWebAudio=function(){
		if (WebAudioSound.ctx.state !="running"){
			WebAudioSound._unlock();
			Browser.document.addEventListener("mousedown",WebAudioSound._unlock,true);
			Browser.document.addEventListener("touchend",WebAudioSound._unlock,true);
		}
	}

	WebAudioSound._dataCache={};
	WebAudioSound.buffs=[];
	WebAudioSound.isDecoding=false;
	WebAudioSound._unlocked=false;
	WebAudioSound.tInfo=null;
	WebAudioSound.__loadingSound={};
	__static(WebAudioSound,
	['window',function(){return this.window=Browser.window;},'webAudioEnabled',function(){return this.webAudioEnabled=WebAudioSound.window["AudioContext"] || WebAudioSound.window["webkitAudioContext"] || WebAudioSound.window["mozAudioContext"];},'ctx',function(){return this.ctx=WebAudioSound.webAudioEnabled ? new (WebAudioSound.window["AudioContext"] || WebAudioSound.window["webkitAudioContext"] || WebAudioSound.window["mozAudioContext"])():undefined;},'_miniBuffer',function(){return this._miniBuffer=WebAudioSound.ctx.createBuffer(1,1,22050);},'e',function(){return this.e=new EventDispatcher();}
	]);
	return WebAudioSound;
})(EventDispatcher)


/**
*<p> <code>HttpRequest</code> 通过封装 HTML <code>XMLHttpRequest</code> 对象提供了对 HTTP 协议的完全的访问，包括做出 POST 和 HEAD 请求以及普通的 GET 请求的能力。 <code>HttpRequest</code> 只提供以异步的形式返回 Web 服务器的响应，并且能够以文本或者二进制的形式返回内容。</p>
*<p><b>注意：</b>建议每次请求都使用新的 <code>HttpRequest</code> 对象，因为每次调用该对象的send方法时，都会清空之前设置的数据，并重置 HTTP 请求的状态，这会导致之前还未返回响应的请求被重置，从而得不到之前请求的响应结果。</p>
*/
//class laya.net.HttpRequest extends laya.events.EventDispatcher
var HttpRequest=(function(_super){
	function HttpRequest(){
		/**@private */
		this._responseType=null;
		/**@private */
		this._data=null;
		HttpRequest.__super.call(this);
		this._http=new Browser.window.XMLHttpRequest();
	}

	__class(HttpRequest,'laya.net.HttpRequest',_super);
	var __proto=HttpRequest.prototype;
	/**
	*发送 HTTP 请求。
	*@param url 请求的地址。大多数浏览器实施了一个同源安全策略，并且要求这个 URL 与包含脚本的文本具有相同的主机名和端口。
	*@param data (default=null)发送的数据。
	*@param method (default="get")用于请求的 HTTP 方法。值包括 "get"、"post"、"head"。
	*@param responseType (default="text")Web 服务器的响应类型，可设置为 "text"、"json"、"xml"、"arraybuffer"。
	*@param headers (default=null)HTTP 请求的头部信息。参数形如key-value数组：key是头部的名称，不应该包括空白、冒号或换行；value是头部的值，不应该包括换行。比如["Content-Type","application/json"]。
	*/
	__proto.send=function(url,data,method,responseType,headers){
		(method===void 0)&& (method="get");
		(responseType===void 0)&& (responseType="text");
		this._responseType=responseType;
		this._data=null;
		var _this=this;
		var http=this._http;
		http.open(method,url,true);
		if (headers){
			for (var i=0;i < headers.length;i++){
				http.setRequestHeader(headers[i++],headers[i]);
			}
			}else if (!Render.isConchApp){
			if (!data || (typeof data=='string'))http.setRequestHeader("Content-Type","application/x-www-form-urlencoded");
			else http.setRequestHeader("Content-Type","application/json");
		}
		http.responseType=responseType!=="arraybuffer" ? "text" :"arraybuffer";
		http.onerror=function (e){
			_this._onError(e);
		}
		http.onabort=function (e){
			_this._onAbort(e);
		}
		http.onprogress=function (e){
			_this._onProgress(e);
		}
		http.onload=function (e){
			_this._onLoad(e);
		}
		http.send(data);
	}

	/**
	*@private
	*请求进度的侦听处理函数。
	*@param e 事件对象。
	*/
	__proto._onProgress=function(e){
		if (e && e.lengthComputable)this.event("progress",e.loaded / e.total);
	}

	/**
	*@private
	*请求中断的侦听处理函数。
	*@param e 事件对象。
	*/
	__proto._onAbort=function(e){
		this.error("Request was aborted by user");
	}

	/**
	*@private
	*请求出错侦的听处理函数。
	*@param e 事件对象。
	*/
	__proto._onError=function(e){
		this.error("Request failed Status:"+this._http.status+" text:"+this._http.statusText);
	}

	/**
	*@private
	*请求消息返回的侦听处理函数。
	*@param e 事件对象。
	*/
	__proto._onLoad=function(e){
		var http=this._http;
		var status=http.status!==undefined ? http.status :200;
		if (status===200 || status===204 || status===0){
			this.complete();
			}else {
			this.error("["+http.status+"]"+http.statusText+":"+http.responseURL);
		}
	}

	/**
	*@private
	*请求错误的处理函数。
	*@param message 错误信息。
	*/
	__proto.error=function(message){
		this.clear();
		this.event("error",message);
	}

	/**
	*@private
	*请求成功完成的处理函数。
	*/
	__proto.complete=function(){
		this.clear();
		var flag=true;
		try {
			if (this._responseType==="json"){
				this._data=JSON.parse(this._http.responseText);
				}else if (this._responseType==="xml"){
				this._data=Utils.parseXMLFromString(this._http.responseText);
				}else {
				this._data=this._http.response || this._http.responseText;
			}
			}catch (e){
			flag=false;
			this.error(e.message);
		}
		flag && this.event("complete",(this._data instanceof Array)? [this._data] :this._data);
	}

	/**
	*@private
	*清除当前请求。
	*/
	__proto.clear=function(){
		var http=this._http;
		http.onerror=http.onabort=http.onprogress=http.onload=null;
	}

	/**请求的地址。*/
	__getset(0,__proto,'url',function(){
		return this._http.responseURL;
	});

	/**
	*本对象所封装的原生 XMLHttpRequest 引用。
	*/
	__getset(0,__proto,'http',function(){
		return this._http;
	});

	/**返回的数据。*/
	__getset(0,__proto,'data',function(){
		return this._data;
	});

	return HttpRequest;
})(EventDispatcher)


/**
*<code>Loader</code> 类可用来加载文本、JSON、XML、二进制、图像等资源。
*/
//class laya.net.Loader extends laya.events.EventDispatcher
var Loader=(function(_super){
	function Loader(){
		/**@private 加载后的数据对象，只读*/
		this._data=null;
		/**@private */
		this._class=null;
		/**@private */
		this._url=null;
		/**@private */
		this._type=null;
		/**@private */
		this._cache=false;
		/**@private */
		this._http=null;
		/**@private 自定义解析不派发complete事件，但会派发loaded事件，手动调用endLoad方法再派发complete事件*/
		this._customParse=false;
		Loader.__super.call(this);
	}

	__class(Loader,'laya.net.Loader',_super);
	var __proto=Loader.prototype;
	/**
	*加载资源。加载错误会派发 Event.ERROR 事件，参数为错误信息。
	*@param url 资源地址。
	*@param type (default=null)资源类型。可选值为：Loader.TEXT、Loader.JSON、Loader.XML、Loader.BUFFER、Loader.IMAGE、Loader.SOUND、Loader.ATLAS、Loader.FONT。如果为null，则根据文件后缀分析类型。
	*@param cache (default=true)是否缓存数据。
	*@param group (default=null)分组名称。
	*@param ignoreCache (default=false)是否忽略缓存，强制重新加载。
	*/
	__proto.load=function(url,type,cache,group,ignoreCache){
		(cache===void 0)&& (cache=true);
		(ignoreCache===void 0)&& (ignoreCache=false);
		this._url=url;
		if (url.indexOf("data:image")===0)this._type=type="image";
		else {
			this._type=type || (type=this.getTypeFromUrl(url));
			url=URL.formatURL(url);
		}
		this._cache=cache;
		this._data=null;
		if (!ignoreCache && Loader.loadedMap[url]){
			this._data=Loader.loadedMap[url];
			this.event("progress",1);
			this.event("complete",this._data);
			return;
		}
		if (group)Loader.setGroup(url,group);
		if (Loader.parserMap[type] !=null){
			this._customParse=true;
			if (((Loader.parserMap[type])instanceof laya.utils.Handler ))Loader.parserMap[type].runWith(this);
			else Loader.parserMap[type].call(null,this);
			return;
		}
		if (type==="image" || type==="htmlimage" || type==="nativeimage")return this._loadImage(url);
		if (type==="sound")return this._loadSound(url);
		if (type==="ttf")return this._loadTTF(url);
		if (type=="atlas"){
			if (Loader.preLoadedAtlasConfigMap[url]){
				this.onLoaded(Loader.preLoadedAtlasConfigMap[url]);
				delete Loader.preLoadedAtlasConfigMap[url];
				return;
			}
		}
		if (!this._http){
			this._http=new HttpRequest();
			this._http.on("progress",this,this.onProgress);
			this._http.on("error",this,this.onError);
			this._http.on("complete",this,this.onLoaded);
		};
		var contentType;
		switch (type){
			case "atlas":
				contentType="json";
				break ;
			case "font":
				contentType="xml";
				break ;
			case "pkm":
				contentType="arraybuffer";
				break
			default :
				contentType=type;
			}
		this._http.send(url,null,"get",contentType);
	}

	/**
	*获取指定资源地址的数据类型。
	*@param url 资源地址。
	*@return 数据类型。
	*/
	__proto.getTypeFromUrl=function(url){
		var type=Utils.getFileExtension(url);
		if (type)return Loader.typeMap[type];
		console.warn("Not recognize the resources suffix",url);
		return "text";
	}

	/**
	*@private
	*加载TTF资源。
	*@param url 资源地址。
	*/
	__proto._loadTTF=function(url){
		url=URL.formatURL(url);
		var ttfLoader=new TTFLoader();
		ttfLoader.complete=Handler.create(this,this.onLoaded);
		ttfLoader.load(url);
	}

	/**
	*@private
	*加载图片资源。
	*@param url 资源地址。
	*/
	__proto._loadImage=function(url){
		url=URL.formatURL(url);
		var _this=this;
		var image;
		function clear (){
			image.onload=null;
			image.onerror=null;
			delete Loader.imgCache[url]
		};
		var onload=function (){
			clear();
			_this.onLoaded(image);
		};
		var onerror=function (){
			clear();
			_this.event("error","Load image failed");
		}
		if (this._type==="nativeimage"){
			image=new Browser.window.Image();
			image.crossOrigin="";
			image.onload=onload;
			image.onerror=onerror;
			image.src=url;
			Loader.imgCache[url]=image;
			}else {
			new HTMLImage.create(url,{onload:onload,onerror:onerror,onCreate:function (img){
					image=img;
					Loader.imgCache[url]=img;
			}});
		}
	}

	/**
	*@private
	*加载声音资源。
	*@param url 资源地址。
	*/
	__proto._loadSound=function(url){
		var sound=(new SoundManager._soundClass());
		var _this=this;
		sound.on("complete",this,soundOnload);
		sound.on("error",this,soundOnErr);
		sound.load(url);
		function soundOnload (){
			clear();
			_this.onLoaded(sound);
		}
		function soundOnErr (){
			clear();
			sound.dispose();
			_this.event("error","Load sound failed");
		}
		function clear (){
			sound.offAll();
		}
	}

	/**@private */
	__proto.onProgress=function(value){
		if (this._type==="atlas")this.event("progress",value *0.3);
		else this.event("progress",value);
	}

	/**@private */
	__proto.onError=function(message){
		this.event("error",message);
	}

	/**
	*资源加载完成的处理函数。
	*@param data 数据。
	*/
	__proto.onLoaded=function(data){
		var type=this._type;
		if (type==="image"){
			var tex=new Texture(data);
			tex.url=this._url;
			this.complete(tex);
			}else if (type==="sound" || type==="htmlimage" || type==="nativeimage"){
			this.complete(data);
			}else if (type==="atlas"){
			if (!data.src && !data._setContext){
				if (!this._data){
					this._data=data;
					if (data.meta && data.meta.image){
						var toloadPics=data.meta.image.split(",");
						var split=this._url.indexOf("/")>=0 ? "/" :"\\";
						var idx=this._url.lastIndexOf(split);
						var folderPath=idx >=0 ? this._url.substr(0,idx+1):"";
						for (var i=0,len=toloadPics.length;i < len;i++){
							toloadPics[i]=folderPath+toloadPics[i];
						}
						}else {
						toloadPics=[this._url.replace(".json",".png")];
					}
					toloadPics.reverse();
					data.toLoads=toloadPics;
					data.pics=[];
				}
				this.event("progress",0.3+1 / toloadPics.length *0.6);
				return this._loadImage(toloadPics.pop());
				}else {
				this._data.pics.push(data);
				if (this._data.toLoads.length > 0){
					this.event("progress",0.3+1 / this._data.toLoads.length *0.6);
					return this._loadImage(this._data.toLoads.pop());
				};
				var frames=this._data.frames;
				var cleanUrl=this._url.split("?")[0];
				var directory=(this._data.meta && this._data.meta.prefix)? this._data.meta.prefix :cleanUrl.substring(0,cleanUrl.lastIndexOf("."))+"/";
				var pics=this._data.pics;
				var atlasURL=URL.formatURL(this._url);
				var map=Loader.atlasMap[atlasURL] || (Loader.atlasMap[atlasURL]=[]);
				map.dir=directory;
				var scaleRate=1;
				if (this._data.meta && this._data.meta.scale && this._data.meta.scale !=1){
					scaleRate=parseFloat(this._data.meta.scale);
					for (var name in frames){
						var obj=frames[name];
						var tPic=pics[obj.frame.idx ? obj.frame.idx :0];
						var url=URL.formatURL(directory+name);
						tPic.scaleRate=scaleRate;
						Loader.cacheRes(url,Texture.create(tPic,obj.frame.x,obj.frame.y,obj.frame.w,obj.frame.h,obj.spriteSourceSize.x,obj.spriteSourceSize.y,obj.sourceSize.w,obj.sourceSize.h));
						Loader.loadedMap[url].url=url;
						map.push(url);
					}
					}else{
					for (name in frames){
						obj=frames[name];
						tPic=pics[obj.frame.idx ? obj.frame.idx :0];
						url=URL.formatURL(directory+name);
						Loader.cacheRes(url,Texture.create(tPic,obj.frame.x,obj.frame.y,obj.frame.w,obj.frame.h,obj.spriteSourceSize.x,obj.spriteSourceSize.y,obj.sourceSize.w,obj.sourceSize.h));
						Loader.loadedMap[url].url=url;
						map.push(url);
					}
				}
				delete this._data.pics;
				this.complete(this._data);
			}
			}else if (type=="font"){
			if (!data.src){
				this._data=data;
				this.event("progress",0.5);
				return this._loadImage(this._url.replace(".fnt",".png"));
				}else {
				var bFont=new BitmapFont();
				bFont.parseFont(this._data,data);
				var tArr=this._url.split(".fnt")[0].split("/");
				var fontName=tArr[tArr.length-1];
				Text.registerBitmapFont(fontName,bFont);
				this._data=bFont;
				this.complete(this._data);
			}
			}else if (type=="pkm"){
			var image=HTMLImage.create(data,this._url);
			var tex1=new Texture(image);
			tex1.url=this._url;
			this.complete(tex1);
			}else {
			this.complete(data);
		}
	}

	/**
	*加载完成。
	*@param data 加载的数据。
	*/
	__proto.complete=function(data){
		this._data=data;
		if (this._customParse){
			this.event("loaded",(data instanceof Array)? [data] :data);
			}else {
			Loader._loaders.push(this);
			if (!Loader._isWorking)Loader.checkNext();
		}
	}

	/**
	*结束加载，处理是否缓存及派发完成事件 <code>Event.COMPLETE</code> 。
	*@param content 加载后的数据
	*/
	__proto.endLoad=function(content){
		content && (this._data=content);
		if (this._cache)Loader.cacheRes(this._url,this._data);
		this._customParse=false;
		this.event("progress",1);
		this.event("complete",(this.data instanceof Array)? [this.data] :this.data);
	}

	/**加载地址。*/
	__getset(0,__proto,'url',function(){
		return this._url;
	});

	/**返回的数据。*/
	__getset(0,__proto,'data',function(){
		return this._data;
	});

	/**是否缓存。*/
	__getset(0,__proto,'cache',function(){
		return this._cache;
	});

	/**加载类型。*/
	__getset(0,__proto,'type',function(){
		return this._type;
	});

	Loader.checkNext=function(){
		Loader._isWorking=true;
		var startTimer=Browser.now();
		var thisTimer=startTimer;
		while (Loader._startIndex < Loader._loaders.length){
			thisTimer=Browser.now();
			Loader._loaders[Loader._startIndex].endLoad();
			Loader._startIndex++;
			if (Browser.now()-startTimer > Loader.maxTimeOut){
				console.warn("loader callback cost a long time:"+(Browser.now()-startTimer)+" url="+Loader._loaders[Loader._startIndex-1].url);
				Laya.timer.frameOnce(1,null,Loader.checkNext);
				return;
			}
		}
		Loader._loaders.length=0;
		Loader._startIndex=0;
		Loader._isWorking=false;
	}

	Loader.clearRes=function(url,forceDispose){
		(forceDispose===void 0)&& (forceDispose=false);
		url=URL.formatURL(url);
		var arr=Loader.getAtlas(url);
		if (arr){
			for (var i=0,n=arr.length;i < n;i++){
				var resUrl=arr[i];
				var tex=Loader.getRes(resUrl);
				delete Loader.loadedMap[resUrl];
				if (tex)tex.destroy(forceDispose);
			}
			arr.length=0;
			delete Loader.atlasMap[url];
			delete Loader.loadedMap[url];
			}else {
			var res=Loader.loadedMap[url];
			if (res){
				delete Loader.loadedMap[url];
				if ((res instanceof laya.resource.Texture )&& res.bitmap)(res).destroy(forceDispose);
			}
		}
	}

	Loader.clearTextureRes=function(url){
		url=URL.formatURL(url);
		var arr=laya.net.Loader.getAtlas(url);
		var res=(arr && arr.length>0)? laya.net.Loader.getRes(arr[0]):laya.net.Loader.getRes(url);
		if (res && res.bitmap){
			if (Render.isConchApp){
				if (res.bitmap.source.releaseTexture){
					res.bitmap.source.releaseTexture();
				}
				}else if (res.bitmap._atlaser==null){
				res.bitmap.releaseResource(true);
			}
		}
	}

	Loader.setAtlasConfigs=function(url,config){
		Loader.preLoadedAtlasConfigMap[URL.formatURL(url)]=config;
	}

	Loader.getRes=function(url){
		return Loader.loadedMap[URL.formatURL(url)];
	}

	Loader.getAtlas=function(url){
		return Loader.atlasMap[URL.formatURL(url)];
	}

	Loader.cacheRes=function(url,data){
		url=URL.formatURL(url);
		if (Loader.loadedMap[url] !=null){
			console.warn("Resources already exist,is repeated loading:",url);
			}else {
			Loader.loadedMap[url]=data;
		}
	}

	Loader.setGroup=function(url,group){
		if (!Loader.groupMap[group])Loader.groupMap[group]=[];
		Loader.groupMap[group].push(url);
	}

	Loader.clearResByGroup=function(group){
		if (!Loader.groupMap[group])return;
		var arr=Loader.groupMap[group],i=0,len=arr.length;
		for (i=0;i < len;i++){
			Loader.clearRes(arr[i]);
		}
		arr.length=0;
	}

	Loader.TEXT="text";
	Loader.JSON="json";
	Loader.XML="xml";
	Loader.BUFFER="arraybuffer";
	Loader.IMAGE="image";
	Loader.SOUND="sound";
	Loader.ATLAS="atlas";
	Loader.FONT="font";
	Loader.TTF="ttf";
	Loader.PKM="pkm";
	Loader.typeMap={"png":"image","jpg":"image","jpeg":"image","txt":"text","json":"json","xml":"xml","als":"atlas","atlas":"atlas","mp3":"sound","ogg":"sound","wav":"sound","part":"json","fnt":"font","pkm":"pkm","ttf":"ttf"};
	Loader.parserMap={};
	Loader.groupMap={};
	Loader.maxTimeOut=100;
	Loader.loadedMap={};
	Loader.preLoadedAtlasConfigMap={};
	Loader.atlasMap={};
	Loader._loaders=[];
	Loader._isWorking=false;
	Loader._startIndex=0;
	Loader.imgCache={};
	return Loader;
})(EventDispatcher)


/**
*<code>Texture</code> 是一个纹理处理类。
*/
//class laya.resource.Texture extends laya.events.EventDispatcher
var Texture=(function(_super){
	function Texture(bitmap,uv){
		/**图片或者canvas 。*/
		//this.bitmap=null;
		/**UV信息。*/
		//this.uv=null;
		/**沿 X 轴偏移量。*/
		this.offsetX=0;
		/**沿 Y 轴偏移量。*/
		this.offsetY=0;
		/**原始宽度（包括被裁剪的透明区域）。*/
		this.sourceWidth=0;
		/**原始高度（包括被裁剪的透明区域）。*/
		this.sourceHeight=0;
		/**@private */
		//this._loaded=false;
		/**@private */
		this._w=0;
		/**@private */
		this._h=0;
		/**@private 唯一ID*/
		//this.$_GID=NaN;
		/**图片地址*/
		//this.url=null;
		/**@private */
		this._uvID=0;
		this._atlasID=-1;
		/**@private */
		this.scaleRate=1;
		Texture.__super.call(this);
		if (bitmap){
			bitmap._addReference();
		}
		this.setTo(bitmap,uv);
	}

	__class(Texture,'laya.resource.Texture',_super);
	var __proto=Texture.prototype;
	/**
	*@private
	*/
	__proto._setUrl=function(url){
		this.url=url;
	}

	/**
	*设置此对象的位图资源、UV数据信息。
	*@param bitmap 位图资源
	*@param uv UV数据信息
	*/
	__proto.setTo=function(bitmap,uv){
		if (bitmap instanceof window.HTMLElement){
			var canvas=HTMLCanvas.create("2D",bitmap);
			this.bitmap=canvas;
			}else{
			this.bitmap=bitmap;
		}
		this.uv=uv || Texture.DEF_UV;
		if (bitmap){
			this._w=bitmap.width;
			this._h=bitmap.height;
			this.sourceWidth=this.sourceWidth || this._w;
			this.sourceHeight=this.sourceHeight || this._h
			this._loaded=this._w > 0;
			var _this=this;
			if (this._loaded){
				RunDriver.addToAtlas && RunDriver.addToAtlas(_this);
				}else {
				var bm=bitmap;
				if ((bm instanceof laya.resource.HTMLImage )&& bm.image)
					bm.image.addEventListener('load',function(e){
					RunDriver.addToAtlas && RunDriver.addToAtlas(_this);
				},false);
			}
		}
	}

	/**@private 激活资源。*/
	__proto.active=function(){
		if (this.bitmap)this.bitmap.activeResource();
	}

	/**
	*销毁纹理（分直接销毁，跟计数销毁两种）。
	*@param forceDispose (default=false)true为强制销毁主纹理，false是通过计数销毁纹理。
	*/
	__proto.destroy=function(forceDispose){
		(forceDispose===void 0)&& (forceDispose=false);
		if (this.bitmap && (this.bitmap).referenceCount > 0){
			var temp=this.bitmap;
			if (forceDispose){
				if (Render.isConchApp && temp.source && temp.source.conchDestroy){
					this.bitmap.source.conchDestroy();
				}
				this.bitmap=null;
				temp.dispose();
				(temp)._clearReference();
				}else {
				(temp)._removeReference();
				if ((temp).referenceCount==0){
					if (Render.isConchApp && temp.source && temp.source.conchDestroy){
						this.bitmap.source.conchDestroy();
					}
					this.bitmap=null;
					temp.dispose();
				}
			}
			if (this.url && this===Laya.loader.getRes(this.url))Laya.loader.clearRes(this.url,forceDispose);
			this._loaded=false;
		}
	}

	/**
	*加载指定地址的图片。
	*@param url 图片地址。
	*/
	__proto.load=function(url){
		var _$this=this;
		this._loaded=false;
		url=URL.customFormat(url);
		var fileBitmap=(this.bitmap || (this.bitmap=HTMLImage.create(url)));
		if (fileBitmap)fileBitmap._addReference();
		var _this=this;
		fileBitmap.onload=function (){
			fileBitmap.onload=null;
			_this._loaded=true;
			_$this.sourceWidth=_$this._w=fileBitmap.width;
			_$this.sourceHeight=_$this._h=fileBitmap.height;
			_this.event("loaded",this);
			(RunDriver.addToAtlas)&& (RunDriver.addToAtlas(_this));
		};
	}

	/**@private */
	__proto.addTextureToAtlas=function(e){
		RunDriver.addTextureToAtlas(this);
	}

	/**
	*获取Texture上的某个区域的像素点
	*@param x
	*@param y
	*@param width
	*@param height
	*@return 返回像素点集合
	*/
	__proto.getPixels=function(x,y,width,height){
		if (Render.isConchApp){
			var temp=this.bitmap;
			if (temp.source && temp.source.getImageData){
				var arraybuffer=temp.source.getImageData(x,y,width,height);
				var tUint8Array=new Uint8Array(arraybuffer);
				return Array.from(tUint8Array);
			}
			return null;
			}else if (Render.isWebGL){
			return RunDriver.getTexturePixels(this,x,y,width,height);
			}else {
			Browser.canvas.size(width,height);
			Browser.canvas.clear();
			Browser.context.drawTexture(this,-x,-y,this.width,this.height,0,0);
			var info=Browser.context.getImageData(0,0,width,height);
		}
		return info.data;
	}

	/**@private */
	__proto.onAsynLoaded=function(url,bitmap){
		if (bitmap)bitmap._addReference();
		this.setTo(bitmap,this.uv);
	}

	/**激活并获取资源。*/
	__getset(0,__proto,'source',function(){
		if (!this.bitmap)return null;
		this.bitmap.activeResource();
		return this.bitmap.source;
	});

	/**
	*表示是否加载成功，只能表示初次载入成功（通常包含下载和载入）,并不能完全表示资源是否可立即使用（资源管理机制释放影响等）。
	*/
	__getset(0,__proto,'loaded',function(){
		return this._loaded;
	});

	/**
	*表示资源是否已释放。
	*/
	__getset(0,__proto,'released',function(){
		if (!this.bitmap)return true;
		return this.bitmap.released;
	});

	/**实际宽度。*/
	__getset(0,__proto,'width',function(){
		if (this._w)return this._w;
		return (this.uv && this.uv!==Texture.DEF_UV)? (this.uv[2]-this.uv[0])*this.bitmap.width :this.bitmap.width;
		},function(value){
		this._w=value;
		this.sourceWidth || (this.sourceWidth=value);
	});

	/**
	*通过外部设置是否启用纹理平铺(后面要改成在着色器里计算)
	*/
	/**
	*获取当前纹理是否启用了纹理平铺
	*/
	__getset(0,__proto,'repeat',function(){
		if (Render.isWebGL && this.bitmap){
			return this.bitmap.repeat;
		}
		return true;
		},function(value){
		if (value){
			if (Render.isWebGL && this.bitmap){
				this.bitmap.repeat=value;
				if (value){
					this.bitmap.enableMerageInAtlas=false;
				}
			}
		}
	});

	/**实际高度。*/
	__getset(0,__proto,'height',function(){
		if (this._h)return this._h;
		return (this.uv && this.uv!==Texture.DEF_UV)? (this.uv[5]-this.uv[1])*this.bitmap.height :this.bitmap.height;
		},function(value){
		this._h=value;
		this.sourceHeight || (this.sourceHeight=value);
	});

	/**
	*设置线性采样的状态（目前只能第一次绘制前设置false生效,来关闭线性采样）。
	*/
	/**
	*获取当前纹理是否启用了线性采样。
	*/
	__getset(0,__proto,'isLinearSampling',function(){
		return Render.isWebGL ? (this.bitmap.minFifter !=0x2600):true;
		},function(value){
		if (!value && Render.isWebGL){
			if (!value && (this.bitmap.minFifter==-1)&& (this.bitmap.magFifter==-1)){
				this.bitmap.minFifter=0x2600;
				this.bitmap.magFifter=0x2600;
				this.bitmap.enableMerageInAtlas=false;
			}
		}
	});

	Texture.moveUV=function(offsetX,offsetY,uv){
		for (var i=0;i < 8;i+=2){
			uv[i]+=offsetX;
			uv[i+1]+=offsetY;
		}
		return uv;
	}

	Texture.create=function(source,x,y,width,height,offsetX,offsetY,sourceWidth,sourceHeight){
		(offsetX===void 0)&& (offsetX=0);
		(offsetY===void 0)&& (offsetY=0);
		(sourceWidth===void 0)&& (sourceWidth=0);
		(sourceHeight===void 0)&& (sourceHeight=0);
		var btex=(source instanceof laya.resource.Texture );
		var uv=btex ? source.uv :Texture.DEF_UV;
		var bitmap=btex ? source.bitmap :source;
		var bIsAtlas=RunDriver.isAtlas(bitmap);
		if (bIsAtlas){
			var atlaser=bitmap._atlaser;
			var nAtlasID=(source)._atlasID;
			if (nAtlasID==-1){
				throw new Error("create texture error");
			}
			bitmap=atlaser._inAtlasTextureBitmapValue[nAtlasID];
			uv=atlaser._inAtlasTextureOriUVValue[nAtlasID];
		};
		var tex=new Texture(bitmap,null);
		if (bitmap.width && (x+width)> bitmap.width)width=bitmap.width-x;
		if (bitmap.height && (y+height)> bitmap.height)height=bitmap.height-y;
		tex.width=width;
		tex.height=height;
		tex.offsetX=offsetX;
		tex.offsetY=offsetY;
		tex.sourceWidth=sourceWidth || width;
		tex.sourceHeight=sourceHeight || height;
		var dwidth=1 / bitmap.width;
		var dheight=1 / bitmap.height;
		x *=dwidth;
		y *=dheight;
		width *=dwidth;
		height *=dheight;
		var u1=tex.uv[0],v1=tex.uv[1],u2=tex.uv[4],v2=tex.uv[5];
		var inAltasUVWidth=(u2-u1),inAltasUVHeight=(v2-v1);
		var oriUV=Texture.moveUV(uv[0],uv[1],[x,y,x+width,y,x+width,y+height,x,y+height]);
		tex.uv=[u1+oriUV[0] *inAltasUVWidth,v1+oriUV[1] *inAltasUVHeight,u2-(1-oriUV[2])*inAltasUVWidth,v1+oriUV[3] *inAltasUVHeight,u2-(1-oriUV[4])*inAltasUVWidth,v2-(1-oriUV[5])*inAltasUVHeight,u1+oriUV[6] *inAltasUVWidth,v2-(1-oriUV[7])*inAltasUVHeight];
		if (bIsAtlas){
			tex.addTextureToAtlas();
		};
		var bitmapScale=bitmap.scaleRate;
		if (bitmapScale && bitmapScale !=1){
			tex.sourceWidth /=bitmapScale;
			tex.sourceHeight /=bitmapScale;
			tex.width /=bitmapScale;
			tex.height /=bitmapScale;
			tex.scaleRate=bitmapScale;
			tex.offsetX /=bitmapScale;
			tex.offsetY /=bitmapScale;
			}else{
			tex.scaleRate=1;
		}
		return tex;
	}

	Texture.createFromTexture=function(texture,x,y,width,height){
		var texScaleRate=texture.scaleRate;
		if (texScaleRate !=1){
			x *=texScaleRate;
			y *=texScaleRate;
			width *=texScaleRate;
			height *=texScaleRate;
		};
		var rect=Rectangle.TEMP.setTo(x-texture.offsetX,y-texture.offsetY,width,height);
		var result=rect.intersection(Texture._rect1.setTo(0,0,texture.width,texture.height),Texture._rect2);
		if (result)
			var tex=Texture.create(texture,result.x,result.y,result.width,result.height,result.x-rect.x,result.y-rect.y,width,height);
		else return null;
		tex.bitmap._removeReference();
		return tex;
	}

	Texture.DEF_UV=[0,0,1.0,0,1.0,1.0,0,1.0];
	Texture.INV_UV=[0,1,1.0,1,1.0,0.0,0,0.0];
	Texture._rect1=new Rectangle();
	Texture._rect2=new Rectangle();
	return Texture;
})(EventDispatcher)


/**
*<code>AutoBitmap</code> 类是用于表示位图图像或绘制图形的显示对象。
*<p>封装了位置，宽高及九宫格的处理，供UI组件使用。</p>
*/
//class laya.ui.AutoBitmap extends laya.display.Graphics
var AutoBitmap=(function(_super){
	function AutoBitmap(){
		/**@private 是否自动缓存命令*/
		this.autoCacheCmd=true;
		/**@private 宽度*/
		this._width=0;
		/**@private 高度*/
		this._height=0;
		/**@private 源数据*/
		this._source=null;
		/**@private 网格数据*/
		this._sizeGrid=null;
		/**@private */
		this._isChanged=false;
		/**@private */
		this._offset=null;
		AutoBitmap.__super.call(this);
	}

	__class(AutoBitmap,'laya.ui.AutoBitmap',_super);
	var __proto=AutoBitmap.prototype;
	/**@inheritDoc */
	__proto.destroy=function(){
		_super.prototype.destroy.call(this);
		this._source=null;
		this._sizeGrid=null;
		this._offset=null;
	}

	/**@private */
	__proto._setChanged=function(){
		if (!this._isChanged){
			this._isChanged=true;
			Laya.timer.callLater(this,this.changeSource);
		}
	}

	/**
	*@private
	*修改纹理资源。
	*/
	__proto.changeSource=function(){
		this._isChanged=false;
		var source=this._source;
		if (!source || !source.bitmap)return;
		var width=this.width;
		var height=this.height;
		var sizeGrid=this._sizeGrid;
		var sw=source.sourceWidth;
		var sh=source.sourceHeight;
		if (!sizeGrid || (sw===width && sh===height)){
			this.cleanByTexture(source,this._offset ? this._offset[0] :0,this._offset ? this._offset[1] :0,width,height);
			}else {
			source.$_GID || (source.$_GID=Utils.getGID());
			var key=source.$_GID+"."+width+"."+height+"."+sizeGrid.join(".");
			if (Utils.isOKCmdList(WeakObject.I.get(key))){
				this.cmds=WeakObject.I.get(key);
				return;
			}
			this.clear();
			var top=sizeGrid[0];
			var right=sizeGrid[1];
			var bottom=sizeGrid[2];
			var left=sizeGrid[3];
			var repeat=sizeGrid[4];
			var needClip=false;
			if (width==sw){
				left=right=0;
			}
			if (height==sh){
				top=bottom=0;
			}
			if (left+right > width){
				var clipWidth=width;
				needClip=true;
				width=left+right;
				this.save();
				this.clipRect(0,0,clipWidth,height);
			}
			left && top && this.drawTexture(AutoBitmap.getTexture(source,0,0,left,top),0,0,left,top);
			right && top && this.drawTexture(AutoBitmap.getTexture(source,sw-right,0,right,top),width-right,0,right,top);
			left && bottom && this.drawTexture(AutoBitmap.getTexture(source,0,sh-bottom,left,bottom),0,height-bottom,left,bottom);
			right && bottom && this.drawTexture(AutoBitmap.getTexture(source,sw-right,sh-bottom,right,bottom),width-right,height-bottom,right,bottom);
			top && this.drawBitmap(repeat,AutoBitmap.getTexture(source,left,0,sw-left-right,top),left,0,width-left-right,top);
			bottom && this.drawBitmap(repeat,AutoBitmap.getTexture(source,left,sh-bottom,sw-left-right,bottom),left,height-bottom,width-left-right,bottom);
			left && this.drawBitmap(repeat,AutoBitmap.getTexture(source,0,top,left,sh-top-bottom),0,top,left,height-top-bottom);
			right && this.drawBitmap(repeat,AutoBitmap.getTexture(source,sw-right,top,right,sh-top-bottom),width-right,top,right,height-top-bottom);
			this.drawBitmap(repeat,AutoBitmap.getTexture(source,left,top,sw-left-right,sh-top-bottom),left,top,width-left-right,height-top-bottom);
			if (needClip)this.restore();
			if (this.autoCacheCmd && !Render.isConchApp)WeakObject.I.set(key,this.cmds);
		}
		this._repaint();
	}

	__proto.drawBitmap=function(repeat,tex,x,y,width,height){
		(width===void 0)&& (width=0);
		(height===void 0)&& (height=0);
		if (width < 0.1 || height < 0.1)return;
		if (repeat && (tex.width !=width || tex.height !=height))this.fillTexture(tex,x,y,width,height);
		else this.drawTexture(tex,x,y,width,height);
	}

	__proto.clear=function(recoverCmds){
		(recoverCmds===void 0)&& (recoverCmds=true);
		_super.prototype.clear.call(this,false);
	}

	/**
	*当前实例的有效缩放网格数据。
	*<p>如果设置为null,则在应用任何缩放转换时，将正常缩放整个显示对象。</p>
	*<p>数据格式：[上边距,右边距,下边距,左边距,是否重复填充(值为0：不重复填充，1：重复填充)]。
	*<ul><li>例如：[4,4,4,4,1]</li></ul></p>
	*<p> <code>sizeGrid</code> 的值如下所示：
	*<ol>
	*<li>上边距</li>
	*<li>右边距</li>
	*<li>下边距</li>
	*<li>左边距</li>
	*<li>是否重复填充(值为0：不重复填充，1：重复填充)</li>
	*</ol></p>
	*<p>当定义 <code>sizeGrid</code> 属性时，该显示对象被分割到以 <code>sizeGrid</code> 数据中的"上边距,右边距,下边距,左边距" 组成的矩形为基础的具有九个区域的网格中，该矩形定义网格的中心区域。网格的其它八个区域如下所示：
	*<ul>
	*<li>矩形上方的区域</li>
	*<li>矩形外的右上角</li>
	*<li>矩形左侧的区域</li>
	*<li>矩形右侧的区域</li>
	*<li>矩形外的左下角</li>
	*<li>矩形下方的区域</li>
	*<li>矩形外的右下角</li>
	*<li>矩形外的左上角</li>
	*</ul>
	*同时也支持3宫格，比如0,4,0,4,1为水平3宫格，4,0,4,0,1为垂直3宫格，3宫格性能比9宫格高。
	*</p>
	*/
	__getset(0,__proto,'sizeGrid',function(){
		return this._sizeGrid;
		},function(value){
		this._sizeGrid=value;
		this._setChanged();
	});

	/**
	*表示显示对象的宽度，以像素为单位。
	*/
	__getset(0,__proto,'width',function(){
		if (this._width)return this._width;
		if (this._source)return this._source.sourceWidth;
		return 0;
		},function(value){
		if (this._width !=value){
			this._width=value;
			this._setChanged();
		}
	});

	/**
	*表示显示对象的高度，以像素为单位。
	*/
	__getset(0,__proto,'height',function(){
		if (this._height)return this._height;
		if (this._source)return this._source.sourceHeight;
		return 0;
		},function(value){
		if (this._height !=value){
			this._height=value;
			this._setChanged();
		}
	});

	/**
	*对象的纹理资源。
	*@see laya.resource.Texture
	*/
	__getset(0,__proto,'source',function(){
		return this._source;
		},function(value){
		if (value){
			this._source=value
			this._setChanged();
			}else {
			this._source=null;
			this.clear();
		}
	});

	AutoBitmap.getTexture=function(tex,x,y,width,height){
		if (width <=0)width=1;
		if (height <=0)height=1;
		tex.$_GID || (tex.$_GID=Utils.getGID())
		var key=tex.$_GID+"."+x+"."+y+"."+width+"."+height;
		var texture=WeakObject.I.get(key);
		if (!texture||!texture.source){
			texture=Texture.createFromTexture(tex,x,y,width,height);
			WeakObject.I.set(key,texture);
		}
		return texture;
	}

	return AutoBitmap;
})(Graphics)


//class laya.webgl.display.GraphicsGL extends laya.display.Graphics
var GraphicsGL=(function(_super){
	function GraphicsGL(){
		GraphicsGL.__super.call(this);
	}

	__class(GraphicsGL,'laya.webgl.display.GraphicsGL',_super);
	var __proto=GraphicsGL.prototype;
	__proto.setShader=function(shader){
		this._saveToCmd(Render.context._setShader,[shader]);
	}

	__proto.setIBVB=function(x,y,ib,vb,numElement,shader){
		this._saveToCmd(Render.context._setIBVB,[x,y,ib,vb,numElement,shader]);
	}

	__proto.drawParticle=function(x,y,ps){
		var pt=RunDriver.createParticleTemplate2D(ps);
		pt.x=x;
		pt.y=y;
		this._saveToCmd(Render.context._drawParticle,[pt]);
	}

	return GraphicsGL;
})(Graphics)


/**
*@private
*<code>CSSStyle</code> 类是元素CSS样式定义类。
*/
//class laya.display.css.CSSStyle extends laya.display.css.Style
var CSSStyle=(function(_super){
	function CSSStyle(ower){
		this._bgground=null;
		this._border=null;
		//this._ower=null;
		this._rect=null;
		/**@private */
		this.underLine=0;
		/**行高。 */
		this.lineHeight=0;
		CSSStyle.__super.call(this);
		this._padding=CSSStyle._PADDING;
		this._spacing=CSSStyle._SPACING;
		this._aligns=CSSStyle._ALIGNS;
		this._font=Font.EMPTY;
		this._ower=ower;
	}

	__class(CSSStyle,'laya.display.css.CSSStyle',_super);
	var __proto=CSSStyle.prototype;
	/**@inheritDoc */
	__proto.destroy=function(){
		this._ower=null;
		this._font=null;
		this._rect=null;
	}

	/**
	*复制传入的 CSSStyle 属性值。
	*@param src 待复制的 CSSStyle 对象。
	*/
	__proto.inherit=function(src){
		this._font=src._font;
		this._spacing=src._spacing===CSSStyle._SPACING ? CSSStyle._SPACING :src._spacing.slice();
		this.lineHeight=src.lineHeight;
	}

	/**@private */
	__proto._widthAuto=function(){
		return (this._type & 0x40000)!==0;
	}

	/**@inheritDoc */
	__proto.widthed=function(sprite){
		return (this._type & 0x8)!=0;
	}

	/**
	*@private
	*/
	__proto._calculation=function(type,value){
		if (value.indexOf('%')< 0)return false;
		var ower=this._ower;
		var parent=ower.parent;
		var rect=this._rect;
		function getValue (pw,w,nums){
			return (pw *nums[0]+w *nums[1]+nums[2]);
		}
		function onParentResize (type){
			var pw=parent.width,w=ower.width;
			rect.width && (ower.width=getValue(pw,w,rect.width));
			rect.height && (ower.height=getValue(pw,w,rect.height));
			rect.left && (ower.x=getValue(pw,w,rect.left));
			rect.top && (ower.y=getValue(pw,w,rect.top));
		}
		if (rect===null){
			parent._getCSSStyle()._type |=0x80000;
			parent.on("resize",this,onParentResize);
			this._rect=rect={input:{}};
		};
		var nums=value.split(' ');
		nums[0]=parseFloat(nums[0])/ 100;
		if (nums.length==1)
			nums[1]=nums[2]=0;
		else {
			nums[1]=parseFloat(nums[1])/ 100;
			nums[2]=parseFloat(nums[2]);
		}
		rect[type]=nums;
		rect.input[type]=value;
		onParentResize(type);
		return true;
	}

	/**
	*是否已设置高度。
	*@param sprite 显示对象 Sprite。
	*@return 一个Boolean 表示是否已设置高度。
	*/
	__proto.heighted=function(sprite){
		return (this._type & 0x2000)!=0;
	}

	/**
	*设置宽高。
	*@param w 宽度。
	*@param h 高度。
	*/
	__proto.size=function(w,h){
		var ower=this._ower;
		var resize=false;
		if (w!==-1 && w !=this._ower.width){
			this._type |=0x8;
			this._ower.width=w;
			resize=true;
		}
		if (h!==-1 && h !=this._ower.height){
			this._type |=0x2000;
			this._ower.height=h;
			resize=true;
		}
		if (resize){
			ower._layoutLater();
			(this._type & 0x80000)&& ower.event("resize",this);
		}
	}

	/**@private */
	__proto._getAlign=function(){
		return this._aligns[0];
	}

	/**@private */
	__proto._getValign=function(){
		return this._aligns[1];
	}

	/**@private */
	__proto._getCssFloat=function(){
		return (this._type & 0x8000)!=0 ? 0x8000 :0;
	}

	__proto._createFont=function(){
		return (this._type & 0x1000)? this._font :(this._type |=0x1000,this._font=new Font(this._font));
	}

	/**@inheritDoc */
	__proto.render=function(sprite,context,x,y){
		var w=sprite.width;
		var h=sprite.height;
		x-=sprite.pivotX;
		y-=sprite.pivotY;
		this._bgground && this._bgground.color !=null && context.ctx.fillRect(x,y,w,h,this._bgground.color);
		this._border && this._border.color && context.drawRect(x,y,w,h,this._border.color.strColor,this._border.size);
	}

	/**@inheritDoc */
	__proto.getCSSStyle=function(){
		return this;
	}

	/**
	*设置 CSS 样式字符串。
	*@param text CSS样式字符串。
	*/
	__proto.cssText=function(text){
		this.attrs(CSSStyle.parseOneCSS(text,';'));
	}

	/**
	*根据传入的属性名、属性值列表，设置此对象的属性值。
	*@param attrs 属性名与属性值列表。
	*/
	__proto.attrs=function(attrs){
		if (attrs){
			for (var i=0,n=attrs.length;i < n;i++){
				var attr=attrs[i];
				this[attr[0]]=attr[1];
			}
		}
	}

	/**@inheritDoc */
	__proto.setTransform=function(value){
		(value==='none')? (this._tf=Style._TF_EMPTY):this.attrs(CSSStyle.parseOneCSS(value,','));
	}

	/**
	*定义 X 轴、Y 轴移动转换。
	*@param x X 轴平移量。
	*@param y Y 轴平移量。
	*/
	__proto.translate=function(x,y){
		this._tf===Style._TF_EMPTY && (this._tf=new TransformInfo());
		this._tf.translateX=x;
		this._tf.translateY=y;
	}

	/**
	*定义 缩放转换。
	*@param x X 轴缩放值。
	*@param y Y 轴缩放值。
	*/
	__proto.scale=function(x,y){
		this._tf===Style._TF_EMPTY && (this._tf=new TransformInfo());
		this._tf.scaleX=x;
		this._tf.scaleY=y;
	}

	/**@private */
	__proto._enableLayout=function(){
		return (this._type & 0x2)===0 && (this._type & 0x4)===0;
	}

	/**
	*是否显示为块级元素。
	*/
	__getset(0,__proto,'block',_super.prototype._$get_block,function(value){
		value ? (this._type |=0x1):(this._type &=(~0x1));
	});

	/**
	*垂直对齐方式。
	*/
	__getset(0,__proto,'valign',function(){
		return CSSStyle._valigndef[this._aligns[1]];
		},function(value){
		this._aligns===CSSStyle._ALIGNS && (this._aligns=[0,0,0]);
		this._aligns[1]=CSSStyle._valigndef[value];
	});

	/**
	*高度。
	*/
	__getset(0,__proto,'height',null,function(h){
		this._type |=0x2000;
		if ((typeof h=='string')){
			if (this._calculation("height",h))return;
			h=parseInt(h);
		}
		this.size(-1,h);
	});

	/**
	*宽度。
	*/
	__getset(0,__proto,'width',null,function(w){
		this._type |=0x8;
		if ((typeof w=='string')){
			var offset=w.indexOf('auto');
			if (offset >=0){
				this._type |=0x40000;
				w=w.substr(0,offset);
			}
			if (this._calculation("width",w))return;
			w=parseInt(w);
		}
		this.size(w,-1);
	});

	/**
	*字体粗细。
	*/
	__getset(0,__proto,'fontWeight',function(){
		return this._font.weight;
		},function(value){
		this._createFont().weight=value;
	});

	/**
	*表示左边距。
	*/
	__getset(0,__proto,'left',null,function(value){
		var ower=this._ower;
		if (((typeof value=='string'))){
			if (value==="center")
				value="50% -50% 0";
			else if (value==="right")
			value="100% -100% 0";
			if (this._calculation("left",value))return;
			value=parseInt(value);
		}
		ower.x=value;
	});

	__getset(0,__proto,'_translate',null,function(value){
		this.translate(value[0],value[1]);
	});

	/**@inheritDoc */
	__getset(0,__proto,'absolute',function(){
		return (this._type & 0x4)!==0;
	});

	/**
	*表示上边距。
	*/
	__getset(0,__proto,'top',null,function(value){
		var ower=this._ower;
		if (((typeof value=='string'))){
			if (value==="middle")
				value="50% -50% 0";
			else if (value==="bottom")
			value="100% -100% 0";
			if (this._calculation("top",value))return;
			value=parseInt(value);
		}
		ower.y=value;
	});

	/**
	*水平对齐方式。
	*/
	__getset(0,__proto,'align',function(){
		return CSSStyle._aligndef[this._aligns[0]];
		},function(value){
		this._aligns===CSSStyle._ALIGNS && (this._aligns=[0,0,0]);
		this._aligns[0]=CSSStyle._aligndef[value];
	});

	/**
	*表示是否加粗。
	*/
	__getset(0,__proto,'bold',function(){
		return this._font.bold;
		},function(value){
		this._createFont().bold=value;
	});

	/**
	*边距信息。
	*/
	__getset(0,__proto,'padding',function(){
		return this._padding;
		},function(value){
		this._padding=value;
	});

	/**
	*行间距。
	*/
	__getset(0,__proto,'leading',function(){
		return this._spacing[1];
		},function(d){
		((typeof d=='string'))&& (d=parseInt(d+""));
		this._spacing===CSSStyle._SPACING && (this._spacing=[0,0]);
		this._spacing[1]=d;
	});

	/**
	*是否是行元素。
	*/
	__getset(0,__proto,'lineElement',function(){
		return (this._type & 0x10000)!=0;
		},function(value){
		value ? (this._type |=0x10000):(this._type &=(~0x10000));
	});

	/**
	*浮动方向。
	*/
	__getset(0,__proto,'cssFloat',function(){
		return (this._type & 0x8000)!=0 ? "right" :"left";
		},function(value){
		this.lineElement=false;
		value==="right" ? (this._type |=0x8000):(this._type &=(~0x8000));
	});

	/**
	*添加到文本的修饰。
	*/
	__getset(0,__proto,'textDecoration',function(){
		return this._font.decoration;
		},function(value){
		this._createFont().decoration=value;
	});

	/**
	*设置如何处理元素内的空白。
	*/
	__getset(0,__proto,'whiteSpace',function(){
		return (this._type & 0x20000)? "nowrap" :"";
		},function(type){
		type==="nowrap" && (this._type |=0x20000);
		type==="none" && (this._type &=~0x20000);
	});

	__getset(0,__proto,'background',null,function(value){
		if (!value){
			this._bgground=null;
			return;
		}
		this._bgground || (this._bgground={});
		this._bgground.color=value;
		this._ower.conchModel && this._ower.conchModel.bgColor(value);
		this._type |=0x4000;
		this._ower._renderType |=0x100;
	});

	/**
	*表示是否换行。
	*/
	__getset(0,__proto,'wordWrap',function(){
		return (this._type & 0x20000)===0;
		},function(value){
		value ? (this._type &=~0x20000):(this._type |=0x20000);
	});

	/**
	*字体颜色。
	*/
	__getset(0,__proto,'color',function(){
		return this._font.color;
		},function(value){
		this._createFont().color=value;
	});

	/**
	*<p>指定文本字段是否是密码文本字段。</p>
	*如果此属性的值为 true，则文本字段被视为密码文本字段，并使用星号而不是实际字符来隐藏输入的字符。如果为 false，则不会将文本字段视为密码文本字段。
	*/
	__getset(0,__proto,'password',function(){
		return this._font.password;
		},function(value){
		this._createFont().password=value;
	});

	/**
	*背景颜色。
	*/
	__getset(0,__proto,'backgroundColor',function(){
		return this._bgground ? this._bgground.color :null;
		},function(value){
		if (value==='none')this._bgground=null;
		else (this._bgground || (this._bgground={}),this._bgground.color=value);
		this._ower.conchModel && this._ower.conchModel.bgColor(value);
		this._ower._renderType |=0x100;
	});

	/**
	*字体信息。
	*/
	__getset(0,__proto,'font',function(){
		return this._font.toString();
		},function(value){
		this._createFont().set(value);
	});

	/**
	*文本的粗细。
	*/
	__getset(0,__proto,'weight',null,function(value){
		this._createFont().weight=value;
	});

	/**
	*间距。
	*/
	__getset(0,__proto,'letterSpacing',function(){
		return this._spacing[0];
		},function(d){
		((typeof d=='string'))&& (d=parseInt(d+""));
		this._spacing===CSSStyle._SPACING && (this._spacing=[0,0]);
		this._spacing[0]=d;
	});

	/**
	*字体大小。
	*/
	__getset(0,__proto,'fontSize',function(){
		return this._font.size;
		},function(value){
		this._createFont().size=value;
	});

	/**
	*表示是否为斜体。
	*/
	__getset(0,__proto,'italic',function(){
		return this._font.italic;
		},function(value){
		this._createFont().italic=value;
	});

	/**
	*字体系列。
	*/
	__getset(0,__proto,'fontFamily',function(){
		return this._font.family;
		},function(value){
		this._createFont().family=value;
	});

	/**
	*<p>描边宽度（以像素为单位）。</p>
	*默认值0，表示不描边。
	*@default 0
	*/
	__getset(0,__proto,'stroke',function(){
		return this._font.stroke[0];
		},function(value){
		if (this._createFont().stroke===Font._STROKE)this._font.stroke=[0,"#000000"];
		this._font.stroke[0]=value;
	});

	/**
	*<p>描边颜色，以字符串表示。</p>
	*@default "#000000";
	*/
	__getset(0,__proto,'strokeColor',function(){
		return this._font.stroke[1];
		},function(value){
		if (this._createFont().stroke===Font._STROKE)this._font.stroke=[0,"#000000"];
		this._font.stroke[1]=value;
	});

	/**
	*边框属性，比如border="5px solid red"
	*/
	__getset(0,__proto,'border',function(){
		return this._border ? this._border.value :"";
		},function(value){
		if (value=='none'){
			this._border=null;
			return;
		}
		this._border || (this._border={});
		this._border.value=value;
		var values=value.split(' ');
		this._border.color=Color$1.create(values[values.length-1]);
		if (values.length==1){
			this._border.size=1;
			this._border.type='solid';
			return;
		};
		var i=0;
		if (values[0].indexOf('px')> 0){
			this._border.size=parseInt(values[0]);
			i++;
		}else this._border.size=1;
		this._border.type=values[i];
		this._ower._renderType |=0x100;
	});

	/**
	*边框的颜色。
	*/
	__getset(0,__proto,'borderColor',function(){
		return (this._border && this._border.color)? this._border.color.strColor :null;
		},function(value){
		if (!value){
			this._border=null;
			return;
		}
		this._border || (this._border={size:1,type:'solid'});
		this._border.color=(value==null)? null :Color$1.create(value);
		this._ower.conchModel && this._ower.conchModel.border(this._border.color.strColor);
		this._ower._renderType |=0x100;
	});

	/**
	*元素的定位类型。
	*/
	__getset(0,__proto,'position',function(){
		return (this._type & 0x4)? "absolute" :"";
		},function(value){
		value=="absolute" ? (this._type |=0x4):(this._type &=~0x4);
	});

	/**
	*规定元素应该生成的框的类型。
	*/
	__getset(0,__proto,'display',null,function(value){
		switch (value){
			case '':
				this._type &=~0x2;
				this.visible=true;
				break ;
			case 'none':
				this._type |=0x2;
				this.visible=false;
				this._ower._layoutLater();
				break ;
			}
	});

	/**@inheritDoc */
	__getset(0,__proto,'paddingLeft',function(){
		return this.padding[3];
	});

	/**@inheritDoc */
	__getset(0,__proto,'paddingTop',function(){
		return this.padding[0];
	});

	__getset(0,__proto,'_scale',null,function(value){
		this._ower.scale(value[0],value[1]);
	});

	__getset(0,__proto,'_rotate',null,function(value){
		this._ower.rotation=value;
	});

	CSSStyle.parseOneCSS=function(text,clipWord){
		var out=[];
		var attrs=text.split(clipWord);
		var valueArray;
		for (var i=0,n=attrs.length;i < n;i++){
			var attr=attrs[i];
			var ofs=attr.indexOf(':');
			var name=attr.substr(0,ofs).replace(/^\s+|\s+$/g,'');
			if (name.length==0)
				continue ;
			var value=attr.substr(ofs+1).replace(/^\s+|\s+$/g,'');
			var one=[name,value];
			switch (name){
				case 'italic':
				case 'bold':
					one[1]=value=="true";
					break ;
				case 'line-height':
					one[0]='lineHeight';
					one[1]=parseInt(value);
					break ;
				case 'font-size':
					one[0]='fontSize';
					one[1]=parseInt(value);
					break ;
				case 'padding':
					valueArray=value.split(' ');
					valueArray.length > 1 || (valueArray[1]=valueArray[2]=valueArray[3]=valueArray[0]);
					one[1]=[parseInt(valueArray[0]),parseInt(valueArray[1]),parseInt(valueArray[2]),parseInt(valueArray[3])];
					break ;
				case 'rotate':
					one[0]="_rotate";
					one[1]=parseFloat(value);
					break ;
				case 'scale':
					valueArray=value.split(' ');
					one[0]="_scale";
					one[1]=[parseFloat(valueArray[0]),parseFloat(valueArray[1])];
					break ;
				case 'translate':
					valueArray=value.split(' ');
					one[0]="_translate";
					one[1]=[parseInt(valueArray[0]),parseInt(valueArray[1])];
					break ;
				default :
					(one[0]=CSSStyle._CSSTOVALUE[name])|| (one[0]=name);
				}
			out.push(one);
		}
		return out;
	}

	CSSStyle.parseCSS=function(text,uri){
		var one;
		while ((one=CSSStyle._parseCSSRegExp.exec(text))!=null){
			CSSStyle.styleSheets[one[1]]=CSSStyle.parseOneCSS(one[2],';');
		}
	}

	CSSStyle.EMPTY=new CSSStyle(null);
	CSSStyle._CSSTOVALUE={'letter-spacing':'letterSpacing','line-spacing':'lineSpacing','white-space':'whiteSpace','line-height':'lineHeight','scale-x':'scaleX','scale-y':'scaleY','translate-x':'translateX','translate-y':'translateY','font-family':'fontFamily','font-weight':'fontWeight','vertical-align':'valign','text-decoration':'textDecoration','background-color':'backgroundColor','border-color':'borderColor','float':'cssFloat'};
	CSSStyle._parseCSSRegExp=new RegExp("([\.\#]\\w+)\\s*{([\\s\\S]*?)}","g");
	CSSStyle._aligndef={'left':0,'center':1,'right':2,0:'left',1:'center',2:'right'};
	CSSStyle._valigndef={'top':0,'middle':1,'bottom':2,0:'top',1:'middle',2:'bottom'};
	CSSStyle.styleSheets={};
	CSSStyle.ALIGN_CENTER=1;
	CSSStyle.ALIGN_RIGHT=2;
	CSSStyle.VALIGN_MIDDLE=1;
	CSSStyle.VALIGN_BOTTOM=2;
	CSSStyle._CSS_BLOCK=0x1;
	CSSStyle._DISPLAY_NONE=0x2;
	CSSStyle._ABSOLUTE=0x4;
	CSSStyle._WIDTH_SET=0x8;
	CSSStyle._PADDING=[0,0,0,0];
	CSSStyle._RECT=[-1,-1,-1,-1];
	CSSStyle._SPACING=[0,0];
	CSSStyle._ALIGNS=[0,0,0];
	CSSStyle.ADDLAYOUTED=0x200;
	CSSStyle._NEWFONT=0x1000;
	CSSStyle._HEIGHT_SET=0x2000;
	CSSStyle._BACKGROUND_SET=0x4000;
	CSSStyle._FLOAT_RIGHT=0x8000;
	CSSStyle._LINE_ELEMENT=0x10000;
	CSSStyle._NOWARP=0x20000;
	CSSStyle._WIDTHAUTO=0x40000;
	CSSStyle._LISTERRESZIE=0x80000;
	return CSSStyle;
})(Style)


/**
*模糊滤镜
*/
//class laya.filters.BlurFilter extends laya.filters.Filter
var BlurFilter=(function(_super){
	function BlurFilter(strength){
		/**模糊滤镜的强度(值越大，越不清晰 */
		this.strength=NaN;
		this.strength_sig2_2sig2_gauss1=[];
		BlurFilter.__super.call(this);
		(strength===void 0)&& (strength=4);
		if (Render.isWebGL)WebGLFilter.enable();
		this.strength=strength;
		this._action=RunDriver.createFilterAction(0x10);
		this._action.data=this;
	}

	__class(BlurFilter,'laya.filters.BlurFilter',_super);
	var __proto=BlurFilter.prototype;
	/**
	*@private 通知微端
	*/
	__proto.callNative=function(sp){
		sp.conchModel &&sp.conchModel.blurFilter&&sp.conchModel.blurFilter(this.strength);
	}

	/**
	*@private
	*当前滤镜对应的操作器
	*/
	__getset(0,__proto,'action',function(){
		return this._action;
	});

	/**
	*@private
	*当前滤镜的类型
	*/
	__getset(0,__proto,'type',function(){
		return 0x10;
	});

	return BlurFilter;
})(Filter)


/**
*<p><code>ColorFilter</code> 是颜色滤镜。使用 ColorFilter 类可以将 4 x 5 矩阵转换应用于输入图像上的每个像素的 RGBA 颜色和 Alpha 值，以生成具有一组新的 RGBA 颜色和 Alpha 值的结果。该类允许饱和度更改、色相旋转、亮度转 Alpha 以及各种其他效果。您可以将滤镜应用于任何显示对象（即，从 Sprite 类继承的对象）。</p>
*<p>注意：对于 RGBA 值，最高有效字节代表红色通道值，其后的有效字节分别代表绿色、蓝色和 Alpha 通道值。</p>
*/
//class laya.filters.ColorFilter extends laya.filters.Filter
var ColorFilter=(function(_super){
	function ColorFilter(mat){
		/**@private */
		//this._mat=null;
		/**@private */
		//this._alpha=null;
		ColorFilter.__super.call(this);
		if (!mat){
			mat=[0.3,0.59,0.11,0,0,0.3,0.59,0.11,0,0,0.3,0.59,0.11,0,0,0,0,0,1,0];
		}
		this._mat=new Float32Array(16);
		this._alpha=new Float32Array(4);
		var j=0;
		var z=0;
		for (var i=0;i < 20;i++){
			if (i % 5 !=4){
				this._mat[j++]=mat[i];
				}else {
				this._alpha[z++]=mat[i];
			}
		}
		this._action=RunDriver.createFilterAction(0x20);
		this._action.data=this;
	}

	__class(ColorFilter,'laya.filters.ColorFilter',_super);
	var __proto=ColorFilter.prototype;
	Laya.imps(__proto,{"laya.filters.IFilter":true})
	/**
	*@private 通知微端
	*/
	__proto.callNative=function(sp){
		var t=sp._$P.cf=this;
		sp.conchModel && sp.conchModel.setFilterMatrix && sp.conchModel.setFilterMatrix(this._mat,this._alpha);
	}

	/**@private */
	__getset(0,__proto,'type',function(){
		return 0x20;
	});

	/**@private */
	__getset(0,__proto,'action',function(){
		return this._action;
	});

	return ColorFilter;
})(Filter)


/**
*发光滤镜(也可以当成阴影滤使用）
*/
//class laya.filters.GlowFilter extends laya.filters.Filter
var GlowFilter=(function(_super){
	function GlowFilter(color,blur,offX,offY){
		/**滤镜的颜色*/
		this._color=null;
		GlowFilter.__super.call(this);
		this._elements=new Float32Array(9);
		(blur===void 0)&& (blur=4);
		(offX===void 0)&& (offX=6);
		(offY===void 0)&& (offY=6);
		if (Render.isWebGL){
			WebGLFilter.enable();
		}
		this._color=new Color$1(color);
		this.blur=Math.min(blur,20);
		this.offX=offX;
		this.offY=offY;
		this._action=RunDriver.createFilterAction(0x08);
		this._action.data=this;
	}

	__class(GlowFilter,'laya.filters.GlowFilter',_super);
	var __proto=GlowFilter.prototype;
	/**@private */
	__proto.getColor=function(){
		return this._color._color;
	}

	/**
	*@private 通知微端
	*/
	__proto.callNative=function(sp){
		sp.conchModel &&sp.conchModel.glowFilter&&sp.conchModel.glowFilter(this._color.strColor,this._elements[4],this._elements[5],this._elements[6]);
	}

	/**
	*@private
	*滤镜类型
	*/
	__getset(0,__proto,'type',function(){
		return 0x08;
	});

	/**@private */
	__getset(0,__proto,'action',function(){
		return this._action;
	});

	/**@private */
	/**@private */
	__getset(0,__proto,'offY',function(){
		return this._elements[6];
		},function(value){
		this._elements[6]=value;
	});

	/**@private */
	/**@private */
	__getset(0,__proto,'offX',function(){
		return this._elements[5];
		},function(value){
		this._elements[5]=value;
	});

	/**@private */
	/**@private */
	__getset(0,__proto,'blur',function(){
		return this._elements[4];
		},function(value){
		this._elements[4]=value;
	});

	return GlowFilter;
})(Filter)


/**
*@private
*/
//class laya.filters.webgl.BlurFilterActionGL extends laya.filters.webgl.FilterActionGL
var BlurFilterActionGL=(function(_super){
	function BlurFilterActionGL(){
		this.data=null;
		BlurFilterActionGL.__super.call(this);
	}

	__class(BlurFilterActionGL,'laya.filters.webgl.BlurFilterActionGL',_super);
	var __proto=BlurFilterActionGL.prototype;
	__proto.setValueMix=function(shader){
		shader.defines.add(this.data.type);
		var o=shader;
	}

	__proto.apply3d=function(scope,sprite,context,x,y){
		var b=scope.getValue("bounds");
		var shaderValue=Value2D.create(0x01,0);
		shaderValue.setFilters([this.data]);
		var tMatrix=Matrix.EMPTY;
		tMatrix.identity();
		context.ctx.drawTarget(scope,0,0,b.width,b.height,Matrix.EMPTY,"src",shaderValue);
		shaderValue.setFilters(null);
	}

	__proto.setValue=function(shader){
		shader.strength=this.data.strength;
		var sigma=this.data.strength/3.0;
		var sigma2=sigma*sigma;
		this.data.strength_sig2_2sig2_gauss1[0]=this.data.strength;
		this.data.strength_sig2_2sig2_gauss1[1]=sigma2;
		this.data.strength_sig2_2sig2_gauss1[2]=2.0*sigma2;
		this.data.strength_sig2_2sig2_gauss1[3]=1.0/(2.0*Math.PI*sigma2);
		shader.strength_sig2_2sig2_gauss1=this.data.strength_sig2_2sig2_gauss1;
	}

	__getset(0,__proto,'typeMix',function(){return 0x10;});
	return BlurFilterActionGL;
})(FilterActionGL)


//class laya.filters.webgl.ColorFilterActionGL extends laya.filters.webgl.FilterActionGL
var ColorFilterActionGL=(function(_super){
	function ColorFilterActionGL(){
		this.data=null;
		ColorFilterActionGL.__super.call(this);
	}

	__class(ColorFilterActionGL,'laya.filters.webgl.ColorFilterActionGL',_super);
	var __proto=ColorFilterActionGL.prototype;
	Laya.imps(__proto,{"laya.filters.IFilterActionGL":true})
	__proto.setValue=function(shader){
		shader.colorMat=this.data._mat;
		shader.colorAlpha=this.data._alpha;
	}

	__proto.apply3d=function(scope,sprite,context,x,y){
		var b=scope.getValue("bounds");
		var shaderValue=Value2D.create(0x01,0);
		shaderValue.setFilters([this.data]);
		var tMatrix=Matrix.TEMP;
		tMatrix.identity();
		context.ctx.drawTarget(scope,0,0,b.width,b.height,tMatrix,"src",shaderValue);
	}

	return ColorFilterActionGL;
})(FilterActionGL)


/**
*@private
*/
//class laya.filters.webgl.GlowFilterActionGL extends laya.filters.webgl.FilterActionGL
var GlowFilterActionGL=(function(_super){
	function GlowFilterActionGL(){
		this.data=null;
		this._initKey=false;
		this._textureWidth=0;
		this._textureHeight=0;
		GlowFilterActionGL.__super.call(this);
	}

	__class(GlowFilterActionGL,'laya.filters.webgl.GlowFilterActionGL',_super);
	var __proto=GlowFilterActionGL.prototype;
	Laya.imps(__proto,{"laya.filters.IFilterActionGL":true})
	__proto.setValueMix=function(shader){}
	__proto.apply3d=function(scope,sprite,context,x,y){
		var b=scope.getValue("bounds");
		scope.addValue("color",this.data.getColor());
		var w=b.width,h=b.height;
		this._textureWidth=w;
		this._textureHeight=h;
		var shaderValue;
		var mat=Matrix.TEMP;
		mat.identity();
		shaderValue=Value2D.create(0x01,0);
		shaderValue.setFilters([this.data]);
		context.ctx.drawTarget(scope,0,0,this._textureWidth,this._textureHeight,mat,"src",shaderValue,null);
		shaderValue=Value2D.create(0x01,0);
		context.ctx.drawTarget(scope,0,0,this._textureWidth,this._textureHeight,mat,"src",shaderValue);
		return null;
	}

	__proto.setSpriteWH=function(sprite){
		this._textureWidth=sprite.width;
		this._textureHeight=sprite.height;
	}

	__proto.setValue=function(shader){
		shader.u_offsetX=this.data.offX;
		shader.u_offsetY=-this.data.offY;
		shader.u_strength=1.0;
		shader.u_blurX=this.data.blur;
		shader.u_blurY=this.data.blur;
		shader.u_textW=this._textureWidth;
		shader.u_textH=this._textureHeight;
		shader.u_color=this.data.getColor();
	}

	__getset(0,__proto,'typeMix',function(){return 0x08;});
	GlowFilterActionGL.tmpTarget=function(scope,sprite,context,x,y){
		var b=scope.getValue("bounds");
		var out=scope.getValue("out");
		out.end();
		var tmpTarget=RenderTarget2D.create(b.width,b.height);
		tmpTarget.start();
		var color=scope.getValue("color");
		if (color){
			tmpTarget.clear(color[0],color[1],color[2],0);
		}
		scope.addValue("tmpTarget",tmpTarget);
	}

	GlowFilterActionGL.startOut=function(scope,sprite,context,x,y){
		var tmpTarget=scope.getValue("tmpTarget");
		tmpTarget.end();
		var out=scope.getValue("out");
		out.start();
		var color=scope.getValue("color");
		if (color){
			out.clear(color[0],color[1],color[2],0);
		}
	}

	GlowFilterActionGL.recycleTarget=function(scope,sprite,context,x,y){
		var src=scope.getValue("src");
		var tmpTarget=scope.getValue("tmpTarget");
		tmpTarget.recycle();
	}

	return GlowFilterActionGL;
})(FilterActionGL)


/**
*<code>UIEvent</code> 类用来定义UI组件类的事件类型。
*/
//class laya.ui.UIEvent extends laya.events.Event
var UIEvent=(function(_super){
	function UIEvent(){
		UIEvent.__super.call(this);;
	}

	__class(UIEvent,'laya.ui.UIEvent',_super);
	UIEvent.SHOW_TIP="showtip";
	UIEvent.HIDE_TIP="hidetip";
	return UIEvent;
})(Event)


//class laya.webgl.shader.d2.value.Value2D extends laya.webgl.shader.ShaderValue
var Value2D=(function(_super){
	function Value2D(mainID,subID){
		this.size=[0,0];
		this.alpha=1.0;
		//this.mmat=null;
		this.ALPHA=1.0;
		//this.shader=null;
		//this.mainID=0;
		this.subID=0;
		//this.filters=null;
		//this.textureHost=null;
		//this.texture=null;
		//this.fillStyle=null;
		//this.color=null;
		//this.strokeStyle=null;
		//this.colorAdd=null;
		//this.glTexture=null;
		//this.u_mmat2=null;
		//this._inClassCache=null;
		this._cacheID=0;
		Value2D.__super.call(this);
		this.defines=new ShaderDefines2D();
		this.position=Value2D._POSITION;
		this.mainID=mainID;
		this.subID=subID;
		this.textureHost=null;
		this.texture=null;
		this.fillStyle=null;
		this.color=null;
		this.strokeStyle=null;
		this.colorAdd=null;
		this.glTexture=null;
		this.u_mmat2=null;
		this._cacheID=mainID|subID;
		this._inClassCache=Value2D._cache[this._cacheID];
		if (mainID>0 && !this._inClassCache){
			this._inClassCache=Value2D._cache[this._cacheID]=[];
			this._inClassCache._length=0;
		}
		this.clear();
	}

	__class(Value2D,'laya.webgl.shader.d2.value.Value2D',_super);
	var __proto=Value2D.prototype;
	__proto.setValue=function(value){}
	//throw new Error("todo in subclass");
	__proto.refresh=function(){
		var size=this.size;
		size[0]=RenderState2D.width;
		size[1]=RenderState2D.height;
		this.alpha=this.ALPHA *RenderState2D.worldAlpha;
		this.mmat=RenderState2D.worldMatrix4;
		return this;
	}

	__proto._ShaderWithCompile=function(){
		return Shader.withCompile2D(0,this.mainID,this.defines.toNameDic(),this.mainID | this.defines._value,Shader2X.create);
	}

	__proto._withWorldShaderDefines=function(){
		var defs=RenderState2D.worldShaderDefines;
		var sd=Shader.sharders [this.mainID | this.defines._value | defs.getValue()];
		if (!sd){
			var def={};
			var dic;
			var name;
			dic=this.defines.toNameDic();for (name in dic)def[name]="";
			dic=defs.toNameDic();for (name in dic)def[name]="";
			sd=Shader.withCompile2D(0,this.mainID,def,this.mainID | this.defines._value| defs.getValue(),Shader2X.create);
		};
		var worldFilters=RenderState2D.worldFilters;
		if (!worldFilters)return sd;
		var n=worldFilters.length,f;
		for (var i=0;i < n;i++){
			((f=worldFilters[i]))&& f.action.setValue(this);
		}
		return sd;
	}

	__proto.upload=function(){
		var renderstate2d=RenderState2D;
		this.alpha=this.ALPHA *renderstate2d.worldAlpha;
		if (RenderState2D.worldMatrix4!==RenderState2D.TEMPMAT4_ARRAY)this.defines.add(0x80);
		(WebGL.shaderHighPrecision)&& (this.defines.add(0x400));
		var sd=renderstate2d.worldShaderDefines?this._withWorldShaderDefines():(Shader.sharders [this.mainID | this.defines._value] || this._ShaderWithCompile());
		var params;
		this.size[0]=renderstate2d.width,this.size[1]=renderstate2d.height;
		this.mmat=renderstate2d.worldMatrix4;
		if (BaseShader.activeShader!==sd){
			if (sd._shaderValueWidth!==renderstate2d.width || sd._shaderValueHeight!==renderstate2d.height){
				sd._shaderValueWidth=renderstate2d.width;
				sd._shaderValueHeight=renderstate2d.height;
			}
			else{
				params=sd._params2dQuick2 || sd._make2dQuick2();
			}
			sd.upload(this,params);
		}
		else{
			if (sd._shaderValueWidth!==renderstate2d.width || sd._shaderValueHeight!==renderstate2d.height){
				sd._shaderValueWidth=renderstate2d.width;
				sd._shaderValueHeight=renderstate2d.height;
			}
			else{
				params=(sd._params2dQuick1)|| sd._make2dQuick1();
			}
			sd.upload(this,params);
		}
	}

	__proto.setFilters=function(value){
		this.filters=value;
		if (!value)
			return;
		var n=value.length,f;
		for (var i=0;i < n;i++){
			f=value[i];
			if (f){
				this.defines.add(f.type);
				f.action.setValue(this);
			}
		}
	}

	__proto.clear=function(){
		this.defines.setValue(this.subID);
	}

	__proto.release=function(){
		this._inClassCache[this._inClassCache._length++]=this;
		this.fillStyle=null;
		this.strokeStyle=null;
		this.clear();
	}

	Value2D._initone=function(type,classT){
		Value2D._typeClass[type]=classT;
		Value2D._cache[type]=[];
		Value2D._cache[type]._length=0;
	}

	Value2D.__init__=function(){
		Value2D._POSITION=[2,0x1406,false,4 *CONST3D2D.BYTES_PE,0];
		Value2D._TEXCOORD=[2,0x1406,false,4 *CONST3D2D.BYTES_PE,2 *CONST3D2D.BYTES_PE];
		Value2D._initone(0x02,Color2dSV);
		Value2D._initone(0x04,PrimitiveSV);
		Value2D._initone(0x100,FillTextureSV);
		Value2D._initone(0x200,SkinSV);
		Value2D._initone(0x01,TextureSV);
		Value2D._initone(0x01 | 0x40,TextSV);
		Value2D._initone(0x01 | 0x08,TextureSV);
	}

	Value2D.create=function(mainType,subType){
		var types=Value2D._cache[mainType|subType];
		if (types._length)
			return types[--types._length];
		else
		return new Value2D._typeClass[mainType|subType](subType);
	}

	Value2D._POSITION=null;
	Value2D._TEXCOORD=null;
	Value2D._cache=[];
	Value2D._typeClass=[];
	Value2D.TEMPMAT4_ARRAY=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];
	return Value2D;
})(ShaderValue)


//class laya.webgl.canvas.WebGLContext2D extends laya.resource.Context
var WebGLContext2D=(function(_super){
	var ContextParams;
	function WebGLContext2D(c){
		this._x=0;
		this._y=0;
		this._id=++WebGLContext2D._COUNT;
		//this._other=null;
		this._path=null;
		//this._primitiveValue2D=null;
		this._drawCount=1;
		this._maxNumEle=0;
		this._clear=false;
		this._isMain=false;
		this._atlasResourceChange=0;
		this._submits=null;
		this._curSubmit=null;
		this._ib=null;
		this._vb=null;
		//this._curMat=null;
		this._nBlendType=0;
		//this._save=null;
		//this._targets=null;
		//this._renderKey=NaN;
		this._saveMark=null;
		this._shader2D=null;
		//this._triangleMesh=null;
		//drawTriangles专用mesh。由于ib不固定，所以不能与_mesh通用
		this.meshlist=[];
		/**所cacheAs精灵*/
		//this.sprite=null;
		/*******************************************start矢量绘制***************************************************/
		this.mId=-1;
		this.mHaveKey=false;
		this.mHaveLineKey=false;
		this.mX=0;
		this.mY=0;
		WebGLContext2D.__super.call(this);
		this._width=99999999;
		this._height=99999999;
		this._clipRect=WebGLContext2D.MAXCLIPRECT;
		this.mOutPoint
		this._canvas=c;
		WebGLContext2D._contextcount++;
		if (Render.isFlash){
			this._ib=IndexBuffer2D.create(0x88E4);
			GlUtils.fillIBQuadrangle(this._ib,16);
		}else
		this._ib=IndexBuffer2D.QuadrangleIB;
		this.clear();
	}

	__class(WebGLContext2D,'laya.webgl.canvas.WebGLContext2D',_super);
	var __proto=WebGLContext2D.prototype;
	__proto.setIsMainContext=function(){
		this._isMain=true;
	}

	__proto.clearBG=function(r,g,b,a){
		var gl=WebGL.mainContext;
		gl.clearColor(r,g,b,a);
		gl.clear(0x00004000);
	}

	__proto._getSubmits=function(){
		return this._submits;
	}

	__proto._releaseMem=function(){
		if (!this._submits)
			return;
		this._curMat.destroy();
		this._curMat=null;
		this._shader2D.destroy();
		this._shader2D=null;
		for (var i=0,n=this._submits._length;i < n;i++)
		this._submits[i].releaseRender();
		this._submits.length=0;
		this._submits._length=0;
		this._submits=null;
		this._curSubmit=null;
		this._path && this._path.recover();
		this._path=null;
		this._other && (this._other.font=null);
		this._save=null;
		if (this._vb){
			this._vb.releaseResource();
			this._vb.destroy();
			this._vb.destory();
			this._vb=null;
		}
	}

	__proto.destroy=function(){
		--WebGLContext2D._contextcount;
		this.sprite=null;
		this._releaseMem();
		this._targets && this._targets.destroy();
		this._targets=null;
		this._canvas=null;
		this._ib && (this._ib !=IndexBuffer2D.QuadrangleIB)&& this._ib.releaseResource();
	}

	__proto.clear=function(){
		if (!this._submits){
			this._other=ContextParams.DEFAULT;
			this._curMat=Matrix.create();
			this._vb=VertexBuffer2D.create(-1);
			this._submits=[];
			this._save=[SaveMark.Create(this)];
			this._save.length=10;
			this._shader2D=new Shader2D();
			this._triangleMesh=MeshTexture.getAMesh();
		}
		this._vb.clear();
		this._targets && (this._targets.repaint=true);
		this._other=ContextParams.DEFAULT;
		this._clear=true;
		this._repaint=false;
		this._drawCount=1;
		this._renderKey=0;
		this._other.lineWidth=this._shader2D.ALPHA=1.0;
		this._nBlendType=0;
		this._clipRect=WebGLContext2D.MAXCLIPRECT;
		this._curSubmit=Submit.RENDERBASE;
		this._shader2D.glTexture=null;
		this._shader2D.fillStyle=this._shader2D.strokeStyle=DrawStyle.DEFAULT;
		for (var i=0,n=this._submits._length;i < n;i++)
		this._submits[i].releaseRender();
		this._submits._length=0;
		this._curMat.identity();
		this._other.clear();
		this._saveMark=this._save[0];
		this._save._length=1;
	}

	__proto.size=function(w,h){
		if (this._width !=w || this._height !=h){
			if (w==0 || h==0){
				if (this._vb._byteLength !=0){
					this._width=w;
					this._height=h;
					this._vb.clear();
					this._vb.upload();
				}
				for (var i=0,n=this._submits._length;i < n;i++)
				this._submits[i].releaseRender();
				this._submits.length=0;
				this._submits._length=0;
				this._curSubmit=null;
				this._path && this._path.recover();
				this._path=null;
				this.sprite=null;
				this._targets && (this._targets.destroy());
				this._targets=null;
				}else {
				this._width=w;
				this._height=h;
				this._targets && (this._targets.size(w,h));
				this._canvas.memorySize-=this._canvas.memorySize;
			}
		}
		if (w===0 && h===0)this._releaseMem();
	}

	__proto._getTransformMatrix=function(){
		return this._curMat;
	}

	__proto.translate=function(x,y){
		if (x!==0 || y!==0){
			SaveTranslate.save(this);
			if (this._curMat.bTransform){
				SaveTransform.save(this);
				this._curMat.transformPointN(Point.TEMP.setTo(x,y));
				x=Point.TEMP.x;
				y=Point.TEMP.y;
			}
			this._x+=x;
			this._y+=y;
		}
	}

	__proto.save=function(){
		this._save[this._save._length++]=SaveMark.Create(this);
	}

	__proto.restore=function(){
		var sz=this._save._length;
		if (sz < 1)
			return;
		for (var i=sz-1;i >=0;i--){
			var o=this._save[i];
			o.restore(this);
			if (o.isSaveMark()){
				this._save._length=i;
				return;
			}
		}
	}

	__proto._fillText=function(txt,words,x,y,fontStr,color,strokeColor,lineWidth,textAlign,underLine){
		(underLine===void 0)&& (underLine=0);
		var shader=this._shader2D;
		var curShader=this._curSubmit.shaderValue;
		var font=fontStr ? FontInContext.create(fontStr):this._other.font;
		if (AtlasResourceManager.enabled){
			if (shader.ALPHA!==curShader.ALPHA)
				shader.glTexture=null;
			DrawText.drawText(this,txt,words,this._curMat,font,textAlign || this._other.textAlign,color,strokeColor,lineWidth,x,y,underLine);
			}else {
			var preDef=this._shader2D.defines.getValue();
			var colorAdd=color ? Color$1.create(color)._color :shader.colorAdd;
			if (shader.ALPHA!==curShader.ALPHA || colorAdd!==shader.colorAdd || curShader.colorAdd!==shader.colorAdd){
				shader.glTexture=null;
				shader.colorAdd=colorAdd;
			}
			DrawText.drawText(this,txt,words,this._curMat,font,textAlign || this._other.textAlign,color,strokeColor,lineWidth,x,y,underLine);
		}
	}

	//TODO:实现下划线
	__proto.fillWords=function(words,x,y,fontStr,color,underLine){
		this._fillText(null,words,x,y,fontStr,color,null,-1,null,underLine);
	}

	__proto.fillBorderWords=function(words,x,y,font,color,borderColor,lineWidth){
		this._fillBorderText(null,words,x,y,font,color,borderColor,lineWidth,null);
	}

	__proto.fillText=function(txt,x,y,fontStr,color,textAlign){
		this._fillText(txt,null,x,y,fontStr,color,null,-1,textAlign);
	}

	__proto.strokeText=function(txt,x,y,fontStr,color,lineWidth,textAlign){
		this._fillText(txt,null,x,y,fontStr,null,color,lineWidth || 1,textAlign);
	}

	__proto.fillBorderText=function(txt,x,y,fontStr,fillColor,borderColor,lineWidth,textAlign){
		this._fillBorderText(txt,null,x,y,fontStr,fillColor,borderColor,lineWidth,textAlign);
	}

	__proto._fillBorderText=function(txt,words,x,y,fontStr,fillColor,borderColor,lineWidth,textAlign){
		if (!AtlasResourceManager.enabled){
			this._fillText(txt,words,x,y,fontStr,null,borderColor,lineWidth || 1,textAlign);
			this._fillText(txt,words,x,y,fontStr,fillColor,null,-1,textAlign);
			return;
		};
		var shader=this._shader2D;
		var curShader=this._curSubmit.shaderValue;
		if (shader.ALPHA!==curShader.ALPHA)
			shader.glTexture=null;
		var font=fontStr ? (WebGLContext2D._fontTemp.setFont(fontStr),WebGLContext2D._fontTemp):this._other.font;
		DrawText.drawText(this,txt,words,this._curMat,font,textAlign || this._other.textAlign,fillColor,borderColor,lineWidth || 1,x,y,0);
	}

	__proto.fillRect=function(x,y,width,height,fillStyle){
		var vb=this._vb;
		if (GlUtils.fillRectImgVb(vb,this._clipRect,x,y,width,height,Texture.DEF_UV,this._curMat,this._x,this._y,0,0)){
			this._renderKey=0;
			var pre=this._shader2D.fillStyle;
			fillStyle && (this._shader2D.fillStyle=DrawStyle.create(fillStyle));
			var shader=this._shader2D;
			var curShader=this._curSubmit.shaderValue;
			if (shader.fillStyle!==curShader.fillStyle || shader.ALPHA!==curShader.ALPHA){
				shader.glTexture=null;
				var submit=this._curSubmit=Submit.createSubmit(this,this._ib,vb,((vb._byteLength-16 *4)/ 32)*3,Value2D.create(0x02,0));
				submit.shaderValue.color=shader.fillStyle._color._color;
				submit.shaderValue.ALPHA=shader.ALPHA;
				this._submits[this._submits._length++]=submit;
			}
			this._curSubmit._numEle+=6;
			this._shader2D.fillStyle=pre;
		}
	}

	__proto.fillTexture=function(texture,x,y,width,height,type,offset,other){
		if (!(texture.loaded && texture.bitmap && texture.source)){
			if (this.sprite){
				Laya.timer.callLater(this,this._repaintSprite);
			}
			return;
		};
		var vb=this._vb;
		var w=texture.bitmap.width,h=texture.bitmap.height,uv=texture.uv;
		var ox=offset.x % texture.width,oy=offset.y % texture.height;
		if (w !=other.w || h !=other.h){
			if (!other.w && !other.h){
				other.oy=other.ox=0;
				switch (type){
					case "repeat":
						other.width=width;
						other.height=height;
						break ;
					case "repeat-x":
						other.width=width;
						if (oy < 0){
							if (texture.height+oy > height){
								other.height=height;
								}else {
								other.height=texture.height+oy;
							}
							}else {
							other.oy=oy;
							if (texture.height+oy > height){
								other.height=height-oy;
								}else {
								other.height=texture.height;
							}
						}
						break ;
					case "repeat-y":
						if (ox < 0){
							if (texture.width+ox > width){
								other.width=width;
								}else {
								other.width=texture.width+ox;
							}
							}else {
							other.ox=ox;
							if (texture.width+ox > width){
								other.width=width-ox;
								}else {
								other.width=texture.width;
							}
						}
						other.height=height;
						break ;
					default :
						other.width=width;
						other.height=height;
						break ;
					}
			}
			other.w=w;
			other.h=h;
			other.uv=[0,0,other.width / w,0,other.width / w,other.height / h,0,other.height / h];
		}
		x+=other.ox;
		y+=other.oy;
		ox-=other.ox;
		oy-=other.oy;
		if (GlUtils.fillRectImgVb(vb,this._clipRect,x,y,other.width,other.height,other.uv,this._curMat,this._x,this._y,0,0)){
			this._renderKey=0;
			var submit=SubmitTexture.create(this,this._ib,vb,((vb._byteLength-16 *4)/ 32)*3,Value2D.create(0x100,0));
			this._submits[this._submits._length++]=submit;
			var shaderValue=submit.shaderValue;
			shaderValue.textureHost=texture;
			var tTextureX=uv[0] *w;
			var tTextureY=uv[1] *h;
			var tTextureW=(uv[2]-uv[0])*w;
			var tTextureH=(uv[5]-uv[3])*h;
			var tx=-ox / w;
			var ty=-oy / h;
			shaderValue.u_TexRange[0]=tTextureX / w;
			shaderValue.u_TexRange[1]=tTextureW / w;
			shaderValue.u_TexRange[2]=tTextureY / h;
			shaderValue.u_TexRange[3]=tTextureH / h;
			shaderValue.u_offset[0]=tx;
			shaderValue.u_offset[1]=ty;
			if (AtlasResourceManager.enabled && !this._isMain)
				submit.addTexture(texture,(vb._byteLength >> 2)-16);
			this._curSubmit=submit;
			submit._renderType=10017;
			submit._numEle+=6;
		}
	}

	__proto.setShader=function(shader){
		SaveBase.save(this,0x100000,this._shader2D,true);
		this._shader2D.shader=shader;
	}

	__proto.setFilters=function(value){
		SaveBase.save(this,0x200000,this._shader2D,true);
		this._shader2D.filters=value;
		this._curSubmit=Submit.RENDERBASE;
		this._renderKey=0;
		this._drawCount++;
	}

	__proto.drawTexture=function(tex,x,y,width,height,tx,ty){
		this._drawTextureM(tex,x,y,width,height,tx,ty,null,1);
	}

	__proto.addTextureVb=function(invb,x,y){
		var finalVB=this._curSubmit._vb || this._vb;
		var vpos=(finalVB._byteLength >> 2);
		finalVB.byteLength=((vpos+16)<< 2);
		var vbdata=finalVB.getFloat32Array();
		for (var i=0,ci=0;i < 16;i+=4){
			vbdata[vpos++]=invb[i]+x;
			vbdata[vpos++]=invb[i+1]+y;
			vbdata[vpos++]=invb[i+2];
			vbdata[vpos++]=invb[i+3];
		}
		this._curSubmit._numEle+=6;
		this._maxNumEle=Math.max(this._maxNumEle,this._curSubmit._numEle);
		finalVB._upload=true;
	}

	__proto.willDrawTexture=function(tex,alpha){
		if (!(tex.loaded && tex.bitmap && tex.source)){
			if (this.sprite){
				Laya.timer.callLater(this,this._repaintSprite);
			}
			return 0;
		};
		var webGLImg=tex.bitmap;
		var rid=webGLImg.id+this._shader2D.ALPHA *alpha+10016;
		if (rid==this._renderKey)return rid;
		var shader=this._shader2D;
		var preAlpha=shader.ALPHA;
		var curShader=this._curSubmit.shaderValue;
		shader.ALPHA *=alpha;
		this._renderKey=rid;
		this._drawCount++;
		shader.glTexture=webGLImg;
		var vb=this._vb;
		var submit=null;
		var vbSize=(vb._byteLength / 32)*3;
		submit=SubmitTexture.create(this,this._ib,vb,vbSize,Value2D.create(0x01,0));
		this._submits[this._submits._length++]=submit;
		submit.shaderValue.textureHost=tex;
		submit._renderType=10016;
		submit._preIsSameTextureShader=this._curSubmit._renderType===10016 && shader.ALPHA===curShader.ALPHA;
		this._curSubmit=submit;
		shader.ALPHA=preAlpha;
		return rid;
	}

	__proto.drawTextures=function(tex,pos,tx,ty){
		if (!(tex.loaded && tex.bitmap && tex.source)){
			this.sprite && Laya.timer.callLater(this,this._repaintSprite);
			return;
		};
		var pre=this._clipRect;
		this._clipRect=WebGLContext2D.MAXCLIPRECT;
		if (!this._drawTextureM(tex,pos[0],pos[1],tex.width,tex.height,tx,ty,null,1)){
			alert("drawTextures err");
			return;
		}
		this._clipRect=pre;
		Stat.drawCall++;
		if (pos.length < 4)
			return;
		var finalVB=this._curSubmit._vb || this._vb;
		var sx=this._curMat.a,sy=this._curMat.d;
		for (var i=2,sz=pos.length;i < sz;i+=2){
			GlUtils.copyPreImgVb(finalVB,(pos[i]-pos[i-2])*sx,(pos[i+1]-pos[i-1])*sy);
			this._curSubmit._numEle+=6;
		}
		this._maxNumEle=Math.max(this._maxNumEle,this._curSubmit._numEle);
	}

	__proto._drawTextureM=function(tex,x,y,width,height,tx,ty,m,alpha){
		if (!(tex.loaded && tex.source)){
			if (this.sprite){
				Laya.timer.callLater(this,this._repaintSprite);
			}
			return false;
		};
		var finalVB=this._curSubmit._vb || this._vb;
		var webGLImg=tex.bitmap;
		x+=tx;
		y+=ty;
		this._drawCount++;
		var rid=webGLImg.id+this._shader2D.ALPHA *alpha+10016;
		if (rid !=this._renderKey){
			this._renderKey=rid;
			var curShader=this._curSubmit.shaderValue;
			var shader=this._shader2D;
			var alphaBack=shader.ALPHA;
			shader.ALPHA *=alpha;
			shader.glTexture=webGLImg;
			var vb=this._vb;
			var submit=null;
			var vbSize=(vb._byteLength / 32)*3;
			submit=SubmitTexture.create(this,this._ib,vb,vbSize,Value2D.create(0x01,0));
			this._submits[this._submits._length++]=submit;
			submit.shaderValue.textureHost=tex;
			submit._renderType=10016;
			submit._preIsSameTextureShader=this._curSubmit._renderType===10016 && shader.ALPHA===curShader.ALPHA;
			this._curSubmit=submit;
			finalVB=this._curSubmit._vb || this._vb;
			shader.ALPHA=alphaBack;
		}
		if (GlUtils.fillRectImgVb(finalVB,this._clipRect,x,y,width || tex.width,height || tex.height,tex.uv,m || this._curMat,this._x,this._y,0,0)){
			if (AtlasResourceManager.enabled && !this._isMain)
				(this._curSubmit).addTexture(tex,(finalVB._byteLength >> 2)-16);
			this._curSubmit._numEle+=6;
			this._maxNumEle=Math.max(this._maxNumEle,this._curSubmit._numEle);
			return true;
		}
		return false;
	}

	__proto._repaintSprite=function(){
		if(this.sprite)
			this.sprite.repaint();
	}

	//}
	__proto._drawText=function(tex,x,y,width,height,m,tx,ty,dx,dy){
		var webGLImg=tex.bitmap;
		this._drawCount++;
		var rid=webGLImg.id+this._shader2D.ALPHA+10016;
		if (rid !=this._renderKey){
			this._renderKey=rid;
			var curShader=this._curSubmit.shaderValue;
			var shader=this._shader2D;
			shader.glTexture=webGLImg;
			var vb=this._vb;
			var submit=null;
			var submitID=NaN;
			var vbSize=(vb._byteLength / 32)*3;
			if (AtlasResourceManager.enabled){
				submit=SubmitTexture.create(this,this._ib,vb,vbSize,Value2D.create(0x01,0));
				}else {
				submit=SubmitTexture.create(this,this._ib,vb,vbSize,TextSV.create());
			}
			submit._preIsSameTextureShader=this._curSubmit._renderType===10016 && shader.ALPHA===curShader.ALPHA;
			this._submits[this._submits._length++]=submit;
			submit.shaderValue.textureHost=tex;
			submit._renderType=10016;
			this._curSubmit=submit;
		}
		tex.active();
		var finalVB=this._curSubmit._vb || this._vb;
		if (GlUtils.fillRectImgVb(finalVB,this._clipRect,x+tx,y+ty,width || tex.width,height || tex.height,tex.uv,m || this._curMat,this._x,this._y,dx,dy,true)){
			if (AtlasResourceManager.enabled && !this._isMain){
				(this._curSubmit).addTexture(tex,(finalVB._byteLength >> 2)-16);
			}
			this._curSubmit._numEle+=6;
			this._maxNumEle=Math.max(this._maxNumEle,this._curSubmit._numEle);
		}
	}

	__proto.drawTextureWithTransform=function(tex,x,y,width,height,transform,tx,ty,alpha){
		if (!transform){
			this._drawTextureM(tex,x,y,width,height,tx,ty,null,alpha);
			return;
		};
		var curMat=this._curMat;
		var prex=this._x;
		var prey=this._y;
		(tx!==0 || ty!==0)&& (this._x=tx *curMat.a+ty *curMat.c,this._y=ty *curMat.d+tx *curMat.b);
		if (transform && curMat.bTransform){
			Matrix.mul(transform,curMat,WebGLContext2D._tmpMatrix);
			transform=WebGLContext2D._tmpMatrix;
			transform._checkTransform();
			}else {
			this._x+=curMat.tx;
			this._y+=curMat.ty;
		}
		this._drawTextureM(tex,x,y,width,height,0,0,transform,alpha);
		this._x=prex;
		this._y=prey;
	}

	__proto.fillQuadrangle=function(tex,x,y,point4,m){
		var submit=this._curSubmit;
		var vb=this._vb;
		var shader=this._shader2D;
		var curShader=submit.shaderValue;
		this._renderKey=0;
		if (tex.bitmap){
			var t_tex=tex.bitmap;
			if (shader.glTexture !=t_tex || shader.ALPHA!==curShader.ALPHA){
				shader.glTexture=t_tex;
				submit=this._curSubmit=Submit.createSubmit(this,this._ib,vb,((vb._byteLength)/ 32)*3,Value2D.create(0x01,0));
				submit.shaderValue.glTexture=t_tex;
				this._submits[this._submits._length++]=submit;
			}
			GlUtils.fillQuadrangleImgVb(vb,x,y,point4,tex.uv,m || this._curMat,this._x,this._y);
			}else {
			if (!submit.shaderValue.fillStyle || !submit.shaderValue.fillStyle.equal(tex)|| shader.ALPHA!==curShader.ALPHA){
				shader.glTexture=null;
				submit=this._curSubmit=Submit.createSubmit(this,this._ib,vb,((vb._byteLength)/ 32)*3,Value2D.create(0x02,0));
				submit.shaderValue.defines.add(0x02);
				submit.shaderValue.fillStyle=DrawStyle.create(tex);
				this._submits[this._submits._length++]=submit;
			}
			GlUtils.fillQuadrangleImgVb(vb,x,y,point4,Texture.DEF_UV,m || this._curMat,this._x,this._y);
		}
		submit._numEle+=6;
	}

	__proto.drawTexture2=function(x,y,pivotX,pivotY,transform,alpha,blendMode,args){
		if (alpha==0)return;
		var curMat=this._curMat;
		this._x=x *curMat.a+y *curMat.c;
		this._y=y *curMat.d+x *curMat.b;
		if (transform){
			if (curMat.bTransform || transform.bTransform){
				Matrix.mul(transform,curMat,WebGLContext2D._tmpMatrix);
				transform=WebGLContext2D._tmpMatrix;
				}else {
				this._x+=transform.tx+curMat.tx;
				this._y+=transform.ty+curMat.ty;
				transform=Matrix.EMPTY;
			}
		}
		if (alpha===1 && !blendMode)
			this._drawTextureM(args[0],args[1]-pivotX,args[2]-pivotY,args[3],args[4],0,0,transform,1);
		else {
			var preAlpha=this._shader2D.ALPHA;
			var preblendType=this._nBlendType;
			this._shader2D.ALPHA=alpha;
			blendMode && (this._nBlendType=BlendMode.TOINT(blendMode));
			this._drawTextureM(args[0],args[1]-pivotX,args[2]-pivotY,args[3],args[4],0,0,transform,1);
			this._shader2D.ALPHA=preAlpha;
			this._nBlendType=preblendType;
		}
		this._x=this._y=0;
	}

	__proto.drawCanvas=function(canvas,x,y,width,height){
		var src=canvas.context;
		this._renderKey=0;
		if (src._targets){
			this._submits[this._submits._length++]=SubmitCanvas.create(src,0,null);
			this._curSubmit=Submit.RENDERBASE;
			src._targets.drawTo(this,x,y,width,height);
			}else {
			var submit=this._submits[this._submits._length++]=SubmitCanvas.create(src,this._shader2D.ALPHA,this._shader2D.filters);
			var sx=width / canvas.width;
			var sy=height / canvas.height;
			var mat=submit._matrix;
			this._curMat.copyTo(mat);
			sx !=1 && sy !=1 && mat.scale(sx,sy);
			var tx=mat.tx,ty=mat.ty;
			mat.tx=mat.ty=0;
			mat.transformPoint(Point.TEMP.setTo(x,y));
			mat.translate(Point.TEMP.x+tx,Point.TEMP.y+ty);
			this._curSubmit=Submit.RENDERBASE;
		}
		if (Config.showCanvasMark){
			this.save();
			this.lineWidth=4;
			this.strokeStyle=src._targets ? "yellow" :"green";
			this.strokeRect(x-1,y-1,width+2,height+2,1);
			this.strokeRect(x,y,width,height,1);
			this.restore();
		}
	}

	__proto.drawTarget=function(scope,x,y,width,height,m,proName,shaderValue,uv,blend){
		(blend===void 0)&& (blend=-1);
		var vb=this._vb;
		if (GlUtils.fillRectImgVb(vb,this._clipRect,x,y,width,height,uv || Texture.DEF_UV,m || this._curMat,this._x,this._y,0,0)){
			this._renderKey=0;
			var shader=this._shader2D;
			shader.glTexture=null;
			var curShader=this._curSubmit.shaderValue;
			var submit=this._curSubmit=SubmitTarget.create(this,this._ib,vb,((vb._byteLength-16 *4)/ 32)*3,shaderValue,proName);
			if (blend==-1){
				submit.blendType=this._nBlendType;
				}else {
				submit.blendType=blend;
			}
			submit.scope=scope;
			this._submits[this._submits._length++]=submit;
			this._curSubmit._numEle+=6;
		}
	}

	/**
	*把颜色跟当前设置的alpha混合
	*@return
	*/
	__proto.mixRGBandAlpha=function(color){
		return this._mixRGBandAlpha(color,this._shader2D.ALPHA);
	}

	__proto._mixRGBandAlpha=function(color,alpha){
		var a=((color & 0xff000000)>>> 24);
		if (a !=0){
			a*=alpha;
			}else {
			a=alpha*255;
		}
		return (color & 0x00ffffff)| (a << 24);
	}

	__proto.drawTriangles=function(tex,x,y,vertices,uvs,indices,matrix,alpha,color,blendMode){
		if (!(tex.loaded && tex.source)){
			if (this.sprite){
				Laya.timer.callLater(this,this._repaintSprite);
			}
			return false;
		}
		this._drawCount++;
		var webGLImg=tex.bitmap;
		var rgba=this._mixRGBandAlpha(0xffffffff,alpha);
		var vertNum=vertices.length / 2;
		var eleNum=indices.length;
		this._renderKey=-1;
		var submit=this._curSubmit=SubmitTexture.create(this,this._triangleMesh.getIBR(),this._triangleMesh.getVBR(),this._triangleMesh.indexNum,Value2D.create(0x01,0));
		submit.shaderValue.textureHost=tex;
		submit._renderType=10016;
		this._submits[this._submits._length++]=submit;
		if(matrix){
			WebGLContext2D._tmpMatrix.a=matrix.a;WebGLContext2D._tmpMatrix.b=matrix.b;WebGLContext2D._tmpMatrix.c=matrix.c;WebGLContext2D._tmpMatrix.d=matrix.d;WebGLContext2D._tmpMatrix.tx=matrix.tx+x;WebGLContext2D._tmpMatrix.ty=matrix.ty+y;
			Matrix.mul(WebGLContext2D._tmpMatrix,this._curMat,WebGLContext2D._tmpMatrix);
			}else {
			WebGLContext2D._tmpMatrix.a=this._curMat.a;WebGLContext2D._tmpMatrix.b=this._curMat.b;WebGLContext2D._tmpMatrix.c=this._curMat.c;WebGLContext2D._tmpMatrix.d=this._curMat.d;WebGLContext2D._tmpMatrix.tx=this._curMat.tx+x;WebGLContext2D._tmpMatrix.ty=this._curMat.ty+y;
		}
		this._triangleMesh.addData(vertices,uvs,indices,WebGLContext2D._tmpMatrix,rgba,this);
		this._curSubmit._numEle+=eleNum;
		this._maxNumEle=Math.max(this._maxNumEle,this._curSubmit._numEle);
		return true;
	}

	__proto.transform=function(a,b,c,d,tx,ty){
		SaveTransform.save(this);
		Matrix.mul(Matrix.TEMP.setTo(a,b,c,d,tx,ty),this._curMat,this._curMat);
		this._curMat._checkTransform();
	}

	__proto.setTransformByMatrix=function(value){
		value.copyTo(this._curMat);
	}

	__proto.transformByMatrix=function(value){
		SaveTransform.save(this);
		Matrix.mul(value,this._curMat,this._curMat);
		this._curMat._checkTransform();
	}

	__proto.rotate=function(angle){
		SaveTransform.save(this);
		this._curMat.rotateEx(angle);
	}

	__proto.scale=function(scaleX,scaleY){
		SaveTransform.save(this);
		this._curMat.scaleEx(scaleX,scaleY);
	}

	__proto.clipRect=function(x,y,width,height){
		if (this._curMat.b !=0 || this._curMat.c !=0){
			this._renderKey=0;
			var submitStencil0=SubmitStencil.create(4);
			this.addRenderObject(submitStencil0);
			var vb=this._vb;
			var nPos=(vb._byteLength >> 2);
			if (GlUtils.fillRectImgVb(vb,null,x,y,width,height,Texture.DEF_UV,this._curMat,this._x,this._y,0,0)){
				var shader=this._shader2D;
				shader.glTexture=null;
				var submit=this._curSubmit=Submit.createSubmit(this,this._ib,vb,((vb._byteLength-16 *4)/ 32)*3,Value2D.create(0x02,0));
				submit.shaderValue.ALPHA=1.0;
				this._submits[this._submits._length++]=submit;
				this._curSubmit._numEle+=6;
				}else {
				alert("clipRect calc stencil rect error");
			};
			var submitStencil1=SubmitStencil.create(5);
			this.addRenderObject(submitStencil1);
			var vbdata=vb.getFloat32Array();
			var minx=Math.min(Math.min(Math.min(vbdata[nPos+0],vbdata[nPos+4]),vbdata[nPos+8]),vbdata[nPos+12]);
			var maxx=Math.max(Math.max(Math.max(vbdata[nPos+0],vbdata[nPos+4]),vbdata[nPos+8]),vbdata[nPos+12]);
			var miny=Math.min(Math.min(Math.min(vbdata[nPos+1],vbdata[nPos+5]),vbdata[nPos+9]),vbdata[nPos+13]);
			var maxy=Math.max(Math.max(Math.max(vbdata[nPos+1],vbdata[nPos+5]),vbdata[nPos+9]),vbdata[nPos+13]);
			SaveClipRectStencil.save(this,submitStencil1,x,y,width,height,minx,miny,maxx-minx,maxy-miny);
			this._curSubmit=Submit.RENDERBASE;
			}else {
			width *=this._curMat.a;
			height *=this._curMat.d;
			var p=Point.TEMP;
			this._curMat.transformPoint(p.setTo(x,y));
			if (width < 0){
				p.x=p.x+width;
				width=-width;
			}
			if (height < 0){
				p.y=p.y+height;
				height=-height;
			}
			this._renderKey=0;
			var submitSc=this._curSubmit=SubmitScissor.create(this);
			this._submits[this._submits._length++]=submitSc;
			submitSc.submitIndex=this._submits._length;
			submitSc.submitLength=9999999;
			SaveClipRect.save(this,submitSc);
			var clip=this._clipRect;
			var x1=clip.x,y1=clip.y;
			var r=p.x+width,b=p.y+height;
			x1 < p.x && (clip.x=p.x);
			y1 < p.y && (clip.y=p.y);
			clip.width=Math.min(r,x1+clip.width)-clip.x;
			clip.height=Math.min(b,y1+clip.height)-clip.y;
			this._shader2D.glTexture=null;
			submitSc.clipRect.copyFrom(clip);
			this._curSubmit=Submit.RENDERBASE;
		}
	}

	__proto.setIBVB=function(x,y,ib,vb,numElement,mat,shader,shaderValues,startIndex,offset,type){
		(startIndex===void 0)&& (startIndex=0);
		(offset===void 0)&& (offset=0);
		(type===void 0)&& (type=0);
		if (ib===null){
			if (!Render.isFlash){
				ib=this._ib;
				}else {
				var falshVB=vb;
				(falshVB._selfIB)|| (falshVB._selfIB=IndexBuffer2D.create(0x88E4));
				falshVB._selfIB.clear();
				ib=falshVB._selfIB;
			}
			GlUtils.expandIBQuadrangle(ib,(vb._byteLength / (4 *vb.vertexStride *4)));
		}
		if (!shaderValues || !shader)
			throw Error("setIBVB must input:shader shaderValues");
		var submit=SubmitOtherIBVB.create(this,vb,ib,numElement,shader,shaderValues,startIndex,offset,type);
		mat || (mat=Matrix.EMPTY);
		mat.translate(x,y);
		Matrix.mul(mat,this._curMat,submit._mat);
		mat.translate(-x,-y);
		this._submits[this._submits._length++]=submit;
		this._curSubmit=Submit.RENDERBASE;
		this._renderKey=0;
	}

	__proto.addRenderObject=function(o){
		this._submits[this._submits._length++]=o;
	}

	__proto.fillTrangles=function(tex,x,y,points,m){
		var submit=this._curSubmit;
		var vb=this._vb;
		var shader=this._shader2D;
		var curShader=submit.shaderValue;
		var length=points.length >> 4;
		var t_tex=tex.bitmap;
		this._renderKey=0;
		if (shader.glTexture !=t_tex || shader.ALPHA!==curShader.ALPHA){
			submit=this._curSubmit=Submit.createSubmit(this,this._ib,vb,((vb._byteLength)/ 32)*3,Value2D.create(0x01,0));
			submit.shaderValue.textureHost=tex;
			this._submits[this._submits._length++]=submit;
		}
		GlUtils.fillTranglesVB(vb,x,y,points,m || this._curMat,this._x,this._y);
		submit._numEle+=length *6;
	}

	__proto.submitElement=function(start,end){
		var renderList=this._submits;
		end < 0 && (end=renderList._length);
		while (start < end){
			start+=renderList[start].renderSubmit();
		}
	}

	__proto.finish=function(){
		WebGL.mainContext.finish();
	}

	__proto.flush=function(){
		var maxNum=Math.max(this._vb._byteLength / (4 *16),this._maxNumEle / 6)+8;
		if (maxNum > (this._ib.bufferLength / (6 *2))){
			GlUtils.expandIBQuadrangle(this._ib,maxNum);
		}
		if (!this._isMain && AtlasResourceManager.enabled && AtlasResourceManager._atlasRestore > this._atlasResourceChange){
			this._atlasResourceChange=AtlasResourceManager._atlasRestore;
			var renderList=this._submits;
			for (var i=0,s=renderList._length;i < s;i++){
				var submit=renderList [i];
				if (submit.getRenderType()===10016)
					(submit).checkTexture();
			}
		}
		this.submitElement(0,this._submits._length);
		this._path && this._path.reset();
		SkinMeshBuffer.instance && SkinMeshBuffer.getInstance().reset();
		var sz=0;
		for (i=0,sz=this.meshlist.length;i < sz;i++){
			var curm=this.meshlist[i];
			curm.canReuse?(curm.releaseMesh()):(curm.destroy());
		}
		this.meshlist.length=0;
		this._curSubmit=Submit.RENDERBASE;
		this._renderKey=0;
		this._triangleMesh=MeshTexture.getAMesh();
		this.meshlist.push(this._triangleMesh);
		return this._submits._length;
	}

	__proto.setPathId=function(id){
		this.mId=id;
		if (this.mId !=-1){
			this.mHaveKey=false;
			var tVGM=VectorGraphManager.getInstance();
			if (tVGM.shapeDic[this.mId]){
				this.mHaveKey=true;
			}
			this.mHaveLineKey=false;
			if (tVGM.shapeLineDic[this.mId]){
				this.mHaveLineKey=true;
			}
		}
	}

	__proto.movePath=function(x,y){
		var _x1=x,_y1=y;
		x=this._curMat.a *_x1+this._curMat.c *_y1+this._curMat.tx;
		y=this._curMat.b *_x1+this._curMat.d *_y1+this._curMat.ty;
		this.mX+=x;
		this.mY+=y;
	}

	__proto.beginPath=function(){
		var tPath=this._getPath();
		tPath.tempArray.length=0;
		tPath.closePath=false;
		this.mX=0;
		this.mY=0;
	}

	__proto.closePath=function(){
		this._path.closePath=true;
	}

	__proto.fill=function(isConvexPolygon){
		(isConvexPolygon===void 0)&& (isConvexPolygon=false);
		var tPath=this._getPath();
		this.drawPoly(0,0,tPath.tempArray,this.fillStyle._color.numColor,0,0,isConvexPolygon);
	}

	__proto.stroke=function(){
		var tPath=this._getPath();
		if (this.lineWidth > 0){
			if (this.mId==-1){
				tPath.drawLine(0,0,tPath.tempArray,this.lineWidth,this.strokeStyle._color.numColor);
				}else {
				if (this.mHaveLineKey){
					var tShapeLine=VectorGraphManager.getInstance().shapeLineDic[this.mId];
					tShapeLine.rebuild(tPath.tempArray);
					tPath.setGeomtry(tShapeLine);
					}else {
					VectorGraphManager.getInstance().addLine(this.mId,tPath.drawLine(0,0,tPath.tempArray,this.lineWidth,this.strokeStyle._color.numColor));
				}
			}
			tPath.update();
			var tPosArray=[this.mX,this.mY];
			var tempSubmit=Submit.createShape(this,tPath.ib,tPath.vb,tPath.count,tPath.offset,Value2D.create(0x04,0));
			tempSubmit.shaderValue.ALPHA=this._shader2D.ALPHA;
			(tempSubmit.shaderValue).u_pos=tPosArray;
			tempSubmit.shaderValue.u_mmat2=RenderState2D.TEMPMAT4_ARRAY;
			this._submits[this._submits._length++]=tempSubmit;
		}
	}

	__proto.line=function(fromX,fromY,toX,toY,lineWidth,mat){
		var submit=this._curSubmit;
		var vb=this._vb;
		if (GlUtils.fillLineVb(vb,this._clipRect,fromX,fromY,toX,toY,lineWidth,mat)){
			this._renderKey=0;
			var shader=this._shader2D;
			var curShader=submit.shaderValue;
			if (shader.strokeStyle!==curShader.strokeStyle || shader.ALPHA!==curShader.ALPHA){
				shader.glTexture=null;
				submit=this._curSubmit=Submit.createSubmit(this,this._ib,vb,((vb._byteLength-16 *4)/ 32)*3,Value2D.create(0x02,0));
				submit.shaderValue.strokeStyle=shader.strokeStyle;
				submit.shaderValue.mainID=0x02;
				submit.shaderValue.ALPHA=shader.ALPHA;
				this._submits[this._submits._length++]=submit;
			}
			submit._numEle+=6;
		}
	}

	__proto.moveTo=function(x,y,b){
		(b===void 0)&& (b=true);
		var tPath=this._getPath();
		if (b){
			var _x1=x,_y1=y;
			x=this._curMat.a *_x1+this._curMat.c *_y1;
			y=this._curMat.b *_x1+this._curMat.d *_y1;
		}
		tPath.addPoint(x,y);
	}

	__proto.lineTo=function(x,y,b){
		(b===void 0)&& (b=true);
		var tPath=this._getPath();
		if (b){
			var _x1=x,_y1=y;
			x=this._curMat.a *_x1+this._curMat.c *_y1;
			y=this._curMat.b *_x1+this._curMat.d *_y1;
		}
		tPath.addPoint(x,y);
	}

	__proto.drawCurves=function(x,y,args){
		this.setPathId(-1);
		this.beginPath();
		this.strokeStyle=args[3];
		this.lineWidth=args[4];
		var points=args[2];
		x+=args[0],y+=args[1];
		this.movePath(x,y);
		this.moveTo(points[0],points[1]);
		var i=2,n=points.length;
		while (i < n){
			this.quadraticCurveTo(points[i++],points[i++],points[i++],points[i++]);
		}
		this.stroke();
	}

	__proto.arcTo=function(x1,y1,x2,y2,r){
		if (this.mId !=-1){
			if (this.mHaveKey){
				return;
			}
		};
		var i=0;
		var x=0,y=0;
		var tPath=this._getPath();
		this._curMat.copyTo(WebGLContext2D._tmpMatrix);
		WebGLContext2D._tmpMatrix.tx=WebGLContext2D._tmpMatrix.ty=0;
		WebGLContext2D._tempPoint.setTo(tPath.getEndPointX(),tPath.getEndPointY());
		WebGLContext2D._tmpMatrix.invertTransformPoint(WebGLContext2D._tempPoint);
		var dx=WebGLContext2D._tempPoint.x-x1;
		var dy=WebGLContext2D._tempPoint.y-y1;
		var len1=Math.sqrt(dx*dx+dy*dy);
		if (len1 <=0.000001){
			return;
		};
		var ndx=dx / len1;
		var ndy=dy / len1;
		var dx2=x2-x1;
		var dy2=y2-y1;
		var len22=dx2*dx2+dy2*dy2;
		var len2=Math.sqrt(len22);
		if (len2 <=0.000001){
			return;
		};
		var ndx2=dx2 / len2;
		var ndy2=dy2 / len2;
		var odx=ndx+ndx2;
		var ody=ndy+ndy2;
		var olen=Math.sqrt(odx*odx+ody*ody);
		if (olen <=0.000001){
			return;
		};
		var nOdx=odx / olen;
		var nOdy=ody / olen;
		var alpha=Math.acos(nOdx*ndx+nOdy*ndy);
		var halfAng=Math.PI / 2-alpha;
		len1=r / Math.tan(halfAng);
		var ptx1=len1*ndx+x1;
		var pty1=len1*ndy+y1;
		var orilen=Math.sqrt(len1*len1+r*r);
		var orix=x1+nOdx*orilen;
		var oriy=y1+nOdy*orilen;
		var ptx2=len1*ndx2+x1;
		var pty2=len1*ndy2+y1;
		var dir=ndx *ndy2-ndy *ndx2;
		var fChgAng=0;
		var sinx=0.0;
		var cosx=0.0;
		if (dir >=0){
			fChgAng=halfAng *2;
			var fda=fChgAng / WebGLContext2D.SEGNUM;
			sinx=Math.sin(fda);
			cosx=Math.cos(fda);
		}
		else {
			fChgAng=-halfAng *2;
			fda=fChgAng / WebGLContext2D.SEGNUM;
			sinx=Math.sin(fda);
			cosx=Math.cos(fda);
		}
		x=this._curMat.a *ptx1+this._curMat.c *pty1;
		y=this._curMat.b *ptx1+this._curMat.d *pty1;
		if (x !=this._path.getEndPointX()|| y !=this._path.getEndPointY()){
			tPath.addPoint(x,y);
		};
		var cvx=ptx1-orix;
		var cvy=pty1-oriy;
		var tx=0.0;
		var ty=0.0;
		for (i=0;i < WebGLContext2D.SEGNUM;i++){
			var cx=cvx*cosx+cvy*sinx;
			var cy=-cvx*sinx+cvy*cosx;
			x=cx+orix;
			y=cy+oriy;
			x1=this._curMat.a *x+this._curMat.c *y;
			y1=this._curMat.b *x+this._curMat.d *y;
			x=x1;
			y=y1;
			if (x !=this._path.getEndPointX()|| y !=this._path.getEndPointY()){
				tPath.addPoint(x,y);
			}
			cvx=cx;
			cvy=cy;
		}
	}

	__proto.arc=function(cx,cy,r,startAngle,endAngle,counterclockwise,b){
		(counterclockwise===void 0)&& (counterclockwise=false);
		(b===void 0)&& (b=true);
		if (this.mId !=-1){
			var tShape=VectorGraphManager.getInstance().shapeDic[this.mId];
			if (tShape){
				if (this.mHaveKey && !tShape.needUpdate(this._curMat))
					return;
			}
			cx=0;
			cy=0;
		};
		var a=0,da=0,hda=0,kappa=0;
		var dx=0,dy=0,x=0,y=0,tanx=0,tany=0;
		var px=0,py=0,ptanx=0,ptany=0;
		var i=0,ndivs=0,nvals=0;
		da=endAngle-startAngle;
		if (!counterclockwise){
			if (Math.abs(da)>=Math.PI *2){
				da=Math.PI *2;
				}else {
				while (da < 0.0){
					da+=Math.PI *2;
				}
			}
			}else {
			if (Math.abs(da)>=Math.PI *2){
				da=-Math.PI *2;
				}else {
				while (da > 0.0){
					da-=Math.PI *2;
				}
			}
		}
		if (r < 101){
			ndivs=Math.max(10,da *r / 5);
			}else if (r < 201){
			ndivs=Math.max(10,da *r / 20);
			}else {
			ndivs=Math.max(10,da *r / 40);
		}
		hda=(da / ndivs)/ 2.0;
		kappa=Math.abs(4 / 3 *(1-Math.cos(hda))/ Math.sin(hda));
		if (counterclockwise)
			kappa=-kappa;
		nvals=0;
		var tPath=this._getPath();
		var _x1=NaN,_y1=NaN;
		for (i=0;i <=ndivs;i++){
			a=startAngle+da *(i / ndivs);
			dx=Math.cos(a);
			dy=Math.sin(a);
			x=cx+dx *r;
			y=cy+dy *r;
			if (b){
				_x1=x,_y1=y;
				x=this._curMat.a *_x1+this._curMat.c *_y1;
				y=this._curMat.b *_x1+this._curMat.d *_y1;
			}
			if (x !=this._path.getEndPointX()|| y !=this._path.getEndPointY()){
				tPath.addPoint(x,y);
			}
		}
		dx=Math.cos(endAngle);
		dy=Math.sin(endAngle);
		x=cx+dx *r;
		y=cy+dy *r;
		if (b){
			_x1=x,_y1=y;
			x=this._curMat.a *_x1+this._curMat.c *_y1;
			y=this._curMat.b *_x1+this._curMat.d *_y1;
		}
		if (x !=this._path.getEndPointX()|| y !=this._path.getEndPointY()){
			tPath.addPoint(x,y);
		}
	}

	__proto.quadraticCurveTo=function(cpx,cpy,x,y){
		var tBezier=Bezier.I;
		var tResultArray=[];
		var _x1=x,_y1=y;
		x=this._curMat.a *_x1+this._curMat.c *_y1;
		y=this._curMat.b *_x1+this._curMat.d *_y1;
		_x1=cpx,_y1=cpy;
		cpx=this._curMat.a *_x1+this._curMat.c *_y1;
		cpy=this._curMat.b *_x1+this._curMat.d *_y1;
		var tArray=tBezier.getBezierPoints([this._path.getEndPointX(),this._path.getEndPointY(),cpx,cpy,x,y],30,2);
		for (var i=0,n=tArray.length / 2;i < n;i++){
			this.lineTo(tArray[i *2],tArray[i *2+1],false);
		}
		this.lineTo(x,y,false);
	}

	__proto.rect=function(x,y,width,height){
		this._other=this._other.make();
		this._other.path || (this._other.path=new Path());
		this._other.path.rect(x,y,width,height);
	}

	__proto.strokeRect=function(x,y,width,height,parameterLineWidth){
		var tW=parameterLineWidth *0.5;
		this.line(x-tW,y,x+width+tW,y,parameterLineWidth,this._curMat);
		this.line(x+width,y,x+width,y+height,parameterLineWidth,this._curMat);
		this.line(x,y,x,y+height,parameterLineWidth,this._curMat);
		this.line(x-tW,y+height,x+width+tW,y+height,parameterLineWidth,this._curMat);
	}

	__proto.clip=function(){}
	/**
	*画多边形(用)
	*@param x
	*@param y
	*@param points
	*/
	__proto.drawPoly=function(x,y,points,color,lineWidth,boderColor,isConvexPolygon){
		(isConvexPolygon===void 0)&& (isConvexPolygon=false);
		this._renderKey=0;
		this._shader2D.glTexture=null;
		var tPath=this._getPath();
		if (this.mId==-1){
			tPath.polygon(x,y,points,color,lineWidth ? lineWidth :1,boderColor)
			}else {
			if (this.mHaveKey){
				var tShape=VectorGraphManager.getInstance().shapeDic[this.mId];
				tShape.setMatrix(this._curMat);
				tShape.rebuild(tPath.tempArray);
				tPath.setGeomtry(tShape);
				}else {
				var t=tPath.polygon(x,y,points,color,lineWidth ? lineWidth :1,boderColor);
				VectorGraphManager.getInstance().addShape(this.mId,t);
				t.setMatrix(this._curMat);
			}
		}
		tPath.update();
		var tPosArray=[this.mX,this.mY];
		var tempSubmit;
		tempSubmit=Submit.createShape(this,tPath.ib,tPath.vb,tPath.count,tPath.offset,Value2D.create(0x04,0));
		tempSubmit.shaderValue.ALPHA=this._shader2D.ALPHA;
		(tempSubmit.shaderValue).u_pos=tPosArray;
		tempSubmit.shaderValue.u_mmat2=RenderState2D.EMPTYMAT4_ARRAY;
		this._submits[this._submits._length++]=tempSubmit;
		if (lineWidth > 0){
			if (this.mHaveLineKey){
				var tShapeLine=VectorGraphManager.getInstance().shapeLineDic[this.mId];
				tShapeLine.rebuild(tPath.tempArray);
				tPath.setGeomtry(tShapeLine);
				}else {
				VectorGraphManager.getInstance().addShape(this.mId,tPath.drawLine(x,y,points,lineWidth,boderColor));
			}
			tPath.update();
			tempSubmit=Submit.createShape(this,tPath.ib,tPath.vb,tPath.count,tPath.offset,Value2D.create(0x04,0));
			tempSubmit.shaderValue.ALPHA=this._shader2D.ALPHA;
			tempSubmit.shaderValue.u_mmat2=RenderState2D.EMPTYMAT4_ARRAY;
			this._submits[this._submits._length++]=tempSubmit;
		}
	}

	/*******************************************end矢量绘制***************************************************/
	__proto.drawParticle=function(x,y,pt){
		pt.x=x;
		pt.y=y;
		this._submits[this._submits._length++]=pt;
	}

	__proto._getPath=function(){
		return this._path || (this._path=new Path());
	}

	/*,_shader2D.ALPHA=1*/
	__getset(0,__proto,'globalCompositeOperation',function(){
		return BlendMode.NAMES[this._nBlendType];
		},function(value){
		var n=BlendMode.TOINT[value];
		n==null || (this._nBlendType===n)|| (SaveBase.save(this,0x10000,this,true),this._curSubmit=Submit.RENDERBASE,this._renderKey=0,this._nBlendType=n);
	});

	__getset(0,__proto,'strokeStyle',function(){
		return this._shader2D.strokeStyle;
		},function(value){
		this._shader2D.strokeStyle.equal(value)|| (SaveBase.save(this,0x200,this._shader2D,false),this._shader2D.strokeStyle=DrawStyle.create(value));
	});

	__getset(0,__proto,'globalAlpha',function(){
		return this._shader2D.ALPHA;
		},function(value){
		value=Math.floor(value *1000)/ 1000;
		if (value !=this._shader2D.ALPHA){
			SaveBase.save(this,0x1,this._shader2D,true);
			this._shader2D.ALPHA=value;
		}
	});

	__getset(0,__proto,'asBitmap',null,function(value){
		if (value){
			this._targets || (this._targets=new RenderTargetMAX());
			this._targets.repaint=true;
			if (!this._width || !this._height)
				throw Error("asBitmap no size!");
			this._targets.setSP(this.sprite);
			this._targets.size(this._width,this._height);
		}else
		this._targets=null;
	});

	__getset(0,__proto,'fillStyle',function(){
		return this._shader2D.fillStyle;
		},function(value){
		this._shader2D.fillStyle.equal(value)|| (SaveBase.save(this,0x2,this._shader2D,false),this._shader2D.fillStyle=DrawStyle.create(value));
	});

	__getset(0,__proto,'textAlign',function(){
		return this._other.textAlign;
		},function(value){
		(this._other.textAlign===value)|| (this._other=this._other.make(),SaveBase.save(this,0x8000,this._other,false),this._other.textAlign=value);
	});

	__getset(0,__proto,'lineWidth',function(){
		return this._other.lineWidth;
		},function(value){
		(this._other.lineWidth===value)|| (this._other=this._other.make(),SaveBase.save(this,0x100,this._other,false),this._other.lineWidth=value);
	});

	__getset(0,__proto,'textBaseline',function(){
		return this._other.textBaseline;
		},function(value){
		(this._other.textBaseline===value)|| (this._other=this._other.make(),SaveBase.save(this,0x4000,this._other,false),this._other.textBaseline=value);
	});

	__getset(0,__proto,'font',null,function(str){
		if (str==this._other.font.toString())
			return;
		this._other=this._other.make();
		SaveBase.save(this,0x8,this._other,false);
		this._other.font===FontInContext.EMPTY ? (this._other.font=new FontInContext(str)):(this._other.font.setFont(str));
	});

	WebGLContext2D.__init__=function(){
		ContextParams.DEFAULT=new ContextParams();
	}

	WebGLContext2D._tempPoint=new Point();
	WebGLContext2D._SUBMITVBSIZE=32000;
	WebGLContext2D._MAXSIZE=99999999;
	WebGLContext2D._RECTVBSIZE=16;
	WebGLContext2D.MAXCLIPRECT=new Rectangle(0,0,99999999,99999999);
	WebGLContext2D._COUNT=0;
	WebGLContext2D._tmpMatrix=new Matrix();
	WebGLContext2D.SEGNUM=32;
	WebGLContext2D._contextcount=0;
	__static(WebGLContext2D,
	['_fontTemp',function(){return this._fontTemp=new FontInContext();},'_drawStyleTemp',function(){return this._drawStyleTemp=new DrawStyle(null);}
	]);
	WebGLContext2D.__init$=function(){
		//class ContextParams
		ContextParams=(function(){
			function ContextParams(){
				this.lineWidth=1;
				this.path=null;
				this.textAlign=null;
				this.textBaseline=null;
				this.font=FontInContext.EMPTY;
			}
			__class(ContextParams,'');
			var __proto=ContextParams.prototype;
			__proto.clear=function(){
				this.lineWidth=1;
				this.path && this.path.clear();
				this.textAlign=this.textBaseline=null;
				this.font=FontInContext.EMPTY;
			}
			__proto.make=function(){
				return this===ContextParams.DEFAULT ? new ContextParams():this;
			}
			ContextParams.DEFAULT=null;
			return ContextParams;
		})()
	}

	return WebGLContext2D;
})(Context)


//class laya.webgl.utils.RenderSprite3D extends laya.renders.RenderSprite
var RenderSprite3D=(function(_super){
	function RenderSprite3D(type,next){
		RenderSprite3D.__super.call(this,type,next);
	}

	__class(RenderSprite3D,'laya.webgl.utils.RenderSprite3D',_super);
	var __proto=RenderSprite3D.prototype;
	__proto.onCreate=function(type){
		switch (type){
			case 0x08:
				this._fun=this._blend;
				return;
			case 0x04:
				this._fun=this._transform;
				return;
			}
	}

	__proto._mask=function(sprite,context,x,y){
		var next=this._next;
		var mask=sprite.mask;
		var submitCMD;
		var submitStencil;
		if (mask){
			context.ctx.save();
			var preBlendMode=(context.ctx).globalCompositeOperation;
			var tRect=new Rectangle();
			tRect.copyFrom(mask.getBounds());
			tRect.width=Math.round(tRect.width);
			tRect.height=Math.round(tRect.height);
			tRect.x=Math.round(tRect.x);
			tRect.y=Math.round(tRect.y);
			if (tRect.width > 0 && tRect.height > 0){
				var tf=sprite._style._tf;
				var scope=SubmitCMDScope.create();
				scope.addValue("bounds",tRect);
				submitCMD=SubmitCMD.create([scope,context],laya.webgl.utils.RenderSprite3D.tmpTarget);
				context.addRenderObject(submitCMD);
				mask.render(context,-tRect.x,-tRect.y);
				submitCMD=SubmitCMD.create([scope],laya.webgl.utils.RenderSprite3D.endTmpTarget);
				context.addRenderObject(submitCMD);
				context.ctx.save();
				context.clipRect(x-tf.translateX+tRect.x,y-tf.translateY+tRect.y,tRect.width,tRect.height);
				next._fun.call(next,sprite,context,x,y);
				context.ctx.restore();
				submitStencil=SubmitStencil.create(6);
				preBlendMode=(context.ctx).globalCompositeOperation;
				submitStencil.blendMode="mask";
				context.addRenderObject(submitStencil);
				Matrix.TEMP.identity();
				var shaderValue=Value2D.create(0x01,0);
				var uv=Texture.INV_UV;
				var w=tRect.width;
				var h=tRect.height;
				var tempLimit=32;
				if (tRect.width < tempLimit || tRect.height < tempLimit){
					uv=RenderSprite3D.tempUV;
					uv[0]=0;
					uv[1]=0;
					uv[2]=(tRect.width >=32)? 1 :tRect.width/tempLimit;
					uv[3]=0
					uv[4]=(tRect.width >=32)? 1 :tRect.width/tempLimit;
					uv[5]=(tRect.height >=32)? 1 :tRect.height/tempLimit;
					uv[6]=0;
					uv[7]=(tRect.height >=32)? 1 :tRect.height/tempLimit;
					tRect.width=(tRect.width >=32)? tRect.width :tempLimit;
					tRect.height=(tRect.height >=32)? tRect.height :tempLimit;
					uv[1] *=-1;uv[3] *=-1;uv[5] *=-1;uv[7] *=-1;
					uv[1]+=1;uv[3]+=1;uv[5]+=1;uv[7]+=1;
				}
				(context.ctx).drawTarget(scope,x+tRect.x-tf.translateX,y+tRect.y-tf.translateY,w,h,Matrix.TEMP,"tmpTarget",shaderValue,uv,6);
				submitCMD=SubmitCMD.create([scope],laya.webgl.utils.RenderSprite3D.recycleTarget);
				context.addRenderObject(submitCMD);
				submitStencil=SubmitStencil.create(6);
				submitStencil.blendMode=preBlendMode;
				context.addRenderObject(submitStencil);
			}
			context.ctx.restore();
		}
		else{
			next._fun.call(next,sprite,context,x,y);
		}
	}

	__proto._blend=function(sprite,context,x,y){
		var style=sprite._style;
		var next=this._next;
		if (style.blendMode){
			context.ctx.save();
			context.ctx.globalCompositeOperation=style.blendMode;
			next._fun.call(next,sprite,context,x,y);
			context.ctx.restore();
		}
		else{
			next._fun.call(next,sprite,context,x,y);
		}
	}

	__proto._transform=function(sprite,context,x,y){
		'use strict';
		var transform=sprite.transform,_next=this._next;
		if (transform && _next !=RenderSprite.NORENDER){
			var ctx=context.ctx;
			var style=sprite._style;
			transform.tx=x;
			transform.ty=y;
			var m2=ctx._getTransformMatrix();
			var m1=m2.clone();
			Matrix.mul(transform,m2,m2);
			m2._checkTransform();
			transform.tx=transform.ty=0;
			_next._fun.call(_next,sprite,context,0,0);
			m1.copyTo(m2);
			m1.destroy();
			}else {
			_next._fun.call(_next,sprite,context,x,y);
		}
	}

	RenderSprite3D.tmpTarget=function(scope,context){
		var b=scope.getValue("bounds");
		var tmpTarget=RenderTarget2D.create(b.width,b.height);
		tmpTarget.start();
		tmpTarget.clear(0,0,0,0);
		scope.addValue("tmpTarget",tmpTarget);
	}

	RenderSprite3D.endTmpTarget=function(scope){
		var tmpTarget=scope.getValue("tmpTarget");
		tmpTarget.end();
	}

	RenderSprite3D.recycleTarget=function(scope){
		var tmpTarget=scope.getValue("tmpTarget");
		tmpTarget.recycle();
		scope.recycle();
	}

	__static(RenderSprite3D,
	['tempUV',function(){return this.tempUV=new Array(8);}
	]);
	return RenderSprite3D;
})(RenderSprite)


//class laya.webgl.atlas.Atlaser extends laya.webgl.atlas.AtlasGrid
var Atlaser=(function(_super){
	function Atlaser(gridNumX,gridNumY,width,height,atlasID){
		this._atlasCanvas=null;
		this._inAtlasTextureKey=null;
		this._inAtlasTextureBitmapValue=null;
		this._inAtlasTextureOriUVValue=null;
		this._InAtlasWebGLImagesKey=null;
		this._InAtlasWebGLImagesOffsetValue=null;
		Atlaser.__super.call(this,gridNumX,gridNumY,atlasID);
		this._inAtlasTextureKey=[];
		this._inAtlasTextureBitmapValue=[];
		this._inAtlasTextureOriUVValue=[];
		this._InAtlasWebGLImagesKey={};
		this._InAtlasWebGLImagesOffsetValue=[];
		this._atlasCanvas=new AtlasWebGLCanvas();
		this._atlasCanvas._atlaser=this;
		this._atlasCanvas.width=width;
		this._atlasCanvas.height=height;
		this._atlasCanvas.activeResource();
		this._atlasCanvas.lock=true;
	}

	__class(Atlaser,'laya.webgl.atlas.Atlaser',_super);
	var __proto=Atlaser.prototype;
	__proto.computeUVinAtlasTexture=function(texture,oriUV,offsetX,offsetY){
		var tex=texture;
		var _width=AtlasResourceManager.atlasTextureWidth;
		var _height=AtlasResourceManager.atlasTextureHeight;
		var u1=offsetX / _width,v1=offsetY / _height,u2=(offsetX+texture.bitmap.width)/ _width,v2=(offsetY+texture.bitmap.height)/ _height;
		var inAltasUVWidth=texture.bitmap.width / _width,inAltasUVHeight=texture.bitmap.height / _height;
		texture.uv=[u1+oriUV[0] *inAltasUVWidth,v1+oriUV[1] *inAltasUVHeight,u2-(1-oriUV[2])*inAltasUVWidth,v1+oriUV[3] *inAltasUVHeight,u2-(1-oriUV[4])*inAltasUVWidth,v2-(1-oriUV[5])*inAltasUVHeight,u1+oriUV[6] *inAltasUVWidth,v2-(1-oriUV[7])*inAltasUVHeight];
	}

	__proto.findBitmapIsExist=function(bitmap){
		if ((bitmap instanceof laya.webgl.resource.WebGLImage )){
			var webImage=bitmap;
			var sUrl=webImage.url;
			var object=this._InAtlasWebGLImagesKey[sUrl?sUrl:webImage.id]
			if (object){
				return object.offsetInfoID;
			}
		}
		return-1;
	}

	/**
	*
	*@param inAtlasRes
	*@return 是否已经存在队列中
	*/
	__proto.addToAtlasTexture=function(mergeAtlasBitmap,offsetX,offsetY){
		if ((mergeAtlasBitmap instanceof laya.webgl.resource.WebGLImage )){
			var webImage=mergeAtlasBitmap;
			var sUrl=webImage.url;
			this._InAtlasWebGLImagesKey[sUrl?sUrl:webImage.id]={bitmap:mergeAtlasBitmap,offsetInfoID:this._InAtlasWebGLImagesOffsetValue.length};
			this._InAtlasWebGLImagesOffsetValue.push([offsetX,offsetY]);
		}
		this._atlasCanvas.texSubImage2D(offsetX,offsetY,mergeAtlasBitmap.atlasSource);
		mergeAtlasBitmap.clearAtlasSource();
	}

	__proto.addToAtlas=function(texture,offsetX,offsetY){
		texture._atlasID=this._inAtlasTextureKey.length;
		var oriUV=texture.uv.slice();
		var oriBitmap=texture.bitmap;
		this._inAtlasTextureKey.push(texture);
		this._inAtlasTextureOriUVValue.push(oriUV);
		this._inAtlasTextureBitmapValue.push(oriBitmap);
		this.computeUVinAtlasTexture(texture,oriUV,offsetX,offsetY);
		texture.bitmap=this._atlasCanvas;
	}

	__proto.clear=function(){
		for (var i=0,n=this._inAtlasTextureKey.length;i < n;i++){
			this._inAtlasTextureKey[i].bitmap=this._inAtlasTextureBitmapValue[i];
			this._inAtlasTextureKey[i].uv=this._inAtlasTextureOriUVValue[i];
			this._inAtlasTextureKey[i]._atlasID=-1;
			this._inAtlasTextureKey[i].bitmap.lock=false;
			this._inAtlasTextureKey[i].bitmap.releaseResource();
		}
		this._inAtlasTextureKey.length=0;
		this._inAtlasTextureBitmapValue.length=0;
		this._inAtlasTextureOriUVValue.length=0;
		this._InAtlasWebGLImagesKey=null;
		this._InAtlasWebGLImagesOffsetValue.length=0;
	}

	__proto.dispose=function(){
		this.clear();
		this._atlasCanvas.destroy();
	}

	__getset(0,__proto,'InAtlasWebGLImagesOffsetValue',function(){
		return this._InAtlasWebGLImagesOffsetValue;
	});

	__getset(0,__proto,'texture',function(){
		return this._atlasCanvas;
	});

	__getset(0,__proto,'inAtlasWebGLImagesKey',function(){
		return this._InAtlasWebGLImagesKey;
	});

	return Atlaser;
})(AtlasGrid)


//class laya.webgl.shader.d2.ShaderDefines2D extends laya.webgl.shader.ShaderDefines
var ShaderDefines2D=(function(_super){
	function ShaderDefines2D(){
		ShaderDefines2D.__super.call(this,ShaderDefines2D.__name2int,ShaderDefines2D.__int2name,ShaderDefines2D.__int2nameMap);
	}

	__class(ShaderDefines2D,'laya.webgl.shader.d2.ShaderDefines2D',_super);
	ShaderDefines2D.__init__=function(){
		ShaderDefines2D.reg("TEXTURE2D",0x01);
		ShaderDefines2D.reg("COLOR2D",0x02);
		ShaderDefines2D.reg("PRIMITIVE",0x04);
		ShaderDefines2D.reg("GLOW_FILTER",0x08);
		ShaderDefines2D.reg("BLUR_FILTER",0x10);
		ShaderDefines2D.reg("COLOR_FILTER",0x20);
		ShaderDefines2D.reg("COLOR_ADD",0x40);
		ShaderDefines2D.reg("WORLDMAT",0x80);
		ShaderDefines2D.reg("FILLTEXTURE",0x100);
		ShaderDefines2D.reg("FSHIGHPRECISION",0x400);
	}

	ShaderDefines2D.reg=function(name,value){
		ShaderDefines$1._reg(name,value,ShaderDefines2D.__name2int,ShaderDefines2D.__int2name);
	}

	ShaderDefines2D.toText=function(value,int2name,int2nameMap){
		return ShaderDefines$1._toText(value,int2name,int2nameMap);
	}

	ShaderDefines2D.toInt=function(names){
		return ShaderDefines$1._toInt(names,ShaderDefines2D.__name2int);
	}

	ShaderDefines2D.TEXTURE2D=0x01;
	ShaderDefines2D.COLOR2D=0x02;
	ShaderDefines2D.PRIMITIVE=0x04;
	ShaderDefines2D.FILTERGLOW=0x08;
	ShaderDefines2D.FILTERBLUR=0x10;
	ShaderDefines2D.FILTERCOLOR=0x20;
	ShaderDefines2D.COLORADD=0x40;
	ShaderDefines2D.WORLDMAT=0x80;
	ShaderDefines2D.FILLTEXTURE=0x100;
	ShaderDefines2D.SKINMESH=0x200;
	ShaderDefines2D.SHADERDEFINE_FSHIGHPRECISION=0x400;
	ShaderDefines2D.__name2int={};
	ShaderDefines2D.__int2name=[];
	ShaderDefines2D.__int2nameMap=[];
	return ShaderDefines2D;
})(ShaderDefines$1)


//class laya.webgl.shapes.Line extends laya.webgl.shapes.BasePoly
var Line=(function(_super){
	function Line(x,y,points,borderWidth,color){
		this._points=[];
		this.rebuild(points);
		Line.__super.call(this,x,y,0,0,0,color,borderWidth,color,0);
	}

	__class(Line,'laya.webgl.shapes.Line',_super);
	var __proto=Line.prototype;
	__proto.rebuild=function(points){
		var len=points.length;
		var preLen=this._points.length;
		if (len !=preLen){
			this.mUint16Array=new Uint16Array((len/2-1)*6);
			this.mFloat32Array=new Float32Array(len*5);
		}
		this._points.length=0;
		var tCurrX=NaN;
		var tCurrY=NaN;
		var tLastX=-1;
		var tLastY=-1;
		var tLen=points.length / 2;
		for (var i=0;i < tLen;i++){
			tCurrX=points[i *2];
			tCurrY=points[i *2+1];
			if (Math.abs(tLastX-tCurrX)> 0.01 || Math.abs(tLastY-tCurrY)>0.01){
				this._points.push(tCurrX,tCurrY);
			}
			tLastX=tCurrX;
			tLastY=tCurrY;
		}
	}

	__proto.getData=function(ib,vb,start){
		var indices=[];
		var verts=[];
		(this.borderWidth > 0)&& this.createLine2(this._points,indices,this.borderWidth,start,verts,this._points.length / 2);
		this.mUint16Array.set(indices,0);
		this.mFloat32Array.set(verts,0);
		ib.append(this.mUint16Array);
		vb.append(this.mFloat32Array);
	}

	return Line;
})(BasePoly)


//class laya.webgl.shapes.LoopLine extends laya.webgl.shapes.BasePoly
var LoopLine=(function(_super){
	function LoopLine(x,y,points,width,color){
		this._points=[];
		var tCurrX=NaN;
		var tCurrY=NaN;
		var tLastX=-1;
		var tLastY=-1;
		var tLen=points.length / 2-1;
		for (var i=0;i < tLen;i++){
			tCurrX=points[i *2];
			tCurrY=points[i *2+1];
			if (Math.abs(tLastX-tCurrX)> 0.01 || Math.abs(tLastY-tCurrY)> 0.01){
				this._points.push(tCurrX,tCurrY);
			}
			tLastX=tCurrX;
			tLastY=tCurrY;
		}
		tCurrX=points[tLen *2];
		tCurrY=points[tLen *2+1];
		tLastX=this._points[0];
		tLastY=this._points[1];
		if (Math.abs(tLastX-tCurrX)> 0.01 || Math.abs(tLastY-tCurrY)> 0.01){
			this._points.push(tCurrX,tCurrY);
		}
		LoopLine.__super.call(this,x,y,0,0,this._points.length / 2,0,width,color);
	}

	__class(LoopLine,'laya.webgl.shapes.LoopLine',_super);
	var __proto=LoopLine.prototype;
	__proto.getData=function(ib,vb,start){
		if (this.borderWidth > 0){
			var color=this.color;
			var r=((color >> 16)& 0x0000ff)/ 255,g=((color >> 8)& 0xff)/ 255,b=(color & 0x0000ff)/ 255;
			var verts=[];
			var tLastX=-1,tLastY=-1;
			var tCurrX=0,tCurrY=0;
			var indices=[];
			var tLen=Math.floor(this._points.length / 2);
			for (var i=0;i < tLen;i++){
				tCurrX=this._points[i *2];
				tCurrY=this._points[i *2+1];
				verts.push(this.x+tCurrX,this.y+tCurrY,r,g,b);
			}
			this.createLoopLine(verts,indices,this.borderWidth,start+verts.length / 5);
			ib.append(new Uint16Array(indices));
			vb.append(new Float32Array(verts));
		}
	}

	__proto.createLoopLine=function(p,indices,lineWidth,len,outVertex,outIndex){
		var tLen=p.length / 5;
		var points=p.concat();
		var result=outVertex ? outVertex :p;
		var color=this.borderColor;
		var r=((color >> 16)& 0x0000ff)/ 255,g=((color >> 8)& 0xff)/ 255,b=(color & 0x0000ff)/ 255;
		var firstPoint=[points[0],points[1]];
		var lastPoint=[points[points.length-5],points[points.length-4]];
		var midPointX=lastPoint[0]+(firstPoint[0]-lastPoint[0])*0.5;
		var midPointY=lastPoint[1]+(firstPoint[1]-lastPoint[1])*0.5;
		points.unshift(midPointX,midPointY,0,0,0);
		points.push(midPointX,midPointY,0,0,0);
		var length=points.length / 5;
		var iStart=len,w=lineWidth / 2;
		var px,py,p1x,p1y,p2x,p2y,p3x,p3y;
		var perpx,perpy,perp2x,perp2y,perp3x,perp3y;
		var a1,b1,c1,a2,b2,c2;
		var denom,pdist,dist;
		p1x=points[0];
		p1y=points[1];
		p2x=points[5];
		p2y=points[6];
		perpx=-(p1y-p2y);
		perpy=p1x-p2x;
		dist=Math.sqrt(perpx *perpx+perpy *perpy);
		perpx=perpx / dist *w;
		perpy=perpy / dist *w;
		result.push(p1x-perpx,p1y-perpy,r,g,b,p1x+perpx,p1y+perpy,r,g,b);
		for (var i=1;i < length-1;i++){
			p1x=points[(i-1)*5];
			p1y=points[(i-1)*5+1];
			p2x=points[(i)*5];
			p2y=points[(i)*5+1];
			p3x=points[(i+1)*5];
			p3y=points[(i+1)*5+1];
			perpx=-(p1y-p2y);
			perpy=p1x-p2x;
			dist=Math.sqrt(perpx *perpx+perpy *perpy);
			perpx=perpx / dist *w;
			perpy=perpy / dist *w;
			perp2x=-(p2y-p3y);
			perp2y=p2x-p3x;
			dist=Math.sqrt(perp2x *perp2x+perp2y *perp2y);
			perp2x=perp2x / dist *w;
			perp2y=perp2y / dist *w;
			a1=(-perpy+p1y)-(-perpy+p2y);
			b1=(-perpx+p2x)-(-perpx+p1x);
			c1=(-perpx+p1x)*(-perpy+p2y)-(-perpx+p2x)*(-perpy+p1y);
			a2=(-perp2y+p3y)-(-perp2y+p2y);
			b2=(-perp2x+p2x)-(-perp2x+p3x);
			c2=(-perp2x+p3x)*(-perp2y+p2y)-(-perp2x+p2x)*(-perp2y+p3y);
			denom=a1 *b2-a2 *b1;
			if (Math.abs(denom)< 0.1){
				denom+=10.1;
				result.push(p2x-perpx,p2y-perpy,r,g,b,p2x+perpx,p2y+perpy,r,g,b);
				continue ;
			}
			px=(b1 *c2-b2 *c1)/ denom;
			py=(a2 *c1-a1 *c2)/ denom;
			pdist=(px-p2x)*(px-p2x)+(py-p2y)+(py-p2y);
			result.push(px,py,r,g,b,p2x-(px-p2x),p2y-(py-p2y),r,g,b);
		}
		if (outIndex){
			indices=outIndex;
		};
		var groupLen=this.edges+1;
		for (i=1;i < groupLen;i++){
			indices.push(iStart+(i-1)*2,iStart+(i-1)*2+1,iStart+i *2+1,iStart+i *2+1,iStart+i *2,iStart+(i-1)*2);
		}
		indices.push(iStart+(i-1)*2,iStart+(i-1)*2+1,iStart+1,iStart+1,iStart,iStart+(i-1)*2);
		return result;
	}

	return LoopLine;
})(BasePoly)


//class laya.webgl.shapes.Polygon extends laya.webgl.shapes.BasePoly
var Polygon=(function(_super){
	function Polygon(x,y,points,color,borderWidth,borderColor){
		this._points=null;
		this._start=-1;
		this._repaint=false;
		this.earcutTriangles=null;
		this._mat=Matrix.create();
		this._points=points.slice(0,points.length);
		Polygon.__super.call(this,x,y,0,0,this._points.length / 2,color,borderWidth,borderColor);
	}

	__class(Polygon,'laya.webgl.shapes.Polygon',_super);
	var __proto=Polygon.prototype;
	__proto.rebuild=function(point){
		if (!this._repaint){
			this._points.length=0;
			this._points=this._points.concat(point);
		}
	}

	__proto.setMatrix=function(mat){
		mat.copyTo(this._mat);
	}

	__proto.needUpdate=function(mat){
		this._repaint=(this._mat.a==mat.a && this._mat.b==mat.b && this._mat.c==mat.c && this._mat.d==mat.d && this._mat.tx==mat.tx && this._mat.ty==mat.ty);
		return !this._repaint;
	}

	__proto.getData=function(ib,vb,start){
		var indices,i=0;
		var tArray=this._points;
		var tLen=0;
		if (this.mUint16Array && this.mFloat32Array&&this._repaint){
			if (this._start !=start){
				this._start=start;
				indices=[];
				tLen=this.earcutTriangles.length;
				for (i=0;i < tLen;i++){
					indices.push(this.earcutTriangles[i]+start);
				}
				this.mUint16Array=new Uint16Array(indices);
			}
		}
		else {
			this._start=start;
			indices=[];
			var verts=[];
			var vertsEarcut=[];
			var color=this.color;
			var r=((color >> 16)& 0x0000ff)/ 255,g=((color >> 8)& 0xff)/ 255,b=(color & 0x0000ff)/ 255;
			tLen=Math.floor(tArray.length / 2);
			for (i=0;i < tLen;i++){
				verts.push(this.x+tArray[i *2],this.y+tArray[i *2+1],r,g,b);
				vertsEarcut.push(this.x+tArray[i *2],this.y+tArray[i *2+1]);
			}
			this.earcutTriangles=Earcut.earcut(vertsEarcut,null,2);
			tLen=this.earcutTriangles.length;
			for (i=0;i < tLen;i++){
				indices.push(this.earcutTriangles[i]+start);
			}
			this.mUint16Array=new Uint16Array(indices);
			this.mFloat32Array=new Float32Array(verts);
		}
		ib.append(this.mUint16Array);
		vb.append(this.mFloat32Array);
	}

	return Polygon;
})(BasePoly)


//class laya.webgl.submit.SubmitCanvas extends laya.webgl.submit.Submit
var SubmitCanvas=(function(_super){
	function SubmitCanvas(){
		//this._ctx_src=null;
		this._matrix=new Matrix();
		this._matrix4=CONST3D2D.defaultMatrix4.concat();
		SubmitCanvas.__super.call(this,10000);
		this.shaderValue=new Value2D(0,0);
	}

	__class(SubmitCanvas,'laya.webgl.submit.SubmitCanvas',_super);
	var __proto=SubmitCanvas.prototype;
	__proto.renderSubmit=function(){
		if (this._ctx_src._targets){
			this._ctx_src._targets.flush(this._ctx_src);
			return 1;
		};
		var preAlpha=RenderState2D.worldAlpha;
		var preMatrix4=RenderState2D.worldMatrix4;
		var preMatrix=RenderState2D.worldMatrix;
		var preFilters=RenderState2D.worldFilters;
		var preWorldShaderDefines=RenderState2D.worldShaderDefines;
		var v=this.shaderValue;
		var m=this._matrix;
		var m4=this._matrix4;
		var mout=Matrix.TEMP;
		Matrix.mul(m,preMatrix,mout);
		m4[0]=mout.a;
		m4[1]=mout.b;
		m4[4]=mout.c;
		m4[5]=mout.d;
		m4[12]=mout.tx;
		m4[13]=mout.ty;
		RenderState2D.worldMatrix=mout.clone();
		RenderState2D.worldMatrix4=m4;
		RenderState2D.worldAlpha=RenderState2D.worldAlpha *v.alpha;
		if (v.filters && v.filters.length){
			RenderState2D.worldFilters=v.filters;
			RenderState2D.worldShaderDefines=v.defines;
		}
		this._ctx_src.flush();
		RenderState2D.worldAlpha=preAlpha;
		RenderState2D.worldMatrix4=preMatrix4;
		RenderState2D.worldMatrix.destroy();
		RenderState2D.worldMatrix=preMatrix;
		RenderState2D.worldFilters=preFilters;
		RenderState2D.worldShaderDefines=preWorldShaderDefines;
		return 1;
	}

	__proto.releaseRender=function(){
		var cache=SubmitCanvas._cache;
		this._ctx_src=null;
		cache[cache._length++]=this;
	}

	__proto.getRenderType=function(){
		return 10003;
	}

	SubmitCanvas.create=function(ctx_src,alpha,filters){
		var o=(!SubmitCanvas._cache._length)? (new SubmitCanvas()):SubmitCanvas._cache[--SubmitCanvas._cache._length];
		o._ctx_src=ctx_src;
		var v=o.shaderValue;
		v.alpha=alpha;
		v.defines.setValue(0);
		filters && filters.length && v.setFilters(filters);
		return o;
	}

	SubmitCanvas._cache=(SubmitCanvas._cache=[],SubmitCanvas._cache._length=0,SubmitCanvas._cache);
	return SubmitCanvas;
})(Submit)


//class laya.webgl.submit.SubmitTexture extends laya.webgl.submit.Submit
var SubmitTexture=(function(_super){
	function SubmitTexture(renderType){
		this._preIsSameTextureShader=false;
		this._isSameTexture=true;
		this._texs=new Array;
		this._texsID=new Array;
		this._vbPos=new Array;
		(renderType===void 0)&& (renderType=10000);
		SubmitTexture.__super.call(this,renderType);
	}

	__class(SubmitTexture,'laya.webgl.submit.SubmitTexture',_super);
	var __proto=SubmitTexture.prototype;
	__proto.releaseRender=function(){
		var cache=SubmitTexture._cache;
		cache[cache._length++]=this;
		this.shaderValue.release();
		this._preIsSameTextureShader=false;
		this._vb=null;
		this._texs.length=0;
		this._vbPos.length=0;
		this._isSameTexture=true;
	}

	__proto.addTexture=function(tex,vbpos){
		this._texsID[this._texs.length]=tex._uvID;
		this._texs.push(tex);
		this._vbPos.push(vbpos);
	}

	//检查材质是否修改，修改UV，设置是否是同一材质
	__proto.checkTexture=function(){
		if (this._texs.length < 1){
			this._isSameTexture=true;
			return;
		};
		var _tex=this.shaderValue.textureHost;
		var webGLImg=_tex.bitmap;
		if (webGLImg===null)return;
		var vbdata=this._vb.getFloat32Array();
		for (var i=0,s=this._texs.length;i < s;i++){
			var tex=this._texs[i];
			tex.active();
			var newUV=tex.uv;
			if (this._texsID[i]!==tex._uvID){
				this._texsID[i]=tex._uvID;
				var vbPos=this._vbPos[i];
				vbdata[vbPos+2]=newUV[0];
				vbdata[vbPos+3]=newUV[1];
				vbdata[vbPos+6]=newUV[2];
				vbdata[vbPos+7]=newUV[3];
				vbdata[vbPos+10]=newUV[4];
				vbdata[vbPos+11]=newUV[5];
				vbdata[vbPos+14]=newUV[6];
				vbdata[vbPos+15]=newUV[7];
				this._vb.setNeedUpload();
			}
			if (tex.bitmap!==webGLImg){
				this._isSameTexture=false;
			}
		}
	}

	__proto.renderSubmit=function(){
		if (this._numEle===0){
			SubmitTexture._shaderSet=false;
			return 1;
		};
		var _tex=this.shaderValue.textureHost;
		if (_tex){
			var source=_tex.source;
			if (!_tex.bitmap || !source){
				SubmitTexture._shaderSet=false;
				return 1;
			}
			this.shaderValue.texture=source;
		}
		this._vb.bind_upload(this._ib);
		var gl=WebGL.mainContext;
		if (BlendMode.activeBlendFunction!==this._blendFn){
			gl.enable(0x0BE2);
			this._blendFn(gl);
			BlendMode.activeBlendFunction=this._blendFn;
		}
		Stat.drawCall++;
		Stat.trianglesFaces+=this._numEle / 3;
		if (this._preIsSameTextureShader && BaseShader.activeShader && SubmitTexture._shaderSet)
			(BaseShader.activeShader).uploadTexture2D(this.shaderValue.texture);
		else this.shaderValue.upload();
		SubmitTexture._shaderSet=true;
		if (this._texs.length > 1 && !this._isSameTexture){
			var webGLImg=_tex.bitmap;
			var index=0;
			var shader=BaseShader.activeShader;
			for (var i=0,s=this._texs.length;i < s;i++){
				var tex2=this._texs[i];
				if (tex2.bitmap!==webGLImg || (i+1)===s){
					shader.uploadTexture2D(tex2.source);
					gl.drawElements(0x0004,(i-index+1)*6,0x1403,this._startIdx+index *6 *CONST3D2D.BYTES_PIDX);
					webGLImg=tex2.bitmap;
					index=i;
				}
			}
			}else {
			gl.drawElements(0x0004,this._numEle,0x1403,this._startIdx);
		}
		return 1;
	}

	SubmitTexture.create=function(context,ib,vb,pos,sv){
		var o=SubmitTexture._cache._length ? SubmitTexture._cache[--SubmitTexture._cache._length] :new SubmitTexture();
		if (vb==null){
			vb=o._selfVb || (o._selfVb=VertexBuffer2D.create(-1));
			vb.clear();
			pos=0;
		}
		o._ib=ib;
		o._vb=vb;
		o._startIdx=pos *CONST3D2D.BYTES_PIDX;
		o._numEle=0;
		var blendType=context._nBlendType;
		o._blendFn=context._targets ? BlendMode.targetFns[blendType] :BlendMode.fns[blendType];
		o.shaderValue=sv;
		o.shaderValue.setValue(context._shader2D);
		var filters=context._shader2D.filters;
		filters && o.shaderValue.setFilters(filters);
		return o;
	}

	SubmitTexture._cache=(SubmitTexture._cache=[],SubmitTexture._cache._length=0,SubmitTexture._cache);
	SubmitTexture._shaderSet=true;
	return SubmitTexture;
})(Submit)


/**
*与MeshQuadTexture基本相同。不过index不是固定的
*/
//class laya.webgl.utils.MeshTexture extends laya.webgl.utils.Mesh2D
var MeshTexture=(function(_super){
	function MeshTexture(){
		MeshTexture.__super.call(this,laya.webgl.utils.MeshTexture.const_stride,0,0);
		this.canReuse=true;
		this.setAttributes(laya.webgl.utils.MeshTexture._fixattriInfo);
	}

	__class(MeshTexture,'laya.webgl.utils.MeshTexture',_super);
	var __proto=MeshTexture.prototype;
	__proto.addData=function(vertices,uvs,idx,matrix,rgba,ctx){
		var sz=vertices.length / 2;
		var startpos=this._vb.needSize(sz *MeshTexture.const_stride);
		var f32pos=startpos >> 2;
		var vbdata=this._vb.getFloat32Array();
		var ci=0;
		for (var i=0;i < sz;i++){
			var x=vertices[ci],y=vertices[ci+1];
			var x1=x *matrix.a+y *matrix.c+matrix.tx;
			var y1=x *matrix.b+y *matrix.d+matrix.ty;
			vbdata[f32pos++]=x1;vbdata[f32pos++]=y1;
			vbdata[f32pos++]=uvs[ci];vbdata[f32pos++]=uvs[ci+1];
			ci+=2;
		}
		this._vb.setNeedUpload();
		var vertN=this.vertNum;
		if (vertN > 0){
			sz=idx.length;
			if (sz > MeshTexture.tmpIdx.length)MeshTexture.tmpIdx=new Uint16Array(sz);
			for (var ii=0;ii < sz;ii++){
				MeshTexture.tmpIdx[ii]=idx[ii]+vertN;
			}
			this._ib.appendU16Array(MeshTexture.tmpIdx,idx.length);
			}else {
			this._ib.append(idx);
		}
		this._ib.setNeedUpload();
		this.vertNum+=sz;
		this.indexNum+=idx.length;
	}

	/**
	*把本对象放到回收池中，以便getMesh能用。
	*/
	__proto.releaseMesh=function(){
		this._vb._byteLength=0;
		this._ib._byteLength=0;
		this.vertNum=0;
		this.indexNum=0;
		laya.webgl.utils.MeshTexture._POOL.push(this);
	}

	__proto.destroy=function(){
		this._ib.destroy();
		this._vb.destroy();
	}

	MeshTexture.getAMesh=function(){
		if (laya.webgl.utils.MeshTexture._POOL.length){
			return laya.webgl.utils.MeshTexture._POOL.pop();
		}
		return new MeshTexture();
	}

	MeshTexture.const_stride=16;
	MeshTexture._POOL=[];
	__static(MeshTexture,
	['_fixattriInfo',function(){return this._fixattriInfo=[
		0x1406,2,0,
		0x1406,2,8];},'tmpIdx',function(){return this.tmpIdx=new Uint16Array(4);}
	]);
	return MeshTexture;
})(Mesh2D)


/**
*<p> <code>Sprite</code> 是基本的显示图形的显示列表节点。 <code>Sprite</code> 默认没有宽高，默认不接受鼠标事件。通过 <code>graphics</code> 可以绘制图片或者矢量图，支持旋转，缩放，位移等操作。<code>Sprite</code>同时也是容器类，可用来添加多个子节点。</p>
*<p>注意： <code>Sprite</code> 默认没有宽高，可以通过<code>getBounds</code>函数获取；也可手动设置宽高；还可以设置<code>autoSize=true</code>，然后再获取宽高。<code>Sprite</code>的宽高一般用于进行碰撞检测和排版，并不影响显示图像大小，如果需要更改显示图像大小，请使用 <code>scaleX</code> ， <code>scaleY</code> ， <code>scale</code>。</p>
*<p> <code>Sprite</code> 默认不接受鼠标事件，即<code>mouseEnabled=false</code>，但是只要对其监听任意鼠标事件，会自动打开自己以及所有父对象的<code>mouseEnabled=true</code>。所以一般也无需手动设置<code>mouseEnabled</code>。</p>
*<p>LayaAir引擎API设计精简巧妙。核心显示类只有一个<code>Sprite</code>。<code>Sprite</code>针对不同的情况做了渲染优化，所以保证一个类实现丰富功能的同时，又达到高性能。</p>
*
*@example <caption>创建了一个 <code>Sprite</code> 实例。</caption>
*package
*{
	*import laya.display.Sprite;
	*import laya.events.Event;
	*
	*public class Sprite_Example
	*{
		*private var sprite:Sprite;
		*private var shape:Sprite
		*public function Sprite_Example()
		*{
			*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*onInit();
			*}
		*private function onInit():void
		*{
			*sprite=new Sprite();//创建一个 Sprite 类的实例对象 sprite 。
			*sprite.loadImage("resource/ui/bg.png");//加载并显示图片。
			*sprite.x=200;//设置 sprite 对象相对于父容器的水平方向坐标值。
			*sprite.y=200;//设置 sprite 对象相对于父容器的垂直方向坐标值。
			*sprite.pivotX=0;//设置 sprite 对象的水平方法轴心点坐标。
			*sprite.pivotY=0;//设置 sprite 对象的垂直方法轴心点坐标。
			*Laya.stage.addChild(sprite);//将此 sprite 对象添加到显示列表。
			*sprite.on(Event.CLICK,this,onClickSprite);//给 sprite 对象添加点击事件侦听。
			*shape=new Sprite();//创建一个 Sprite 类的实例对象 sprite 。
			*shape.graphics.drawRect(0,0,100,100,"#ccff00","#ff0000",2);//绘制一个有边框的填充矩形。
			*shape.x=400;//设置 shape 对象相对于父容器的水平方向坐标值。
			*shape.y=200;//设置 shape 对象相对于父容器的垂直方向坐标值。
			*shape.width=100;//设置 shape 对象的宽度。
			*shape.height=100;//设置 shape 对象的高度。
			*shape.pivotX=50;//设置 shape 对象的水平方法轴心点坐标。
			*shape.pivotY=50;//设置 shape 对象的垂直方法轴心点坐标。
			*Laya.stage.addChild(shape);//将此 shape 对象添加到显示列表。
			*shape.on(Event.CLICK,this,onClickShape);//给 shape 对象添加点击事件侦听。
			*}
		*private function onClickSprite():void
		*{
			*trace("点击 sprite 对象。");
			*sprite.rotation+=5;//旋转 sprite 对象。
			*}
		*private function onClickShape():void
		*{
			*trace("点击 shape 对象。");
			*shape.rotation+=5;//旋转 shape 对象。
			*}
		*}
	*}
*
*@example
*var sprite;
*var shape;
*Sprite_Example();
*function Sprite_Example()
*{
	*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
	*onInit();
	*}
*function onInit()
*{
	*sprite=new laya.display.Sprite();//创建一个 Sprite 类的实例对象 sprite 。
	*sprite.loadImage("resource/ui/bg.png");//加载并显示图片。
	*sprite.x=200;//设置 sprite 对象相对于父容器的水平方向坐标值。
	*sprite.y=200;//设置 sprite 对象相对于父容器的垂直方向坐标值。
	*sprite.pivotX=0;//设置 sprite 对象的水平方法轴心点坐标。
	*sprite.pivotY=0;//设置 sprite 对象的垂直方法轴心点坐标。
	*Laya.stage.addChild(sprite);//将此 sprite 对象添加到显示列表。
	*sprite.on(Event.CLICK,this,onClickSprite);//给 sprite 对象添加点击事件侦听。
	*shape=new laya.display.Sprite();//创建一个 Sprite 类的实例对象 sprite 。
	*shape.graphics.drawRect(0,0,100,100,"#ccff00","#ff0000",2);//绘制一个有边框的填充矩形。
	*shape.x=400;//设置 shape 对象相对于父容器的水平方向坐标值。
	*shape.y=200;//设置 shape 对象相对于父容器的垂直方向坐标值。
	*shape.width=100;//设置 shape 对象的宽度。
	*shape.height=100;//设置 shape 对象的高度。
	*shape.pivotX=50;//设置 shape 对象的水平方法轴心点坐标。
	*shape.pivotY=50;//设置 shape 对象的垂直方法轴心点坐标。
	*Laya.stage.addChild(shape);//将此 shape 对象添加到显示列表。
	*shape.on(laya.events.Event.CLICK,this,onClickShape);//给 shape 对象添加点击事件侦听。
	*}
*function onClickSprite()
*{
	*console.log("点击 sprite 对象。");
	*sprite.rotation+=5;//旋转 sprite 对象。
	*}
*function onClickShape()
*{
	*console.log("点击 shape 对象。");
	*shape.rotation+=5;//旋转 shape 对象。
	*}
*
*@example
*import Sprite=laya.display.Sprite;
*class Sprite_Example {
	*private sprite:Sprite;
	*private shape:Sprite
	*public Sprite_Example(){
		*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
		*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
		*this.onInit();
		*}
	*private onInit():void {
		*this.sprite=new Sprite();//创建一个 Sprite 类的实例对象 sprite 。
		*this.sprite.loadImage("resource/ui/bg.png");//加载并显示图片。
		*this.sprite.x=200;//设置 sprite 对象相对于父容器的水平方向坐标值。
		*this.sprite.y=200;//设置 sprite 对象相对于父容器的垂直方向坐标值。
		*this.sprite.pivotX=0;//设置 sprite 对象的水平方法轴心点坐标。
		*this.sprite.pivotY=0;//设置 sprite 对象的垂直方法轴心点坐标。
		*Laya.stage.addChild(this.sprite);//将此 sprite 对象添加到显示列表。
		*this.sprite.on(laya.events.Event.CLICK,this,this.onClickSprite);//给 sprite 对象添加点击事件侦听。
		*this.shape=new Sprite();//创建一个 Sprite 类的实例对象 sprite 。
		*this.shape.graphics.drawRect(0,0,100,100,"#ccff00","#ff0000",2);//绘制一个有边框的填充矩形。
		*this.shape.x=400;//设置 shape 对象相对于父容器的水平方向坐标值。
		*this.shape.y=200;//设置 shape 对象相对于父容器的垂直方向坐标值。
		*this.shape.width=100;//设置 shape 对象的宽度。
		*this.shape.height=100;//设置 shape 对象的高度。
		*this.shape.pivotX=50;//设置 shape 对象的水平方法轴心点坐标。
		*this.shape.pivotY=50;//设置 shape 对象的垂直方法轴心点坐标。
		*Laya.stage.addChild(this.shape);//将此 shape 对象添加到显示列表。
		*this.shape.on(laya.events.Event.CLICK,this,this.onClickShape);//给 shape 对象添加点击事件侦听。
		*}
	*private onClickSprite():void {
		*console.log("点击 sprite 对象。");
		*this.sprite.rotation+=5;//旋转 sprite 对象。
		*}
	*private onClickShape():void {
		*console.log("点击 shape 对象。");
		*this.shape.rotation+=5;//旋转 shape 对象。
		*}
	*}
*/
//class laya.display.Sprite extends laya.display.Node
var Sprite=(function(_super){
	function Sprite(){
		/**@private 矩阵变换信息。*/
		this._transform=null;
		/**@private */
		this._tfChanged=false;
		/**@private */
		this._x=0;
		/**@private */
		this._y=0;
		/**@private */
		this._width=0;
		/**@private */
		this._height=0;
		/**@private */
		this._repaint=1;
		/**@private 鼠标状态，0:auto,1:mouseEnabled=false,2:mouseEnabled=true。*/
		this._mouseEnableState=0;
		/**@private Z排序，数值越大越靠前。*/
		this._zOrder=0;
		/**@private */
		this._graphics=null;
		/**@private */
		this._renderType=0;
		/**@private */
		this._optimizeScrollRect=false;
		/**@private */
		this._texture=null;
		/**
		*<p>鼠标事件与此对象的碰撞检测是否可穿透。碰撞检测发生在鼠标事件的捕获阶段，此阶段引擎会从stage开始递归检测stage及其子对象，直到找到命中的目标对象或者未命中任何对象。</p>
		*<p>穿透表示鼠标事件发生的位置处于本对象绘图区域内时，才算命中，而与对象宽高和值为Rectangle对象的hitArea属性无关。如果sprite.hitArea值是HitArea对象，表示显式声明了此对象的鼠标事件响应区域，而忽略对象的宽高、mouseThrough属性。</p>
		*<p>影响对象鼠标事件响应区域的属性为：width、height、hitArea，优先级顺序为：hitArea(type:HitArea)>hitArea(type:Rectangle)>width/height。</p>
		*@default false 不可穿透，此对象的鼠标响应区域由width、height、hitArea属性决定。</p>
		*/
		this.mouseThrough=false;
		/**
		*<p>指定是否自动计算宽高数据。默认值为 false 。</p>
		*<p>Sprite宽高默认为0，并且不会随着绘制内容的变化而变化，如果想根据绘制内容获取宽高，可以设置本属性为true，或者通过getBounds方法获取。设置为true，对性能有一定影响。</p>
		*/
		this.autoSize=false;
		/**
		*<p>指定鼠标事件检测是优先检测自身，还是优先检测其子对象。鼠标事件检测发生在鼠标事件的捕获阶段，此阶段引擎会从stage开始递归检测stage及其子对象，直到找到命中的目标对象或者未命中任何对象。</p>
		*<p>如果为false，优先检测子对象，当有子对象被命中时，中断检测，获得命中目标。如果未命中任何子对象，最后再检测此对象；如果为true，则优先检测本对象，如果本对象没有被命中，直接中断检测，表示没有命中目标；如果本对象被命中，则进一步递归检测其子对象，以确认最终的命中目标。</p>
		*<p>合理使用本属性，能减少鼠标事件检测的节点，提高性能。可以设置为true的情况：开发者并不关心此节点的子节点的鼠标事件检测结果，也就是以此节点作为其子节点的鼠标事件检测依据。</p>
		*<p>Stage对象和UI的View组件默认为true。</p>
		*@default false 优先检测此对象的子对象，当递归检测完所有子对象后，仍然没有找到目标对象，最后再检测此对象。
		*/
		this.hitTestPrior=false;
		/**
		*<p>视口大小，视口外的子对象，将不被渲染(如果想实现裁剪效果，请使用srollRect)，合理使用能提高渲染性能。比如由一个个小图片拼成的地图块，viewport外面的小图片将不渲染</p>
		*<p>srollRect和viewport的区别：<br/>
		*1. srollRect自带裁剪效果，viewport只影响子对象渲染是否渲染，不具有裁剪效果（性能更高）。<br/>
		*2. 设置rect的x,y属性均能实现区域滚动效果，但scrollRect会保持0,0点位置不变。</p>
		*@default null
		*/
		this.viewport=null;
		Sprite.__super.call(this);
		this._style=Style.EMPTY;
	}

	__class(Sprite,'laya.display.Sprite',_super);
	var __proto=Sprite.prototype;
	Laya.imps(__proto,{"laya.display.ILayout":true})
	/**@private */
	__proto.createConchModel=function(){
		return new ConchNode();
	}

	/**@inheritDoc */
	__proto.destroy=function(destroyChild){
		(destroyChild===void 0)&& (destroyChild=true);
		this._releaseMem();
		_super.prototype.destroy.call(this,destroyChild);
		this._style && this._style.destroy();
		this._transform && this._transform.destroy();
		this._transform=null;
		this._style=null;
		this._graphics=null;
	}

	/**根据zOrder进行重新排序。*/
	__proto.updateZOrder=function(){
		Utils.updateOrder(this._childs)&& this.repaint();
	}

	/**在设置cacheAs的情况下，调用此方法会重新刷新缓存。*/
	__proto.reCache=function(){
		if (this._$P.cacheCanvas)this._$P.cacheCanvas.reCache=true;
		this._repaint=1;
	}

	/**
	*<p>设置对象在自身坐标系下的边界范围。与 <code>getSelfBounds</code> 对应。当 autoSize==true 时，会影响对象宽高。设置后，当需要获取自身边界范围时，就不再需要计算，合理使用能提高性能。比如 <code>getBounds</code> 会优先使用 <code>setBounds</code> 指定的值，如果没有指定则进行计算，此计算会对性能消耗比较大。</p>
	*<p><b>注意：</b> <code>setBounds</code> 与 <code>getBounds</code> 并非对应相等关系， <code>getBounds</code> 获取的是本对象在父容器坐标系下的边界范围，通过设置 <code>setBounds</code> 会影响 <code>getBounds</code> 的结果。</p>
	*@param bound bounds矩形区域
	*/
	__proto.setBounds=function(bound){
		this._set$P("uBounds",bound);
	}

	/**
	*<p>获取本对象在父容器坐标系的矩形显示区域。</p>
	*<p><b>注意：</b> 1.计算量较大，尽量少用，如果需要频繁使用，可以通过手动设置 <code>setBounds</code> 来缓存自身边界信息，从而避免比较消耗性能的计算。2. <code>setBounds</code> 与 <code>getBounds</code> 并非对应相等关系， <code>getBounds</code> 获取的是本对象在父容器坐标系下的边界范围，通过设置 <code>setBounds</code> 会影响 <code>getBounds</code> 的结果。</p>
	*@return 矩形区域。
	*/
	__proto.getBounds=function(){
		if (!this._$P.mBounds)this._set$P("mBounds",new Rectangle());
		return Rectangle._getWrapRec(this._boundPointsToParent(),this._$P.mBounds);
	}

	/**
	*获取对象在自身坐标系的边界范围。与 <code>setBounds</code> 对应。
	*<p><b>注意：</b>计算量较大，尽量少用，如果需要频繁使用，可以提前手动设置 <code>setBounds</code> 来缓存自身边界信息，从而避免比较消耗性能的计算。</p>
	*@return 矩形区域。
	*/
	__proto.getSelfBounds=function(){
		if (this._$P.uBounds)return this._$P.uBounds;
		if (!this._$P.mBounds)this._set$P("mBounds",new Rectangle());
		return Rectangle._getWrapRec(this._getBoundPointsM(false),this._$P.mBounds);
	}

	/**
	*@private
	*获取本对象在父容器坐标系的显示区域多边形顶点列表。
	*当显示对象链中有旋转时，返回多边形顶点列表，无旋转时返回矩形的四个顶点。
	*@param ifRotate （可选）之前的对象链中是否有旋转。
	*@return 顶点列表。结构：[x1,y1,x2,y2,x3,y3,...]。
	*/
	__proto._boundPointsToParent=function(ifRotate){
		(ifRotate===void 0)&& (ifRotate=false);
		var pX=0,pY=0;
		if (this._style){
			pX=this._style._tf.translateX;
			pY=this._style._tf.translateY;
			ifRotate=ifRotate || (this._style._tf.rotate!==0);
			if (this._style.scrollRect){
				pX+=this._style.scrollRect.x;
				pY+=this._style.scrollRect.y;
			}
		};
		var pList=this._getBoundPointsM(ifRotate);
		if (!pList || pList.length < 1)return pList;
		if (pList.length !=8){
			pList=ifRotate ? GrahamScan.scanPList(pList):Rectangle._getWrapRec(pList,Rectangle.TEMP)._getBoundPoints();
		}
		if (!this.transform){
			Utils.transPointList(pList,this._x-pX,this._y-pY);
			return pList;
		};
		var tPoint=Point.TEMP;
		var i=0,len=pList.length;
		for (i=0;i < len;i+=2){
			tPoint.x=pList[i];
			tPoint.y=pList[i+1];
			this.toParentPoint(tPoint);
			pList[i]=tPoint.x;
			pList[i+1]=tPoint.y;
		}
		return pList;
	}

	/**
	*返回此实例中的绘图对象（ <code>Graphics</code> ）的显示区域，不包括子对象。
	*@param realSize （可选）使用图片的真实大小，默认为false
	*@return 一个 Rectangle 对象，表示获取到的显示区域。
	*/
	__proto.getGraphicBounds=function(realSize){
		(realSize===void 0)&& (realSize=false);
		if (!this._graphics)return Rectangle.TEMP.setTo(0,0,0,0);
		return this._graphics.getBounds(realSize);
	}

	/**
	*@private
	*获取自己坐标系的显示区域多边形顶点列表
	*@param ifRotate （可选）当前的显示对象链是否由旋转
	*@return 顶点列表。结构：[x1,y1,x2,y2,x3,y3,...]。
	*/
	__proto._getBoundPointsM=function(ifRotate){
		(ifRotate===void 0)&& (ifRotate=false);
		if (this._$P.uBounds)return this._$P.uBounds._getBoundPoints();
		if (!this._$P.temBM)this._set$P("temBM",[]);
		if (this.scrollRect){
			var rst=Utils.clearArray(this._$P.temBM);
			var rec=Rectangle.TEMP;
			rec.copyFrom(this.scrollRect);
			Utils.concatArray(rst,rec._getBoundPoints());
			return rst;
		};
		var pList=this._graphics ? this._graphics.getBoundPoints():Utils.clearArray(this._$P.temBM);
		var child;
		var cList;
		var __childs;
		__childs=this._childs;
		for (var i=0,n=__childs.length;i < n;i++){
			child=__childs [i];
			if ((child instanceof laya.display.Sprite )&& child.visible==true){
				cList=child._boundPointsToParent(ifRotate);
				if (cList)
					pList=pList ? Utils.concatArray(pList,cList):cList;
			}
		}
		return pList;
	}

	/**
	*@private
	*获取样式。
	*@return 样式 Style 。
	*/
	__proto.getStyle=function(){
		this._style===Style.EMPTY && (this._style=new Style());
		return this._style;
	}

	/**
	*@private
	*设置样式。
	*@param value 样式。
	*/
	__proto.setStyle=function(value){
		this._style=value;
	}

	/**@private */
	__proto._adjustTransform=function(){
		'use strict';
		this._tfChanged=false;
		var style=this._style;
		var tf=style._tf;
		var sx=tf.scaleX,sy=tf.scaleY;
		var m;
		if (tf.rotate || sx!==1 || sy!==1 || tf.skewX || tf.skewY){
			m=this._transform || (this._transform=Matrix.create());
			m.bTransform=true;
			var skx=(tf.rotate-tf.skewX)*0.0174532922222222;
			var sky=(tf.rotate+tf.skewY)*0.0174532922222222;
			var cx=Math.cos(sky);
			var ssx=Math.sin(sky);
			var cy=Math.sin(skx);
			var ssy=Math.cos(skx);
			m.a=sx *cx;
			m.b=sx *ssx;
			m.c=-sy *cy;
			m.d=sy *ssy;
			m.tx=m.ty=0;
			return m;
			}else {
			this._transform && this._transform.destroy();
			this._transform=null;
			this._renderType &=~0x04;
		}
		return m;
	}

	/**
	*<p>设置坐标位置。相当于分别设置x和y属性。</p>
	*<p>因为返回值为Sprite对象本身，所以可以使用如下语法：spr.pos(...).scale(...);</p>
	*@param x X轴坐标。
	*@param y Y轴坐标。
	*@param speedMode （可选）是否极速模式，正常是调用this.x=value进行赋值，极速模式直接调用内部函数处理，如果未重写x,y属性，建议设置为急速模式性能更高。
	*@return 返回对象本身。
	*/
	__proto.pos=function(x,y,speedMode){
		(speedMode===void 0)&& (speedMode=false);
		if (this._x!==x || this._y!==y){
			if (this.destroyed)return this;
			if (speedMode){
				this._x=x;
				this._y=y;
				this.conchModel && this.conchModel.pos(this._x,this._y);
				var p=this._parent;
				if (p && p._repaint===0){
					p._repaint=1;
					p.parentRepaint();
				}
				if (this._$P.maskParent && this._$P.maskParent._repaint===0){
					this._$P.maskParent._repaint=1;
					this._$P.maskParent.parentRepaint();
				}
				}else {
				this.x=x;
				this.y=y;
			}
		}
		return this;
	}

	/**
	*<p>设置轴心点。相当于分别设置pivotX和pivotY属性。</p>
	*<p>因为返回值为Sprite对象本身，所以可以使用如下语法：spr.pivot(...).pos(...);</p>
	*@param x X轴心点。
	*@param y Y轴心点。
	*@return 返回对象本身。
	*/
	__proto.pivot=function(x,y){
		this.pivotX=x;
		this.pivotY=y;
		return this;
	}

	/**
	*<p>设置宽高。相当于分别设置width和height属性。</p>
	*<p>因为返回值为Sprite对象本身，所以可以使用如下语法：spr.size(...).pos(...);</p>
	*@param width 宽度值。
	*@param hegiht 高度值。
	*@return 返回对象本身。
	*/
	__proto.size=function(width,height){
		this.width=width;
		this.height=height;
		return this;
	}

	/**
	*<p>设置缩放。相当于分别设置scaleX和scaleY属性。</p>
	*<p>因为返回值为Sprite对象本身，所以可以使用如下语法：spr.scale(...).pos(...);</p>
	*@param scaleX X轴缩放比例。
	*@param scaleY Y轴缩放比例。
	*@param speedMode （可选）是否极速模式，正常是调用this.scaleX=value进行赋值，极速模式直接调用内部函数处理，如果未重写scaleX,scaleY属性，建议设置为急速模式性能更高。
	*@return 返回对象本身。
	*/
	__proto.scale=function(scaleX,scaleY,speedMode){
		(speedMode===void 0)&& (speedMode=false);
		var style=this.getStyle();
		var _tf=style._tf;
		if (_tf.scaleX !=scaleX || _tf.scaleY !=scaleY){
			if (this.destroyed)return this;
			if (speedMode){
				style.setScale(scaleX,scaleY);
				this._tfChanged=true;
				this.conchModel && this.conchModel.scale(scaleX,scaleY);
				this._renderType |=0x04;
				var p=this._parent;
				if (p && p._repaint===0){
					p._repaint=1;
					p.parentRepaint();
				}
				}else {
				this.scaleX=scaleX;
				this.scaleY=scaleY;
			}
		}
		return this;
	}

	/**
	*<p>设置倾斜角度。相当于分别设置skewX和skewY属性。</p>
	*<p>因为返回值为Sprite对象本身，所以可以使用如下语法：spr.skew(...).pos(...);</p>
	*@param skewX 水平倾斜角度。
	*@param skewY 垂直倾斜角度。
	*@return 返回对象本身
	*/
	__proto.skew=function(skewX,skewY){
		this.skewX=skewX;
		this.skewY=skewY;
		return this;
	}

	/**
	*更新、呈现显示对象。由系统调用。
	*@param context 渲染的上下文引用。
	*@param x X轴坐标。
	*@param y Y轴坐标。
	*/
	__proto.render=function(context,x,y){
		Stat.spriteCount++;
		RenderSprite.renders[this._renderType]._fun(this,context,x+this._x,y+this._y);
		this._repaint=0;
	}

	/**
	*<p>绘制 当前<code>Sprite</code> 到 <code>Canvas</code> 上，并返回一个HtmlCanvas。</p>
	*<p>绘制的结果可以当作图片源，再次绘制到其他Sprite里面，示例：</p>
	*
	*var htmlCanvas:HTMLCanvas=sprite.drawToCanvas(100,100,0,0);//把精灵绘制到canvas上面
	*var texture:Texture=new Texture(htmlCanvas);//使用htmlCanvas创建Texture
	*var sp:Sprite=new Sprite().pos(0,200);//创建精灵并把它放倒200位置
	*sp.graphics.drawTexture(texture);//把截图绘制到精灵上
	*Laya.stage.addChild(sp);//把精灵显示到舞台
	*
	*<p>也可以获取原始图片数据，分享到网上，从而实现截图效果，示例：</p>
	*
	*var htmlCanvas:HTMLCanvas=sprite.drawToCanvas(100,100,0,0);//把精灵绘制到canvas上面
	*
	*htmlCanvas.toBase64("image/png",0.92,function(base64){//webgl和canvas模式下为同步方法，加速器下是异步方法
		*trace(base64);//打印图片base64信息，可以发给服务器或者保存为图片
		*});
	*
	*@param canvasWidth 画布宽度。
	*@param canvasHeight 画布高度。
	*@param x 绘制的 X 轴偏移量。
	*@param y 绘制的 Y 轴偏移量。
	*@return HTMLCanvas 对象。
	*/
	__proto.drawToCanvas=function(canvasWidth,canvasHeight,offsetX,offsetY){
		if (Render.isConchNode){
			var canvas=HTMLCanvas.create("2D");
			var context=new RenderContext(canvasWidth,canvasHeight,canvas);
			context.ctx.setCanvasType(1);
			this.conchModel.drawToCanvas(canvas.source,offsetX,offsetY);
			return canvas;
			}else {
			return RunDriver.drawToCanvas(this,this._renderType,canvasWidth,canvasHeight,offsetX,offsetY);
		}
	}

	/**
	*<p>自定义更新、呈现显示对象。一般用来扩展渲染模式，请合理使用，可能会导致在加速器上无法渲染。</p>
	*<p><b>注意</b>不要在此函数内增加或删除树节点，否则会对树节点遍历造成影响。</p>
	*@param context 渲染的上下文引用。
	*@param x X轴坐标。
	*@param y Y轴坐标。
	*/
	__proto.customRender=function(context,x,y){
		this._renderType |=0x400;
	}

	/**
	*@private
	*应用滤镜。
	*/
	__proto._applyFilters=function(){
		if (Render.isWebGL)return;
		var _filters;
		_filters=this._$P.filters;
		if (!_filters || _filters.length < 1)return;
		for (var i=0,n=_filters.length;i < n;i++){
			_filters[i].action.apply(this._$P.cacheCanvas);
		}
	}

	/**
	*@private
	*查看当前原件中是否包含发光滤镜。
	*@return 一个 Boolean 值，表示当前原件中是否包含发光滤镜。
	*/
	__proto._isHaveGlowFilter=function(){
		var i=0,len=0;
		if (this.filters){
			for (i=0;i < this.filters.length;i++){
				if (this.filters[i].type==0x08){
					return true;
				}
			}
		}
		for (i=0,len=this._childs.length;i < len;i++){
			if (this._childs[i]._isHaveGlowFilter()){
				return true;
			}
		}
		return false;
	}

	/**
	*把本地坐标转换为相对stage的全局坐标。
	*@param point 本地坐标点。
	*@param createNewPoint （可选）是否创建一个新的Point对象作为返回值，默认为false，使用输入的point对象返回，减少对象创建开销。
	*@return 转换后的坐标的点。
	*/
	__proto.localToGlobal=function(point,createNewPoint){
		(createNewPoint===void 0)&& (createNewPoint=false);
		if (createNewPoint===true){
			point=new Point(point.x,point.y);
		};
		var ele=this;
		while (ele){
			if (ele==Laya.stage)break ;
			point=ele.toParentPoint(point);
			ele=ele.parent;
		}
		return point;
	}

	/**
	*把stage的全局坐标转换为本地坐标。
	*@param point 全局坐标点。
	*@param createNewPoint （可选）是否创建一个新的Point对象作为返回值，默认为false，使用输入的point对象返回，减少对象创建开销。
	*@return 转换后的坐标的点。
	*/
	__proto.globalToLocal=function(point,createNewPoint){
		(createNewPoint===void 0)&& (createNewPoint=false);
		if (createNewPoint){
			point=new Point(point.x,point.y);
		};
		var ele=this;
		var list=[];
		while (ele){
			if (ele==Laya.stage)break ;
			list.push(ele);
			ele=ele.parent;
		};
		var i=list.length-1;
		while (i >=0){
			ele=list[i];
			point=ele.fromParentPoint(point);
			i--;
		}
		return point;
	}

	/**
	*将本地坐标系坐标转转换到父容器坐标系。
	*@param point 本地坐标点。
	*@return 转换后的点。
	*/
	__proto.toParentPoint=function(point){
		if (!point)return point;
		point.x-=this.pivotX;
		point.y-=this.pivotY;
		if (this.transform){
			this._transform.transformPoint(point);
		}
		point.x+=this._x;
		point.y+=this._y;
		var scroll=this._style.scrollRect;
		if (scroll){
			point.x-=scroll.x;
			point.y-=scroll.y;
		}
		return point;
	}

	/**
	*将父容器坐标系坐标转换到本地坐标系。
	*@param point 父容器坐标点。
	*@return 转换后的点。
	*/
	__proto.fromParentPoint=function(point){
		if (!point)return point;
		point.x-=this._x;
		point.y-=this._y;
		var scroll=this._style.scrollRect;
		if (scroll){
			point.x+=scroll.x;
			point.y+=scroll.y;
		}
		if (this.transform){
			this._transform.invertTransformPoint(point);
		}
		point.x+=this.pivotX;
		point.y+=this.pivotY;
		return point;
	}

	/**
	*<p>增加事件侦听器，以使侦听器能够接收事件通知。</p>
	*<p>如果侦听鼠标事件，则会自动设置自己和父亲节点的属性 mouseEnabled 的值为 true(如果父节点mouseEnabled=false，则停止设置父节点mouseEnabled属性)。</p>
	*@param type 事件的类型。
	*@param caller 事件侦听函数的执行域。
	*@param listener 事件侦听函数。
	*@param args （可选）事件侦听函数的回调参数。
	*@return 此 EventDispatcher 对象。
	*/
	__proto.on=function(type,caller,listener,args){
		if (this._mouseEnableState!==1 && this.isMouseEvent(type)){
			this.mouseEnabled=true;
			this._setBit(0x2,true);
			if (this._parent){
				this._$2__onDisplay();
			}
			return this._createListener(type,caller,listener,args,false);
		}
		return _super.prototype.on.call(this,type,caller,listener,args);
	}

	/**
	*<p>增加事件侦听器，以使侦听器能够接收事件通知，此侦听事件响应一次后则自动移除侦听。</p>
	*<p>如果侦听鼠标事件，则会自动设置自己和父亲节点的属性 mouseEnabled 的值为 true(如果父节点mouseEnabled=false，则停止设置父节点mouseEnabled属性)。</p>
	*@param type 事件的类型。
	*@param caller 事件侦听函数的执行域。
	*@param listener 事件侦听函数。
	*@param args （可选）事件侦听函数的回调参数。
	*@return 此 EventDispatcher 对象。
	*/
	__proto.once=function(type,caller,listener,args){
		if (this._mouseEnableState!==1 && this.isMouseEvent(type)){
			this.mouseEnabled=true;
			this._setBit(0x2,true);
			if (this._parent){
				this._$2__onDisplay();
			}
			return this._createListener(type,caller,listener,args,true);
		}
		return _super.prototype.once.call(this,type,caller,listener,args);
	}

	/**@private */
	__proto._$2__onDisplay=function(){
		if (this._mouseEnableState!==1){
			var ele=this;
			ele=ele.parent;
			while (ele && ele._mouseEnableState!==1){
				if (ele._getBit(0x2))break ;
				ele.mouseEnabled=true;
				ele._setBit(0x2,true);
				ele=ele.parent;
			}
		}
	}

	/**
	*<p>加载并显示一个图片。功能等同于graphics.loadImage方法。支持异步加载。</p>
	*<p>注意：多次调用loadImage绘制不同的图片，会同时显示。</p>
	*@param url 图片地址。
	*@param x （可选）显示图片的x位置。
	*@param y （可选）显示图片的y位置。
	*@param width （可选）显示图片的宽度，设置为0表示使用图片默认宽度。
	*@param height （可选）显示图片的高度，设置为0表示使用图片默认高度。
	*@param complete （可选）加载完成回调。
	*@return 返回精灵对象本身。
	*/
	__proto.loadImage=function(url,x,y,width,height,complete){
		var _$this=this;
		(x===void 0)&& (x=0);
		(y===void 0)&& (y=0);
		(width===void 0)&& (width=0);
		(height===void 0)&& (height=0);
		function loaded (tex){
			if (!_$this.destroyed){
				_$this.size(x+(width || tex.width),y+(height || tex.height));
				_$this.repaint();
				complete && complete.runWith(tex);
			}
		}
		this.graphics.loadImage(url,x,y,width,height,loaded);
		return this;
	}

	/**cacheAs后，设置自己和父对象缓存失效。*/
	__proto.repaint=function(){
		this.conchModel && this.conchModel.repaint && this.conchModel.repaint();
		if (this._repaint===0){
			this._repaint=1;
			this.parentRepaint();
		}
		if (this._$P && this._$P.maskParent){
			this._$P.maskParent.repaint();
		}
	}

	/**
	*@private
	*获取是否重新缓存。
	*@return 如果重新缓存值为 true，否则值为 false。
	*/
	__proto._needRepaint=function(){
		return (this._repaint!==0)&& this._$P.cacheCanvas && this._$P.cacheCanvas.reCache;
	}

	/**@private */
	__proto._childChanged=function(child){
		if (this._childs.length)this._renderType |=0x800;
		else this._renderType &=~0x800;
		if (child && this._get$P("hasZorder"))Laya.timer.callLater(this,this.updateZOrder);
		this.repaint();
	}

	/**cacheAs时，设置所有父对象缓存失效。 */
	__proto.parentRepaint=function(){
		var p=this._parent;
		if (p && p._repaint===0){
			p._repaint=1;
			p.parentRepaint();
		}
	}

	/**
	*开始拖动此对象。
	*@param area （可选）拖动区域，此区域为当前对象注册点活动区域（不包括对象宽高），可选。
	*@param hasInertia （可选）鼠标松开后，是否还惯性滑动，默认为false，可选。
	*@param elasticDistance （可选）橡皮筋效果的距离值，0为无橡皮筋效果，默认为0，可选。
	*@param elasticBackTime （可选）橡皮筋回弹时间，单位为毫秒，默认为300毫秒，可选。
	*@param data （可选）拖动事件携带的数据，可选。
	*@param disableMouseEvent （可选）禁用其他对象的鼠标检测，默认为false，设置为true能提高性能。
	*@param ratio （可选）惯性阻尼系数，影响惯性力度和时长。
	*/
	__proto.startDrag=function(area,hasInertia,elasticDistance,elasticBackTime,data,disableMouseEvent,ratio){
		(hasInertia===void 0)&& (hasInertia=false);
		(elasticDistance===void 0)&& (elasticDistance=0);
		(elasticBackTime===void 0)&& (elasticBackTime=300);
		(disableMouseEvent===void 0)&& (disableMouseEvent=false);
		(ratio===void 0)&& (ratio=0.92);
		this._$P.dragging || (this._set$P("dragging",new Dragging()));
		this._$P.dragging.start(this,area,hasInertia,elasticDistance,elasticBackTime,data,disableMouseEvent,ratio);
	}

	/**停止拖动此对象。*/
	__proto.stopDrag=function(){
		this._$P.dragging && this._$P.dragging.stop();
	}

	__proto._releaseMem=function(){
		if (!this._$P)return;
		var cc=this._$P.cacheCanvas;
		if (cc && cc.ctx){
			Pool.recover("RenderContext",cc.ctx);
			cc.ctx.canvas.size(0,0);
			cc.ctx=null;
		};
		var fc=this._$P._filterCache;
		if (fc){
			fc.destroy();
			fc.recycle();
			this._set$P('_filterCache',null);
		}
		this._$P._isHaveGlowFilter && this._set$P('_isHaveGlowFilter',false);
		this._$P._isHaveGlowFilter=null;
	}

	/**@private */
	__proto._setDisplay=function(value){
		if (!value)this._releaseMem();
		_super.prototype._setDisplay.call(this,value);
	}

	/**
	*检测某个点是否在此对象内。
	*@param x 全局x坐标。
	*@param y 全局y坐标。
	*@return 表示是否在对象内。
	*/
	__proto.hitTestPoint=function(x,y){
		var point=this.globalToLocal(Point.TEMP.setTo(x,y));
		x=point.x;
		y=point.y;
		var rect=this._$P.hitArea ? this._$P.hitArea :(this._width > 0 && this._height > 0)? Rectangle.TEMP.setTo(0,0,this._width,this._height):this.getSelfBounds();
		return rect.contains(x,y);
	}

	/**获得相对于本对象上的鼠标坐标信息。*/
	__proto.getMousePoint=function(){
		return this.globalToLocal(Point.TEMP.setTo(Laya.stage.mouseX,Laya.stage.mouseY));
	}

	/**@private */
	__proto._getWords=function(){
		return null;
	}

	/**@private */
	__proto._addChildsToLayout=function(out){
		var words=this._getWords();
		if (words==null && this._childs.length==0)return false;
		if (words){
			for (var i=0,n=words.length;i < n;i++){
				out.push(words[i]);
			}
		}
		this._childs.forEach(function(o,index,array){
			o._style._enableLayout()&& o._addToLayout(out);
		});
		return true;
	}

	/**@private */
	__proto._addToLayout=function(out){
		if (this._style.absolute)return;
		this._style.block ? out.push(this):(this._addChildsToLayout(out)&& (this.x=this.y=0));
	}

	/**@private */
	__proto._isChar=function(){
		return false;
	}

	/**@private */
	__proto._getCSSStyle=function(){
		return this._style.getCSSStyle();
	}

	/**
	*@private
	*设置指定属性名的属性值。
	*@param name 属性名。
	*@param value 属性值。
	*/
	__proto._setAttributes=function(name,value){
		switch (name){
			case 'x':
				this.x=parseFloat(value);
				break ;
			case 'y':
				this.y=parseFloat(value);
				break ;
			case 'width':
				this.width=parseFloat(value);
				break ;
			case 'height':
				this.height=parseFloat(value);
				break ;
			default :
				this[name]=value;
			}
	}

	/**
	*@private
	*/
	__proto._layoutLater=function(){
		this.parent && (this.parent)._layoutLater();
	}

	/**
	*<p>指定是否对使用了 scrollRect 的显示对象进行优化处理。默认为false(不优化)。</p>
	*<p>当值为ture时：将对此对象使用了scrollRect 设定的显示区域以外的显示内容不进行渲染，以提高性能(如果子对象有旋转缩放或者中心点偏移，则显示筛选会不精确)。</p>
	*/
	__getset(0,__proto,'optimizeScrollRect',function(){
		return this._optimizeScrollRect;
		},function(b){
		if (this._optimizeScrollRect !=b){
			this._optimizeScrollRect=b;
			this.conchModel && this.conchModel.optimizeScrollRect(b);
		}
	});

	/**
	*设置是否开启自定义渲染，只有开启自定义渲染，才能使用customRender函数渲染。
	*/
	__getset(0,__proto,'customRenderEnable',null,function(b){
		if (b){
			this._renderType |=0x400;
			if (Render.isConchNode){
				Sprite.CustomList.push(this);
				var canvas=new HTMLCanvas("2d");
				canvas._setContext(new CanvasRenderingContext2D());
				this.customContext=new RenderContext(0,0,canvas);
				canvas.context.setCanvasType && canvas.context.setCanvasType(2);
				this.conchModel.custom(canvas.context);
			}
		}
	});

	/**
	*指定显示对象是否缓存为静态图像。功能同cacheAs的normal模式。建议优先使用cacheAs代替。
	*/
	__getset(0,__proto,'cacheAsBitmap',function(){
		return this.cacheAs!=="none";
		},function(value){
		this.cacheAs=value ? (this._$P["hasFilter"] ? "none" :"normal"):"none";
	});

	/**
	*<p>指定显示对象是否缓存为静态图像，cacheAs时，子对象发生变化，会自动重新缓存，同时也可以手动调用reCache方法更新缓存。</p>
	*<p>建议把不经常变化的“复杂内容”缓存为静态图像，能极大提高渲染性能。cacheAs有"none"，"normal"和"bitmap"三个值可选。
	*<li>默认为"none"，不做任何缓存。</li>
	*<li>当值为"normal"时，canvas模式下进行画布缓存，webgl模式下进行命令缓存。</li>
	*<li>当值为"bitmap"时，canvas模式下进行依然是画布缓存，webgl模式下使用renderTarget缓存。</li></p>
	*<p>webgl下renderTarget缓存模式缺点：会额外创建renderTarget对象，增加内存开销，缓存面积有最大2048限制，不断重绘时会增加CPU开销。优点：大幅减少drawcall，渲染性能最高。
	*webgl下命令缓存模式缺点：只会减少节点遍历及命令组织，不会减少drawcall数，性能中等。优点：没有额外内存开销，无需renderTarget支持。</p>
	*/
	__getset(0,__proto,'cacheAs',function(){
		return this._$P.cacheCanvas==null ? "none" :this._$P.cacheCanvas.type;
		},function(value){
		var cacheCanvas=this._$P.cacheCanvas;
		if (value===(cacheCanvas ? cacheCanvas.type :"none"))return;
		if (value!=="none"){
			if (!this._getBit(0x1))this._setUpNoticeType(0x1);
			cacheCanvas || (cacheCanvas=this._set$P("cacheCanvas",Pool.getItemByClass("cacheCanvas",Object)));
			cacheCanvas.type=value;
			cacheCanvas.reCache=true;
			this._renderType |=0x10;
			if (value=="bitmap")this.conchModel && this.conchModel.cacheAs(1);
			this._set$P("cacheForFilters",false);
			}else {
			if (this._$P["hasFilter"]){
				this._set$P("cacheForFilters",true);
				}else {
				if (cacheCanvas){
					var cc=cacheCanvas;
					if (cc && cc.ctx){
						Pool.recover("RenderContext",cc.ctx);
						cc.ctx.canvas.size(0,0);
						cc.ctx=null;
					}
					Pool.recover("cacheCanvas",cacheCanvas);
				}
				this._$P.cacheCanvas=null;
				this._renderType &=~0x10;
				this.conchModel && this.conchModel.cacheAs(0);
			}
		}
		this.repaint();
	});

	/**z排序，更改此值，则会按照值的大小对同一容器的所有对象重新排序。值越大，越靠上。默认为0，则根据添加顺序排序。*/
	__getset(0,__proto,'zOrder',function(){
		return this._zOrder;
		},function(value){
		if (this._zOrder !=value){
			this._zOrder=value;
			this.conchModel && this.conchModel.setZOrder && this.conchModel.setZOrder(value);
			if (this._parent){
				value && this._parent._set$P("hasZorder",true);
				Laya.timer.callLater(this._parent,this.updateZOrder);
			}
		}
	});

	/**旋转角度，默认值为0。以角度为单位。*/
	__getset(0,__proto,'rotation',function(){
		return this._style._tf.rotate;
		},function(value){
		var style=this.getStyle();
		if (style._tf.rotate!==value){
			style.setRotate(value);
			this._tfChanged=true;
			this.conchModel && this.conchModel.rotate(value);
			this._renderType |=0x04;
			var p=this._parent;
			if (p && p._repaint===0){
				p._repaint=1;
				p.parentRepaint();
			}
		}
	});

	/**
	*<p>显示对象的宽度，单位为像素，默认为0。</p>
	*<p>此宽度用于鼠标碰撞检测，并不影响显示对象图像大小。需要对显示对象的图像进行缩放，请使用scale、scaleX、scaleY。</p>
	*<p>可以通过getbounds获取显示对象图像的实际宽度。</p>
	*/
	__getset(0,__proto,'width',function(){
		if (!this.autoSize)return this._width;
		return this.getSelfBounds().width;
		},function(value){
		if (this._width!==value){
			this._width=value;
			this.conchModel && this.conchModel.size(value,this._height)
			this.repaint();
		}
	});

	/**表示显示对象相对于父容器的水平方向坐标值。*/
	__getset(0,__proto,'x',function(){
		return this._x;
		},function(value){
		if (this._x!==value){
			if (this.destroyed)return;
			this._x=value;
			this.conchModel && this.conchModel.pos(value,this._y);
			var p=this._parent;
			if (p && p._repaint===0){
				p._repaint=1;
				p.parentRepaint();
			}
			if (this._$P.maskParent && this._$P.maskParent._repaint===0){
				this._$P.maskParent._repaint=1;
				this._$P.maskParent.parentRepaint();
			}
		}
	});

	/**
	*获得相对于stage的全局Y轴缩放值（会叠加父亲节点的缩放值）。
	*/
	__getset(0,__proto,'globalScaleY',function(){
		var scale=1;
		var ele=this;
		while (ele){
			if (ele===Laya.stage)break ;
			scale *=ele.scaleY;
			ele=ele.parent;
		}
		return scale;
	});

	/**
	*<p>可以设置一个Rectangle区域作为点击区域，或者设置一个<code>HitArea</code>实例作为点击区域，HitArea内可以设置可点击和不可点击区域。</p>
	*<p>如果不设置hitArea，则根据宽高形成的区域进行碰撞。</p>
	*/
	__getset(0,__proto,'hitArea',function(){
		return this._$P.hitArea;
		},function(value){
		this._set$P("hitArea",value);
	});

	/**
	*是否静态缓存此对象的当前帧的最终属性。为 true 时，子对象变化时不会自动更新缓存，但是可以通过调用 reCache 方法手动刷新。
	*<b>注意：</b> 1. 设置 cacheAs 为非空和非"none"时才有效。 2. 由于渲染的时机在脚本执行之后，也就是说当前帧渲染的是对象的最终属性，所以如果在当前帧渲染之前、设置静态缓存之后改变对象属性，则最终渲染结果表现的是对象的最终属性。
	*/
	__getset(0,__proto,'staticCache',function(){
		return this._$P.staticCache;
		},function(value){
		this._set$P("staticCache",value);
		if (!value)this.reCache();
	});

	/**设置一个Texture实例，并显示此图片（如果之前有其他绘制，则会被清除掉）。等同于graphics.clear();graphics.drawTexture()*/
	__getset(0,__proto,'texture',function(){
		return this._texture;
		},function(value){
		if (this._texture !=value){
			this._texture=value;
			this.graphics.cleanByTexture(value,0,0);
		}
	});

	/**表示显示对象相对于父容器的垂直方向坐标值。*/
	__getset(0,__proto,'y',function(){
		return this._y;
		},function(value){
		if (this._y!==value){
			if (this.destroyed)return;
			this._y=value;
			this.conchModel && this.conchModel.pos(this._x,value);
			var p=this._parent;
			if (p && p._repaint===0){
				p._repaint=1;
				p.parentRepaint();
			}
			if (this._$P.maskParent && this._$P.maskParent._repaint===0){
				this._$P.maskParent._repaint=1;
				this._$P.maskParent.parentRepaint();
			}
		}
	});

	/**
	*<p>显示对象的高度，单位为像素，默认为0。</p>
	*<p>此高度用于鼠标碰撞检测，并不影响显示对象图像大小。需要对显示对象的图像进行缩放，请使用scale、scaleX、scaleY。</p>
	*<p>可以通过getbounds获取显示对象图像的实际高度。</p>
	*/
	__getset(0,__proto,'height',function(){
		if (!this.autoSize)return this._height;
		return this.getSelfBounds().height;
		},function(value){
		if (this._height!==value){
			this._height=value;
			this.conchModel && this.conchModel.size(this._width,value);
			this.repaint();
		}
	});

	/**指定要使用的混合模式。目前只支持"lighter"。*/
	__getset(0,__proto,'blendMode',function(){
		return this._style.blendMode;
		},function(value){
		this.getStyle().blendMode=value;
		this.conchModel && this.conchModel.blendMode(value);
		if (value && value !="source-over")this._renderType |=0x08;
		else this._renderType &=~0x08;
		this.parentRepaint();
	});

	/**X轴缩放值，默认值为1。设置为负数，可以实现水平反转效果，比如scaleX=-1。*/
	__getset(0,__proto,'scaleX',function(){
		return this._style._tf.scaleX;
		},function(value){
		var style=this.getStyle();
		if (style._tf.scaleX!==value){
			style.setScaleX(value);
			this._tfChanged=true;
			this.conchModel && this.conchModel.scale(value,style._tf.scaleY);
			this._renderType |=0x04;
			var p=this._parent;
			if (p && p._repaint===0){
				p._repaint=1;
				p.parentRepaint();
			}
		}
	});

	/**Y轴缩放值，默认值为1。设置为负数，可以实现垂直反转效果，比如scaleX=-1。*/
	__getset(0,__proto,'scaleY',function(){
		return this._style._tf.scaleY;
		},function(value){
		var style=this.getStyle();
		if (style._tf.scaleY!==value){
			style.setScaleY(value);
			this._tfChanged=true;
			this.conchModel && this.conchModel.scale(style._tf.scaleX,value);
			this._renderType |=0x04;
			var p=this._parent;
			if (p && p._repaint===0){
				p._repaint=1;
				p.parentRepaint();
			}
		}
	});

	/**对舞台 <code>stage</code> 的引用。*/
	__getset(0,__proto,'stage',function(){
		return Laya.stage;
	});

	/**水平倾斜角度，默认值为0。以角度为单位。*/
	__getset(0,__proto,'skewX',function(){
		return this._style._tf.skewX;
		},function(value){
		var style=this.getStyle();
		if (style._tf.skewX!==value){
			style.setSkewX(value);
			this._tfChanged=true;
			this.conchModel && this.conchModel.skew(value,style._tf.skewY);
			this._renderType |=0x04;
			var p=this._parent;
			if (p && p._repaint===0){
				p._repaint=1;
				p.parentRepaint();
			}
		}
	});

	/**
	*<p>显示对象的滚动矩形范围，具有裁剪效果(如果只想限制子对象渲染区域，请使用viewport)，设置optimizeScrollRect=true，可以优化裁剪区域外的内容不进行渲染。</p>
	*<p> srollRect和viewport的区别：<br/>
	*1.srollRect自带裁剪效果，viewport只影响子对象渲染是否渲染，不具有裁剪效果（性能更高）。<br/>
	*2.设置rect的x,y属性均能实现区域滚动效果，但scrollRect会保持0,0点位置不变。</p>
	*/
	__getset(0,__proto,'scrollRect',function(){
		return this._style.scrollRect;
		},function(value){
		this.getStyle().scrollRect=value;
		this.repaint();
		if (value){
			this._renderType |=0x80;
			this.conchModel && this.conchModel.scrollRect(value.x,value.y,value.width,value.height);
			}else {
			this._renderType &=~0x80;
			if (this.conchModel){
				if (Sprite.RUNTIMEVERION < "0.9.1")
					this.conchModel.removeType(0x40);
				else
				this.conchModel.removeType(0x80);
			}
		}
	});

	/**垂直倾斜角度，默认值为0。以角度为单位。*/
	__getset(0,__proto,'skewY',function(){
		return this._style._tf.skewY;
		},function(value){
		var style=this.getStyle();
		if (style._tf.skewY!==value){
			style.setSkewY(value);
			this._tfChanged=true;
			this.conchModel && this.conchModel.skew(style._tf.skewX,value);
			this._renderType |=0x04;
			var p=this._parent;
			if (p && p._repaint===0){
				p._repaint=1;
				p.parentRepaint();
			}
		}
	});

	/**
	*<p>对象的矩阵信息。通过设置矩阵可以实现节点旋转，缩放，位移效果。</p>
	*<p>矩阵更多信息请参考 <code>Matrix</code></p>
	*/
	__getset(0,__proto,'transform',function(){
		return this._tfChanged ? this._adjustTransform():this._transform;
		},function(value){
		this._tfChanged=false;
		this._transform=value;
		if (value){
			this._x=value.tx;
			this._y=value.ty;
			value.tx=value.ty=0;
			this.conchModel && this.conchModel.transform(value.a,value.b,value.c,value.d,this._x,this._y);
		}
		if (value)this._renderType |=0x04;
		else {
			this._renderType &=~0x04;
			this.conchModel && this.conchModel.removeType(0x04);
		}
		this.parentRepaint();
	});

	/**X轴 轴心点的位置，单位为像素，默认为0。轴心点会影响对象位置，缩放中心，旋转中心。*/
	__getset(0,__proto,'pivotX',function(){
		return this._style._tf.translateX;
		},function(value){
		this.getStyle().setTranslateX(value);
		this.conchModel && this.conchModel.pivot(value,this._style._tf.translateY);
		this.repaint();
	});

	/**Y轴 轴心点的位置，单位为像素，默认为0。轴心点会影响对象位置，缩放中心，旋转中心。*/
	__getset(0,__proto,'pivotY',function(){
		return this._style._tf.translateY;
		},function(value){
		this.getStyle().setTranslateY(value);
		this.conchModel && this.conchModel.pivot(this._style._tf.translateX,value);
		this.repaint();
	});

	/**透明度，值为0-1，默认值为1，表示不透明。更改alpha值会影响drawcall。*/
	__getset(0,__proto,'alpha',function(){
		return this._style.alpha;
		},function(value){
		if (this._style && this._style.alpha!==value){
			value=value < 0 ? 0 :(value > 1 ? 1 :value);
			this.getStyle().alpha=value;
			this.conchModel && this.conchModel.alpha(value);
			if (value!==1)this._renderType |=0x02;
			else this._renderType &=~0x02;
			this.parentRepaint();
		}
	});

	/**表示是否可见，默认为true。如果设置不可见，节点将不被渲染。*/
	__getset(0,__proto,'visible',function(){
		return this._style.visible;
		},function(value){
		if (this._style && this._style.visible!==value){
			this.getStyle().visible=value;
			this.conchModel && this.conchModel.visible(value);
			this.parentRepaint();
		}
	});

	/**绘图对象。封装了绘制位图和矢量图的接口，Sprite所有的绘图操作都通过Graphics来实现的。*/
	__getset(0,__proto,'graphics',function(){
		return this._graphics || (this.graphics=RunDriver.createGraphics());
		},function(value){
		if (this._graphics)this._graphics._sp=null;
		this._graphics=value;
		if (value){
			this._renderType &=~0x01;
			this._renderType |=0x200;
			value._sp=this;
			this.conchModel && this.conchModel.graphics(this._graphics);
			}else {
			this._renderType &=~0x200;
			this._renderType &=~0x01;
			if (this.conchModel){
				if (Sprite.RUNTIMEVERION < "0.9.1")
					this.conchModel.removeType(0x100);
				else
				this.conchModel.removeType(0x200);
			}
		}
		this.repaint();
	});

	/**滤镜集合。可以设置多个滤镜组合。*/
	__getset(0,__proto,'filters',function(){
		return this._$P.filters;
		},function(value){
		value && value.length===0 && (value=null);
		if (this._$P.filters==value)return;
		this._set$P("filters",value ? value.slice():null);
		if (Render.isConchApp){
			if (this.conchModel){
				if (Sprite.RUNTIMEVERION < "0.9.1")
					this.conchModel.removeType(0x10);
				else
				this.conchModel.removeType(0x20);
			}
			if (this._$P.filters && this._$P.filters.length==1){
				this._$P.filters[0].callNative(this);
			}
		}
		if (Render.isWebGL){
			if (value && value.length){
				this._renderType |=0x20;
				}else {
				this._renderType &=~0x20;
			}
		}
		if (value && value.length > 0){
			if (!this._getBit(0x1))this._setUpNoticeType(0x1);
			if (!(Render.isWebGL && value.length==1 && (((value[0])instanceof laya.filters.ColorFilter )))){
				if (this.cacheAs !="bitmap"){
					if (!Render.isConchNode)this.cacheAs="bitmap";
					this._set$P("cacheForFilters",true);
				}
				this._set$P("hasFilter",true);
			}
			}else {
			this._set$P("hasFilter",false);
			if (this._$P["cacheForFilters"] && this.cacheAs=="bitmap"){
				this.cacheAs="none";
			}
		}
		this.repaint();
	});

	__getset(0,__proto,'parent',_super.prototype._$get_parent,function(value){
		Laya.superSet(Node,this,'parent',value);
		if (value && this._getBit(0x2)){
			this._$2__onDisplay();
		}
	});

	/**
	*<p>遮罩，可以设置一个对象(支持位图和矢量图)，根据对象形状进行遮罩显示。</p>
	*<p>【注意】遮罩对象坐标系是相对遮罩对象本身的，和Flash机制不同</p>
	*/
	__getset(0,__proto,'mask',function(){
		return this._$P._mask;
		},function(value){
		if (value && this.mask && this.mask._$P.maskParent)return;
		if (value){
			this.cacheAs="bitmap";
			this._set$P("_mask",value);
			value._set$P("maskParent",this);
			}else {
			this.cacheAs="none";
			this.mask && this.mask._set$P("maskParent",null);
			this._set$P("_mask",value);
		}
		this.conchModel && this.conchModel.mask(value ? value.conchModel :null);
		this._renderType |=0x40;
		this.parentRepaint();
	});

	/**
	*是否接受鼠标事件。
	*默认为false，如果监听鼠标事件，则会自动设置本对象及父节点的属性 mouseEnable 的值都为 true（如果父节点手动设置为false，则不会更改）。
	**/
	__getset(0,__proto,'mouseEnabled',function(){
		return this._mouseEnableState > 1;
		},function(value){
		this._mouseEnableState=value ? 2 :1;
	});

	/**
	*获得相对于stage的全局X轴缩放值（会叠加父亲节点的缩放值）。
	*/
	__getset(0,__proto,'globalScaleX',function(){
		var scale=1;
		var ele=this;
		while (ele){
			if (ele===Laya.stage)break ;
			scale *=ele.scaleX;
			ele=ele.parent;
		}
		return scale;
	});

	/**
	*返回鼠标在此对象坐标系上的 X 轴坐标信息。
	*/
	__getset(0,__proto,'mouseX',function(){
		return this.getMousePoint().x;
	});

	/**
	*返回鼠标在此对象坐标系上的 Y 轴坐标信息。
	*/
	__getset(0,__proto,'mouseY',function(){
		return this.getMousePoint().y;
	});

	Sprite.fromImage=function(url){
		return new Sprite().loadImage(url);
	}

	Sprite.CustomList=[];
	__static(Sprite,
	['RUNTIMEVERION',function(){return this.RUNTIMEVERION=window.conch?conchConfig.getRuntimeVersion().substr(conchConfig.getRuntimeVersion().lastIndexOf('-')+1):'';}
	]);
	return Sprite;
})(Node)


/**
*发射移动一定距离再追踪
*@author guowc
*
*/
//class mylaya.effects.WaitFollowBomb extends mylaya.effects.FollowBomb
var WaitFollowBomb=(function(_super){
	function WaitFollowBomb(){
		this.waitStepMax=0;
		this.waitStep=0;
		WaitFollowBomb.__super.call(this);
	}

	__class(WaitFollowBomb,'mylaya.effects.WaitFollowBomb',_super);
	var __proto=WaitFollowBomb.prototype;
	/**
	*设定延时追踪
	*@param val 单位帧
	*
	*/
	__proto.setWaitStep=function(val){
		this.waitStepMax=val;
	}

	__proto.move=function(){
		if(this.waitStep < this.waitStepMax){
			this.waitStep++;
			this.going();
			}else{
			_super.prototype.move.call(this);
		}
	}

	__proto.dispose=function(){
		this.waitStep=this.waitStepMax=0;
		_super.prototype.dispose.call(this);
	}

	return WaitFollowBomb;
})(FollowBomb)


/**
*敌人射击
*@author guowc
*
*/
//class game.weapon.EshootBullet1 extends game.weapon.ShootBullet
var EshootBullet1=(function(_super){
	function EshootBullet1(){
		EshootBullet1.__super.call(this);
	}

	__class(EshootBullet1,'game.weapon.EshootBullet1',_super);
	var __proto=EshootBullet1.prototype;
	__proto.dispose=function(){
		if(this._dispose)return;
		this._disposeCheck=true;
		_super.prototype.dispose.call(this);
		GlobalAPI.weaponEnemyMgr.remove(this);
		Pool.recover("Eshoot1",this);
	}

	return EshootBullet1;
})(ShootBullet)


//class game.weapon.FireBullet extends game.weapon.ShootBullet
var FireBullet=(function(_super){
	function FireBullet(){
		this.sc=NaN;
		FireBullet.__super.call(this);
		this.speed=10;
	}

	__class(FireBullet,'game.weapon.FireBullet',_super);
	var __proto=FireBullet.prototype;
	__proto.start=function(container,startPt,arrowSkin){
		this._dispose=false;
		this._container=container;
		if(!this.arrow){
			if(arrowSkin){
				this.arrow=arrowSkin;
				}else{
				this.arrow=new Sprite;
				this.arrow.graphics.drawRect(0,0,10,10,"#ff0000");
			}
			this._rect.width=this.arrow.width;
			this._rect.height=this.arrow.height;
			this.arrow.pivot(this._rect.width>>1,this._rect.height>>1);
			this._rect.width=100;
			this._rect.height=100;
		}
		this.oldpt.x=this.arrow.x=this.pt.x=startPt.x;
		this.oldpt.y=this.arrow.y=this.pt.y=startPt.y;
		GlobalAPI.heartMgr.add(this,this.move);
		this._container.addChild(this.arrow);
		this.sc=0.5;
		this.arrow.scale(this.sc,this.sc,true);
		return this.arrow;
	}

	__proto.move=function(){
		if(this._dispose)return;
		if(this.sc<1.5){
			this.sc+=0.05;
			this.arrow.scale(this.sc,this.sc,true);
			}else{
			this.dispose();
		}
		_super.prototype.move.call(this);
	}

	__proto.over=function(){
		this.dispose();
	}

	__proto.dispose=function(){
		if(this._dispose)return;
		this._disposeCheck=true;
		this._clear=true;
		_super.prototype.dispose.call(this);
		GlobalAPI.weaponMgr.remove(this);
		Pool.recover("FireBullet",this);
	}

	return FireBullet;
})(ShootBullet)


/**
*掷弹
*@author guowc
*
*/
//class game.weapon.ThrowBom extends mylaya.effects.ShootArrow
var ThrowBom=(function(_super){
	function ThrowBom(){
		this.tpt=null;
		this._clear=false;
		this._chgAng=false;
		this._type=0;
		this.throwRadian=100;
		this._hurt=0;
		this._crit=0;
		this._aoe=0;
		this._roleid=0;
		this._id=0;
		ThrowBom.__super.call(this);
		this.tpt=new Point;
	}

	__class(ThrowBom,'game.weapon.ThrowBom',_super);
	var __proto=ThrowBom.prototype;
	Laya.imps(__proto,{"game.weapon.Iweapon":true})
	__proto.throwBom=function(container,startPt,targetPt,skin){
		if(!this.arrow){
			if((skin instanceof mylaya.common.skin.RoleSkin )){
				(skin).play();
			}
			}else{
			(this.arrow).play();
		}
		return this.start(container,startPt,targetPt,skin);
	}

	__proto.throwBomPos=function(container,startPt,distance,skin){
		(distance===void 0)&& (distance=96);
		this.tpt.x=startPt.x+distance;
		this.tpt.y=startPt.y;
		if(!this.arrow){
			if((skin instanceof mylaya.common.skin.RoleSkin )){
				(skin).play();
			}
			}else{
			(this.arrow).play();
		}
		return this.start(container,startPt,this.tpt,skin);
	}

	__proto.move=function(){
		if(this._dispose)return;
		this.t0++;
		this.oldpt.x=this.pt.x;
		this.oldpt.y=this.pt.y;
		this.arrow.x=this.pt.x=this.sx+this.t0 *this.xSpeed>>0;
		this.arrow.y=this.pt.y=this.sy+this.t0 *this.ySpeed+this.g *this.t0 *this.t0 *0.5>>0;
		if(this._chgAng){
			var dxx=this.pt.x-this.oldpt.x;
			var dyy=this.pt.y-this.oldpt.y;
			var angel=Math.atan2(dyy,dxx);
			this.arrow.rotation=angel *MathUtil.rotation;
			}else{
			this.arrow.scaleX=this.movedir;
		}
		if(this.limitRect && !this.limitRect.contains(this.pt.x,this.pt.y)){
			this.clear();
		}
	}

	__proto.setType=function(val){
		this._type=val;
	}

	__proto.getType=function(){
		return this._type;
	}

	__proto.getSkin=function(){
		return this.arrow;
	}

	__proto.getMoveDir=function(){
		return this.movedir;
	}

	__proto.getSkinPt=function(){
		return this.pt;
	}

	//角度即时变换
	__proto.setChgAng=function(val){
		this._chgAng=val;
	}

	__proto.setHurt=function(val){
		this._hurt=val;
	}

	__proto.getHurt=function(){
		return this._hurt;
	}

	__proto.setCrit=function(val){
		this._crit=val;
	}

	__proto.getCrit=function(){
		return this._crit;
	}

	__proto.getOldPt=function(){
		return this.oldpt;
	}

	__proto.setAoe=function(val){
		this._aoe=val;
	}

	__proto.getAoe=function(){
		return this._aoe;
	}

	__proto.getRect=function(){
		this._rect.x=this.pt.x-this._rect.width*0.5;
		this._rect.y=this.pt.y-this._rect.height*0.5;
		return this._rect;
	}

	__proto.setRoleid=function(val){
		this._roleid=val;
	}

	__proto.getRoleid=function(){
		return this._roleid;
	}

	__proto.setid=function(val){
		this._id=val;
	}

	__proto.getid=function(){
		return this._id;
	}

	/**
	*设定投掷目标半径
	*@param val
	*
	*/
	__proto.setThrowRadian=function(val){
		this.throwRadian=val;
	}

	__proto.clear=function(){
		this._clear=true;
		this.dispose();
	}

	__proto.dispose=function(){
		if(this._dispose)return;
		this._chgAng=false;
		_super.prototype.dispose.call(this);
		this._aoe=0;
		this._hurt=0;
		if(this._clear==false){
			GlobalAPI.miniAniEffect.start(null,this.pt.x,this.pt.y,"hurt");
			}else{
			this._clear=false;
		}
		if((this.arrow instanceof mylaya.common.skin.RoleSkin )){
			(this.arrow).stop();
		}
		if(!this._disposeCheck){
			GlobalAPI.weaponMgr.remove(this);
			Pool.recover("ThrowBom",this);
		}
	}

	return ThrowBom;
})(ShootArrow)


//class laya.webgl.utils.Buffer extends laya.resource.Resource
var Buffer=(function(_super){
	function Buffer(){
		this._glBuffer=null;
		this._buffer=null;
		//可能为Float32Array、Uint16Array、Uint8Array、ArrayBuffer等。
		this._bufferType=0;
		this._bufferUsage=0;
		this._byteLength=0;
		Buffer.__super.call(this);
		Buffer._gl=WebGL.mainContext;
	}

	__class(Buffer,'laya.webgl.utils.Buffer',_super);
	var __proto=Buffer.prototype;
	__proto._bind=function(){
		this.activeResource();
		if (Buffer._bindActive[this._bufferType]!==this._glBuffer){
			(this._bufferType===0x8892)&& (Buffer._bindVertexBuffer=this._glBuffer);
			Buffer._gl.bindBuffer(this._bufferType,Buffer._bindActive[this._bufferType]=this._glBuffer);
			BaseShader.activeShader=null;
		}
	}

	__proto.recreateResource=function(){
		this._glBuffer || (this._glBuffer=Buffer._gl.createBuffer());
		this.completeCreate();
	}

	__proto.disposeResource=function(){
		if (this._glBuffer){
			WebGL.mainContext.deleteBuffer(this._glBuffer);
			this._glBuffer=null;
		}
		this.memorySize=0;
	}

	__getset(0,__proto,'bufferUsage',function(){
		return this._bufferUsage;
	});

	Buffer._gl=null;
	Buffer._bindActive={};
	Buffer._bindVertexBuffer=null;
	Buffer._enableAtributes=[];
	return Buffer;
})(Resource)


/**
*...
*@author ...
*/
//class laya.webgl.shader.BaseShader extends laya.resource.Resource
var BaseShader=(function(_super){
	function BaseShader(){
		BaseShader.__super.call(this);
		this.lock=true;
	}

	__class(BaseShader,'laya.webgl.shader.BaseShader',_super);
	BaseShader.activeShader=null;
	BaseShader.bindShader=null;
	return BaseShader;
})(Resource)


/**
*@private
*<code>Bitmap</code> 是图片资源类。
*/
//class laya.resource.Bitmap extends laya.resource.Resource
var Bitmap=(function(_super){
	function Bitmap(){
		/**@private
		*HTML Image或HTML Canvas或WebGL Texture。
		**/
		//this._source=null;
		/**@private 宽度*/
		//this._w=NaN;
		/**@private 高度*/
		//this._h=NaN;
		Bitmap.__super.call(this);
		this._w=0;
		this._h=0;
	}

	__class(Bitmap,'laya.resource.Bitmap',_super);
	var __proto=Bitmap.prototype;
	/***
	*宽度。
	*/
	__getset(0,__proto,'width',function(){
		return this._w;
	});

	/***
	*高度。
	*/
	__getset(0,__proto,'height',function(){
		return this._h;
	});

	/***
	*HTML Image 或 HTML Canvas 或 WebGL Texture 。
	*/
	__getset(0,__proto,'source',function(){
		return this._source;
	});

	return Bitmap;
})(Resource)


/**
*@private
*audio标签播放声音的音轨控制
*/
//class laya.media.h5audio.AudioSoundChannel extends laya.media.SoundChannel
var AudioSoundChannel=(function(_super){
	function AudioSoundChannel(audio){
		/**
		*播放用的audio标签
		*/
		this._audio=null;
		this._onEnd=null;
		this._resumePlay=null;
		AudioSoundChannel.__super.call(this);
		this._onEnd=Utils.bind(this.__onEnd,this);
		this._resumePlay=Utils.bind(this.__resumePlay,this);
		audio.addEventListener("ended",this._onEnd);
		this._audio=audio;
	}

	__class(AudioSoundChannel,'laya.media.h5audio.AudioSoundChannel',_super);
	var __proto=AudioSoundChannel.prototype;
	__proto.__onEnd=function(){
		if (this.loops==1){
			if (this.completeHandler){
				Laya.timer.once(10,this,this.__runComplete,[this.completeHandler],false);
				this.completeHandler=null;
			}
			this.stop();
			this.event("complete");
			return;
		}
		if (this.loops > 0){
			this.loops--;
		}
		this.startTime=0;
		this.play();
	}

	__proto.__resumePlay=function(){
		if(this._audio)this._audio.removeEventListener("canplay",this._resumePlay);
		try {
			this._audio.currentTime=this.startTime;
			Browser.container.appendChild(this._audio);
			this._audio.play();
			}catch (e){
			this.event("error");
		}
	}

	/**
	*播放
	*/
	__proto.play=function(){
		this.isStopped=false;
		try {
			this._audio.playbackRate=SoundManager.playbackRate;
			this._audio.currentTime=this.startTime;
			}catch (e){
			this._audio.addEventListener("canplay",this._resumePlay);
			return;
		}
		SoundManager.addChannel(this);
		Browser.container.appendChild(this._audio);
		if("play" in this._audio)
			this._audio.play();
	}

	/**
	*停止播放
	*
	*/
	__proto.stop=function(){
		this.isStopped=true;
		SoundManager.removeChannel(this);
		this.completeHandler=null;
		if (!this._audio)
			return;
		if ("pause" in this._audio)
			if (Render.isConchApp){
			this._audio.stop();
		}
		this._audio.pause();
		this._audio.removeEventListener("ended",this._onEnd);
		this._audio.removeEventListener("canplay",this._resumePlay);
		if (!Browser.onIE){
			if (this._audio!=AudioSound._musicAudio){
				Pool.recover("audio:"+this.url,this._audio);
			}
		}
		Browser.removeElement(this._audio);
		this._audio=null;
	}

	__proto.pause=function(){
		this.isStopped=true;
		SoundManager.removeChannel(this);
		if("pause" in this._audio)
			this._audio.pause();
	}

	__proto.resume=function(){
		if (!this._audio)
			return;
		this.isStopped=false;
		SoundManager.addChannel(this);
		if("play" in this._audio)
			this._audio.play();
	}

	/**
	*当前播放到的位置
	*@return
	*
	*/
	__getset(0,__proto,'position',function(){
		if (!this._audio)
			return 0;
		return this._audio.currentTime;
	});

	/**
	*获取总时间。
	*/
	__getset(0,__proto,'duration',function(){
		if (!this._audio)
			return 0;
		return this._audio.duration;
	});

	/**
	*设置音量
	*@param v
	*
	*/
	/**
	*获取音量
	*@return
	*
	*/
	__getset(0,__proto,'volume',function(){
		if (!this._audio)return 1;
		return this._audio.volume;
		},function(v){
		if (!this._audio)return;
		this._audio.volume=v;
	});

	return AudioSoundChannel;
})(SoundChannel)


/**
*@private
*web audio api方式播放声音的音轨控制
*/
//class laya.media.webaudio.WebAudioSoundChannel extends laya.media.SoundChannel
var WebAudioSoundChannel=(function(_super){
	function WebAudioSoundChannel(){
		/**
		*声音原始文件数据
		*/
		this.audioBuffer=null;
		/**
		*gain节点
		*/
		this.gain=null;
		/**
		*播放用的数据
		*/
		this.bufferSource=null;
		/**
		*当前时间
		*/
		this._currentTime=0;
		/**
		*当前音量
		*/
		this._volume=1;
		/**
		*播放开始时的时间戳
		*/
		this._startTime=0;
		this._pauseTime=0;
		this._onPlayEnd=null;
		this.context=WebAudioSound.ctx;
		WebAudioSoundChannel.__super.call(this);
		this._onPlayEnd=Utils.bind(this.__onPlayEnd,this);
		if (this.context["createGain"]){
			this.gain=this.context["createGain"]();
			}else {
			this.gain=this.context["createGainNode"]();
		}
	}

	__class(WebAudioSoundChannel,'laya.media.webaudio.WebAudioSoundChannel',_super);
	var __proto=WebAudioSoundChannel.prototype;
	/**
	*播放声音
	*/
	__proto.play=function(){
		SoundManager.addChannel(this);
		this.isStopped=false;
		this._clearBufferSource();
		if (!this.audioBuffer)return;
		var context=this.context;
		var gain=this.gain;
		var bufferSource=context.createBufferSource();
		this.bufferSource=bufferSource;
		bufferSource.buffer=this.audioBuffer;
		bufferSource.connect(gain);
		if (gain)
			gain.disconnect();
		gain.connect(context.destination);
		bufferSource.onended=this._onPlayEnd;
		if (this.startTime >=this.duration)this.startTime=0;
		this._startTime=Browser.now();
		this.gain.gain.value=this._volume;
		if (this.loops==0){
			bufferSource.loop=true;
		}
		bufferSource.playbackRate.value=SoundManager.playbackRate;
		bufferSource.start(0,this.startTime);
		this._currentTime=0;
	}

	__proto.__onPlayEnd=function(){
		if (this.loops==1){
			if (this.completeHandler){
				Laya.timer.once(10,this,this.__runComplete,[this.completeHandler],false);
				this.completeHandler=null;
			}
			this.stop();
			this.event("complete");
			return;
		}
		if (this.loops > 0){
			this.loops--;
		}
		this.startTime=0;
		this.play();
	}

	__proto._clearBufferSource=function(){
		if (this.bufferSource){
			var sourceNode=this.bufferSource;
			if (sourceNode.stop){
				sourceNode.stop(0);
				}else {
				sourceNode.noteOff(0);
			}
			sourceNode.disconnect(0);
			sourceNode.onended=null;
			if (!WebAudioSoundChannel._tryCleanFailed)this._tryClearBuffer(sourceNode);
			this.bufferSource=null;
		}
	}

	__proto._tryClearBuffer=function(sourceNode){
		if (!Browser.onMac){
			try{
				sourceNode.buffer=null;
				}catch (e){
				WebAudioSoundChannel._tryCleanFailed=true;
			}
			return;
		}
		try {sourceNode.buffer=WebAudioSound._miniBuffer;}catch (e){WebAudioSoundChannel._tryCleanFailed=true;}
	}

	/**
	*停止播放
	*/
	__proto.stop=function(){
		this._clearBufferSource();
		this.audioBuffer=null;
		if (this.gain)
			this.gain.disconnect();
		this.isStopped=true;
		SoundManager.removeChannel(this);
		this.completeHandler=null;
		if(SoundManager.autoReleaseSound)
			Laya.timer.once(5000,null,SoundManager.disposeSoundIfNotUsed,[this.url],false);
	}

	__proto.pause=function(){
		if (!this.isStopped){
			this._pauseTime=this.position;
		}
		this._clearBufferSource();
		if (this.gain)
			this.gain.disconnect();
		this.isStopped=true;
		SoundManager.removeChannel(this);
		if(SoundManager.autoReleaseSound)
			Laya.timer.once(5000,null,SoundManager.disposeSoundIfNotUsed,[this.url],false);
	}

	__proto.resume=function(){
		this.startTime=this._pauseTime;
		this.play();
	}

	/**
	*获取当前播放位置
	*/
	__getset(0,__proto,'position',function(){
		if (this.bufferSource){
			return (Browser.now()-this._startTime)/ 1000+this.startTime;
		}
		return 0;
	});

	__getset(0,__proto,'duration',function(){
		if (this.audioBuffer){
			return this.audioBuffer.duration;
		}
		return 0;
	});

	/**
	*设置音量
	*/
	/**
	*获取音量
	*/
	__getset(0,__proto,'volume',function(){
		return this._volume;
		},function(v){
		if (this.isStopped){
			return;
		}
		this._volume=v;
		this.gain.gain.value=v;
	});

	WebAudioSoundChannel._tryCleanFailed=false;
	return WebAudioSoundChannel;
})(SoundChannel)


//class laya.webgl.resource.RenderTarget2D extends laya.resource.Texture
var RenderTarget2D=(function(_super){
	function RenderTarget2D(width,height,surfaceFormat,surfaceType,depthStencilFormat,mipMap,repeat,minFifter,magFifter){
		this._type=0;
		this._svWidth=NaN;
		this._svHeight=NaN;
		this._preRenderTarget=null;
		//TODO:.........................................................
		this._alreadyResolved=false;
		this._looked=false;
		this._surfaceFormat=0;
		this._surfaceType=0;
		this._depthStencilFormat=0;
		this._mipMap=false;
		this._repeat=false;
		this._minFifter=0;
		this._magFifter=0;
		this._destroy=false;
		(surfaceFormat===void 0)&& (surfaceFormat=0x1908);
		(surfaceType===void 0)&& (surfaceType=0x1401);
		(depthStencilFormat===void 0)&& (depthStencilFormat=0x84F9);
		(mipMap===void 0)&& (mipMap=false);
		(repeat===void 0)&& (repeat=false);
		(minFifter===void 0)&& (minFifter=-1);
		(magFifter===void 0)&& (magFifter=-1);
		this._type=1;
		this._w=width;
		this._h=height;
		this._surfaceFormat=surfaceFormat;
		this._surfaceType=surfaceType;
		this._depthStencilFormat=depthStencilFormat;
		this._mipMap=mipMap;
		this._repeat=repeat;
		this._minFifter=minFifter;
		this._magFifter=magFifter;
		this._createWebGLRenderTarget();
		this.bitmap.lock=true;
		RenderTarget2D.__super.call(this,this.bitmap,Texture.INV_UV);
	}

	__class(RenderTarget2D,'laya.webgl.resource.RenderTarget2D',_super);
	var __proto=RenderTarget2D.prototype;
	Laya.imps(__proto,{"laya.resource.IDispose":true})
	//TODO:临时......................................................
	__proto.getType=function(){
		return this._type;
	}

	//*/
	__proto.getTexture=function(){
		return this;
	}

	__proto.size=function(w,h){
		if (this._w==w && this._h==h)return;
		this._w=w;
		this._h=h;
		this.release();
		if (this._w !=0 && this._h !=0)this._createWebGLRenderTarget();
	}

	__proto.release=function(){
		this.destroy();
	}

	__proto.recycle=function(){
		RenderTarget2D.POOL.push(this);
	}

	__proto.start=function(){
		var gl=WebGL.mainContext;
		this._preRenderTarget=RenderState2D.curRenderTarget;
		RenderState2D.curRenderTarget=this;
		gl.bindFramebuffer(0x8D40,this.bitmap.frameBuffer);
		this._alreadyResolved=false;
		if (this._type==1){
			gl.viewport(0,0,this._w,this._h);
			this._svWidth=RenderState2D.width;
			this._svHeight=RenderState2D.height;
			RenderState2D.width=this._w;
			RenderState2D.height=this._h;
			BaseShader.activeShader=null;
		}
		return this;
	}

	__proto.clear=function(r,g,b,a){
		(r===void 0)&& (r=0.0);
		(g===void 0)&& (g=0.0);
		(b===void 0)&& (b=0.0);
		(a===void 0)&& (a=1.0);
		var gl=WebGL.mainContext;
		gl.clearColor(r,g,b,a);
		var clearFlag=0x00004000;
		switch (this._depthStencilFormat){
			case 0x81A5:
				clearFlag |=0x00000100;
				break ;
			case 0x8D48:
				clearFlag |=0x00000400;
				break ;
			case 0x84F9:
				clearFlag |=0x00000100;
				clearFlag |=0x00000400
				break ;
			}
		gl.clear(clearFlag);
	}

	__proto.end=function(){
		var gl=WebGL.mainContext;
		gl.bindFramebuffer(0x8D40,this._preRenderTarget ? this._preRenderTarget.bitmap.frameBuffer :null);
		this._alreadyResolved=true;
		RenderState2D.curRenderTarget=this._preRenderTarget;
		if (this._type==1){
			gl.viewport(0,0,this._svWidth,this._svHeight);
			RenderState2D.width=this._svWidth;
			RenderState2D.height=this._svHeight;
			BaseShader.activeShader=null;
		}else gl.viewport(0,0,Laya.stage.width,Laya.stage.height);
	}

	__proto.getData=function(x,y,width,height){
		var gl=WebGL.mainContext;
		gl.bindFramebuffer(0x8D40,(this.bitmap).frameBuffer);
		var canRead=(gl.checkFramebufferStatus(0x8D40)===0x8CD5);
		if (!canRead){
			gl.bindFramebuffer(0x8D40,null);
			return null;
		};
		var pixels=new Uint8Array(this._w *this._h *4);
		gl.readPixels(x,y,width,height,this._surfaceFormat,this._surfaceType,pixels);
		gl.bindFramebuffer(0x8D40,null);
		return pixels;
	}

	/**彻底清理资源,注意会强制解锁清理*/
	__proto.destroy=function(foreDiposeTexture){
		(foreDiposeTexture===void 0)&& (foreDiposeTexture=false);
		if (!this._destroy){
			this._loaded=false;
			this.bitmap.offAll();
			this.bitmap.disposeResource();
			this.bitmap.dispose();
			this.offAll();
			this.bitmap=null;
			this._alreadyResolved=false;
			this._destroy=true;
			_super.prototype.destroy.call(this);
		}
	}

	//待测试
	__proto.dispose=function(){}
	__proto._createWebGLRenderTarget=function(){
		this.bitmap=new WebGLRenderTarget(this.width,this.height,this._surfaceFormat,this._surfaceType,this._depthStencilFormat,this._mipMap,this._repeat,this._minFifter,this._magFifter);
		this.bitmap.activeResource();
		this._alreadyResolved=true;
		this._destroy=false;
		this._loaded=true;
		this.bitmap.on("recovered",this,function(e){
			this.event("recovered");
		})
	}

	__getset(0,__proto,'surfaceFormat',function(){
		return this._surfaceFormat;
	});

	__getset(0,__proto,'magFifter',function(){
		return this._magFifter;
	});

	__getset(0,__proto,'surfaceType',function(){
		return this._surfaceType;
	});

	__getset(0,__proto,'mipMap',function(){
		return this._mipMap;
	});

	__getset(0,__proto,'depthStencilFormat',function(){
		return this._depthStencilFormat;
	});

	//}
	__getset(0,__proto,'minFifter',function(){
		return this._minFifter;
	});

	/**返回RenderTarget的Texture*/
	__getset(0,__proto,'source',function(){
		if (this._alreadyResolved)
			return Laya.superGet(Texture,this,'source');
		return null;
	});

	RenderTarget2D.create=function(w,h,surfaceFormat,surfaceType,depthStencilFormat,mipMap,repeat,minFifter,magFifter){
		(surfaceFormat===void 0)&& (surfaceFormat=0x1908);
		(surfaceType===void 0)&& (surfaceType=0x1401);
		(depthStencilFormat===void 0)&& (depthStencilFormat=0x84F9);
		(mipMap===void 0)&& (mipMap=false);
		(repeat===void 0)&& (repeat=false);
		(minFifter===void 0)&& (minFifter=-1);
		(magFifter===void 0)&& (magFifter=-1);
		var t=RenderTarget2D.POOL.pop();
		t || (t=new RenderTarget2D(w,h));
		if (!t.bitmap || t._w !=w || t._h !=h || t._surfaceFormat !=surfaceFormat || t._surfaceType !=surfaceType || t._depthStencilFormat !=depthStencilFormat || t._mipMap !=mipMap || t._repeat !=repeat || t._minFifter !=minFifter || t._magFifter !=magFifter){
			t._w=w;
			t._h=h;
			t._surfaceFormat=surfaceFormat;
			t._surfaceType=surfaceType;
			t._depthStencilFormat=depthStencilFormat;
			t._mipMap=mipMap;
			t._repeat=repeat;
			t._minFifter=minFifter;
			t._magFifter=magFifter;
			t.release();
			t._createWebGLRenderTarget();
		}
		return t;
	}

	RenderTarget2D.TYPE2D=1;
	RenderTarget2D.TYPE3D=2;
	RenderTarget2D.POOL=[];
	return RenderTarget2D;
})(Texture)


//class laya.webgl.shader.d2.skinAnishader.SkinSV extends laya.webgl.shader.d2.value.Value2D
var SkinSV=(function(_super){
	function SkinSV(type){
		this.texcoord=null;
		this.offsetX=300;
		this.offsetY=0;
		SkinSV.__super.call(this,0x200,0);
		var _vlen=8 *CONST3D2D.BYTES_PE;
		this.position=[2,0x1406,false,_vlen,0];
		this.texcoord=[2,0x1406,false,_vlen,2 *CONST3D2D.BYTES_PE];
		this.color=[4,0x1406,false,_vlen,4 *CONST3D2D.BYTES_PE];
	}

	__class(SkinSV,'laya.webgl.shader.d2.skinAnishader.SkinSV',_super);
	return SkinSV;
})(Value2D)


//class laya.webgl.shader.d2.value.Color2dSV extends laya.webgl.shader.d2.value.Value2D
var Color2dSV=(function(_super){
	function Color2dSV(args){
		Color2dSV.__super.call(this,0x02,0);
		this.color=[];
	}

	__class(Color2dSV,'laya.webgl.shader.d2.value.Color2dSV',_super);
	var __proto=Color2dSV.prototype;
	__proto.setValue=function(value){
		value.fillStyle&&(this.color=value.fillStyle._color._color);
		value.strokeStyle&&(this.color=value.strokeStyle._color._color);
	}

	return Color2dSV;
})(Value2D)


//class laya.webgl.shader.d2.value.FillTextureSV extends laya.webgl.shader.d2.value.Value2D
var FillTextureSV=(function(_super){
	function FillTextureSV(type){
		this.u_colorMatrix=null;
		this.strength=0;
		this.colorMat=null;
		this.colorAlpha=null;
		this.u_TexRange=[0,1,0,1];
		this.u_offset=[0,0];
		this.texcoord=Value2D._TEXCOORD;
		FillTextureSV.__super.call(this,0x100,0);
	}

	__class(FillTextureSV,'laya.webgl.shader.d2.value.FillTextureSV',_super);
	var __proto=FillTextureSV.prototype;
	//this.color=[4,WebGLContext.FLOAT,false,_vlen,4 *CONST3D2D.BYTES_PE];
	__proto.setValue=function(vo){
		this.ALPHA=vo.ALPHA;
		vo.filters && this.setFilters(vo.filters);
	}

	__proto.clear=function(){
		this.texture=null;
		this.shader=null;
		this.defines.setValue(0);
	}

	return FillTextureSV;
})(Value2D)


//class laya.webgl.shader.d2.value.TextureSV extends laya.webgl.shader.d2.value.Value2D
var TextureSV=(function(_super){
	function TextureSV(subID){
		this.u_colorMatrix=null;
		this.strength=0;
		this.blurInfo=null;
		this.colorMat=null;
		this.colorAlpha=null;
		this.texcoord=Value2D._TEXCOORD;
		(subID===void 0)&& (subID=0);
		TextureSV.__super.call(this,0x01,subID);
	}

	__class(TextureSV,'laya.webgl.shader.d2.value.TextureSV',_super);
	var __proto=TextureSV.prototype;
	__proto.setValue=function(vo){
		this.ALPHA=vo.ALPHA;
		vo.filters && this.setFilters(vo.filters);
	}

	__proto.clear=function(){
		this.texture=null;
		this.shader=null;
		this.defines.setValue(0);
	}

	return TextureSV;
})(Value2D)


//class laya.webgl.shader.d2.value.PrimitiveSV extends laya.webgl.shader.d2.value.Value2D
var PrimitiveSV=(function(_super){
	function PrimitiveSV(args){
		this.a_color=null;
		this.u_pos=[0,0];
		PrimitiveSV.__super.call(this,0x04,0);
		this.position=[2,0x1406,false,5 *CONST3D2D.BYTES_PE,0];
		this.a_color=[3,0x1406,false,5 *CONST3D2D.BYTES_PE,2 *CONST3D2D.BYTES_PE];
	}

	__class(PrimitiveSV,'laya.webgl.shader.d2.value.PrimitiveSV',_super);
	return PrimitiveSV;
})(Value2D)


/**
*基础动作
*@author guowc
*
*/
//class game.Body.BaseAct extends laya.display.Sprite
var BaseAct=(function(_super){
	function BaseAct(){
		this.isRight=true;
		//向右移动
		this.isRender=false;
		//是否需要渲染
		this._rect=null;
		this.moveChg=null;
		//移动变化
		this.isDie=false;
		this.areaNum=8;
		//下落最大步长距离
		this.oldRect=null;
		//上次_rect
		this.viewRect=null;
		//场景显示区域
		this.maxRect=null;
		//地图最大区域
		this.bodyRect=null;
		this.bodyWid=10;
		this.hitRect=null;
		this.killRect=null;
		//protected var hpbar:ProgressBar;
		this.checkHit=false;
		this.isFly=false;
		this.touchGround=false;
		//在地面上
		this.diemovespeed=0;
		//死亡有移动效果
		this.fireing=0;
		//被烧(>0)
		this.firelist=[];
		this.shape=null;
		this._container=null;
		this.isFrontBg=false;
		/*if(hurtStep>4){
		hurtBody.alpha=1;
		//DisplayUtil.resetItemColorTransform(hurtBody);
		return;
	}

	if(hurtStep%2==0){
		hurtBody.alpha=0.8;
		//DisplayUtil.resetItemColorTransform(hurtBody);
		}else{
		hurtBody.alpha=0.5;
		//DisplayUtil.hightColorItem(hurtBody,255,0,0);
	}*/

	this._show=false;
	//显示对象是否有显示
	this.hurtA=false;
	this._showBar=false;
	this.hurtBody=null;
	this.hurtStep=101;
	this._pause=true;
	this._type=0;
	this._id=0;
	this.baseRoleData=null;
	this.hitWallX=false;
	this.hits=null;
	this.hpbar=null;
	BaseAct.__super.call(this);
	this._pt=new Point;
	this._shootpt=new Point;
	this._groundPt=new Point;
	this._oldpt=new Point;
	this._dir=5;
	this.touchGround=true;
	this.mouseEnabled=false;
	this.bodyRect=new Rectangle(-25,0,50,30);
	this.hitRect=new Rectangle;
	this.killRect=new Rectangle;
	this.init();
}


__class(BaseAct,'game.Body.BaseAct',_super);
var __proto=BaseAct.prototype;
__proto.init=function(){
	this.viewRect=GlobalAPI.moveViewPort.viewRect;
	this.maxRect=GlobalAPI.moveViewPort.maxRect;
	this._rect=new Rectangle(0,-this.bodyRect.height,this.bodyRect.width,this.bodyRect.height);
	this.oldRect=new Rectangle(0,-this.bodyRect.height,this.bodyRect.width,this.bodyRect.height);
}


/*hpbar=new ProgressBar(null,ProgressBar.noType);
hpbar.height=6;
hpbar.width=40;*/
__proto.redraw=function(){
	this._rect=new Rectangle(this.x,this.y+this.bodyRect.y,1,this.bodyRect.height);
	this.oldRect=new Rectangle(this.x,this.y+this.bodyRect.y,1,this.bodyRect.height);
	this.showHPBar(this._showBar);
	return;
	this.shape=this.shape==null ? new Sprite :this.shape;
	this.shape.graphics.clear();
	this.shape.graphics.drawRect(-this.bodyWid,0,this.bodyWid*2,this.bodyRect.y,null,"#ff0000",1);
	this.shape.graphics.drawLine(0,0,0,this.bodyRect.y,"#00ff00");
	this.addChild(this.shape);
}


__proto.step=function(){
	if(this.isDie)return;
	if(this.isRender){
		this.updateXY();
		this.isRender=false;
	}

}


__proto.move=function(dx,dy,dir){
	(dir===void 0)&& (dir=true);
	if(this._pt.x > dx){
		this.isRight=false;
		this._dir=dir ? 1 :this._dir;
		}else if(this._pt.x<dx){
		this.isRight=true;
		this._dir=dir ? 5 :this._dir;
	}

	this._rect.x=dx;
	this._rect.y=dy-this._rect.height;
	this.checklr();
	this.isRender=true;
}


__proto.setXY=function(dx,dy){
	this.move(dx,dy);
	this.updateXY();
}


__proto.startNewFire=function(id){
	this.fireing=1;
	var b=this.firelist.indexOf(id)<0;
	if(b){
		this.firelist.push(id);
	}

	return b;
}


__proto.checklr=function(){
	this.hitWallX=false;
	if(this._rect.x > this.maxRect.x+this.maxRect.width-10 ||
		this._rect.x < this.maxRect.x+10){
		if(this._rect.x > this.maxRect.x+this.maxRect.width-10){
			this._rect.x=this.maxRect.x+this.maxRect.width-10
			}else if(this._rect.x < this.maxRect.x+10){
			this._rect.x=this.maxRect.x+10;
		}
		this.hitWallX=true;
		this.isRender=true;
		}else{
		var pt;
		var $each_pt;
		for($each_pt in this.hits){
			pt=this.hits[$each_pt];
			if(this.hitWallX){
				break ;
			}
			this.checklrson(pt.x,pt.y);
		}
	}

}


__proto.checklrson=function(dx,dy){
	var rx=this._rect.x+dx>>0;
	var ry=this._rect.y+this._rect.height-dy>>0;
	rx=rx-rx%MapData.boxW;
	if(MapData.isJumpWall(rx,ry))
		return;
	var type=MapData.getType(rx,ry);
	if(type>MapData.bevel){
		if(this._rect.x>this.oldRect.x){
			this._rect.x=rx-1-dx;
			}else{
			this._rect.x=rx+MapData.boxW-dx;
		}
		this.hitWallX=true;
		this.isRender=true;
	}

}


__proto.getIsRight=function(){
	return this.isRight;
}


__proto.setMoveChg=function(fun){
	this.moveChg=fun;
}


__proto.updateNow=function(){
	this.updateXY();
}


__proto.getBodyRect=function(){
	return this._rect;
}


__proto.updateXY=function(){
	this._pt.x=this.x=this._rect.x;
	this._shootpt.x=this._pt.x=this.x=this._rect.x;
	this._pt.y=this.y=this._rect.y+this._rect.height;
	this._shootpt.y=this._rect.y+this._rect.height*0.5;
	if(this._rect.x!=this.oldRect.x || this._rect.y!=this.oldRect.y){
		this._oldpt.x=this.oldRect.x=this._rect.x;
		this.oldRect.y=this._rect.y;
		this._oldpt.y=this.oldRect.y+this.oldRect.height;
	}

	if(this.moveChg!=null)
		this.moveChg();
}


/**
*角色类型
*@param val
*
*/
__proto.getType=function(){
	return this._type;
}


__proto.getId=function(){
	return this._id;
}


__proto.getPt=function(){
	return this._pt;
}


__proto.getOldPt=function(){
	return this._oldpt;
}


__proto.getShootpt=function(){
	return this._shootpt;
}


__proto.getGroundPt=function(){
	return this._groundPt;
}


__proto.dispose=function(){
	this._container=null;
	this.isFrontBg=false;
	this.pause();
	this.fireing=0;
	this.firelist.length=0;
	this.isFly=false;
	this.touchGround=false;
	this.isDie=true;
	if(this.parent){
		this.parent.removeChild(this);
	}

	this.moveChg=null;
	this.viewRect=null;
}


__proto.getDie=function(){
	return this.isDie;
}


__proto.die=function(dir){
	this._container=null;
	this.isFrontBg=false;
	if(this._showBar)
		this.hpbar.removeSelf();
	this.isDie=true;
	if(this.fireing>0){
		if(this.touchGround){
			GlobalAPI.miniAniEffect.start(this.parent,this._pt.x,this._pt.y,"boom10",true,50);
			}else{
			GlobalAPI.miniAniEffect.start(this.parent,this._pt.x,this._pt.y,"boom11",true,30);
		}
	}

	this.firelist.length=0;
}


__proto.setData=function(val){
	this._dir=val.dir==-1 ? 1 :5;
	this.baseRoleData=val;
	if(this._showBar)
		this.hpbar.value=1;
}


__proto.hitDie=function(){}
__proto.getData=function(){
	return this.baseRoleData;
}


__proto.pause=function(show){
	(show===void 0)&& (show=false);
	if(!show){
		this._show=false;
		if(this.parent){
			this.parent.removeChild(this);
		}
	}

	if(!this._pause){
		this._pause=true;
		GlobalAPI.heartMgr.remove(this,this.step);
		if(this.hurtStep<101){
			GlobalAPI.heartMgr.remove(this,this.hurteffect);
			this.hurtBody.alpha=1;
			this.hurtStep=101;
		}
	}

}


__proto.getPause=function(){
	return this._pause;
}


__proto.play=function(val){
	if(!this._container){
		this._container=val;
	}

	if(!this.parent){
		if(this.baseRoleData.thing==6){
			this._container.addChildAt(this,0);
			}else{
			this._container.addChild(this);
		}
	}

	if(this._pause){
		this._pause=false;
		GlobalAPI.heartMgr.add(this,this.waiter);
	}

}


__proto.isFrontBgM=function(val){
	this.isFrontBg=val;
}


__proto.waiter=function(){
	GlobalAPI.heartMgr.remove(this,this.waiter);
	if(!this._pause){
		GlobalAPI.heartMgr.add(this,this.step);
	}

}


/**
*显示血条
*@param val
*
*/
__proto.showHPBar=function(val){
	this._showBar=val;
	if(this._showBar && this.hpbar==null){
		this.hpbar=new ProgressBar("comp/progress.png");
		this.hpbar.sizeGrid="2,2,2,2";
		this.hpbar.height=8;
		this.hpbar.width=40;
		this.hpbar.x=-25;
	}

	if(this.hpbar)
		this.hpbar.y=this.bodyRect.y-28;
}


__proto.hurt=function(val,isAoe){
	(isAoe===void 0)&& (isAoe=false);
	if(val<1 || this.baseRoleData.stronghp)return 0;
	this.baseRoleData.hp-=val;
	this.baseRoleData.hp=this.baseRoleData.hp<0 ? 0 :this.baseRoleData.hp;
	var tmphp=this.baseRoleData.hp;
	if(this._showBar){
		this.hpbar.value=tmphp/this.baseRoleData.maxhp;
		this.addChild(this.hpbar);
	}

	if(tmphp<1)return 1;
	GlobalAPI.heartMgr.add(this,this.hurteffect);
	this.hurtStep=0;
	return 0;
}


__proto.flyTo=function(pt,ox,oy,speed,flyover){
	(ox===void 0)&& (ox=0);
	(oy===void 0)&& (oy=0);
	(speed===void 0)&& (speed=10);
	this.isFly=true;
}


__proto.hurteffect=function(){
	this.hurtStep++;
	if(this.hurtStep>100){
		if(this._showBar)
			this.hpbar.removeSelf();
		GlobalAPI.heartMgr.remove(this,this.hurteffect);
	}

}


return BaseAct;
})(Sprite)


/**
*地图背景移动
*@author guowc
*
*/
//class game.control.loadmap.BgMove extends laya.display.Sprite
var BgMove=(function(_super){
	function BgMove(){
		this.oldW=0;
		this.bg1=null;
		this.bg2=null;
		this.dx=0;
		this.olddx=0;
		this._rect=null;
		this.bool=false;
		this.tmp=NaN;
		BgMove.__super.call(this);
		this.bg1=new Image;
		this.bg2=new Image;
		this.addChild(this.bg1);
		this.addChild(this.bg2);
	}

	__class(BgMove,'game.control.loadmap.BgMove',_super);
	var __proto=BgMove.prototype;
	__proto.start=function(rect){
		this._rect=rect;
		this.dx=this.olddx=0;
		this.bg1.x=0;
		this.bg2.x=-MapData.stageW;
		this.bg1.y=MapData.stageH-this.bg1.height;
		this.bg2.y=MapData.stageH-this.bg2.height;
		this.addChild(this.bg1);
		this.addChild(this.bg2);
	}

	__proto.setData=function(val){
		this.olddx=-1;
		if(val==null || val.length<1){
			this.bool=false;
			this.bg1.texture=this.bg2.texture=null;
			}else if(val.length==1){
			this.bool=false;
			this.bg1.texture=Loader.getRes(val[0]);
			}else{
			this.bool=true;
			for(var i=0;i<val.length;i++){
				if(i==0){
					this.bg1.texture=Loader.getRes(val[i]);
					}else{
					this.bg2.texture=Loader.getRes(val[i]);
				}
			}
		}
		this.updatebgwh();
	}

	__proto.updatebgwh=function(){
		if(this.bg1.texture){
			this.bg2.scaleY=this.bg1.scaleY=MapData.stageH/600;
			this.bg2.scaleX=this.bg1.scaleX=(MapData.stageW+2)/this.bg1.texture.width;
			this.bg1.y=MapData.stageH-this.bg1.texture.height*this.bg1.scaleY;
			this.bg2.y=MapData.stageH-this.bg2.texture.height*this.bg1.scaleY;
		}
	}

	__proto.fillRect=function(rect,num){
		(num===void 0)&& (num=1);
		if(this.bool){
			this.tmp=rect.x*num;
			this.dx=this.tmp%MapData.stageW;
			if(this.dx!=this.olddx){
				this.olddx=this.dx;
				if((this.tmp/MapData.stageW>>0)%2==0){
					this.bg1.x=-this.dx;
					this.bg2.x=this.bg1.x+MapData.stageW;
					}else{
					this.bg2.x=-this.dx;
					this.bg1.x=this.bg2.x+MapData.stageW;
				}
			}
		}
	}

	__proto.clear=function(){
		this.bg1.texture=this.bg2.texture=null;
	}

	return BgMove;
})(Sprite)


/**
*移动视窗 .
*@author guowc
*
*/
//class game.moveview.MoveViewPort extends laya.display.Sprite
var MoveViewPort=(function(_super){
	function MoveViewPort(mapWidth,mapHeight,focusX,focusY,movWidth,movHeight,viewWidth,viewHeight){
		this._layerContainers=null;
		this._layerContainerLen=0;
		this._viewRect=null;
		this._maxRect=null;
		this._movableRect=null;
		this._focusPoint=null;
		this._currViewRect=null;
		this._needUpdate=false;
		/*private function update(dt:Number,times:int):void{
		if (1==times)
			updateHandler(dt);
		else{
			for (var i:int=0;i < times;++i)
			updateHandler(0.03333);
		}
	}*/

	this.updateFunc=null;
	this.updateFuncaller=null;
	this._speedX=0;
	this._speedY=0;
	this.movablex=0;
	this.movabley=0;
	this._fast=false;
	this._isreset=false;
	MoveViewPort.__super.call(this);
	(focusX===void 0)&& (focusX=500);
	(focusY===void 0)&& (focusY=300);
	(movWidth===void 0)&& (movWidth=300);
	(movHeight===void 0)&& (movHeight=150);
	(viewWidth===void 0)&& (viewWidth=1000);
	(viewHeight===void 0)&& (viewHeight=600);
	MoveViewPort._instance=this;
	var sprite=null;
	this.mouseEnabled=false;
	this._layerContainers=[];
	var layers=LayerManager.getLayers();
	var mEnableds=LayerManager.getMouseEnableds();
	var i=0;
	while (i < layers.length){
		sprite=new Sprite();
		sprite.mouseEnabled=mEnableds[i];
		this.addChild(sprite);
		this._layerContainers.push(sprite);
		i++;
	}

	this._layerContainerLen=this._layerContainers.length;
	this._maxRect=new Rectangle(0,0,mapWidth,mapHeight);
	this._movableRect=new Rectangle(0,0,movWidth,movHeight);
	this._viewRect=new Rectangle(0,0,viewWidth,viewHeight);
	this._currViewRect=this._viewRect.clone();
	this.focusPoint=new Point(focusX,focusY);
	HeartManager.getInstance().add(this,this.updateHandler);
}


__class(MoveViewPort,'game.moveview.MoveViewPort',_super);
var __proto=MoveViewPort.prototype;
__proto.pause=function(val){
	if(val)
		HeartManager.getInstance().remove(this,this.updateHandler);
	else
	HeartManager.getInstance().add(this,this.updateHandler);
}


__proto.updateFun=function(caller,fun){
	this.updateFuncaller=caller;
	this.updateFunc=fun;
}


__proto.updateHandler=function(){
	if(!this._needUpdate)return;
	var offsetX=this._viewRect.x-this._currViewRect.x;
	var offsetY=this._viewRect.y-this._currViewRect.y;
	var absX=offsetX > 0 ? offsetX :-offsetX;
	var absY=offsetY > 0 ? offsetY :-offsetY;
	if (this._fast || (absX <=1 && absY <=1)){
		this._currViewRect.x=this._viewRect.x;
		this._currViewRect.y=this._viewRect.y;
		this._speedX=this._speedY=0;
		this._needUpdate=false;
		}else{
		var stepDistanceX=(Number(absX *MoveViewPort.stepConstX)+0.5)|0;
		var stepDistanceY=(Number(absY *MoveViewPort.stepConstY)+0.5)|0;
		if(stepDistanceX>18)stepDistanceX=18;
		if (this._speedX < stepDistanceX)
			this._speedX++;
		else if (this._speedX > stepDistanceX)
		this._speedX--;
		if (this._speedY < stepDistanceY)
			this._speedY++;
		else if (this._speedY > stepDistanceY)
		this._speedY--;
		if (this._speedX <=1)
			this._speedX=1;
		if (this._speedY <=0)
			this._speedY=1;
		if (absX <=this._speedX)
			this._currViewRect.x=this._viewRect.x;
		else
		this._currViewRect.x+=offsetX > 0 ? this._speedX :-this._speedX;
		if (absY <=this._speedY)
			this._currViewRect.y=this._viewRect.y;
		else
		this._currViewRect.y+=offsetY > 0 ? this._speedY :-this._speedY;
	}

	this.updateLayersPoint(this._currViewRect.x,this._currViewRect.y);
	if(this.updateFunc !=null){
		this.updateFunc.apply(this.updateFuncaller);
	}

}


/**
*更新视图值
*/
__proto.updateViewRect=function(rect){
	var temp=NaN;
	this._viewRect.width=rect.width;
	this._viewRect.height=rect.height;
	if (rect.x <=this._maxRect.x){
		this._viewRect.x=this._maxRect.x;
		}else{
		temp=this._maxRect.right-rect.width;
		this._viewRect.x=rect.x > temp ? temp :rect.x;
	}

	if (rect.y <=this._maxRect.y){
		this._viewRect.y=this._maxRect.y;
		}else{
		temp=this._maxRect.bottom-rect.height;
		this._viewRect.y=rect.y > temp ? temp :rect.y;
	}

	this._movableRect.x=this._viewRect.x+this.movablex;
	this._movableRect.y=this._viewRect.y+this.movabley;
	this._viewRect.x=(this._viewRect.x+0.5)>>0;
	this._viewRect.y=(this._viewRect.y+0.5)>>0;
}


__proto.getLayerContainer=function(layer){
	return this._layerContainers[layer];
}


__proto.updateLayersPoint=function(posX,posY){
	var i=0;
	var sprite;
	for (i=0;i < this._layerContainerLen;++i){
		sprite=this._layerContainers [i];
		if (sprite){
			sprite.x=-posX;
			sprite.y=-posY;
		}
	}

}


/**
*设定快速定位视图位置
*@param val
*
*/
__proto.setFast=function(val,isreset){
	(isreset===void 0)&& (isreset=false);
	this._fast=val;
	this._isreset=isreset;
	if(this._isreset){
		HeartManager.getInstance().add(this,this.resetgo);
	}

}


__proto.resetgo=function(){
	HeartManager.getInstance().remove(this,this.resetgo);
	if(this._isreset){
		this._fast=false;
	}

}


__proto.dispose=function(){
	HeartManager.getInstance().remove(this,this.updateHandler);
	this._needUpdate=false;
	this.updateFunc=null;
}


__getset(0,__proto,'movableRect',function(){
	return this._movableRect;
	},function(rect){

	this._movableRect.width=rect.width;
	this._movableRect.height=rect.height;
	this.movablex=rect.x;
	this.movabley=rect.y;
	this._movableRect.x=this._viewRect.x+this.movablex;
	this._movableRect.y=this._viewRect.y+this.movabley;
});


//_showViewRect.y=_viewRect.y;
__getset(0,__proto,'maxRect',function(){
	return this._maxRect;
	},function(rect){

	this._maxRect.x=rect.x;
	this._maxRect.y=rect.y;
	this._maxRect.width=rect.width;
	this._maxRect.height=rect.height;
});


__getset(0,__proto,'focusPoint',function(){
	return this._focusPoint;
	},function(value){

	this._focusPoint=value;
	var xdiff=this._focusPoint.x-this._movableRect.x;
	if (xdiff < 0){
		this._viewRect.x=this._viewRect.x+xdiff;
	};

	var xdiff1=this._focusPoint.x-(this._movableRect.x+this._movableRect.width);
	if (xdiff1 > 0){
		this._viewRect.x=this._viewRect.x+xdiff1;
	};

	var ydiff=this._focusPoint.y-this._movableRect.y;
	if (ydiff < 0){
		this._viewRect.y=this._viewRect.y+ydiff;
	};

	var ydiff1=this._focusPoint.y-(this._movableRect.y+this._movableRect.height);
	if (ydiff1 > 0){
		this._viewRect.y=this._viewRect.y+ydiff1;
	}

	this.updateViewRect(this._viewRect);
	this._needUpdate=true;
	this.updateHandler();
});


__getset(0,__proto,'viewRect',function(){
	return this._currViewRect;
	},function(rect){

	this.updateViewRect(rect);
	this._currViewRect.x=this._viewRect.x;
	this._currViewRect.y=this._viewRect.y;
	this._currViewRect.width=this._viewRect.width;
	this._currViewRect.height=this._viewRect.height;
	if(rect.height > this._maxRect.height)
		this._maxRect.height=rect.height;
	if(rect.width > this._maxRect.width)
		this._maxRect.width=rect.width;
});


__getset(0,__proto,'showViewRect',function(){
	return this._maxRect;
});


MoveViewPort.getInstance=function(){
	return MoveViewPort._instance;
}


MoveViewPort._instance=null;
__static(MoveViewPort,
['stepConstX',function(){return this.stepConstX=1 / 15;},'stepConstY',function(){return this.stepConstY=1 / 10;}
]);
return MoveViewPort;
})(Sprite)


/**
*<p>动画播放基类，提供了基础的动画播放控制方法和帧标签事件相关功能。</p>
*<p>可以继承此类，但不要直接实例化此类，因为有些方法需要由子类实现。</p>
*/
//class laya.display.AnimationPlayerBase extends laya.display.Sprite
var AnimationPlayerBase=(function(_super){
	function AnimationPlayerBase(){
		/**
		*是否循环播放，调用play(...)方法时，会将此值设置为指定的参数值。
		*/
		this.loop=false;
		/**
		*<p>播放顺序类型：AnimationPlayerBase.WRAP_POSITIVE为正序播放，AnimationPlayerBase.WRAP_REVERSE为倒序播放，AnimationPlayerBase.WRAP_PINGPONG为pingpong播放(当按指定顺序播放完结尾后，如果继续播发，则会改变播放顺序)。</p>
		*<p>默认为正序播放。</p>
		*/
		this.wrapMode=0;
		/**@private */
		this._index=0;
		/**@private */
		this._count=0;
		/**@private */
		this._isPlaying=false;
		/**@private */
		this._labels=null;
		/**是否是逆序播放*/
		this._isReverse=false;
		/**@private */
		this._frameRateChanged=false;
		/**@private */
		this._controlNode=null;
		/**@private */
		this._actionName=null;
		AnimationPlayerBase.__super.call(this);
		this._interval=Config.animationInterval;
		this._setUpNoticeType(0x1);
	}

	__class(AnimationPlayerBase,'laya.display.AnimationPlayerBase',_super);
	var __proto=AnimationPlayerBase.prototype;
	/**
	*<p>开始播放动画。play(...)方法被设计为在创建实例后的任何时候都可以被调用，当相应的资源加载完毕、调用动画帧填充方法(set frames)或者将实例显示在舞台上时，会判断是否正在播放中，如果是，则进行播放。</p>
	*<p>配合wrapMode属性，可设置动画播放顺序类型。</p>
	*@param start （可选）指定动画播放开始的索引(int)或帧标签(String)。帧标签可以通过addLabel(...)和removeLabel(...)进行添加和删除。
	*@param loop （可选）是否循环播放。
	*@param name （可选）动画名称。
	*@param showWarn（可选）是否动画不存在时打印警告
	*/
	__proto.play=function(start,loop,name,showWarn){
		(start===void 0)&& (start=0);
		(loop===void 0)&& (loop=true);
		(name===void 0)&& (name="");
		(showWarn===void 0)&& (showWarn=true);
		this._isPlaying=true;
		this.index=((typeof start=='string'))? this._getFrameByLabel(start):start;
		this.loop=loop;
		this._actionName=name;
		this._isReverse=this.wrapMode==1;
		if (this.interval > 0){
			this.timerLoop(this.interval,this,this._frameLoop,null,true,true);
		}
	}

	/**@private */
	__proto._getFrameByLabel=function(label){
		var i=0;
		for (i=0;i < this._count;i++){
			if (this._labels[i] && (this._labels [i]).indexOf(label)>=0)return i;
		}
		return 0;
	}

	/**@private */
	__proto._frameLoop=function(){
		if (this._isReverse){
			this._index--;
			if (this._index < 0){
				if (this.loop){
					if (this.wrapMode==2){
						this._index=this._count > 0 ? 1 :0;
						this._isReverse=false;
						}else {
						this._index=this._count-1;
					}
					this.event("complete");
					}else {
					this._index=0;
					this.stop();
					this.event("complete");
					return;
				}
			}
			}else {
			this._index++;
			if (this._index >=this._count){
				if (this.loop){
					if (this.wrapMode==2){
						this._index=this._count-2 >=0 ? this._count-2 :0;
						this._isReverse=true;
						}else {
						this._index=0;
					}
					this.event("complete");
					}else {
					this._index--;
					this.stop();
					this.event("complete");
					return;
				}
			}
		}
		this.index=this._index;
	}

	/**@private */
	__proto._setControlNode=function(node){
		if (this._controlNode){
			this._controlNode.off("display",this,this._checkResumePlaying);
			this._controlNode.off("undisplay",this,this._checkResumePlaying);
		}
		this._controlNode=node;
		if (node && node !=this){
			node.on("display",this,this._checkResumePlaying);
			node.on("undisplay",this,this._checkResumePlaying);
		}
	}

	/**@private */
	__proto._setDisplay=function(value){
		_super.prototype._setDisplay.call(this,value);
		this._checkResumePlaying();
	}

	/**@private */
	__proto._checkResumePlaying=function(){
		if (this._isPlaying){
			if (this._controlNode.displayedInStage)this.play(this._index,this.loop,this._actionName);
			else this.clearTimer(this,this._frameLoop);
		}
	}

	/**
	*停止动画播放。
	*/
	__proto.stop=function(){
		this._isPlaying=false;
		this.clearTimer(this,this._frameLoop);
	}

	/**
	*增加一个帧标签到指定索引的帧上。当动画播放到此索引的帧时会派发Event.LABEL事件，派发事件是在完成当前帧画面更新之后。
	*@param label 帧标签名称
	*@param index 帧索引
	*/
	__proto.addLabel=function(label,index){
		if (!this._labels)this._labels={};
		if (!this._labels[index])this._labels[index]=[];
		this._labels[index].push(label);
	}

	/**
	*删除指定的帧标签。
	*@param label 帧标签名称。注意：如果为空，则删除所有帧标签！
	*/
	__proto.removeLabel=function(label){
		if (!label)this._labels=null;
		else if (this._labels){
			for (var name in this._labels){
				this._removeLabelFromLabelList(this._labels[name],label);
			}
		}
	}

	/**@private */
	__proto._removeLabelFromLabelList=function(list,label){
		if (!list)return;
		for (var i=list.length-1;i >=0;i--){
			if (list[i]==label){
				list.splice(i,1);
			}
		}
	}

	/**
	*将动画切换到指定帧并停在那里。
	*@param position 帧索引或帧标签
	*/
	__proto.gotoAndStop=function(position){
		this.index=((typeof position=='string'))? this._getFrameByLabel(position):position;
		this.stop();
	}

	/**
	*@private
	*显示到某帧
	*@param value 帧索引
	*/
	__proto._displayToIndex=function(value){}
	/**
	*停止动画播放，并清理对象属性。之后可存入对象池，方便对象复用。
	*/
	__proto.clear=function(){
		this.stop();
		this._labels=null;
	}

	/**
	*<p>动画播放的帧间隔时间(单位：毫秒)。默认值依赖于Config.animationInterval=50，通过Config.animationInterval可以修改默认帧间隔时间。</p>
	*<p>要想为某动画设置独立的帧间隔时间，可以使用set interval，注意：如果动画正在播放，设置后会重置帧循环定时器的起始时间为当前时间，也就是说，如果频繁设置interval，会导致动画帧更新的时间间隔会比预想的要慢，甚至不更新。</p>
	*/
	__getset(0,__proto,'interval',function(){
		return this._interval;
		},function(value){
		if (this._interval !=value){
			this._frameRateChanged=true;
			this._interval=value;
			if (this._isPlaying && value > 0){
				this.timerLoop(value,this,this._frameLoop,null,true,true);
			}
		}
	});

	/**
	*是否正在播放中。
	*/
	__getset(0,__proto,'isPlaying',function(){
		return this._isPlaying;
	});

	/**
	*动画当前帧的索引。
	*/
	__getset(0,__proto,'index',function(){
		return this._index;
		},function(value){
		this._index=value;
		this._displayToIndex(value);
		if (this._labels && this._labels[value]){
			var tArr=this._labels[value];
			for (var i=0,len=tArr.length;i < len;i++){
				this.event("label",tArr[i]);
			}
		}
	});

	/**
	*当前动画中帧的总数。
	*/
	__getset(0,__proto,'count',function(){
		return this._count;
	});

	AnimationPlayerBase.WRAP_POSITIVE=0;
	AnimationPlayerBase.WRAP_REVERSE=1;
	AnimationPlayerBase.WRAP_PINGPONG=2;
	return AnimationPlayerBase;
})(Sprite)


/**
*<code>Component</code> 是ui控件类的基类。
*<p>生命周期：preinitialize > createChildren > initialize > 组件构造函数</p>
*/
//class laya.ui.Component extends laya.display.Sprite
var Component=(function(_super){
	function Component(){
		this._comXml=null;
		/**@private 控件的元数据。 */
		this._dataSource=null;
		/**@private 鼠标悬停提示 */
		this._toolTip=null;
		/**@private 标签 */
		this._tag=null;
		/**@private 禁用 */
		this._disabled=false;
		/**@private 变灰*/
		this._gray=false;
		/**
		*是否启用相对布局
		*/
		this.layoutEnabled=true;
		Component.__super.call(this);
		this._layout=LayoutStyle.EMPTY;
		this.preinitialize();
		this.createChildren();
		this.initialize();
	}

	__class(Component,'laya.ui.Component',_super);
	var __proto=Component.prototype;
	Laya.imps(__proto,{"laya.ui.IComponent":true})
	/**@inheritDoc */
	__proto.destroy=function(destroyChild){
		(destroyChild===void 0)&& (destroyChild=true);
		_super.prototype.destroy.call(this,destroyChild);
		this._dataSource=this._layout=null;
		this._tag=null;
		this._toolTip=null;
	}

	/**
	*<p>预初始化。</p>
	*@internal 子类可在此函数内设置、修改属性默认值
	*/
	__proto.preinitialize=function(){}
	/**
	*<p>创建并添加控件子节点。</p>
	*@internal 子类可在此函数内创建并添加子节点。
	*/
	__proto.createChildren=function(){}
	/**
	*<p>控件初始化。</p>
	*@internal 在此子对象已被创建，可以对子对象进行修改。
	*/
	__proto.initialize=function(){}
	/**
	*<p>延迟运行指定的函数。</p>
	*<p>在控件被显示在屏幕之前调用，一般用于延迟计算数据。</p>
	*@param method 要执行的函数的名称。例如，functionName。
	*@param args 传递给 <code>method</code> 函数的可选参数列表。
	*
	*@see #runCallLater()
	*/
	__proto.callLater=function(method,args){
		Laya.timer.callLater(this,method,args);
	}

	/**
	*<p>如果有需要延迟调用的函数（通过 <code>callLater</code> 函数设置），则立即执行延迟调用函数。</p>
	*@param method 要执行的函数名称。例如，functionName。
	*@see #callLater()
	*/
	__proto.runCallLater=function(method){
		Laya.timer.runCallLater(this,method);
	}

	/**
	*<p>立即执行影响宽高度量的延迟调用函数。</p>
	*@internal <p>使用 <code>runCallLater</code> 函数，立即执行影响宽高度量的延迟运行函数(使用 <code>callLater</code> 设置延迟执行函数)。</p>
	*@see #callLater()
	*@see #runCallLater()
	*/
	__proto.commitMeasure=function(){}
	/**
	*<p>重新调整对象的大小。</p>
	*/
	__proto.changeSize=function(){
		this.event("resize");
	}

	/**
	*@private
	*<p>获取对象的布局样式。</p>
	*/
	__proto.getLayout=function(){
		this._layout===LayoutStyle.EMPTY && (this._layout=new LayoutStyle());
		return this._layout;
	}

	/**
	*@private
	*<p>指定对象是否可使用布局。</p>
	*<p>如果值为true,则此对象可以使用布局样式，否则不使用布局样式。</p>
	*@param value 一个 Boolean 值，指定对象是否可使用布局。
	*/
	__proto._setLayoutEnabled=function(value){
		if (this._layout && this._layout.enable !=value){
			this._layout.enable=value;
			this.on("added",this,this.onAdded);
			this.on("removed",this,this.onRemoved);
			if (this.parent){
				this.onAdded();
			}
		}
	}

	/**
	*对象从显示列表移除的事件侦听处理函数。
	*/
	__proto.onRemoved=function(){
		this.parent.off("resize",this,this.onCompResize);
	}

	/**
	*对象被添加到显示列表的事件侦听处理函数。
	*/
	__proto.onAdded=function(){
		this.parent.on("resize",this,this.onCompResize);
		this.resetLayoutX();
		this.resetLayoutY();
	}

	/**
	*父容器的 <code>Event.RESIZE</code> 事件侦听处理函数。
	*/
	__proto.onCompResize=function(){
		if (this._layout && this._layout.enable){
			this.resetLayoutX();
			this.resetLayoutY();
		}
	}

	/**
	*<p>重置对象的 <code>X</code> 轴（水平方向）布局。</p>
	*/
	__proto.resetLayoutX=function(){
		var layout=this._layout;
		if (!isNaN(layout.anchorX))this.pivotX=layout.anchorX *this.width;
		if (!this.layoutEnabled)return;
		var parent=this.parent;
		if (parent){
			if (!isNaN(layout.centerX)){
				this.x=Math.round((parent.width-this.displayWidth)*0.5+layout.centerX+this.pivotX *this.scaleX);
				}else if (!isNaN(layout.left)){
				this.x=Math.round(layout.left+this.pivotX *this.scaleX);
				if (!isNaN(layout.right)){
					this.width=(parent._width-layout.left-layout.right)/ (this.scaleX || 0.01);
				}
				}else if (!isNaN(layout.right)){
				this.x=Math.round(parent.width-this.displayWidth-layout.right+this.pivotX *this.scaleX);
			}
		}
	}

	/**
	*<p>重置对象的 <code>Y</code> 轴（垂直方向）布局。</p>
	*/
	__proto.resetLayoutY=function(){
		var layout=this._layout;
		if (!isNaN(layout.anchorY))this.pivotY=layout.anchorY *this.height;
		if (!this.layoutEnabled)return;
		var parent=this.parent;
		if (parent){
			if (!isNaN(layout.centerY)){
				this.y=Math.round((parent.height-this.displayHeight)*0.5+layout.centerY+this.pivotY *this.scaleY);
				}else if (!isNaN(layout.top)){
				this.y=Math.round(layout.top+this.pivotY *this.scaleY);
				if (!isNaN(layout.bottom)){
					this.height=(parent._height-layout.top-layout.bottom)/ (this.scaleY || 0.01);
				}
				}else if (!isNaN(layout.bottom)){
				this.y=Math.round(parent.height-this.displayHeight-layout.bottom+this.pivotY *this.scaleY);
			}
		}
	}

	/**
	*对象的 <code>Event.MOUSE_OVER</code> 事件侦听处理函数。
	*/
	__proto.onMouseOver=function(e){
		Laya.stage.event("showtip",this._toolTip);
	}

	/**
	*对象的 <code>Event.MOUSE_OUT</code> 事件侦听处理函数。
	*/
	__proto.onMouseOut=function(e){
		Laya.stage.event("hidetip",this._toolTip);
	}

	/**
	*<p>对象的显示宽度（以像素为单位）。</p>
	*/
	__getset(0,__proto,'displayWidth',function(){
		return this.width *this.scaleX;
	});

	/**
	*<p>表示显示对象的宽度，以像素为单位。</p>
	*<p><b>注：</b>当值为0时，宽度为自适应大小。</p>
	*/
	__getset(0,__proto,'width',function(){
		if (this._width)return this._width;
		return this.measureWidth;
		},function(value){
		if (this._width !=value){
			this._width=value;
			this.conchModel && this.conchModel.size(this._width,this._height);
			this.callLater(this.changeSize);
			if (this._layout.enable && (!isNaN(this._layout.centerX)|| !isNaN(this._layout.right)|| !isNaN(this._layout.anchorX)))this.resetLayoutX();
		}
	});

	/**
	*<p>显示对象的实际显示区域宽度（以像素为单位）。</p>
	*/
	__getset(0,__proto,'measureWidth',function(){
		var max=0;
		this.commitMeasure();
		for (var i=this.numChildren-1;i >-1;i--){
			var comp=this.getChildAt(i);
			if (comp.visible){
				max=Math.max(comp.x+comp.width *comp.scaleX,max);
			}
		}
		return max;
	});

	/**
	*<p>对象的显示高度（以像素为单位）。</p>
	*/
	__getset(0,__proto,'displayHeight',function(){
		return this.height *this.scaleY;
	});

	/**
	*<p>表示显示对象的高度，以像素为单位。</p>
	*<p><b>注：</b>当值为0时，高度为自适应大小。</p>
	*/
	__getset(0,__proto,'height',function(){
		if (this._height)return this._height;
		return this.measureHeight;
		},function(value){
		if (this._height !=value){
			this._height=value;
			this.conchModel && this.conchModel.size(this._width,this._height);
			this.callLater(this.changeSize);
			if (this._layout.enable && (!isNaN(this._layout.centerY)|| !isNaN(this._layout.bottom)|| !isNaN(this._layout.anchorY)))this.resetLayoutY();
		}
	});

	/**
	*<p>数据赋值，通过对UI赋值来控制UI显示逻辑。</p>
	*<p>简单赋值会更改组件的默认属性，使用大括号可以指定组件的任意属性进行赋值。</p>
	*@example
	//默认属性赋值
	dataSource={label1:"改变了label",checkbox1:true};//(更改了label1的text属性值，更改checkbox1的selected属性)。
	//任意属性赋值
	dataSource={label2:{text:"改变了label",size:14},checkbox2:{selected:true,x:10}};
	*/
	__getset(0,__proto,'dataSource',function(){
		return this._dataSource;
		},function(value){
		this._dataSource=value;
		for (var prop in this._dataSource){
			if (this.hasOwnProperty(prop)&& !((typeof (this[prop])=='function'))){
				this[prop]=this._dataSource[prop];
			}
		}
	});

	/**@inheritDoc */
	__getset(0,__proto,'scaleY',_super.prototype._$get_scaleY,function(value){
		if (Laya.superGet(Sprite,this,'scaleY')!=value){
			Laya.superSet(Sprite,this,'scaleY',value);
			this.callLater(this.changeSize);
			this._layout.enable && this.resetLayoutY();
		}
	});

	/**
	*<p>显示对象的实际显示区域高度（以像素为单位）。</p>
	*/
	__getset(0,__proto,'measureHeight',function(){
		var max=0;
		this.commitMeasure();
		for (var i=this.numChildren-1;i >-1;i--){
			var comp=this.getChildAt(i);
			if (comp.visible){
				max=Math.max(comp.y+comp.height *comp.scaleY,max);
			}
		}
		return max;
	});

	/**@inheritDoc */
	__getset(0,__proto,'scaleX',_super.prototype._$get_scaleX,function(value){
		if (Laya.superGet(Sprite,this,'scaleX')!=value){
			Laya.superSet(Sprite,this,'scaleX',value);
			this.callLater(this.changeSize);
			this._layout.enable && this.resetLayoutX();
		}
	});

	/**
	*<p>从组件顶边到其内容区域顶边之间的垂直距离（以像素为单位）。</p>
	*/
	__getset(0,__proto,'top',function(){
		return this._layout.top;
		},function(value){
		if (value !=this._layout.top){
			this.getLayout().top=value;
			this._setLayoutEnabled(true);
		}
		this.resetLayoutY();
	});

	/**
	*<p>从组件底边到其内容区域底边之间的垂直距离（以像素为单位）。</p>
	*/
	__getset(0,__proto,'bottom',function(){
		return this._layout.bottom;
		},function(value){
		if (value !=this._layout.bottom){
			this.getLayout().bottom=value;
			this._setLayoutEnabled(true);
		}
		this.resetLayoutY();
	});

	/**
	*<p>从组件左边到其内容区域左边之间的水平距离（以像素为单位）。</p>
	*/
	__getset(0,__proto,'left',function(){
		return this._layout.left;
		},function(value){
		if (value !=this._layout.left){
			this.getLayout().left=value;
			this._setLayoutEnabled(true);
		}
		this.resetLayoutX();
	});

	/**
	*<p>从组件右边到其内容区域右边之间的水平距离（以像素为单位）。</p>
	*/
	__getset(0,__proto,'right',function(){
		return this._layout.right;
		},function(value){
		if (value !=this._layout.right){
			this.getLayout().right=value;
			this._setLayoutEnabled(true);
		}
		this.resetLayoutX();
	});

	/**
	*<p>在父容器中，此对象的水平方向中轴线与父容器的水平方向中心线的距离（以像素为单位）。</p>
	*/
	__getset(0,__proto,'centerX',function(){
		return this._layout.centerX;
		},function(value){
		if (value !=this._layout.centerX){
			this.getLayout().centerX=value;
			this._setLayoutEnabled(true);
		}
		this.resetLayoutX();
	});

	/**
	*<p>在父容器中，此对象的垂直方向中轴线与父容器的垂直方向中心线的距离（以像素为单位）。</p>
	*/
	__getset(0,__proto,'centerY',function(){
		return this._layout.centerY;
		},function(value){
		if (value !=this._layout.centerY){
			this.getLayout().centerY=value;
			this._setLayoutEnabled(true);
		}
		this.resetLayoutY();
	});

	/**X轴锚点，值为0-1*/
	__getset(0,__proto,'anchorX',function(){
		return this._layout.anchorX;
		},function(value){
		if (value !=this._layout.anchorX){
			this.getLayout().anchorX=value;
			this._setLayoutEnabled(true);
		}
		this.resetLayoutX();
	});

	/**Y轴锚点，值为0-1*/
	__getset(0,__proto,'anchorY',function(){
		return this._layout.anchorY;
		},function(value){
		if (value !=this._layout.anchorY){
			this.getLayout().anchorY=value;
			this._setLayoutEnabled(true);
		}
		this.resetLayoutY();
	});

	/**
	*<p>对象的标签。</p>
	*@internal 冗余字段，可以用来储存数据。
	*/
	__getset(0,__proto,'tag',function(){
		return this._tag;
		},function(value){
		this._tag=value;
	});

	/**
	*<p>鼠标悬停提示。</p>
	*<p>可以赋值为文本 <code>String</code> 或函数 <code>Handler</code> ，用来实现自定义样式的鼠标提示和参数携带等。</p>
	*@example
	*private var _testTips:TestTipsUI=new TestTipsUI();
	*private function testTips():void {
		//简单鼠标提示
		*btn2.toolTip="这里是鼠标提示&lt;b&gt;粗体&lt;/b&gt;&lt;br&gt;换行";
		//自定义的鼠标提示
		*btn1.toolTip=showTips1;
		//带参数的自定义鼠标提示
		*clip.toolTip=new Handler(this,showTips2,["clip"]);
		*}
	*private function showTips1():void {
		*_testTips.label.text="这里是按钮["+btn1.label+"]";
		*tip.addChild(_testTips);
		*}
	*private function showTips2(name:String):void {
		*_testTips.label.text="这里是"+name;
		*tip.addChild(_testTips);
		*}
	*/
	__getset(0,__proto,'toolTip',function(){
		return this._toolTip;
		},function(value){
		if (this._toolTip !=value){
			this._toolTip=value;
			if (value !=null){
				this.on("mouseover",this,this.onMouseOver);
				this.on("mouseout",this,this.onMouseOut);
				}else {
				this.off("mouseover",this,this.onMouseOver);
				this.off("mouseout",this,this.onMouseOut);
			}
		}
	});

	/**
	*XML 数据。
	*/
	__getset(0,__proto,'comXml',function(){
		return this._comXml;
		},function(value){
		this._comXml=value;
	});

	/**是否变灰。*/
	__getset(0,__proto,'gray',function(){
		return this._gray;
		},function(value){
		if (value!==this._gray){
			this._gray=value;
			UIUtils.gray(this,value);
		}
	});

	/**是否禁用页面，设置为true后，会变灰并且禁用鼠标。*/
	__getset(0,__proto,'disabled',function(){
		return this._disabled;
		},function(value){
		if (value!==this._disabled){
			this.gray=this._disabled=value;
			this.mouseEnabled=!value;
		}
	});

	return Component;
})(Sprite)


//class game.view.ClipBarAll extends laya.display.Sprite
var ClipBarAll=(function(_super){
	function ClipBarAll(){
		this.clipbar=null;
		this.clipbar1=null;
		ClipBarAll.__super.call(this);
		if(ClipBarAll.instance)return;
		ClipBarAll.instance=this;
		this.clipbar=new ClipBar;
		this.clipbar1=new ClipBar;
		this.addChild(this.clipbar);
		this.addChild(this.clipbar1);
	}

	__class(ClipBarAll,'game.view.ClipBarAll',_super);
	var __proto=ClipBarAll.prototype;
	__proto.setDouble=function(val){
		if(val){
			this.clipbar1.visible=true;
			this.clipbar.x=-this.clipbar.width;
			Tween.to(this.clipbar,{x:10,ease:Ease.backOut},800);
			this.clipbar1.x=MapData.stageW;
			Tween.to(this.clipbar1,{x:MapData.stageW-this.clipbar1.width-5,ease:Ease.backOut},800);
			this.clipbar.setRight(false);
			this.clipbar1.setRight(true);
			}else{
			this.clipbar1.visible=false;
			this.clipbar.setRight(true);
			if(GlobalAPI.isPC){
				this.clipbar.x=MapData.stageW;
				Tween.to(this.clipbar,{x:MapData.stageW-this.clipbar1.width-5,ease:Ease.backOut},800);
				}else{
				this.clipbar.x=MapData.stageW;
				Tween.to(this.clipbar,{x:MapData.stageW-this.clipbar1.width*1.5-5,ease:Ease.backOut},800);
				this.clipbar.scale(1.5,1.5,true);
			}
		}
	}

	__proto.setGunSkin=function(frame,idx){
		if(idx==1){
			this.clipbar.setGunSkin(frame);
			}else{
			this.clipbar1.setGunSkin(frame);
		}
	}

	__proto.setGunInfo=function(idx,gunid,gunlen){
		if(idx==1){
			this.clipbar.setGunInfo(gunid,gunlen);
			}else{
			this.clipbar1.setGunInfo(gunid,gunlen);
		}
	}

	__proto.setTxt=function(clip,allclip,idx){
		if(idx==1){
			this.clipbar.setTxt(clip,allclip);
			}else{
			this.clipbar1.setTxt(clip,allclip);
		}
	}

	ClipBarAll.getInstance=function(){
		if(!ClipBarAll.instance){
			ClipBarAll.instance=new ClipBarAll;
		}
		return ClipBarAll.instance;
	}

	ClipBarAll.instance=null;
	return ClipBarAll;
})(Sprite)


/**
*连杀 提示
*@author guowc
*
*/
//class game.view.ComboTip extends laya.display.Sprite
var ComboTip=(function(_super){
	function ComboTip(){
		this.time=0;
		this.id=0;
		this.num=null;
		this.bg=null;
		ComboTip.__super.call(this);
		this.bg=new Image("othericon/combobg.png");
		this.addChild(this.bg);
		this.num=new NumberEffect;
		this.addChild(this.num);
		this.num.setAsset("num_r",PathMgr.path_miniani+"number.json",PathMgr.path_miniani+"number"+".ani",
		SkinMgr.numRrect,3);
		this.bg.pivot(60,60);
		this.num.pivot(0,SkinMgr.numLrect.height>>1);
		this.bg.visible=this.num.visible=false;
		this.bg.scale(0.7,0.7,true);
	}

	__class(ComboTip,'game.view.ComboTip',_super);
	var __proto=ComboTip.prototype;
	__proto.reset=function(){
		this.time=0;
		this.id=0;
		this.bg.visible=this.num.visible=false;
		GlobalAPI.heartMgr.remove(this,this.step);
	}

	__proto.step=function(){
		if(this.time>200){
			this.id=0;
			this.bg.visible=false;
			this.num.visible=false;
			GlobalAPI.heartMgr.remove(this,this.step);
			}else{
			this.time++;
		}
	}

	__proto.kill=function(){
		if(this.id==0){
			GlobalAPI.heartMgr.add(this,this.step);
		}
		this.id++;
		if(GlobalAPI.taskVO.comboNum<this.id){
			GlobalAPI.taskVO.comboNum=this.id;
		}
		if(GlobalAPI.rankVO.comboNum<this.id){
			GlobalAPI.rankVO.comboNum=this.id;
		}
		this.time=0;
		if(this.id>1){
			this.num.visible=this.bg.visible=true;
			if(this.id>9){
				this.num.x=-SkinMgr.numLrect.width;
				}else{
				this.num.x=-SkinMgr.numLrect.width>>1;
			}
			this.num.setNum(this.id+"");
			this.bg.scale(0.2,0.2,true);
			Tween.to(this.bg,{scaleX:0.7,scaleY:0.7,ease:Ease.backOut},300);
		}
	}

	return ComboTip;
})(Sprite)


//class game.view.HeadBar extends laya.display.Sprite
var HeadBar=(function(_super){
	function HeadBar(){
		this.mc=null;
		this.hpBar=null;
		this.expBar=null;
		this.levtxt=null;
		HeadBar.__super.call(this);
		var bg=new Image("othericon/mybox.png");
		this.addChild(bg);
		this.mc=ImgAniEffect.getInstance().start(this,0,0,"system_head",false);
		this.addChild(this.mc);
		var myMask=new Sprite;
		this.mc.pos(7,7,true);
		myMask.graphics.drawRect(0,0,50,50,"#000000");
		this.mc.mask=myMask;
		var img=new Image("comp/bg1.png");
		this.addChild(img);
		img.pos(bg.x+bg.width+2,bg.y);
		img.sizeGrid="4,4,4,4";
		img.size(45,18);
		this.hpBar=new MyProgressBar("comp/headbar.png");
		this.hpBar.sizeGrid="4,4,4,4";
		this.hpBar.size(150,20);
		this.addChild(this.hpBar);
		this.expBar=new MyProgressBar("comp/expbar.png");
		this.expBar.sizeGrid="4,4,4,4";
		this.expBar.size(150,20);
		this.addChild(this.expBar);
		this.expBar.x=this.hpBar.x=bg.x+bg.width+2;
		this.hpBar.y=18;
		this.expBar.y=38;
		this.levtxt=new Text;
		this.levtxt.color="#ffffff";
		this.levtxt.align="center";
		this.levtxt.valign="middle";
		this.levtxt.fontSize=14;
		this.levtxt.size(45,22);
		this.addChild(this.levtxt);
		this.levtxt.pos(img.x,img.y-1);
	}

	__class(HeadBar,'game.view.HeadBar',_super);
	var __proto=HeadBar.prototype;
	__proto.setHead=function(id){
		this.mc.gotoAndStop(id);
	}

	__proto.setHp=function(val,max,fast){
		(fast===void 0)&& (fast=false);
		this.hpBar.setData(val,max,true,fast);
	}

	__proto.setExp=function(val,max,isMax,fast){
		(isMax===void 0)&& (isMax=false);
		(fast===void 0)&& (fast=false);
		if(isMax){
			this.expBar.setData(val,max,true,true);
			this.expBar.txt.text="MAX";
			}else{
			this.expBar.setData(val,max,true,fast);
		}
	}

	__proto.setLev=function(val){
		this.levtxt.text="Lv."+val;
	}

	return HeadBar;
})(Sprite)


/**
*关卡按扭
*@author guowc
*
*/
//class game.view.LevelBtn extends laya.display.Sprite
var LevelBtn=(function(_super){
	function LevelBtn(){
		//}
		this._gray=false;
		this.star=0;
		this.sort=0;
		this.level=0;
		this.btn=null;
		this.numeffect=null;
		this.bosstxt=null;
		this.lockimg=null;
		this.bossimg=null;
		this.tipimg=null;
		this.starlist=null;
		LevelBtn.__super.call(this);
		this.numeffect=new NumberEffect;
		this.numeffect.setAsset("num_j",PathMgr.path_miniani+"number.json",PathMgr.path_miniani+"number"+".ani",
		SkinMgr.numJrect,5);
		this.btn=new Button("comp/btn3.png");
		this.btn.sizeGrid="11,12,12,13";
		this.btn.mouseEnabled=false;
		this.numeffect.scale(0.8,0.8,true);
		this.bossimg=new Image("comp/boss.png");
		this.bossimg.pivot(this.bossimg.width>>1,this.bossimg.height>>1);
		this.bossimg.scale(0.6,0.6,true);
		this.lockimg=new Image("othericon/lockicon.png");
		this.lockimg.pivotX=this.lockimg.width>>1;
		this.lockimg.scale(0.7,0.7,true);
		this.tipimg=new Image("comp/tip.png");
		this.tipimg.x=this.tipimg.y=5;
		this.tipimg.scale(0.7,0.7);
		this.mouseEnabled=true;
		this.addChild(this.btn);
		this.addChild(this.numeffect);
		this.addChild(this.lockimg);
		this.addChild(this.bossimg);
		this.addChild(this.tipimg);
		this.starlist=new Starlist;
		this.starlist.setStarImg(0,4,"comp/star.png","comp/starbg.png",1);
		this.addChild(this.starlist);
		this.on("mouseover",this,this.roll);
		this.on("mouseout",this,this.roll);
	}

	__class(LevelBtn,'game.view.LevelBtn',_super);
	var __proto=LevelBtn.prototype;
	__proto.setNum=function(start,end,show){
		(show===void 0)&& (show=true);
		this.sort=start;
		this.level=end;
		var num=this.level+1;
		this.numeffect.setNum(num.toString());
		this.numeffect.visible=show;
		this.btn.gray=false;
		if(show)
			this.setBgSize(120,66,String(num).length);
	}

	__proto.setboss=function(val){
		this.bossimg.visible=val;
		this.numeffect.visible=!val;
	}

	__proto.setBgSize=function(w,h,size){
		this.pivotX=w>>1;
		this.pivotY=h>>1;
		this.lockimg.x=this.pivotX;
		this.bossimg.pos(this.pivotX,this.pivotY);
		this.btn.size(w,h);
		this.numeffect.x=(this.btn.width-32*size*0.8)>>1;
		this.numeffect.y=this.btn.height-this.numeffect.getSelfBounds().height*0.8>>1;
		this.starlist.x=this.btn.width-94>>1;
		this.starlist.y=this.btn.height+2;
		this.size(w,h);
	}

	__proto.setLock=function(val,tip){
		(tip===void 0)&& (tip=false);
		this.mouseEnabled=!val;
		this.lockimg.visible=val;
		this.tipimg.visible=tip;
		this.scaleX=this.scaleY=0.5;
		Tween.to(this,{scaleX:1,scaleY:1,ease:Ease.backOut},300);
	}

	__proto.setStar=function(val){
		this.star=val;
		this.starlist.setStarImg(val,4,"comp/star.png","comp/starbg.png",1);
	}

	__proto.roll=function(evt){
		if(evt.type=="mouseover"){
			this.btn.filters=SkinMgr.yellowGlowfilter;
			}else{
			this.btn.filters=null;
		}
	}

	/**是否变灰。*/
	__getset(0,__proto,'gray',function(){
		return this._gray;
		},function(value){
		if (value!==this._gray){
			this._gray=value;
			UIUtils.gray(this,value);
		}
	});

	return LevelBtn;
})(Sprite)


//class game.view.skillui.SkillAddBar extends laya.display.Sprite
var SkillAddBar=(function(_super){
	function SkillAddBar(){
		this.pools=[];
		this.bars=null;
		SkillAddBar.__super.call(this);
		this.bars=[];
	}

	__class(SkillAddBar,'game.view.skillui.SkillAddBar',_super);
	var __proto=SkillAddBar.prototype;
	__proto.useSkill=function(skillid){
		var time=GlobalAPI.skillinfo.getCD(skillid);
		var skilltime=1;
		var sbox;
		var box;
		var $each_box;
		for($each_box in this.bars){
			box=this.bars[$each_box];
			if(box.idOrder==skillid){
				sbox=box;
				break ;
			}
		}
		if(!sbox){
			sbox=this.getBox();
			sbox.setImg(GlobalAPI.skillinfo.getSkillImgPath(skillid));
			sbox.idOrder=skillid;
			this.addChild(sbox);
			this.bars.push(sbox);
		}
		this.updatePos();
		if(time<skilltime)time=skilltime+1000;
		sbox.setTime(time);
		sbox.setSkillTime(skilltime);
		sbox.overHandler(new Handler(this,this.killSkill,[skillid]));
		if(this.bars.length==1){
			GlobalAPI.systembar.addChild(this);
		}
	}

	__proto.killSkill=function(skillid){
		var id=0;
		var box;
		var $each_box;
		for($each_box in this.bars){
			box=this.bars[$each_box];
			if(box.idOrder==skillid){
				this.bars.splice(id,1);
				this.pools.push(box);
				box.removeSelf();
				break ;
			}
			id++;
		}
		this.updatePos();
		if(this.bars.length==0){
			this.removeSelf();
		}
	}

	__proto.updatePos=function(){
		var box;
		var i=0;
		var $each_box;
		for($each_box in this.bars){
			box=this.bars[$each_box];
			box.pos(i*72,0);
			i++;
		}
	}

	__proto.pause=function(){
		var box;
		var $each_box;
		for($each_box in this.bars){
			box=this.bars[$each_box];
			if(box.isInCD()){
				box.pause();
			}
		}
	}

	__proto.play=function(){
		var box;
		var $each_box;
		for($each_box in this.bars){
			box=this.bars[$each_box];
			if(box.isInCD()){
				box.begin();
			}
		}
	}

	__proto.getBox=function(){
		var mbox;
		if(this.pools.length>0){
			mbox=this.pools.pop();
			}else{
			mbox=new SkillBox(100,new Rectangle(0,0,62,62));
			mbox.setLock(false);
			mbox.setIdx("");
			mbox.setNum(-1);
		}
		return mbox;
	}

	__proto.reset=function(){
		var box;
		var $each_box;
		for($each_box in this.bars){
			box=this.bars[$each_box];
			if(box.isInCD()){
				box.stop();
			}
			box.removeSelf();
			this.pools.push(box);
		}
		this.bars.length=0;
	}

	return SkillAddBar;
})(Sprite)


/**
*技能条
*@author guowc
*
*/
//class game.view.skillui.SkillBar extends laya.display.Sprite
var SkillBar=(function(_super){
	function SkillBar(){
		this.keyskills=[];
		this.skillids=[];
		this.bomidx=0;
		this.step=0;
		this.skillLen=0;
		this.box=null;
		this.bars=null;
		this.i=0;
		this.skillInfo=null;
		SkillBar.__super.call(this);
		this.pt=new Point;
		this.init();
	}

	__class(SkillBar,'game.view.skillui.SkillBar',_super);
	var __proto=SkillBar.prototype;
	__proto.init=function(){
		this.skillInfo=GlobalAPI.skillinfo;
		this.bars=[];
		for(this.i=0;this.i<this.skillInfo.skillBarLen;this.i++){
			this.box=new SkillBox(100,new Rectangle(0,0,62,62));
			this.addChild(this.box);
			this.bars[this.i]=this.box;
			this.box.on("mousedown",this,this.onClick);
		}
	}

	__proto.onClick=function(evt){
		var box=evt.target;
		if((box instanceof game.view.skillui.SkillBox )){
			this.useSkill(box.idOrder);
		}
	}

	__proto.start=function(){
		if(GlobalAPI.isPC){
			GlobalAPI.heartMgr.add(this,this.go);
		}
		this.keyskills.length=0;
		this.skillids.length=0;
		var openlock=false;
		var idx=0;
		this.skillLen=0;
		for(this.i=0;this.i<this.skillInfo.skillBarLen;this.i++){
			this.box=this.bars[this.i];
			var id=GlobalAPI.heroproxy.getSkillSelect(this.i);
			this.box.setLock(id<0);
			if(id>-1){
				this.skillLen++;
				openlock=true;
				this.keyskills.push([this.box,false,this.skillInfo.skillKey1[idx],this.skillInfo.skillKey2[idx],this.skillInfo.skillKey3[idx]]);
				if(GlobalAPI.isPC){
					this.box.setIdx(this.skillInfo.skillKeyName[idx]);
					}else{
					this.box.setIdx("");
				}
				this.box.idOrder=idx;
				this.box.visible=true;
				this.box.setImg(GlobalAPI.skillinfo.getSkillImgPath(id));
				this.skillids[idx]=id;
				this.box.x=idx*72;
				if(GlobalAPI.skillinfo.getType(id)==200){
					this.box.setNum(GlobalAPI.heroproxy.getSkillLev(id));
					}else{
					this.box.setNum(-1);
				}
				if(GlobalAPI.isPC==false){
					var dis=180;
					if(idx==2){
						dis=260;
						idx=0;
					}
					this.box.x=MathUtil.coss[180+idx*25>>0]*dis;
					this.box.y=MathUtil.sins[180+idx*25>>0]*dis;
				}
				idx++;
				}else{
				this.box.visible=false;
				this.box.setImg("");
			}
		}
		this.visible=openlock;
	}

	__proto.getSkillLen=function(){
		return this.skillLen;
	}

	__proto.go=function(){
		var arr;
		var $each_arr;
		for($each_arr in this.keyskills){
			arr=this.keyskills[$each_arr];
			this.box=arr[0];
			if(arr[1] && (KeyUtil.down[arr[2]] || KeyUtil.down[arr[3]] || KeyUtil.down[arr[4]])){
				arr[1]=false;
				this.useSkill(this.box.idOrder);
			}
			if(!KeyUtil.down[arr[2]] && !KeyUtil.down[arr[3]] && !KeyUtil.down[arr[4]]){
				arr[1]=true;
			};
			var skillid=this.skillids[this.box.idOrder];
			if(this.box.isSkillNow && this.box.isSkillTime==false){
				switch(skillid){
					case 0:
						break ;
					case 7:
						break ;
					case 3:
						break ;
					}
				this.box.isSkillNow=false;
			}
		}
	}

	//GlobalAPI.hero.setStaus(box.idall,false);
	__proto.pause=function(){
		for(this.i=0;this.i<this.skillInfo.skillBarLen;this.i++){
			this.box=this.bars[this.i];
			if(this.box.isInCD()){
				this.box.pause();
			}
		}
	}

	__proto.play=function(){
		for(this.i=0;this.i<this.skillInfo.skillBarLen;this.i++){
			this.box=this.bars[this.i];
			if(this.box.isInCD()){
				this.box.begin();
			}
		}
	}

	__proto.useProp=function(skillid){
		var idx=this.skillids.indexOf(skillid);
		if(idx>-1){
			this.box=this.keyskills[idx][0];
			this.useSkilled(skillid,this.box,true);
			}else{
			this.useSkilled(skillid,null,true);
			GlobalAPI.systembar.skilladdbar.useSkill(skillid);
		}
	}

	__proto.useSkill=function(idx){
		this.box=this.keyskills[idx][0];
		var skillid=this.skillids[idx];
		if(this.box.getLock())return;
		if(this.box.isInCD()){
			if(GlobalAPI.skillinfo.getType(skillid)==200){
				QuickMoveTip.show("道具冷却中...");
				}else{
				QuickMoveTip.show("技能冷却中...");
			}
			}else{
			if(GlobalAPI.skillinfo.getType(skillid)==200){
				if(GlobalAPI.heroproxy.getSkillLev(skillid)<1){
					QuickMoveTip.show("数量不足...");
					return;
					}else{
					var num=GlobalAPI.heroproxy.getSkillLev(skillid)-1;
					GlobalAPI.heroproxy.setSkillLev(skillid,num);
					this.box.setNum(GlobalAPI.heroproxy.getSkillLev(skillid));
					GlobalAPI.taskVO.usePropNum++;
				}
			}
			this.useSkilled(skillid,this.box);
		}
	}

	__proto.useSkilled=function(skillid,sbox,isProp){
		(isProp===void 0)&& (isProp=false);
		var time=this.skillInfo.getCD(skillid);
		var skilltime=1;
		if(isProp==false){
			var h;
			switch(skillid){
				case 0:
					if(this.bomidx<1){
						GlobalAPI.heartMgr.add(this,this.bom);
					}
					this.bomidx+=6;
					break ;
				case 1:
					this.bolt();
					break ;
				case 7:
					var $each_h;
					for($each_h in GlobalAPI.heros){
						h=GlobalAPI.heros[$each_h];
						h.addProp(7);
					}
					break ;
				case 2:
					var $each_h;
					for($each_h in GlobalAPI.heros){
						h=GlobalAPI.heros[$each_h];
						h.addProp(111);
					}
					break ;
				case 3:
					var $each_h;
					for($each_h in GlobalAPI.heros){
						h=GlobalAPI.heros[$each_h];
						h.addProp(107);
					}
					break ;
				case 4:
					var $each_h;
					for($each_h in GlobalAPI.heros){
						h=GlobalAPI.heros[$each_h];
						h.addProp(105);
					}
					break ;
				case 5:
					var $each_h;
					for($each_h in GlobalAPI.heros){
						h=GlobalAPI.heros[$each_h];
						if(h.getDie()==false){
							h.addProp(106);
							break ;
						}
					}
					break ;
				case 6:
					var $each_h;
					for($each_h in GlobalAPI.heros){
						h=GlobalAPI.heros[$each_h];
						if(h.getDie()==false){
							h.addProp(6);
							break ;
						}
					}
					break ;
				}
		}
		if(sbox){
			if(time<skilltime)time=skilltime+1000;
			sbox.setTime(time);
			sbox.setSkillTime(skilltime);
		}
	}

	__proto.reset=function(){
		this.step=this.bomidx=0;
		GlobalAPI.heartMgr.remove(this,this.bom);
		GlobalAPI.heartMgr.remove(this,this.go);
		for(this.i=0;this.i<this.skillInfo.skillBarLen;this.i++){
			this.box=this.bars[this.i];
			if(this.box.isInCD()){
				this.box.stop();
			}
		}
	}

	__proto.bom=function(){
		this.step--;
		if(this.step<1){
			this.step=5;
			this.bomidx--;
			if(this.bomidx>0){
				var hero;
				for(var $each_hero in GlobalAPI.heros){
					hero=GlobalAPI.heros[$each_hero];
					if(hero.getDie()==false){
						this.pt.x=hero.x;
						this.pt.y=hero.y-50;
						hero.weaponMgr.followbomfire(this.pt);
					}
				}
				}else{
				this.bomidx=0;
				GlobalAPI.heartMgr.remove(this,this.bom);
			}
		}
	}

	__proto.bolt=function(){
		var hero;
		for(var $each_hero in GlobalAPI.heros){
			hero=GlobalAPI.heros[$each_hero];
			if(hero.getDie()==false){
				hero.weaponMgr.boltfire();
				break ;
			}
		}
	}

	return SkillBar;
})(Sprite)


/**
*cd时间
*@author guowc
*
*/
//class mylaya.common.TimerCD extends laya.display.Sprite
var TimerCD=(function(_super){
	function TimerCD(time,rect){
		this._bitmap=null;
		// cd图
		this._time=0;
		this._rect=null;
		this._startFrom=0;
		this._startTime=0;
		this._handler=null;
		this._inCD=false;
		this.masksp=null;
		this.passtime=0;
		/**
		*剩余时间
		*/
		this._leftTime=NaN;
		this._totalTime=NaN;
		this._idx=0;
		this._img=null;
		this.timtxt=null;
		this._showtime=false;
		this._st=NaN;
		this.radius=0;
		TimerCD.__super.call(this);
		this._time=Math.ceil(time / 360);
		this._leftTime=time;
		this._totalTime=time;
		this._rect=rect;
		this.init();
	}

	__class(TimerCD,'mylaya.common.TimerCD',_super);
	var __proto=TimerCD.prototype;
	__proto.showtime=function(){
		this.timtxt=new Text();
		this.timtxt.width=this._rect.width;
		this.timtxt.height=this._rect.height;
		this.timtxt.fontSize=this._rect.height*0.4>>0;
		this.timtxt.align="center";
		this.timtxt.valign="middle";
		this.timtxt.color="#ffffff";
		this.addChild(this.timtxt);
		this._showtime=true;
	}

	__proto.init=function(){
		this._img=new Image;
		this.addChild(this._img);
		this._bitmap=new Sprite;
		this._bitmap.alpha=0.5;
		this.addChild(this._bitmap);
		this.cacheBitmaps();
		this._startFrom=-90;
	}

	__proto.cacheBitmaps=function(){
		var a=this._rect.width>>1;
		var b=this._rect.height>>1;
		this.radius=Math.sqrt(a*a+b*b)>>0;
		this.masksp=new Sprite;
		this.masksp.graphics.drawRect(0,0,this._rect.width,this._rect.height,"#000000");
		this._bitmap.mask=this.masksp;
	}

	__proto.drawBg=function(shape){
		if (!shape)
			return;
		var graphics=shape.graphics;
		var startAngle=this._startFrom;
		var endAngle=270;
		graphics.clear();
		graphics.drawPie(this._rect.width>>1,this._rect.height>>1,this.radius,this._startFrom+1,endAngle,"#000000");
	}

	__proto.update=function(){
		if(this._inCD==false)return;
		var t=Browser.now();
		this.passtime=t-this._startTime;
		this._leftTime=this._totalTime-this.passtime;
		var n=this.passtime / this._time>>0;
		if(n > this._startFrom+90){
			this._startFrom=n-90;
			if(this._startFrom >=270){
				this._startFrom=269;
				this.drawBg(this._bitmap);
				this.cdover();
				if(this._handler)
					this._handler.run();
				}else{
				this.drawBg(this._bitmap);
			}
		}
		if(this._showtime){
			this._st=(this._leftTime*0.001>>0)+1;
			this.timtxt.text=this._st.toString();
		}
	}

	__proto.begin=function(){
		if(this._time>0)
			this._inCD=true;
		this._startTime=Browser.now()-this.passtime;
		HeartManager.getInstance().add(this,this.update);
		if(this._showtime){
			this.timtxt.visible=true;
		}
	}

	__proto.setHandler=function(val){
		this._handler=val;
	}

	__proto.cdover=function(){
		this.stop();
	}

	__proto.pause=function(){
		HeartManager.getInstance().remove(this,this.update);
	}

	__proto.stop=function(){
		HeartManager.getInstance().remove(this,this.update);
		this._startFrom=-90;
		this._inCD=false;
		this._startTime=0;
		this.passtime=0;
		this._bitmap.graphics.clear();
		if(this._showtime){
			this.timtxt.visible=false;
		}
	}

	__proto.isInCD=function(){
		return this._inCD;
	}

	__proto.setTime=function(value){
		this.stop();
		this._time=Math.ceil(value / 360);
		this._leftTime=value;
		this._totalTime=value;
		this.begin();
	}

	__proto.getLeftTime=function(){
		return this._leftTime;
	}

	__proto.setImg=function(path){
		this._img.skin=path;
		this._img.pos(this._rect.width-this._img.width>>1,this._rect.height-this._img.height>>1);
	}

	__proto.dispose=function(){
		this.stop();
		this._bitmap=null;
		this._rect=null;
		this._showtime=false;
		this.timtxt.removeSelf();
		this.removeSelf();
	}

	return TimerCD;
})(Sprite)


/**
*显示星数
*@author guowc
*
*/
//class game.view.Starlist extends laya.display.Sprite
var Starlist=(function(_super){
	function Starlist(){
		this.idx=0;
		this.stars=null;
		this.starsbg=null;
		this.ne=null;
		this._has=0;
		Starlist.__super.call(this);
		this.stars=[];
		this.starsbg=[];
	}

	__class(Starlist,'game.view.Starlist',_super);
	var __proto=Starlist.prototype;
	/**
	*图片数显示
	*@param has 拥有的数量
	*@param all 总数量
	*@param gay 间隙
	*@param skin 皮肤
	*@param skinbg 背景皮肤(null为变灰)
	*
	*/
	__proto.setStarImg=function(has,all,skin,skinbg,gay,isAni){
		(gay===void 0)&& (gay=1);
		(isAni===void 0)&& (isAni=false);
		var starimg;
		var i=0;
		this._has=has;
		for(i=0;i<all;i++){
			starimg=this.starsbg[i];
			if(!starimg){
				if(skinbg){
					starimg=new Image(skinbg);
					}else{
					starimg=new Image(skin);
					starimg.gray=true;
				}
				starimg.x=i*(starimg.width+gay);
				this.addChild(starimg);
				this.starsbg.push(starimg);
			}
			starimg=this.stars[i];
			if(!starimg){
				starimg=new Image(skin);
				this.stars.push(starimg);
				this.addChild(starimg);
			}
			starimg.x=i*(starimg.width+gay);
			starimg.y=0;
			if(isAni){
				starimg.visible=false;
				}else{
				starimg.visible=i<has;
			}
		}
		if(isAni && this._has>0){
			this.idx=0;
			this.addani();
		}
	}

	__proto.addani=function(){
		var _$this=this;
		var img=this.stars[this.idx];
		if(!img)return;
		img.scaleX=img.scaleY=8;
		img.rotation=180;
		img.visible=true;
		var dx=img.x;
		var dy=img.y;
		img.x=-img.source.width*8>>1;
		img.y=-img.source.height*8>>1;
		this.idx++;
		Tween.to(img,{rotation:0,scaleX:1,scaleY:1,x:dx,y:dy},600,null,Handler.create(this,over));
		function over (){
			GlobalAPI.soundMgr.playSound("starsound");
			if(_$this.idx<_$this._has){
				_$this.addani();
			}
		}
	}

	/**
	*数字形式显示
	*@param has
	*@param all
	*
	*/
	__proto.setStarTxt=function(has,all){
		if(!this.ne){
			this.addChild(new Image("comp/star.png"));
			this.ne=new NumberEffect;
			this.ne.setAsset("num_e",PathMgr.path_miniani+"number.json",PathMgr.path_miniani+"number"+".ani",
			SkinMgr.numErect,5);
			this.ne.x=24;
			this.ne.y=3;
			this.addChild(this.ne);
		}
		this.ne.setNum(has+"/"+all);
	}

	return Starlist;
})(Sprite)


/**
*滚动提示
*@author guowc
*
*/
//class mylaya.common.util.QuickMoveTip extends laya.display.Sprite
var QuickMoveTip=(function(_super){
	function QuickMoveTip(){
		this._flag=false;
		this._fields=[];
		this.poolfields=[];
		this._waitLst=[];
		this.oldmsg=null;
		this.idx=0;
		QuickMoveTip.__super.call(this);
		this.mouseEnabled=false;
	}

	__class(QuickMoveTip,'mylaya.common.util.QuickMoveTip',_super);
	var __proto=QuickMoveTip.prototype;
	__proto.appendMessage=function(msg){
		if(!msg)return;
		if(this.idx > 1 || this._fields.length>3){
			if(msg !=this.oldmsg){
				this.oldmsg=msg;
				this._waitLst.push(msg);
			}
			return;
		}
		this.idx=30;
		var textfield;
		if(this.poolfields.length>0){
			textfield=this.poolfields.shift();
			}else{
			textfield=new Text();
			textfield.color="#ffffff";
			textfield.fontSize=20;
			textfield.align="center";
			textfield.valign="middle";
			textfield.bgColor="#000000";
			textfield.width=500;
			textfield.mouseEnabled=false;
		}
		textfield.x=QuickMoveTip.QUICK_WIDTH-500>>1;
		textfield.alpha=1;
		textfield.y=120;
		this.addChild(textfield);
		this._fields.push(textfield);
		textfield.text=msg;
		if(!this._flag){
			this._flag=true;
			QuickMoveTip._container.addChild(QuickMoveTip._quickTips);
			Laya.timer.frameLoop(1,this,this.update);
		}
	}

	__proto.update=function(){
		this.idx--;
		var txt;
		var num=0;
		var len=this._fields.length;
		var i=0;
		for(i=0;i<len;i++){
			txt=this._fields[i];
			txt.y-=1;
			if(txt.y<40){
				txt.alpha-=0.05;
				if(txt.alpha<0.1)
					num++;
			}
		}
		while(num>0){
			txt=this._fields.shift();
			txt.parent.removeChild(txt);
			this.poolfields.push(txt);
			num--;
		}
		if(this._fields.length<3){
			if(this._waitLst.length>0){
				this.oldmsg="";
				this.appendMessage(this._waitLst[0]);
				this._waitLst.shift();
			}
			if(this._fields.length<1){
				this._flag=false;
				this.oldmsg="";
				Laya.timer.clear(this,this.update);
				if(this.parent)
					this.parent.removeChild(this);
			}
		}
	}

	QuickMoveTip.init=function(container){
		if(QuickMoveTip._quickTips)return;
		QuickMoveTip._quickTips=new QuickMoveTip();
		QuickMoveTip._container=container;
	}

	QuickMoveTip.show=function(tips){
		QuickMoveTip._quickTips.appendMessage(tips);
	}

	QuickMoveTip.clearWaitList=function(){
		if(QuickMoveTip._quickTips && QuickMoveTip._quickTips._waitLst)
			QuickMoveTip._quickTips._waitLst.length=0;
	}

	QuickMoveTip.getInstance=function(){
		return QuickMoveTip._quickTips;
	}

	QuickMoveTip.QUICK_WIDTH=780;
	QuickMoveTip.TIP_NUM=3;
	QuickMoveTip._quickTips=null;
	QuickMoveTip._container=null;
	return QuickMoveTip;
})(Sprite)


/**
*闪电效果
*@author guowc
*
*/
//class mylaya.effects.BoltEffect extends laya.display.Sprite
var BoltEffect=(function(_super){
	function BoltEffect(){
		this._time=0;
		this._aniFun=null;
		this.randomnode=15;
		this.node=20;
		this.lineA=3;
		this.lineColorA="#FFFFFF";
		this.lineB=10;
		this.lineColorB="#0066FF";
		this.sx=0;
		this.sy=0;
		this.glow_mc=null;
		this.main_mc=null;
		this.pnt=null;
		this._startPt=null;
		this._targetPt=null;
		this.mpt=null;
		BoltEffect.__super.call(this);
		this.glow_mc=new Sprite;
		this.main_mc=new Sprite;
		this.addChild(this.glow_mc);
		this.addChild(this.main_mc);
		this.pnt=new Point;
		this._startPt=new Point;
		this._targetPt=new Point;
		this.mpt=new Point;
	}

	__class(BoltEffect,'mylaya.effects.BoltEffect',_super);
	var __proto=BoltEffect.prototype;
	/**
	*
	*@param time 动画次数
	*
	*/
	__proto.lightningToAni=function(startPt,endPt,time,aniFun){
		(time===void 0)&& (time=10);
		this._time=time;
		this._startPt.x=startPt.x;
		this._startPt.y=startPt.y;
		this._targetPt.x=endPt.x;
		this._targetPt.y=endPt.y;
		this._aniFun=aniFun;
		HeartManager.getInstance().add(this,this.step);
		this.lightningTo(this._startPt,endPt);
	}

	__proto.step=function(){
		this._time--;
		this.lightningTo(this._startPt,this._targetPt);
		if(this._time<1){
			HeartManager.getInstance().remove(this,this.step);
			if(this._aniFun!=null){
				this._aniFun.runWith(this);
				this._aniFun=null;
			}
			this.main_mc.graphics.clear();
			this.glow_mc.graphics.clear();
		}
	}

	/**
	*
	*@param startPt
	*@param endPt
	*@param valx
	*@param valy
	*
	*/
	__proto.lightningTo=function(startPt,endPt){
		this.glow_mc.graphics.clear();
		this.main_mc.graphics.clear();
		this.sx=this.mpt.x=startPt.x;
		this.sy=this.mpt.y=startPt.y;
		var d=Math.random()*this.randomnode+this.node>>0;
		var valx=(endPt.x-this.sx)/ d>>0;
		var valy=(endPt.y-this.sy)/ d>>0;
		var n=0;
		var dir=0;
		for (n=0;n < d;n++){
			dir=Math.random()*4<2 ? 1 :-1;
			this.pnt.x=this.sx+valx *n+Math.random()*10*dir>>0;
			this.pnt.y=this.sy+valy *n+Math.random()*10*dir>>0;
			this.glow_mc.graphics.drawLine(this.mpt.x,this.mpt.y,this.pnt.x,this.pnt.y,this.lineColorB,this.lineB);
			this.main_mc.graphics.drawLine(this.mpt.x,this.mpt.y,this.pnt.x,this.pnt.y,this.lineColorA,this.lineA);
			this.mpt.x=this.pnt.x;
			this.mpt.y=this.pnt.y;
		}
		this.glow_mc.graphics.drawLine(this.mpt.x,this.mpt.y,endPt.x,endPt.y,this.lineColorB,this.lineB);
		this.main_mc.graphics.drawLine(this.mpt.x,this.mpt.y,endPt.x,endPt.y,this.lineColorA,this.lineA);
	}

	/**
	*闪电粗细颜色
	*@param a
	*@param acolor
	*@param b
	*@param bcolor
	*
	*/
	__proto.setLineThickness=function(a,acolor,b,bcolor){
		(acolor===void 0)&& (acolor="#FFFFFF");
		(b===void 0)&& (b=10);
		(bcolor===void 0)&& (bcolor="#0066FF");
		this.lineA=a;
		this.lineB=b;
		this.lineColorA=acolor;
		this.lineColorB=bcolor;
	}

	__proto.setLineThick=function(a,b){
		this.lineA=a;
		this.lineB=b;
	}

	/**
	*闪电节点数
	*@param val
	*
	*/
	__proto.lineNode=function(val,randomval){
		(randomval===void 0)&& (randomval=15);
		this.node=val;
		this.randomnode=randomval;
	}

	return BoltEffect;
})(Sprite)


/**
*激光效果
*@author guowc
*
*/
//class mylaya.effects.LaserEffect extends laya.display.Sprite
var LaserEffect=(function(_super){
	function LaserEffect(){
		this._time=0;
		this._aniFun=null;
		this.lineA=3;
		this.lineColorA="#FFFFFF";
		this.lineB=10;
		this.lineColorB="#0066FF";
		this.glow_mc=null;
		this.main_mc=null;
		this._startPt=null;
		this._targetPt=null;
		this.num=6;
		this.add=false;
		LaserEffect.__super.call(this);
		this.glow_mc=new Sprite;
		this.main_mc=new Sprite;
		this.addChild(this.glow_mc);
		this.addChild(this.main_mc);
		this._startPt=new Point;
		this._targetPt=new Point;
	}

	__class(LaserEffect,'mylaya.effects.LaserEffect',_super);
	var __proto=LaserEffect.prototype;
	/**
	*
	*@param time 动画次数
	*
	*/
	__proto.lightningToAni=function(startPt,endPt,time,aniFun){
		(time===void 0)&& (time=10);
		this._time=time;
		this._startPt.x=startPt.x;
		this._startPt.y=startPt.y;
		this._targetPt.x=endPt.x;
		this._targetPt.y=endPt.y;
		this._aniFun=aniFun;
		HeartManager.getInstance().add(this,this.step);
		this.lightningTo(this._startPt,endPt);
	}

	__proto.step=function(){
		this._time--;
		this.lightningTo(this._startPt,this._targetPt);
		if(this._time<1){
			HeartManager.getInstance().remove(this,this.step);
			if(this._aniFun!=null){
				this._aniFun.runWith(this);
				this._aniFun=null;
			}
			this.main_mc.graphics.clear();
			this.glow_mc.graphics.clear();
		}
	}

	/**
	*
	*@param startPt
	*@param endPt
	*@param valx
	*@param valy
	*
	*/
	__proto.lightningTo=function(startPt,endPt){
		this.num+=2;
		if(this.num>10){
			this.num=0;
		}
		this.glow_mc.graphics.clear();
		this.main_mc.graphics.clear();
		this.glow_mc.graphics.drawLine(startPt.x,startPt.y,endPt.x,endPt.y,this.lineColorB,this.lineB+this.num);
		this.main_mc.graphics.drawLine(startPt.x,startPt.y,endPt.x,endPt.y,this.lineColorA,this.lineA+this.num);
	}

	/**
	*闪电粗细颜色
	*@param a
	*@param acolor
	*@param b
	*@param bcolor
	*
	*/
	__proto.setLineThickness=function(a,acolor,b,bcolor){
		(acolor===void 0)&& (acolor="#FFFFFF");
		(b===void 0)&& (b=10);
		(bcolor===void 0)&& (bcolor="#0066FF");
		this.setLineThick(a,b);
		this.lineColorA=acolor;
		this.lineColorB=bcolor;
	}

	__proto.setLineThick=function(a,b){
		this.lineA=a;
		this.lineB=b;
		this.num=0;
		this.add=true;
	}

	return LaserEffect;
})(Sprite)


/**
*数字效果
*@author guowc
*
*/
//class mylaya.effects.NumberEffect extends laya.display.Sprite
var NumberEffect=(function(_super){
	function NumberEffect(){
		this._idx=0;
		this._align=0;
		this._size=0;
		this._rect=null;
		this.wid=0;
		this.anis=null;
		this._atlasurl=null;
		this._aniurl=null;
		this._aniName=null;
		this._num=null;
		this.numani=null;
		NumberEffect.__super.call(this);
		this.anis=[];
	}

	__class(NumberEffect,'mylaya.effects.NumberEffect',_super);
	var __proto=NumberEffect.prototype;
	/**
	*设定数字
	*@param num
	*@param align 0左对齐　1右对齐
	*@param showSize 显示所有位数不足0补
	*
	*/
	__proto.setNum=function(num,align,showSize){
		(align===void 0)&& (align=0);
		(showSize===void 0)&& (showSize=false);
		if(!this._aniName)
			throw "please set number asset";
		if(this._num==num)return;
		this._num=num;
		var ar=num.split("");
		var i=0;
		var len=ar.length;
		if(showSize){
			var tmp=this._size-len;
			while(tmp>0){
				ar.unshift("0");
				tmp--;
				len++;
			}
		};
		var nw=0;
		var str;
		var animc;
		this.reset();
		if(align==0){
			for(i=0;i<len;i++){
				str=ar[i];
				animc=this.getAni();
				animc.loadResource(this._atlasurl,this._aniurl);
				switch(str){
					case "/":
						animc.setStop(10,this._aniName);
						break ;
					case "-":
						animc.setStop(11,this._aniName);
						break ;
					case ":":
						animc.setStop(12,this._aniName);
						break ;
					case "%":
						animc.setStop(13,this._aniName);
						break ;
					case "+":
						animc.setStop(14,this._aniName);
						break ;
					default :
						animc.setStop(parseInt(ar[i]),this._aniName);
						break ;
					}
				nw=0;
				animc.x=i*this._rect.width+nw;
				animc.y=0;
				this.addChild(animc);
			}
			}else{
			len-=1;
			var j=1;
			for(i=len;i>-1;i--){
				str=ar[i];
				animc=this.getAni();
				animc.loadResource(this._atlasurl,this._aniurl);
				switch(str){
					case "/":
						animc.setStop(10,this._aniName);
						break ;
					case "-":
						animc.setStop(11,this._aniName);
						break ;
					case ":":
						animc.setStop(12,this._aniName);
						break ;
					case "%":
						animc.setStop(13,this._aniName);
						break ;
					case "+":
						animc.setStop(14,this._aniName);
						break ;
					default :
						animc.setStop(parseInt(ar[i]),this._aniName);
						break ;
					}
				animc.x=this.wid-j*this._rect.width;
				animc.y=0;
				this.addChild(animc);
				j++;
			}
		}
	}

	/**
	*设定数字资源
	*@param aniName 资源名 AniMc
	*@param rect 每个数字大小(一致)
	*@param size 总位数
	*
	*/
	__proto.setAsset=function(aniName,atlasurl,aniurl,rect,size){
		this._rect=rect;
		this._size=size;
		this.wid=this._rect.width*this._size;
		this._atlasurl=atlasurl;
		this._aniurl=aniurl;
		this._aniName=aniName;
	}

	__proto.setNumAni=function(num,fast,step,align){
		(fast===void 0)&& (fast=false);
		(step===void 0)&& (step=20);
		(align===void 0)&& (align=0);
		if(!this.numani){
			this.numani=new StepNumAni();
		}
		this._align=align;
		this.numani.setData(num,Handler.create(this,this.stepNum,null,false),fast,step);
	}

	__proto.stepNum=function(num){
		this.setNum(num+"",this._align);
	}

	/*public function setNumAni(startnum:int,endnum:int,step:int=20):void{
	if(endnum<step){
		setNum(endNum+"");
		}else{
		nowNum=startnum;
		endNum=endnum;
		numstep=(endnum-startnum)/step>>0;
		Laya.timer.loop(50,this,stepNum);
	}

}


private var numstep:int;
private var nowNum:int;
private var endNum:int;*/
__proto.getAni=function(){
	if(this.anis.length>0){
		return this.anis.pop();
	}

	return new AniMc;
}


/*private function stepNum():void{
nowNum+=numstep;
if(nowNum>=endNum){
	Laya.timer.clear(this,stepNum);
	nowNum=endNum;
}


setNum(nowNum+"");
}*/


__proto.reset=function(){
	while(this.numChildren>0){
		this.anis.push(this.removeChildAt(0));
	}

}


__getset(0,__proto,'idx',function(){
	return this._idx;
	},function(val){

	this._idx=val;
});


return NumberEffect;
})(Sprite)


//class mylaya.effects.ShootEffect extends laya.display.Sprite
var ShootEffect=(function(_super){
	function ShootEffect(){
		this.lineA=4;
		this.lineColorA="#ff9900";
		this.lineB=3;
		this.lineColorB="#ffffcc";
		this.node=3;
		this.sx=0;
		this.sy=0;
		this.main_mc=null;
		this.glow_mc=null;
		this.pnt=null;
		this.mpt=null;
		this._startPt=null;
		this._targetPt=null;
		ShootEffect.__super.call(this);
		this.rect=new Rectangle;
		this.glow_mc=new Sprite;
		this.main_mc=new Sprite;
		this.addChild(this.glow_mc);
		this.addChild(this.main_mc);
		this.pnt=new Point;
		this._startPt=new Point;
		this._targetPt=new Point;
		this.mpt=new Point;
	}

	__class(ShootEffect,'mylaya.effects.ShootEffect',_super);
	var __proto=ShootEffect.prototype;
	/**
	*
	*@param startPt
	*@param endPt
	*@param valx
	*@param valy
	*
	*/
	__proto.lightningTo=function(startPt,endPt,valx,valy){
		this.glow_mc.graphics.clear();
		this.main_mc.graphics.clear();
		this.sx=this.mpt.x=startPt.x;
		this.sy=this.mpt.y=startPt.y;
		var dx=Math.abs(endPt.x-startPt.x)>>0;
		var dy=Math.abs(endPt.y-startPt.y)>>0;
		var d=this.node%2==0 ? this.node+1 :this.node;
		var n=0;
		var ax=0;
		var ay=0;
		for (n=0;n < d;n++){
			if(n>0 && n%2!=0){
				ax+=valx*0.5>>0;
				ay+=valy*0.5>>0;
				}else{
				ax+=valx;
				ay+=valy;
			}
			if(Math.abs(ax)>=dx && Math.abs(ay)>=dy){
				this.glow_mc.graphics.drawLine(this.mpt.x,this.mpt.y,endPt.x,endPt.y,this.lineColorA,this.lineA);
				this.main_mc.graphics.drawLine(this.mpt.x,this.mpt.y,endPt.x,endPt.y,this.lineColorB,this.lineB);
				break ;
			}
			this.pnt.x=this.sx+ax;
			this.pnt.y=this.sy+ay;
			if(n%2!=0){
				this.mpt.x=this.pnt.x;
				this.mpt.y=this.pnt.y;
				}else{
				this.glow_mc.graphics.drawLine(this.mpt.x,this.mpt.y,this.pnt.x,this.pnt.y,this.lineColorA,this.lineA);
				this.main_mc.graphics.drawLine(this.mpt.x,this.mpt.y,this.pnt.x,this.pnt.y,this.lineColorB,this.lineB);
			}
		}
	}

	/**
	*线性点数
	*@param val
	*
	*/
	__proto.lineNode=function(val){
		this.node=val;
	}

	/**
	*弹道粗细颜色
	*@param a
	*@param acolor
	*@param b
	*@param bcolor
	*
	*/
	__proto.setLineThickness=function(a,acolor,b,bcolor){
		(acolor===void 0)&& (acolor="#ff9900");
		(b===void 0)&& (b=10);
		(bcolor===void 0)&& (bcolor="#ffffcc");
		this.lineA=a;
		this.lineB=b;
		this.lineColorA=acolor;
		this.lineColorB=bcolor;
	}

	__proto.setLineThick=function(a,b){
		this.lineA=a;
		this.lineB=b;
	}

	return ShootEffect;
})(Sprite)


/**
*<p> <code>Text</code> 类用于创建显示对象以显示文本。</p>
*<p>
*注意：如果运行时系统找不到设定的字体，则用系统默认的字体渲染文字，从而导致显示异常。(通常电脑上显示正常，在一些移动端因缺少设置的字体而显示异常)。
*</p>
*@example
*package
*{
	*import laya.display.Text;
	*public class Text_Example
	*{
		*public function Text_Example()
		*{
			*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*onInit();
			*}
		*private function onInit():void
		*{
			*var text:Text=new Text();//创建一个 Text 类的实例对象 text 。
			*text.text="这个是一个 Text 文本示例。";
			*text.color="#008fff";//设置 text 的文本颜色。
			*text.font="Arial";//设置 text 的文本字体。
			*text.bold=true;//设置 text 的文本显示为粗体。
			*text.fontSize=30;//设置 text 的字体大小。
			*text.wordWrap=true;//设置 text 的文本自动换行。
			*text.x=100;//设置 text 对象的属性 x 的值，用于控制 text 对象的显示位置。
			*text.y=100;//设置 text 对象的属性 y 的值，用于控制 text 对象的显示位置。
			*text.width=300;//设置 text 的宽度。
			*text.height=200;//设置 text 的高度。
			*text.italic=true;//设置 text 的文本显示为斜体。
			*text.borderColor="#fff000";//设置 text 的文本边框颜色。
			*Laya.stage.addChild(text);//将 text 添加到显示列表。
			*}
		*}
	*}
*@example
*Text_Example();
*function Text_Example()
*{
	*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
	*onInit();
	*}
*function onInit()
*{
	*var text=new laya.display.Text();//创建一个 Text 类的实例对象 text 。
	*text.text="这个是一个 Text 文本示例。";
	*text.color="#008fff";//设置 text 的文本颜色。
	*text.font="Arial";//设置 text 的文本字体。
	*text.bold=true;//设置 text 的文本显示为粗体。
	*text.fontSize=30;//设置 text 的字体大小。
	*text.wordWrap=true;//设置 text 的文本自动换行。
	*text.x=100;//设置 text 对象的属性 x 的值，用于控制 text 对象的显示位置。
	*text.y=100;//设置 text 对象的属性 y 的值，用于控制 text 对象的显示位置。
	*text.width=300;//设置 text 的宽度。
	*text.height=200;//设置 text 的高度。
	*text.italic=true;//设置 text 的文本显示为斜体。
	*text.borderColor="#fff000";//设置 text 的文本边框颜色。
	*Laya.stage.addChild(text);//将 text 添加到显示列表。
	*}
*@example
*class Text_Example {
	*constructor(){
		*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
		*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
		*this.onInit();
		*}
	*private onInit():void {
		*var text:laya.display.Text=new laya.display.Text();//创建一个 Text 类的实例对象 text 。
		*text.text="这个是一个 Text 文本示例。";
		*text.color="#008fff";//设置 text 的文本颜色。
		*text.font="Arial";//设置 text 的文本字体。
		*text.bold=true;//设置 text 的文本显示为粗体。
		*text.fontSize=30;//设置 text 的字体大小。
		*text.wordWrap=true;//设置 text 的文本自动换行。
		*text.x=100;//设置 text 对象的属性 x 的值，用于控制 text 对象的显示位置。
		*text.y=100;//设置 text 对象的属性 y 的值，用于控制 text 对象的显示位置。
		*text.width=300;//设置 text 的宽度。
		*text.height=200;//设置 text 的高度。
		*text.italic=true;//设置 text 的文本显示为斜体。
		*text.borderColor="#fff000";//设置 text 的文本边框颜色。
		*Laya.stage.addChild(text);//将 text 添加到显示列表。
		*}
	*}
*/
//class laya.display.Text extends laya.display.Sprite
var Text=(function(_super){
	function Text(){
		/**@private */
		this._clipPoint=null;
		/**当前使用的位置字体。*/
		this._currBitmapFont=null;
		/**@private 表示文本内容字符串。*/
		this._text=null;
		/**@private 表示文本内容是否发生改变。*/
		this._isChanged=false;
		/**@private 表示文本的宽度，以像素为单位。*/
		this._textWidth=0;
		/**@private 表示文本的高度，以像素为单位。*/
		this._textHeight=0;
		/**@private 存储文字行数信息。*/
		this._lines=[];
		/**@private 保存每行宽度*/
		this._lineWidths=[];
		/**@private 文本的内容位置 X 轴信息。*/
		this._startX=NaN;
		/**@private 文本的内容位置X轴信息。 */
		this._startY=NaN;
		/**@private 当前可视行索引。*/
		this._lastVisibleLineIndex=-1;
		/**@private 当前可视行索引。*/
		this._words=null;
		/**@private */
		this._charSize={};
		/**
		*是否显示下划线。
		*/
		this.underline=false;
		/**
		*下划线的颜色，为null则使用字体颜色。
		*/
		this._underlineColor=null;
		Text.__super.call(this);
		this.overflow=Text.VISIBLE;
		this._style=new CSSStyle(this);
		(this._style).wordWrap=false;
	}

	__class(Text,'laya.display.Text',_super);
	var __proto=Text.prototype;
	/**@inheritDoc */
	__proto.destroy=function(destroyChild){
		(destroyChild===void 0)&& (destroyChild=true);
		_super.prototype.destroy.call(this,destroyChild);
		this._lines=null;
		if (this._words){
			this._words.length=0;
			this._words=null;
		}
	}

	/**
	*@private
	*@inheritDoc
	*/
	__proto._getBoundPointsM=function(ifRotate){
		(ifRotate===void 0)&& (ifRotate=false);
		var rec=Rectangle.TEMP;
		rec.setTo(0,0,this.width,this.height);
		return rec._getBoundPoints();
	}

	/**
	*@inheritDoc
	*/
	__proto.getGraphicBounds=function(realSize){
		(realSize===void 0)&& (realSize=false);
		var rec=Rectangle.TEMP;
		rec.setTo(0,0,this.width,this.height);
		return rec;
	}

	/**
	*@private
	*@inheritDoc
	*/
	__proto._getCSSStyle=function(){
		return this._style;
	}

	/**
	*<p>根据指定的文本，从语言包中取当前语言的文本内容。并对此文本中的{i}文本进行替换。</p>
	*<p>设置Text.langPacks语言包后，即可使用lang获取里面的语言</p>
	*<p>例如：
	*<li>（1）text 的值为“我的名字”，先取到这个文本对应的当前语言版本里的值“My name”，将“My name”设置为当前文本的内容。</li>
	*<li>（2）text 的值为“恭喜你赢得{0}个钻石，{1}经验。”，arg1 的值为100，arg2 的值为200。
	*则先取到这个文本对应的当前语言版本里的值“Congratulations on your winning {0}diamonds,{1}experience.”，
	*然后将文本里的{0}、{1}，依据括号里的数字从0开始替换为 arg1、arg2 的值。
	*将替换处理后的文本“Congratulations on your winning 100 diamonds,200 experience.”设置为当前文本的内容。
	*</li>
	*</p>
	*@param text 文本内容。
	*@param ...args 文本替换参数。
	*/
	__proto.lang=function(text,arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10){
		text=Text.langPacks && Text.langPacks[text] ? Text.langPacks[text] :text;
		if (arguments.length < 2){
			this._text=text;
			}else {
			for (var i=0,n=arguments.length;i < n;i++){
				text=text.replace("{"+i+"}",arguments[i+1]);
			}
			this._text=text;
		}
	}

	/**
	*@private
	*/
	__proto._isPassWordMode=function(){
		var style=this._style;
		var password=style.password;
		if (("prompt" in this)&& this['prompt']==this._text)
			password=false;
		return password;
	}

	/**
	*@private
	*/
	__proto._getPassWordTxt=function(txt){
		var len=txt.length;
		var word;
		word="";
		for (var j=len;j > 0;j--){
			word+="●";
		}
		return word;
	}

	/**
	*渲染文字。
	*@param begin 开始渲染的行索引。
	*@param visibleLineCount 渲染的行数。
	*/
	__proto.renderText=function(begin,visibleLineCount){
		var graphics=this.graphics;
		graphics.clear(true);
		var ctxFont=(this.italic ? "italic " :"")+(this.bold ? "bold " :"")+this.fontSize+"px "+(Browser.onIPhone ? (laya.display.Text._fontFamilyMap[this.font] || this.font):this.font);
		Browser.context.font=ctxFont;
		var padding=this.padding;
		var startX=padding[3];
		var textAlgin="left";
		var lines=this._lines;
		var lineHeight=this.leading+this._charSize.height;
		var tCurrBitmapFont=this._currBitmapFont;
		if (tCurrBitmapFont){
			lineHeight=this.leading+tCurrBitmapFont.getMaxHeight();
		};
		var startY=padding[0];
		if ((!tCurrBitmapFont)&& this._width > 0 && this._textWidth <=this._width){
			if (this.align=="right"){
				textAlgin="right";
				startX=this._width-padding[1];
				}else if (this.align=="center"){
				textAlgin="center";
				startX=this._width *0.5+padding[3]-padding[1];
			}
		}
		if (this._height > 0){
			var tempVAlign=(this._textHeight > this._height)? "top" :this.valign;
			if (tempVAlign==="middle")
				startY=(this._height-visibleLineCount *lineHeight)*0.5+padding[0]-padding[2];
			else if (tempVAlign==="bottom")
			startY=this._height-visibleLineCount *lineHeight-padding[2];
		};
		var style=this._style;
		if (tCurrBitmapFont && tCurrBitmapFont.autoScaleSize){
			var bitmapScale=tCurrBitmapFont.fontSize / this.fontSize;
		}
		if (this._clipPoint){
			graphics.save();
			if (tCurrBitmapFont && tCurrBitmapFont.autoScaleSize){
				var tClipWidth=0;
				var tClipHeight=0;
				this._width ? tClipWidth=(this._width-padding[3]-padding[1]):tClipWidth=this._textWidth;
				this._height ? tClipHeight=(this._height-padding[0]-padding[2]):tClipHeight=this._textHeight;
				tClipWidth *=bitmapScale;
				tClipHeight *=bitmapScale;
				graphics.clipRect(padding[3],padding[0],tClipWidth,tClipHeight);
				}else {
				graphics.clipRect(padding[3],padding[0],this._width ? (this._width-padding[3]-padding[1]):this._textWidth,this._height ? (this._height-padding[0]-padding[2]):this._textHeight);
			}
		};
		var password=style.password;
		if (("prompt" in this)&& this['prompt']==this._text)
			password=false;
		var x=0,y=0;
		var end=Math.min(this._lines.length,visibleLineCount+begin)|| 1;
		for (var i=begin;i < end;i++){
			var word=lines[i];
			var _word;
			if (password){
				var len=word.length;
				word="";
				for (var j=len;j > 0;j--){
					word+="●";
				}
			}
			x=startX-(this._clipPoint ? this._clipPoint.x :0);
			y=startY+lineHeight *i-(this._clipPoint ? this._clipPoint.y :0);
			this.underline && this.drawUnderline(textAlgin,x,y,i);
			if (tCurrBitmapFont){
				var tWidth=this.width;
				if (tCurrBitmapFont.autoScaleSize){
					tWidth=this.width *bitmapScale;
				}
				tCurrBitmapFont.drawText(word,this,x,y,this.align,tWidth);
				}else {
				if (Render.isWebGL){
					this._words || (this._words=[]);
					_word=this._words.length > (i-begin)? this._words[i-begin] :new WordText();
					_word.setText(word);
					}else {
					_word=word;
				}
				style.stroke ? graphics.fillBorderText(_word,x,y,ctxFont,this.color,style.strokeColor,style.stroke,textAlgin):graphics.fillText(_word,x,y,ctxFont,this.color,textAlgin);
			}
		}
		if (tCurrBitmapFont && tCurrBitmapFont.autoScaleSize){
			var tScale=1 / bitmapScale;
			this.scale(tScale,tScale);
		}
		if (this._clipPoint)
			graphics.restore();
		this._startX=startX;
		this._startY=startY;
	}

	/**
	*绘制下划线
	*@param x 本行坐标
	*@param y 本行坐标
	*@param lineIndex 本行索引
	*/
	__proto.drawUnderline=function(align,x,y,lineIndex){
		var lineWidth=this._lineWidths[lineIndex];
		switch (align){
			case 'center':
				x-=lineWidth / 2;
				break ;
			case 'right':
				x-=lineWidth;
				break ;
			case 'left':
			default :
				break ;
			}
		y+=this._charSize.height;
		this._graphics.drawLine(x,y,x+lineWidth,y,this.underlineColor || this.color,1);
	}

	/**
	*<p>排版文本。</p>
	*<p>进行宽高计算，渲染、重绘文本。</p>
	*/
	__proto.typeset=function(){
		this._isChanged=false;
		if (!this._text){
			this._clipPoint=null;
			this._textWidth=this._textHeight=0;
			this.graphics.clear(true);
			return;
		}
		Browser.context.font=this._getCSSStyle().font;
		this._lines.length=0;
		this._lineWidths.length=0;
		if (this._isPassWordMode()){
			this.parseLines(this._getPassWordTxt(this._text));
		}else
		this.parseLines(this._text);
		this.evalTextSize();
		if (this.checkEnabledViewportOrNot())
			this._clipPoint || (this._clipPoint=new Point(0,0));
		else
		this._clipPoint=null;
		var lineCount=this._lines.length;
		if (this.overflow !=Text.VISIBLE){
			var func=this.overflow==Text.HIDDEN ? Math.floor :Math.ceil;
			lineCount=Math.min(lineCount,func((this.height-this.padding[0]-this.padding[2])/ (this.leading+this._charSize.height)));
		};
		var startLine=this.scrollY / (this._charSize.height+this.leading)| 0;
		this.renderText(startLine,lineCount);
		this.repaint();
	}

	__proto.evalTextSize=function(){
		var nw=NaN,nh=NaN;
		nw=Math.max.apply(this,this._lineWidths);
		if (this._currBitmapFont)
			nh=this._lines.length *(this._currBitmapFont.getMaxHeight()+this.leading)+this.padding[0]+this.padding[2];
		else
		nh=this._lines.length *(this._charSize.height+this.leading)+this.padding[0]+this.padding[2];
		if (nw !=this._textWidth || nh !=this._textHeight){
			this._textWidth=nw;
			this._textHeight=nh;
			if (!this._width || !this._height)
				this.conchModel && this.conchModel.size(this._width || this._textWidth,this._height || this._textHeight);
		}
	}

	__proto.checkEnabledViewportOrNot=function(){
		return this.overflow==Text.SCROLL && ((this._width > 0 && this._textWidth > this._width)|| (this._height > 0 && this._textHeight > this._height));
	}

	/**
	*<p>快速更改显示文本。不进行排版计算，效率较高。</p>
	*<p>如果只更改文字内容，不更改文字样式，建议使用此接口，能提高效率。</p>
	*@param text 文本内容。
	*/
	__proto.changeText=function(text){
		if (this._text!==text){
			this.lang(text+"");
			if (this._graphics && this._graphics.replaceText(this._text)){
				}else {
				this.typeset();
			}
		}
	}

	/**
	*@private
	*分析文本换行。
	*/
	__proto.parseLines=function(text){
		var needWordWrapOrTruncate=this.wordWrap || this.overflow==Text.HIDDEN;
		if (needWordWrapOrTruncate){
			var wordWrapWidth=this.getWordWrapWidth();
		}
		if (this._currBitmapFont){
			this._charSize.width=this._currBitmapFont.getMaxWidth();
			this._charSize.height=this._currBitmapFont.getMaxHeight();
			}else {
			var measureResult=Browser.context.measureText(Text._testWord);
			this._charSize.width=measureResult.width;
			this._charSize.height=(measureResult.height || this.fontSize);
		};
		var lines=text.replace(/\r\n/g,"\n").split("\n");
		for (var i=0,n=lines.length;i < n;i++){
			var line=lines[i];
			if (needWordWrapOrTruncate)
				this.parseLine(line,wordWrapWidth);
			else {
				this._lineWidths.push(this.getTextWidth(line));
				this._lines.push(line);
			}
		}
	}

	/**
	*@private
	*解析行文本。
	*@param line 某行的文本。
	*@param wordWrapWidth 文本的显示宽度。
	*/
	__proto.parseLine=function(line,wordWrapWidth){
		var ctx=Browser.context;
		var lines=this._lines;
		var maybeIndex=0;
		var execResult;
		var charsWidth=NaN;
		var wordWidth=NaN;
		var startIndex=0;
		charsWidth=this.getTextWidth(line);
		if (charsWidth <=wordWrapWidth){
			lines.push(line);
			this._lineWidths.push(charsWidth);
			return;
		}
		charsWidth=this._charSize.width;
		maybeIndex=Math.floor(wordWrapWidth / charsWidth);
		(maybeIndex==0)&& (maybeIndex=1);
		charsWidth=this.getTextWidth(line.substring(0,maybeIndex));
		wordWidth=charsWidth;
		for (var j=maybeIndex,m=line.length;j < m;j++){
			charsWidth=this.getTextWidth(line.charAt(j));
			wordWidth+=charsWidth;
			if (wordWidth > wordWrapWidth){
				if (this.wordWrap){
					var newLine=line.substring(startIndex,j);
					if (newLine.charCodeAt(newLine.length-1)< 255){
						execResult=/(?:\w|-)+$/.exec(newLine);
						if (execResult){
							j=execResult.index+startIndex;
							if (execResult.index==0)
								j+=newLine.length;
							else
							newLine=line.substring(startIndex,j);
						}
					}else
					if (Text.RightToLeft){
						execResult=/([\u0600-\u06FF])+$/.exec(newLine);
						if(execResult){
							j=execResult.index+startIndex;
							if (execResult.index==0)
								j+=newLine.length;
							else
							newLine=line.substring(startIndex,j);
						}
					}
					lines.push(newLine);
					this._lineWidths.push(wordWidth-charsWidth);
					startIndex=j;
					if (j+maybeIndex < m){
						j+=maybeIndex;
						charsWidth=this.getTextWidth(line.substring(startIndex,j));
						wordWidth=charsWidth;
						j--;
						}else {
						lines.push(line.substring(startIndex,m));
						this._lineWidths.push(this.getTextWidth(lines[lines.length-1]));
						startIndex=-1;
						break ;
					}
					}else if (this.overflow==Text.HIDDEN){
					lines.push(line.substring(0,j));
					this._lineWidths.push(this.getTextWidth(lines[lines.length-1]));
					return;
				}
			}
		}
		if (this.wordWrap && startIndex !=-1){
			lines.push(line.substring(startIndex,m));
			this._lineWidths.push(this.getTextWidth(lines[lines.length-1]));
		}
	}

	__proto.getTextWidth=function(text){
		if (this._currBitmapFont)
			return this._currBitmapFont.getTextWidth(text);
		else
		return Browser.context.measureText(text).width;
	}

	/**
	*获取换行所需的宽度。
	*/
	__proto.getWordWrapWidth=function(){
		var p=this.padding;
		var w=NaN;
		if (this._currBitmapFont && this._currBitmapFont.autoScaleSize)
			w=this._width *(this._currBitmapFont.fontSize / this.fontSize);
		else
		w=this._width;
		if (w <=0){
			w=this.wordWrap ? 100 :Browser.width;
		}
		w <=0 && (w=100);
		return w-p[3]-p[1];
	}

	/**
	*返回字符在本类实例的父坐标系下的坐标。
	*@param charIndex 索引位置。
	*@param out （可选）输出的Point引用。
	*@return Point 字符在本类实例的父坐标系下的坐标。如果out参数不为空，则将结果赋值给指定的Point对象，否则创建一个新的Point对象返回。建议使用Point.TEMP作为out参数，可以省去Point对象创建和垃圾回收的开销，尤其是在需要频繁执行的逻辑中，比如帧循环和MOUSE_MOVE事件回调函数里面。
	*/
	__proto.getCharPoint=function(charIndex,out){
		this._isChanged && Laya.timer.runCallLater(this,this.typeset);
		var len=0,lines=this._lines,startIndex=0;
		for (var i=0,n=lines.length;i < n;i++){
			len+=lines[i].length;
			if (charIndex < len){
				var line=i;
				break ;
			}
			startIndex=len;
		};
		var ctxFont=(this.italic ? "italic " :"")+(this.bold ? "bold " :"")+this.fontSize+"px "+this.font;
		Browser.context.font=ctxFont;
		var width=this.getTextWidth(this._text.substring(startIndex,charIndex));
		var point=out || new Point();
		return point.setTo(this._startX+width-(this._clipPoint ? this._clipPoint.x :0),this._startY+line *(this._charSize.height+this.leading)-(this._clipPoint ? this._clipPoint.y :0));
	}

	/**
	*@inheritDoc
	*/
	__getset(0,__proto,'width',function(){
		if (this._width)
			return this._width;
		return this.textWidth+this.padding[1]+this.padding[3];
		},function(value){
		if (value !=this._width){
			Laya.superSet(Sprite,this,'width',value);
			this.isChanged=true;
		}
	});

	/**
	*表示文本的宽度，以像素为单位。
	*/
	__getset(0,__proto,'textWidth',function(){
		this._isChanged && Laya.timer.runCallLater(this,this.typeset);
		return this._textWidth;
	});

	/**
	*@inheritDoc
	*/
	__getset(0,__proto,'height',function(){
		if (this._height)return this._height;
		return this.textHeight+this.padding[0]+this.padding[2];
		},function(value){
		if (value !=this._height){
			Laya.superSet(Sprite,this,'height',value);
			this.isChanged=true;
		}
	});

	/**
	*表示文本的高度，以像素为单位。
	*/
	__getset(0,__proto,'textHeight',function(){
		this._isChanged && Laya.timer.runCallLater(this,this.typeset);
		return this._textHeight;
	});

	/**
	*<p>边距信息。</p>
	*<p>数据格式：[上边距，右边距，下边距，左边距]（边距以像素为单位）。</p>
	*/
	__getset(0,__proto,'padding',function(){
		return this._getCSSStyle().padding;
		},function(value){
		this._getCSSStyle().padding=value;
		this.isChanged=true;
	});

	/**
	*<p>指定文本是否为粗体字。</p>
	*<p>默认值为 false，这意味着不使用粗体字。如果值为 true，则文本为粗体字。</p>
	*/
	__getset(0,__proto,'bold',function(){
		return this._getCSSStyle().bold;
		},function(value){
		this._getCSSStyle().bold=value;
		this.isChanged=true;
	});

	/**当前文本的内容字符串。*/
	__getset(0,__proto,'text',function(){
		return this._text || "";
		},function(value){
		if (this._text!==value){
			this.lang(value+"");
			this.isChanged=true;
			this.event("change");
		}
	});

	/**
	*<p>表示文本的颜色值。可以通过 <code>Text.defaultColor</code> 设置默认颜色。</p>
	*<p>默认值为黑色。</p>
	*/
	__getset(0,__proto,'color',function(){
		return this._getCSSStyle().color;
		},function(value){
		if (this._getCSSStyle().color !=value){
			this._getCSSStyle().color=value;
			if (!this._isChanged && this._graphics){
				this._graphics.replaceTextColor(this.color)
				}else {
				this.isChanged=true;
			}
		}
	});

	/**
	*<p>文本的字体名称，以字符串形式表示。</p>
	*<p>默认值为："Arial"，可以通过Font.defaultFont设置默认字体。</p>
	*<p>如果运行时系统找不到设定的字体，则用系统默认的字体渲染文字，从而导致显示异常。(通常电脑上显示正常，在一些移动端因缺少设置的字体而显示异常)。</p>
	*@see laya.display.css.Font#defaultFamily
	*/
	__getset(0,__proto,'font',function(){
		return this._getCSSStyle().fontFamily;
		},function(value){
		if (this._currBitmapFont){
			this._currBitmapFont=null;
			this.scale(1,1);
		}
		if (Text._bitmapFonts && Text._bitmapFonts[value]){
			this._currBitmapFont=Text._bitmapFonts[value];
		}
		this._getCSSStyle().fontFamily=value;
		this.isChanged=true;
	});

	/**
	*<p>指定文本的字体大小（以像素为单位）。</p>
	*<p>默认为20像素，可以通过 <code>Text.defaultSize</code> 设置默认大小。</p>
	*/
	__getset(0,__proto,'fontSize',function(){
		return this._getCSSStyle().fontSize;
		},function(value){
		this._getCSSStyle().fontSize=value;
		this.isChanged=true;
	});

	/**
	*<p>表示使用此文本格式的文本是否为斜体。</p>
	*<p>默认值为 false，这意味着不使用斜体。如果值为 true，则文本为斜体。</p>
	*/
	__getset(0,__proto,'italic',function(){
		return this._getCSSStyle().italic;
		},function(value){
		this._getCSSStyle().italic=value;
		this.isChanged=true;
	});

	/**
	*<p>表示文本的水平显示方式。</p>
	*<p><b>取值：</b>
	*<li>"left"： 居左对齐显示。</li>
	*<li>"center"： 居中对齐显示。</li>
	*<li>"right"： 居右对齐显示。</li>
	*</p>
	*/
	__getset(0,__proto,'align',function(){
		return this._getCSSStyle().align;
		},function(value){
		this._getCSSStyle().align=value;
		this.isChanged=true;
	});

	/**
	*<p>表示文本的垂直显示方式。</p>
	*<p><b>取值：</b>
	*<li>"top"： 居顶部对齐显示。</li>
	*<li>"middle"： 居中对齐显示。</li>
	*<li>"bottom"： 居底部对齐显示。</li>
	*</p>
	*/
	__getset(0,__proto,'valign',function(){
		return this._getCSSStyle().valign;
		},function(value){
		this._getCSSStyle().valign=value;
		this.isChanged=true;
	});

	/**
	*<p>表示文本是否自动换行，默认为false。</p>
	*<p>若值为true，则自动换行；否则不自动换行。</p>
	*/
	__getset(0,__proto,'wordWrap',function(){
		return this._getCSSStyle().wordWrap;
		},function(value){
		this._getCSSStyle().wordWrap=value;
		this.isChanged=true;
	});

	/**
	*垂直行间距（以像素为单位）。
	*/
	__getset(0,__proto,'leading',function(){
		return this._getCSSStyle().leading;
		},function(value){
		this._getCSSStyle().leading=value;
		this.isChanged=true;
	});

	/**
	*文本背景颜色，以字符串表示。
	*/
	__getset(0,__proto,'bgColor',function(){
		return this._getCSSStyle().backgroundColor;
		},function(value){
		this._getCSSStyle().backgroundColor=value;
		this.isChanged=true;
	});

	/**
	*文本边框背景颜色，以字符串表示。
	*/
	__getset(0,__proto,'borderColor',function(){
		return this._getCSSStyle().borderColor;
		},function(value){
		this._getCSSStyle().borderColor=value;
		this.isChanged=true;
	});

	/**
	*<p>描边宽度（以像素为单位）。</p>
	*<p>默认值0，表示不描边。</p>
	*/
	__getset(0,__proto,'stroke',function(){
		return this._getCSSStyle().stroke;
		},function(value){
		this._getCSSStyle().stroke=value;
		this.isChanged=true;
	});

	/**
	*<p>描边颜色，以字符串表示。</p>
	*<p>默认值为 "#000000"（黑色）;</p>
	*/
	__getset(0,__proto,'strokeColor',function(){
		return this._getCSSStyle().strokeColor;
		},function(value){
		this._getCSSStyle().strokeColor=value;
		this.isChanged=true;
	});

	/**
	*一个布尔值，表示文本的属性是否有改变。若为true表示有改变。
	*/
	__getset(0,__proto,'isChanged',null,function(value){
		if (this._isChanged!==value){
			this._isChanged=value;
			value && Laya.timer.callLater(this,this.typeset);
		}
	});

	/**
	*<p>设置横向滚动量。</p>
	*<p>即使设置超出滚动范围的值，也会被自动限制在可能的最大值处。</p>
	*/
	/**
	*获取横向滚动量。
	*/
	__getset(0,__proto,'scrollX',function(){
		if (!this._clipPoint)
			return 0;
		return this._clipPoint.x;
		},function(value){
		if (this.overflow !=Text.SCROLL || (this.textWidth < this._width || !this._clipPoint))
			return;
		value=value < this.padding[3] ? this.padding[3] :value;
		var maxScrollX=this._textWidth-this._width;
		value=value > maxScrollX ? maxScrollX :value;
		var visibleLineCount=this._height / (this._charSize.height+this.leading)| 0+1;
		this._clipPoint.x=value;
		this.renderText(this._lastVisibleLineIndex,visibleLineCount);
	});

	/**
	*设置纵向滚动量（px)。即使设置超出滚动范围的值，也会被自动限制在可能的最大值处。
	*/
	/**
	*获取纵向滚动量。
	*/
	__getset(0,__proto,'scrollY',function(){
		if (!this._clipPoint)
			return 0;
		return this._clipPoint.y;
		},function(value){
		if (this.overflow !=Text.SCROLL || (this.textHeight < this._height || !this._clipPoint))
			return;
		value=value < this.padding[0] ? this.padding[0] :value;
		var maxScrollY=this._textHeight-this._height;
		value=value > maxScrollY ? maxScrollY :value;
		var startLine=value / (this._charSize.height+this.leading)| 0;
		this._lastVisibleLineIndex=startLine;
		var visibleLineCount=(this._height / (this._charSize.height+this.leading)| 0)+1;
		this._clipPoint.y=value;
		this.renderText(startLine,visibleLineCount);
	});

	/**
	*获取横向可滚动最大值。
	*/
	__getset(0,__proto,'maxScrollX',function(){
		return (this.textWidth < this._width)? 0 :this._textWidth-this._width;
	});

	/**
	*获取纵向可滚动最大值。
	*/
	__getset(0,__proto,'maxScrollY',function(){
		return (this.textHeight < this._height)? 0 :this._textHeight-this._height;
	});

	__getset(0,__proto,'lines',function(){
		if (this._isChanged)
			this.typeset();
		return this._lines;
	});

	__getset(0,__proto,'underlineColor',function(){
		return this._underlineColor;
		},function(value){
		this._underlineColor=value;
		this._isChanged=true;
		this.typeset();
	});

	Text.registerBitmapFont=function(name,bitmapFont){
		Text._bitmapFonts || (Text._bitmapFonts={});
		Text._bitmapFonts[name]=bitmapFont;
	}

	Text.unregisterBitmapFont=function(name,destroy){
		(destroy===void 0)&& (destroy=true);
		if (Text._bitmapFonts && Text._bitmapFonts[name]){
			var tBitmapFont=Text._bitmapFonts[name];
			if (destroy){
				tBitmapFont.destroy();
			}
			delete Text._bitmapFonts[name];
		}
	}

	Text.setTextRightToLeft=function(){
		var style;
		style=Browser.canvas.source.style;
		style.display="none";
		style.position="absolute";
		style.direction="rtl";
		Render._mainCanvas.source.style.direction="rtl";
		laya.display.Text.RightToLeft=true;
		Browser.document.body.appendChild(Browser.canvas.source);
	}

	Text.supportFont=function(font){
		Browser.context.font="10px sans-serif";
		var defaultFontWidth=Browser.context.measureText("abcji").width;
		Browser.context.font="10px "+font;
		var customFontWidth=Browser.context.measureText("abcji").width;
		console.log(defaultFontWidth,customFontWidth);
		if (defaultFontWidth===customFontWidth)return false;
		else return true;
	}

	Text._testWord="游";
	Text.langPacks=null;
	Text.VISIBLE="visible";
	Text.SCROLL="scroll";
	Text.HIDDEN="hidden";
	Text.CharacterCache=true;
	Text.RightToLeft=false;
	Text._bitmapFonts=null;
	__static(Text,
	['_fontFamilyMap',function(){return this._fontFamilyMap={"报隶" :"报隶-简","黑体" :"黑体-简","楷体" :"楷体-简","兰亭黑" :"兰亭黑-简","隶变" :"隶变-简","凌慧体" :"凌慧体-简","翩翩体" :"翩翩体-简","苹方" :"苹方-简","手札体" :"手札体-简","宋体" :"宋体-简","娃娃体" :"娃娃体-简","魏碑" :"魏碑-简","行楷" :"行楷-简","雅痞" :"雅痞-简","圆体" :"圆体-简"};}
	]);
	return Text;
})(Sprite)


/**
*<p> <code>Stage</code> 是舞台类，显示列表的根节点，所有显示对象都在舞台上显示。通过 Laya.stage 单例访问。</p>
*<p>Stage提供几种适配模式，不同的适配模式会产生不同的画布大小，画布越大，渲染压力越大，所以要选择合适的适配方案。</p>
*<p>Stage提供不同的帧率模式，帧率越高，渲染压力越大，越费电，合理使用帧率甚至动态更改帧率有利于改进手机耗电。</p>
*/
//class laya.display.Stage extends laya.display.Sprite
var Stage=(function(_super){
	function Stage(){
		/**当前焦点对象，此对象会影响当前键盘事件的派发主体。*/
		this.focus=null;
		/**设计宽度（初始化时设置的宽度Laya.init(width,height)）*/
		this.designWidth=0;
		/**设计高度（初始化时设置的高度Laya.init(width,height)）*/
		this.designHeight=0;
		/**画布是否发生翻转。*/
		this.canvasRotation=false;
		/**画布的旋转角度。*/
		this.canvasDegree=0;
		/**
		*<p>设置是否渲染，设置为false，可以停止渲染，画面会停留到最后一次渲染上，减少cpu消耗，此设置不影响时钟。</p>
		*<p>比如非激活状态，可以设置renderingEnabled=true以节省消耗。</p>
		**/
		this.renderingEnabled=true;
		/**是否启用屏幕适配，可以适配后，在某个时候关闭屏幕适配，防止某些操作导致的屏幕以外改变*/
		this.screenAdaptationEnabled=true;
		/**@private */
		this._screenMode="none";
		/**@private */
		this._scaleMode="noscale";
		/**@private */
		this._alignV="top";
		/**@private */
		this._alignH="left";
		/**@private */
		this._bgColor="black";
		/**@private */
		this._mouseMoveTime=0;
		/**@private */
		this._renderCount=0;
		/**@private */
		this._frameStartTime=NaN;
		/**@private */
		this._isFocused=false;
		/**@private */
		this._isVisibility=false;
		/**@private 3D场景*/
		this._scenes=null;
		/**@private */
		this._frameRate="fast";
		Stage.__super.call(this);
		this.offset=new Point();
		this._canvasTransform=new Matrix();
		this._previousOrientation=Browser.window.orientation;
		var _$this=this;
		this.transform=Matrix.create();
		this._scenes=[];
		this.mouseEnabled=true;
		this.hitTestPrior=true;
		this.autoSize=false;
		this._displayedInStage=true;
		this._isFocused=true;
		this._isVisibility=true;
		var window=Browser.window;
		var _this=this;
		window.addEventListener("focus",function(){
			_$this._isFocused=true;
			_this.event("focus");
			_this.event("focuschange");
		});
		window.addEventListener("blur",function(){
			_$this._isFocused=false;
			_this.event("blur");
			_this.event("focuschange");
			if (_this._isInputting())Input["inputElement"].target.focus=false;
		});
		var hidden="hidden",state="visibilityState",visibilityChange="visibilitychange";
		var document=window.document;
		if (typeof document.hidden!=="undefined"){
			visibilityChange="visibilitychange";
			state="visibilityState";
			}else if (typeof document.mozHidden!=="undefined"){
			visibilityChange="mozvisibilitychange";
			state="mozVisibilityState";
			}else if (typeof document.msHidden!=="undefined"){
			visibilityChange="msvisibilitychange";
			state="msVisibilityState";
			}else if (typeof document.webkitHidden!=="undefined"){
			visibilityChange="webkitvisibilitychange";
			state="webkitVisibilityState";
		}
		window.document.addEventListener(visibilityChange,visibleChangeFun);
		function visibleChangeFun (){
			if (Browser.document[state]=="hidden"){
				_this._setStageVisible(false);
				}else {
				_this._setStageVisible(true);
			}
		}
		window.document.addEventListener("qbrowserVisibilityChange",qbroserVisibleChangeFun);
		function qbroserVisibleChangeFun (e){
			_this._setStageVisible(!e.hidden);
		}
		window.addEventListener("resize",function(){
			var orientation=Browser.window.orientation;
			if (orientation !=null && orientation !=_$this._previousOrientation && _this._isInputting()){
				Input["inputElement"].target.focus=false;
			}
			_$this._previousOrientation=orientation;
			if (_this._isInputting())return;
			_this._resetCanvas();
		});
		window.addEventListener("orientationchange",function(e){
			_this._resetCanvas();
		});
		this.on("mousemove",this,this._onmouseMove);
		if (Browser.onMobile)this.on("mousedown",this,this._onmouseMove);
	}

	__class(Stage,'laya.display.Stage',_super);
	var __proto=Stage.prototype;
	__proto._setStageVisible=function(value){
		if (this._isVisibility==value)return;
		this._isVisibility=value;
		if (!this._isVisibility)if (this._isInputting())Input["inputElement"].target.focus=false;
		this.event("visibilitychange");
	}

	/**
	*@private
	*在移动端输入时，输入法弹出期间不进行画布尺寸重置。
	*/
	__proto._isInputting=function(){
		return (Browser.onMobile && Input.isInputting);
	}

	/**@private */
	__proto._changeCanvasSize=function(){
		this.setScreenSize(Browser.clientWidth *Browser.pixelRatio,Browser.clientHeight *Browser.pixelRatio);
	}

	/**@private */
	__proto._resetCanvas=function(){
		if (!this.screenAdaptationEnabled)return;
		var canvas=Render._mainCanvas;
		var canvasStyle=canvas.source.style;
		canvas.size(1,1);
		Laya.timer.once(100,this,this._changeCanvasSize);
	}

	/**
	*设置屏幕大小，场景会根据屏幕大小进行适配。可以动态调用此方法，来更改游戏显示的大小。
	*@param screenWidth 屏幕宽度。
	*@param screenHeight 屏幕高度。
	*/
	__proto.setScreenSize=function(screenWidth,screenHeight){
		var rotation=false;
		if (this._screenMode!=="none"){
			var screenType=screenWidth / screenHeight < 1 ? "vertical" :"horizontal";
			rotation=screenType!==this._screenMode;
			if (rotation){
				var temp=screenHeight;
				screenHeight=screenWidth;
				screenWidth=temp;
			}
		}
		this.canvasRotation=rotation;
		var canvas=Render._mainCanvas;
		var canvasStyle=canvas.source.style;
		var mat=this._canvasTransform.identity();
		var scaleMode=this._scaleMode;
		var scaleX=screenWidth / this.designWidth;
		var scaleY=screenHeight / this.designHeight;
		var canvasWidth=this.designWidth;
		var canvasHeight=this.designHeight;
		var realWidth=screenWidth;
		var realHeight=screenHeight;
		var pixelRatio=Browser.pixelRatio;
		this._width=this.designWidth;
		this._height=this.designHeight;
		switch (scaleMode){
			case "noscale":
				scaleX=scaleY=1;
				realWidth=this.designWidth;
				realHeight=this.designHeight;
				break ;
			case "showall":
				scaleX=scaleY=Math.min(scaleX,scaleY);
				canvasWidth=realWidth=Math.round(this.designWidth *scaleX);
				canvasHeight=realHeight=Math.round(this.designHeight *scaleY);
				break ;
			case "noborder":
				scaleX=scaleY=Math.max(scaleX,scaleY);
				realWidth=Math.round(this.designWidth *scaleX);
				realHeight=Math.round(this.designHeight *scaleY);
				break ;
			case "full":
				scaleX=scaleY=1;
				this._width=canvasWidth=screenWidth;
				this._height=canvasHeight=screenHeight;
				break ;
			case "fixedwidth":
				scaleY=scaleX;
				this._height=canvasHeight=Math.round(screenHeight / scaleX);
				break ;
			case "fixedheight":
				scaleX=scaleY;
				this._width=canvasWidth=Math.round(screenWidth / scaleY);
				break ;
			case "fixedauto":
				if ((screenWidth / screenHeight)< (this.designWidth / this.designHeight)){
					scaleY=scaleX;
					this._height=canvasHeight=Math.round(screenHeight / scaleX);
					}else {
					scaleX=scaleY;
					this._width=canvasWidth=Math.round(screenWidth / scaleY);
				}
				break ;
			}
		if (this.conchModel)this.conchModel.size(this._width,this._height);
		scaleX *=this.scaleX;
		scaleY *=this.scaleY;
		if (scaleX===1 && scaleY===1){
			this.transform.identity();
			}else {
			this.transform.a=this._formatData(scaleX / (realWidth / canvasWidth));
			this.transform.d=this._formatData(scaleY / (realHeight / canvasHeight));
			this.conchModel && this.conchModel.scale(this.transform.a,this.transform.d);
		}
		canvas.size(canvasWidth,canvasHeight);
		RunDriver.changeWebGLSize(canvasWidth,canvasHeight);
		mat.scale(realWidth / canvasWidth / pixelRatio,realHeight / canvasHeight / pixelRatio);
		if (this._alignH==="left")this.offset.x=0;
		else if (this._alignH==="right")this.offset.x=screenWidth-realWidth;
		else this.offset.x=(screenWidth-realWidth)*0.5 / pixelRatio;
		if (this._alignV==="top")this.offset.y=0;
		else if (this._alignV==="bottom")this.offset.y=screenHeight-realHeight;
		else this.offset.y=(screenHeight-realHeight)*0.5 / pixelRatio;
		this.offset.x=Math.round(this.offset.x);
		this.offset.y=Math.round(this.offset.y);
		mat.translate(this.offset.x,this.offset.y);
		this.canvasDegree=0;
		if (rotation){
			if (this._screenMode==="horizontal"){
				mat.rotate(Math.PI / 2);
				mat.translate(screenHeight / pixelRatio,0);
				this.canvasDegree=90;
				}else {
				mat.rotate(-Math.PI / 2);
				mat.translate(0,screenWidth / pixelRatio);
				this.canvasDegree=-90;
			}
		}
		mat.a=this._formatData(mat.a);
		mat.d=this._formatData(mat.d);
		mat.tx=this._formatData(mat.tx);
		mat.ty=this._formatData(mat.ty);
		canvasStyle.transformOrigin=canvasStyle.webkitTransformOrigin=canvasStyle.msTransformOrigin=canvasStyle.mozTransformOrigin=canvasStyle.oTransformOrigin="0px 0px 0px";
		canvasStyle.transform=canvasStyle.webkitTransform=canvasStyle.msTransform=canvasStyle.mozTransform=canvasStyle.oTransform="matrix("+mat.toString()+")";
		mat.translate(parseInt(canvasStyle.left)|| 0,parseInt(canvasStyle.top)|| 0);
		this.visible=true;
		this._repaint=1;
		this.event("resize");
	}

	/**@private */
	__proto._formatData=function(value){
		if (Math.abs(value)< 0.000001)return 0;
		if (Math.abs(1-value)< 0.001)return value > 0 ? 1 :-1;
		return value;
	}

	/**@inheritDoc */
	__proto.getMousePoint=function(){
		return Point.TEMP.setTo(this.mouseX,this.mouseY);
	}

	/**@inheritDoc */
	__proto.repaint=function(){
		this._repaint=1;
	}

	/**@inheritDoc */
	__proto.parentRepaint=function(){}
	/**@private */
	__proto._loop=function(){
		this.render(Render.context,0,0);
		return true;
	}

	/**@private */
	__proto._onmouseMove=function(e){
		this._mouseMoveTime=Browser.now();
	}

	/**
	*<p>获得距当前帧开始后，过了多少时间，单位为毫秒。</p>
	*<p>可以用来判断函数内时间消耗，通过合理控制每帧函数处理消耗时长，避免一帧做事情太多，对复杂计算分帧处理，能有效降低帧率波动。</p>
	*/
	__proto.getTimeFromFrameStart=function(){
		return Browser.now()-this._frameStartTime;
	}

	/**@inheritDoc */
	__proto.render=function(context,x,y){
		if (this._frameRate==="sleep" && !Render.isConchApp){
			var now=Browser.now();
			if (now-this._frameStartTime >=1000)this._frameStartTime=now;
			else return;
		}
		this._renderCount++;
		Render.isFlash && this.repaint();
		if (!this._style.visible){
			if (this._renderCount % 5===0){
				Stat.loopCount++;
				MouseManager.instance.runEvent();
				Laya.timer._update();
			}
			return;
		}
		this._frameStartTime=Browser.now();
		var frameMode=this._frameRate==="mouse" ? (((this._frameStartTime-this._mouseMoveTime)< 2000)? "fast" :"slow"):this._frameRate;
		var isFastMode=(frameMode!=="slow");
		var isDoubleLoop=(this._renderCount % 2===0);
		Stat.renderSlow=!isFastMode;
		if (isFastMode || isDoubleLoop || Render.isConchApp){
			Stat.loopCount++;
			MouseManager.instance.runEvent();
			Laya.timer._update();
			RunDriver.update3DLoop();
			var scene;
			var i=0,n=0;
			if (Render.isConchNode){
				for (i=0,n=this._scenes.length;i < n;i++){
					scene=this._scenes[i];
					(scene)&& (scene._updateSceneConch());
				}
				}else {
				for (i=0,n=this._scenes.length;i < n;i++){
					scene=this._scenes[i];
					(scene)&& (scene._updateScene());
				}
			}
			if (Render.isConchNode){
				var customList=Sprite["CustomList"];
				for (i=0,n=customList.length;i < n;i++){
					var customItem=customList[i];
					customItem.customRender(customItem.customContext,0,0);
				}
				return;
			}
		}
		if (Render.isConchNode)return;
		if (this.renderingEnabled && (isFastMode || !isDoubleLoop)){
			if (Render.isWebGL){
				context.clear();
				_super.prototype.render.call(this,context,x,y);
				Stat._show&& Stat._sp && Stat._sp.render(context,x,y);
				RunDriver.clear(this._bgColor);
				RunDriver.beginFlush();
				context.flush();
				RunDriver.endFinish();
				VectorGraphManager.instance && VectorGraphManager.getInstance().endDispose();
				}else {
				RunDriver.clear(this._bgColor);
				_super.prototype.render.call(this,context,x,y);
				Stat._show&& Stat._sp && Stat._sp.render(context,x,y);
			}
		}
	}

	/**@private */
	__proto._requestFullscreen=function(){
		var element=Browser.document.documentElement;
		if (element.requestFullscreen){
			element.requestFullscreen();
			}else if (element.mozRequestFullScreen){
			element.mozRequestFullScreen();
			}else if (element.webkitRequestFullscreen){
			element.webkitRequestFullscreen();
			}else if (element.msRequestFullscreen){
			element.msRequestFullscreen();
		}
	}

	/**@private */
	__proto._fullScreenChanged=function(){
		Laya.stage.event("fullscreenchange");
	}

	/**退出全屏模式*/
	__proto.exitFullscreen=function(){
		var document=Browser.document;
		if (document.exitFullscreen){
			document.exitFullscreen();
			}else if (document.mozCancelFullScreen){
			document.mozCancelFullScreen();
			}else if (document.webkitExitFullscreen){
			document.webkitExitFullscreen();
		}
	}

	/**当前视窗由缩放模式导致的 X 轴缩放系数。*/
	__getset(0,__proto,'clientScaleX',function(){
		return this._transform ? this._transform.getScaleX():1;
	});

	//[Deprecated]
	__getset(0,__proto,'desginHeight',function(){
		console.debug("desginHeight已经弃用，请使用designHeight代替");
		return this.designHeight;
	});

	/**帧率类型，支持三种模式：fast-60帧(默认)，slow-30帧，mouse-30帧（鼠标活动后会自动加速到60，鼠标不动2秒后降低为30帧，以节省消耗），sleep-1帧。*/
	__getset(0,__proto,'frameRate',function(){
		return this._frameRate;
		},function(value){
		this._frameRate=value;
		if (Render.isConchApp){
			switch (this._frameRate){
				case "slow":
					Browser.window.conch && Browser.window.conchConfig.setSlowFrame && Browser.window.conchConfig.setSlowFrame(true);
					break ;
				case "fast":
					Browser.window.conch && Browser.window.conchConfig.setSlowFrame && Browser.window.conchConfig.setSlowFrame(false);
					break ;
				case "mouse":
					Browser.window.conch && Browser.window.conchConfig.setMouseFrame && Browser.window.conchConfig.setMouseFrame(2000);
					break ;
				case "sleep":
					Browser.window.conch && Browser.window.conchConfig.setLimitFPS && Browser.window.conchConfig.setLimitFPS(1);
					break ;
				default :
					throw new Error("Stage:frameRate invalid.");
					break ;
				}
		}
	});

	/**当前视窗由缩放模式导致的 Y 轴缩放系数。*/
	__getset(0,__proto,'clientScaleY',function(){
		return this._transform ? this._transform.getScaleY():1;
	});

	__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
		this.designWidth=value;
		Laya.superSet(Sprite,this,'width',value);
		Laya.timer.callLater(this,this._changeCanvasSize);
	});

	/**
	*<p>水平对齐方式。默认值为"left"。</p>
	*<p><ul>取值范围：
	*<li>"left" ：居左对齐；</li>
	*<li>"center" ：居中对齐；</li>
	*<li>"right" ：居右对齐；</li>
	*</ul></p>
	*/
	__getset(0,__proto,'alignH',function(){
		return this._alignH;
		},function(value){
		this._alignH=value;
		Laya.timer.callLater(this,this._changeCanvasSize);
	});

	/**
	*舞台是否获得焦点。
	*/
	__getset(0,__proto,'isFocused',function(){
		return this._isFocused;
	});

	__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
		this.designHeight=value;
		Laya.superSet(Sprite,this,'height',value);
		Laya.timer.callLater(this,this._changeCanvasSize);
	});

	__getset(0,__proto,'transform',function(){
		if (this._tfChanged)this._adjustTransform();
		return this._transform=this._transform|| Matrix.create();
	},_super.prototype._$set_transform);

	/**
	*舞台是否处于可见状态(是否进入后台)。
	*/
	__getset(0,__proto,'isVisibility',function(){
		return this._isVisibility;
	});

	//[Deprecated]
	__getset(0,__proto,'desginWidth',function(){
		console.debug("desginWidth已经弃用，请使用designWidth代替");
		return this.designWidth;
	});

	/**
	*<p>缩放模式。默认值为 "noscale"。</p>
	*<p><ul>取值范围：
	*<li>"noscale" ：不缩放；</li>
	*<li>"exactfit" ：全屏不等比缩放；</li>
	*<li>"showall" ：最小比例缩放；</li>
	*<li>"noborder" ：最大比例缩放；</li>
	*<li>"full" ：不缩放，stage的宽高等于屏幕宽高；</li>
	*<li>"fixedwidth" ：宽度不变，高度根据屏幕比缩放；</li>
	*<li>"fixedheight" ：高度不变，宽度根据屏幕比缩放；</li>
	*<li>"fixedauto" ：根据宽高比，自动选择使用fixedwidth或fixedheight；</li>
	*</ul></p>
	*/
	__getset(0,__proto,'scaleMode',function(){
		return this._scaleMode;
		},function(value){
		this._scaleMode=value;
		Laya.timer.callLater(this,this._changeCanvasSize);
	});

	/**
	*<p>垂直对齐方式。默认值为"top"。</p>
	*<p><ul>取值范围：
	*<li>"top" ：居顶部对齐；</li>
	*<li>"middle" ：居中对齐；</li>
	*<li>"bottom" ：居底部对齐；</li>
	*</ul></p>
	*/
	__getset(0,__proto,'alignV',function(){
		return this._alignV;
		},function(value){
		this._alignV=value;
		Laya.timer.callLater(this,this._changeCanvasSize);
	});

	/**舞台的背景颜色，默认为黑色，null为透明。*/
	__getset(0,__proto,'bgColor',function(){
		return this._bgColor;
		},function(value){
		this._bgColor=value;
		this.conchModel && this.conchModel.bgColor(value);
		if (Render.isWebGL){
			if (value){
				Stage._wgColor=Color$1.create(value)._color;
				}else {
				if (!Browser.onMiniGame)Stage._wgColor=null;
			}
		}
		if (Browser.onLimixiu){
			Stage._wgColor=Color$1.create(value)._color;
		}else
		if (value){
			Render.canvas.style.background=value;
			}else {
			Render.canvas.style.background="none";
		}
	});

	/**鼠标在 Stage 上的 X 轴坐标。*/
	__getset(0,__proto,'mouseX',function(){
		return Math.round(MouseManager.instance.mouseX / this.clientScaleX);
	});

	/**鼠标在 Stage 上的 Y 轴坐标。*/
	__getset(0,__proto,'mouseY',function(){
		return Math.round(MouseManager.instance.mouseY / this.clientScaleY);
	});

	/**
	*<p>场景布局类型。</p>
	*<p><ul>取值范围：
	*<li>"none" ：不更改屏幕</li>
	*<li>"horizontal" ：自动横屏</li>
	*<li>"vertical" ：自动竖屏</li>
	*</ul></p>
	*/
	__getset(0,__proto,'screenMode',function(){
		return this._screenMode;
		},function(value){
		this._screenMode=value;
	});

	__getset(0,__proto,'visible',_super.prototype._$get_visible,function(value){
		if (this.visible!==value){
			Laya.superSet(Sprite,this,'visible',value);
			var style=Render._mainCanvas.source.style;
			style.visibility=value ? "visible" :"hidden";
		}
	});

	/**
	*<p>是否开启全屏，用户点击后进入全屏。</p>
	*<p>兼容性提示：部分浏览器不允许点击进入全屏，比如Iphone等。</p>
	*/
	__getset(0,__proto,'fullScreenEnabled',null,function(value){
		var document=Browser.document;
		var canvas=Render.canvas;
		if (value){
			canvas.addEventListener('mousedown',this._requestFullscreen);
			canvas.addEventListener('touchstart',this._requestFullscreen);
			document.addEventListener("fullscreenchange",this._fullScreenChanged);
			document.addEventListener("mozfullscreenchange",this._fullScreenChanged);
			document.addEventListener("webkitfullscreenchange",this._fullScreenChanged);
			document.addEventListener("msfullscreenchange",this._fullScreenChanged);
			}else {
			canvas.removeEventListener('mousedown',this._requestFullscreen);
			canvas.removeEventListener('touchstart',this._requestFullscreen);
			document.removeEventListener("fullscreenchange",this._fullScreenChanged);
			document.removeEventListener("mozfullscreenchange",this._fullScreenChanged);
			document.removeEventListener("webkitfullscreenchange",this._fullScreenChanged);
			document.removeEventListener("msfullscreenchange",this._fullScreenChanged);
		}
	});

	Stage.SCALE_NOSCALE="noscale";
	Stage.SCALE_EXACTFIT="exactfit";
	Stage.SCALE_SHOWALL="showall";
	Stage.SCALE_NOBORDER="noborder";
	Stage.SCALE_FULL="full";
	Stage.SCALE_FIXED_WIDTH="fixedwidth";
	Stage.SCALE_FIXED_HEIGHT="fixedheight";
	Stage.SCALE_FIXED_AUTO="fixedauto";
	Stage.ALIGN_LEFT="left";
	Stage.ALIGN_RIGHT="right";
	Stage.ALIGN_CENTER="center";
	Stage.ALIGN_TOP="top";
	Stage.ALIGN_MIDDLE="middle";
	Stage.ALIGN_BOTTOM="bottom";
	Stage.SCREEN_NONE="none";
	Stage.SCREEN_HORIZONTAL="horizontal";
	Stage.SCREEN_VERTICAL="vertical";
	Stage.FRAME_FAST="fast";
	Stage.FRAME_SLOW="slow";
	Stage.FRAME_MOUSE="mouse";
	Stage.FRAME_SLEEP="sleep";
	Stage.FRAME_MOUSE_THREDHOLD=2000;
	__static(Stage,
	['_wgColor',function(){return this._wgColor=[0,0,0,1];}
	]);
	return Stage;
})(Sprite)


/**
*追踪弹
*@author guowc
*
*/
//class game.weapon.FollowBom extends mylaya.effects.WaitFollowBomb
var FollowBom=(function(_super){
	function FollowBom(){
		this.gaspts=[new Point(5,5),new Point(-5,-5),new Point(0,0)];
		this._clear=false;
		this.act=null;
		this._chgAct=null;
		this._caller=null;
		this._type=0;
		this._roleid=0;
		this._id=0;
		this._hurt=0;
		this._crit=0;
		this._aoe=0;
		this.scale=NaN;
		this.rect=null;
		this.isEnemyBom=false;
		this.endgas=null;
		FollowBom.__super.call(this);
		this.speed=15;
		this.quicktoAng=0;
		this.stepAng=10;
		this.scale=1;
		this.rect=MapData.rect;
	}

	__class(FollowBom,'game.weapon.FollowBom',_super);
	var __proto=FollowBom.prototype;
	Laya.imps(__proto,{"game.weapon.Iweapon":true})
	__proto.followStart=function(container,startPt,targetPt,bomSkin){
		if(!this.bomb){
			bomSkin.play();
			}else{
			(this.bomb).play();
		}
		this.start(container,startPt,targetPt,bomSkin);
	}

	__proto.setType=function(val){
		this._type=val;
	}

	__proto.getType=function(){
		return this._type;
	}

	__proto.getMoveDir=function(){
		return this.movedir;
	}

	__proto.getSkinPt=function(){
		return this._startPt;
	}

	__proto.setHurt=function(val){
		this._hurt=val;
	}

	__proto.getHurt=function(){
		return this._hurt;
	}

	__proto.setCrit=function(val){
		this._crit=val;
	}

	__proto.getCrit=function(){
		return this._crit;
	}

	__proto.getOldPt=function(){
		return this.oldpt;
	}

	__proto.setAoe=function(val){
		this._aoe=val;
	}

	__proto.getAoe=function(){
		return this._aoe;
	}

	__proto.getRect=function(){
		this._rect.x=this._startPt.x-this._rect.width*0.5;
		this._rect.y=this._startPt.y-this._rect.height*0.5;
		return this._rect;
	}

	__proto.getSkin=function(){
		return this.bomb;
	}

	__proto.setRoleid=function(val){
		this._roleid=val;
	}

	__proto.getRoleid=function(){
		return this._roleid;
	}

	__proto.setid=function(val){
		this._id=val;
	}

	__proto.getid=function(){
		return this._id;
	}

	__proto.setFollowObj=function(val,caller,chgAct){
		this.act=val;
		this._caller=caller;
		this._chgAct=chgAct;
	}

	__proto.getSkinBmp=function(){
		return mylaya.effects.FollowBomb.prototype.getSkinBmp.call(this);
	}

	__proto.move=function(){
		if(this._dispose)return;
		if(this._chgAct!=null){
			if(this.act){
				if(this.act._pause){
					if(this.isEnemyBom==false){
						GlobalAPI.weaponMgr.removeFollowEnemy(this.act.getData().id);
					}
					this._chgAct.apply(this._caller,[this]);
					}else{
					this.updateTargetPt(this.act.getShootpt().x,this.act.getShootpt().y);
				}
				}else{
				this._chgAct.apply(this._caller,[this]);
			}
		}
		_super.prototype.move.call(this);
	}

	__proto.going=function(){
		this.oldpt.x=this._startPt.x;
		this.oldpt.y=this._startPt.y;
		if(this.startAng!=this._ang){
			if(this.startAng<-360 || this.startAng>360){
				this.startAng=this.startAng%360;
			}
			this._ang=this.startAng;
			this.sp.rotation=this.startAng;
			this.dx=MathUtil.coss[this.startAng]*this.speed>>0;
			this.dy=MathUtil.sins[this.startAng]*this.speed>>0;
		}
		this._startPt.x+=this.dx;
		this._startPt.y+=this.dy;
		this.sp.x=this._startPt.x;
		this.sp.y=this._startPt.y;
		if(this._startPt.x < this.oldpt.x){
			this.movedir=-1;
			}else{
			this.movedir=1;
		}
		this.addGas();
		var tx=this._startPt.x-this._targetPt.x;
		tx=tx<0?-tx:tx;
		var ty=this._startPt.y-this._targetPt.y;
		ty=ty<0?-ty:ty;
		if(tx<=this.speed && ty<=this.speed){
			this.moveOver();
		}
		if(this.limitRect && !this.limitRect.contains(this._startPt.x,this._startPt.y)){
			this.dispose();
		}
	}

	__proto.addGas=function(){
		if(this.endgas){
			if(!this.endgas.isPlaying){
				this.endgas.play();
			}
			return;
		}
		this.endgas=GlobalAPI.miniAniEffect.start(null,0,0,"endgas",false);
		this.endgas.x=-this._rect.width>>1;
		this.sp.addChild(this.endgas);
	}

	__proto.clear=function(){
		this._clear=true;
		this.dispose();
	}

	__proto.dispose=function(){
		if(this._dispose)return;
		_super.prototype.dispose.call(this);
		if(!this._clear){
			ShakeEffect.start(3,4,3,6)
			GlobalAPI.soundMgr.playSound("bomsound");
			if(this.rect){
				this.rect.x=this._startPt.x-150;
				this.rect.y=this._startPt.y-150;
				this.rect.width=300;
				this.rect.height=300;
			}
			if(this._aoe>0){
				GlobalAPI.hitMgr.aoeBoom(this._aoe,this._startPt,null,this.rect);
			}
			GlobalAPI.miniAniEffect.start(null,this._startPt.x,this._startPt.y,"boom8",true,30,this.scale);
			}else{
			this._clear=false;
		}
		if(this.act){
			if(this.isEnemyBom==false){
				GlobalAPI.weaponMgr.removeFollowEnemy(this.act.getData().id);
			}
			this.act=null;
		}
		if((this.bomb instanceof mylaya.common.skin.RoleSkin )){
			(this.bomb).stop();
		}
		if(this.endgas){
			this.endgas.stop();
		}
		this._aoe=0;
		this._hurt=0;
		this.act=null;
		this._chgAct=null;
		this._caller=null;
		if(this._type==10000){
			GlobalAPI.weaponMgr.remove(this);
			Pool.recover("FollowBom",this);
		};
	}

	return FollowBom;
})(WaitFollowBomb)


/**
*敌人掷弹
*@author guowc
*
*/
//class game.weapon.EthrowBom1 extends game.weapon.ThrowBom
var EthrowBom1=(function(_super){
	function EthrowBom1(){
		EthrowBom1.__super.call(this);
	}

	__class(EthrowBom1,'game.weapon.EthrowBom1',_super);
	var __proto=EthrowBom1.prototype;
	__proto.dispose=function(){
		if(this._dispose)return;
		this._disposeCheck=true;
		_super.prototype.dispose.call(this);
		GlobalAPI.weaponEnemyMgr.remove(this);
		Pool.recover("EthrowBom1",this);
	}

	return EthrowBom1;
})(ThrowBom)


//class laya.webgl.shader.Shader extends laya.webgl.shader.BaseShader
var Shader=(function(_super){
	function Shader(vs,ps,saveName,nameMap){
		this.customCompile=false;
		//this._nameMap=null;
		//shader参数别名，语义
		//this._vs=null;
		//this._ps=null;
		this._curActTexIndex=0;
		//this._reCompile=false;
		//存储一些私有变量
		this.tag={};
		//this._vshader=null;
		//this._pshader=null;
		this._program=null;
		this._params=null;
		this._paramsMap={};
		this._offset=0;
		//this._id=0;
		Shader.__super.call(this);
		if ((!vs)|| (!ps))throw "Shader Error";
		if (Render.isConchApp || Render.isFlash){
			this.customCompile=true;
		}
		this._id=++Shader._count;
		this._vs=vs;
		this._ps=ps;
		this._nameMap=nameMap ? nameMap :{};
		saveName !=null && (Shader.sharders[saveName]=this);
	}

	__class(Shader,'laya.webgl.shader.Shader',_super);
	var __proto=Shader.prototype;
	__proto.recreateResource=function(){
		this._compile();
		this.completeCreate();
		this.memorySize=0;
	}

	//忽略尺寸尺寸
	__proto.disposeResource=function(){
		WebGL.mainContext.deleteShader(this._vshader);
		WebGL.mainContext.deleteShader(this._pshader);
		WebGL.mainContext.deleteProgram(this._program);
		this._vshader=this._pshader=this._program=null;
		this._params=null;
		this._paramsMap={};
		this.memorySize=0;
		this._curActTexIndex=0;
	}

	__proto._compile=function(){
		if (!this._vs || !this._ps || this._params)
			return;
		this._reCompile=true;
		this._params=[];
		var text=[this._vs,this._ps];
		var result;
		if (this.customCompile)
			result=ShaderCompile.preGetParams(this._vs,this._ps);
		var gl=WebGL.mainContext;
		this._program=gl.createProgram();
		this._vshader=Shader._createShader(gl,text[0],0x8B31);
		this._pshader=Shader._createShader(gl,text[1],0x8B30);
		gl.attachShader(this._program,this._vshader);
		gl.attachShader(this._program,this._pshader);
		gl.linkProgram(this._program);
		if (!this.customCompile && !gl.getProgramParameter(this._program,0x8B82)){
			throw gl.getProgramInfoLog(this._program);
		};
		var one,i=0,j=0,n=0,location;
		var attribNum=this.customCompile ? result.attributes.length :gl.getProgramParameter(this._program,0x8B89);
		for (i=0;i < attribNum;i++){
			var attrib=this.customCompile ? result.attributes[i] :gl.getActiveAttrib(this._program,i);
			location=gl.getAttribLocation(this._program,attrib.name);
			one={vartype:"attribute",glfun:null,ivartype:0,attrib:attrib,location:location,name:attrib.name,type:attrib.type,isArray:false,isSame:false,preValue:null,indexOfParams:0};
			this._params.push(one);
		};
		var nUniformNum=this.customCompile ? result.uniforms.length :gl.getProgramParameter(this._program,0x8B86);
		for (i=0;i < nUniformNum;i++){
			var uniform=this.customCompile ? result.uniforms[i] :gl.getActiveUniform(this._program,i);
			location=gl.getUniformLocation(this._program,uniform.name);
			one={vartype:"uniform",glfun:null,ivartype:1,attrib:attrib,location:location,name:uniform.name,type:uniform.type,isArray:false,isSame:false,preValue:null,indexOfParams:0};
			if (one.name.indexOf('[0]')> 0){
				one.name=one.name.substr(0,one.name.length-3);
				one.isArray=true;
				one.location=gl.getUniformLocation(this._program,one.name);
			}
			this._params.push(one);
		}
		for (i=0,n=this._params.length;i < n;i++){
			one=this._params[i];
			one.indexOfParams=i;
			one.index=1;
			one.value=[one.location,null];
			one.codename=one.name;
			one.name=this._nameMap[one.codename] ? this._nameMap[one.codename] :one.codename;
			this._paramsMap[one.name]=one;
			one._this=this;
			one.uploadedValue=[];
			if (one.vartype==="attribute"){
				one.fun=this._attribute;
				continue ;
			}
			switch (one.type){
				case 0x1404:
					one.fun=one.isArray ? this._uniform1iv :this._uniform1i;
					break ;
				case 0x1406:
					one.fun=one.isArray ? this._uniform1fv :this._uniform1f;
					break ;
				case 0x8B50:
					one.fun=one.isArray ? this._uniform_vec2v:this._uniform_vec2;
					break ;
				case 0x8B51:
					one.fun=one.isArray ? this._uniform_vec3v:this._uniform_vec3;
					break ;
				case 0x8B52:
					one.fun=one.isArray ? this._uniform_vec4v:this._uniform_vec4;
					break ;
				case 0x8B5E:
					one.fun=this._uniform_sampler2D;
					break ;
				case 0x8B60:
					one.fun=this._uniform_samplerCube;
					break ;
				case 0x8B5C:
					one.glfun=gl.uniformMatrix4fv;
					one.fun=this._uniformMatrix4fv;
					break ;
				case 0x8B56:
					one.fun=this._uniform1i;
					break ;
				case 0x8B5A:
				case 0x8B5B:
					throw new Error("compile shader err!");
					break ;
				default :
					throw new Error("compile shader err!");
					break ;
				}
		}
	}

	/**
	*根据变量名字获得
	*@param name
	*@return
	*/
	__proto.getUniform=function(name){
		return this._paramsMap[name];
	}

	__proto._attribute=function(one,value){
		var gl=WebGL.mainContext;
		var enableAtributes=Buffer._enableAtributes;
		var location=one.location;
		(enableAtributes[location])||(gl.enableVertexAttribArray(location));
		gl.vertexAttribPointer(location,value[0],value[1],value[2],value[3],value[4]+this._offset);
		enableAtributes[location]=Buffer._bindVertexBuffer;
		return 1;
	}

	__proto._uniform1f=function(one,value){
		var uploadedValue=one.uploadedValue;
		if (uploadedValue[0]!==value){
			WebGL.mainContext.uniform1f(one.location,uploadedValue[0]=value);
			return 1;
		}
		return 0;
	}

	__proto._uniform1fv=function(one,value){
		if (value.length < 4){
			var uploadedValue=one.uploadedValue;
			if (uploadedValue[0]!==value[0] || uploadedValue[1]!==value[1] || uploadedValue[2]!==value[2] || uploadedValue[3]!==value[3]){
				WebGL.mainContext.uniform1fv(one.location,value);
				uploadedValue[0]=value[0];
				uploadedValue[1]=value[1];
				uploadedValue[2]=value[2];
				uploadedValue[3]=value[3];
				return 1;
			}
			return 0;
			}else {
			WebGL.mainContext.uniform1fv(one.location,value);
			return 1;
		}
	}

	__proto._uniform_vec2=function(one,value){
		var uploadedValue=one.uploadedValue;
		if (uploadedValue[0]!==value[0] || uploadedValue[1]!==value[1]){
			WebGL.mainContext.uniform2f(one.location,uploadedValue[0]=value[0],uploadedValue[1]=value[1]);
			return 1;
		}
		return 0;
	}

	__proto._uniform_vec2v=function(one,value){
		if (value.length < 2){
			var uploadedValue=one.uploadedValue;
			if (uploadedValue[0]!==value[0] || uploadedValue[1]!==value[1] || uploadedValue[2]!==value[2] || uploadedValue[3]!==value[3]){
				WebGL.mainContext.uniform2fv(one.location,value);
				uploadedValue[0]=value[0];
				uploadedValue[1]=value[1];
				uploadedValue[2]=value[2];
				uploadedValue[3]=value[3];
				return 1;
			}
			return 0;
			}else {
			WebGL.mainContext.uniform2fv(one.location,value);
			return 1;
		}
	}

	__proto._uniform_vec3=function(one,value){
		var uploadedValue=one.uploadedValue;
		if (uploadedValue[0]!==value[0] || uploadedValue[1]!==value[1] || uploadedValue[2]!==value[2]){
			WebGL.mainContext.uniform3f(one.location,uploadedValue[0]=value[0],uploadedValue[1]=value[1],uploadedValue[2]=value[2]);
			return 1;
		}
		return 0;
	}

	__proto._uniform_vec3v=function(one,value){
		WebGL.mainContext.uniform3fv(one.location,value);
		return 1;
	}

	__proto._uniform_vec4=function(one,value){
		var uploadedValue=one.uploadedValue;
		if (uploadedValue[0]!==value[0] || uploadedValue[1]!==value[1] || uploadedValue[2]!==value[2] || uploadedValue[3]!==value[3]){
			WebGL.mainContext.uniform4f(one.location,uploadedValue[0]=value[0],uploadedValue[1]=value[1],uploadedValue[2]=value[2],uploadedValue[3]=value[3]);
			return 1;
		}
		return 0;
	}

	__proto._uniform_vec4v=function(one,value){
		WebGL.mainContext.uniform4fv(one.location,value);
		return 1;
	}

	__proto._uniformMatrix2fv=function(one,value){
		WebGL.mainContext.uniformMatrix2fv(one.location,false,value);
		return 1;
	}

	__proto._uniformMatrix3fv=function(one,value){
		WebGL.mainContext.uniformMatrix3fv(one.location,false,value);
		return 1;
	}

	__proto._uniformMatrix4fv=function(one,value){
		WebGL.mainContext.uniformMatrix4fv(one.location,false,value);
		return 1;
	}

	__proto._uniform1i=function(one,value){
		var uploadedValue=one.uploadedValue;
		if (uploadedValue[0]!==value){
			WebGL.mainContext.uniform1i(one.location,uploadedValue[0]=value);
			return 1;
		}
		return 0;
	}

	__proto._uniform1iv=function(one,value){
		WebGL.mainContext.uniform1iv(one.location,value);
		return 1;
	}

	__proto._uniform_ivec2=function(one,value){
		var uploadedValue=one.uploadedValue;
		if (uploadedValue[0]!==value[0] || uploadedValue[1]!==value[1]){
			WebGL.mainContext.uniform2i(one.location,uploadedValue[0]=value[0],uploadedValue[1]=value[1]);
			return 1;
		}
		return 0;
	}

	__proto._uniform_ivec2v=function(one,value){
		WebGL.mainContext.uniform2iv(one.location,value);
		return 1;
	}

	__proto._uniform_vec3i=function(one,value){
		var uploadedValue=one.uploadedValue;
		if (uploadedValue[0]!==value[0] || uploadedValue[1]!==value[1] || uploadedValue[2]!==value[2]){
			WebGL.mainContext.uniform3i(one.location,uploadedValue[0]=value[0],uploadedValue[1]=value[1],uploadedValue[2]=value[2]);
			return 1;
		}
		return 0;
	}

	__proto._uniform_vec3vi=function(one,value){
		WebGL.mainContext.uniform3iv(one.location,value);
		return 1;
	}

	__proto._uniform_vec4i=function(one,value){
		var uploadedValue=one.uploadedValue;
		if (uploadedValue[0]!==value[0] || uploadedValue[1]!==value[1] || uploadedValue[2]!==value[2] || uploadedValue[3]!==value[3]){
			WebGL.mainContext.uniform4i(one.location,uploadedValue[0]=value[0],uploadedValue[1]=value[1],uploadedValue[2]=value[2],uploadedValue[3]=value[3]);
			return 1;
		}
		return 0;
	}

	__proto._uniform_vec4vi=function(one,value){
		WebGL.mainContext.uniform4iv(one.location,value);
		return 1;
	}

	__proto._uniform_sampler2D=function(one,value){
		var gl=WebGL.mainContext;
		var uploadedValue=one.uploadedValue;
		if (uploadedValue[0]==null){
			uploadedValue[0]=this._curActTexIndex;
			gl.uniform1i(one.location,this._curActTexIndex);
			gl.activeTexture(Shader._TEXTURES[this._curActTexIndex]);
			WebGLContext.bindTexture(gl,0x0DE1,value);
			this._curActTexIndex++;
			return 1;
			}else {
			gl.activeTexture(Shader._TEXTURES[uploadedValue[0]]);
			WebGLContext.bindTexture(gl,0x0DE1,value);
			return 0;
		}
	}

	__proto._uniform_samplerCube=function(one,value){
		var gl=WebGL.mainContext;
		var uploadedValue=one.uploadedValue;
		if (uploadedValue[0]==null){
			uploadedValue[0]=this._curActTexIndex;
			gl.uniform1i(one.location,this._curActTexIndex);
			gl.activeTexture(Shader._TEXTURES[this._curActTexIndex]);
			WebGLContext.bindTexture(gl,0x8513,value);
			this._curActTexIndex++;
			return 1;
			}else {
			gl.activeTexture(Shader._TEXTURES[uploadedValue[0]]);
			WebGLContext.bindTexture(gl,0x8513,value);
			return 0;
		}
	}

	__proto._noSetValue=function(one){
		console.log("no....:"+one.name);
	}

	//throw new Error("upload shader err,must set value:"+one.name);
	__proto.uploadOne=function(name,value){
		this.activeResource();
		WebGLContext.UseProgram(this._program);
		var one=this._paramsMap[name];
		one.fun.call(this,one,value);
	}

	__proto.uploadTexture2D=function(value){
		Stat.shaderCall++;
		var gl=WebGL.mainContext;
		gl.activeTexture(0x84C0);
		WebGLContext.bindTexture(gl,0x0DE1,value);
	}

	/**
	*提交shader到GPU
	*@param shaderValue
	*/
	__proto.upload=function(shaderValue,params){
		BaseShader.activeShader=BaseShader.bindShader=this;
		this._lastUseFrameCount===Stat.loopCount || this.activeResource();
		WebGLContext.UseProgram(this._program);
		if (this._reCompile){
			params=this._params;
			this._reCompile=false;
			}else {
			params=params || this._params;
		};
		var gl=WebGL.mainContext;
		var one,value,n=params.length,shaderCall=0;
		for (var i=0;i < n;i++){
			one=params[i];
			if ((value=shaderValue[one.name])!==null)
				shaderCall+=one.fun.call(this,one,value);
		}
		Stat.shaderCall+=shaderCall;
	}

	/**
	*按数组的定义提交
	*@param shaderValue 数组格式[name,value,...]
	*/
	__proto.uploadArray=function(shaderValue,length,_bufferUsage){
		BaseShader.activeShader=this;
		BaseShader.bindShader=this;
		this.activeResource();
		WebGLContext.UseProgram(this._program);
		var params=this._params,value;
		var one,shaderCall=0;
		for (var i=length-2;i >=0;i-=2){
			one=this._paramsMap[shaderValue[i]];
			if (!one)
				continue ;
			value=shaderValue[i+1];
			if (value !=null){
				_bufferUsage && _bufferUsage[one.name] && _bufferUsage[one.name].bind();
				shaderCall+=one.fun.call(this,one,value);
			}
		}
		Stat.shaderCall+=shaderCall;
	}

	/**
	*得到编译后的变量及相关预定义
	*@return
	*/
	__proto.getParams=function(){
		return this._params;
	}

	Shader.getShader=function(name){
		return Shader.sharders[name];
	}

	Shader.create=function(vs,ps,saveName,nameMap){
		return new Shader(vs,ps,saveName,nameMap);
	}

	Shader.withCompile=function(nameID,define,shaderName,createShader){
		if (shaderName && Shader.sharders[shaderName])
			return Shader.sharders[shaderName];
		var pre=Shader._preCompileShader[0.0002 *nameID];
		if (!pre)
			throw new Error("withCompile shader err!"+nameID);
		return pre.createShader(define,shaderName,createShader);
	}

	Shader.withCompile2D=function(nameID,mainID,define,shaderName,createShader){
		if (shaderName && Shader.sharders[shaderName])
			return Shader.sharders[shaderName];
		var pre=Shader._preCompileShader[0.0002 *nameID+mainID];
		if (!pre)
			throw new Error("withCompile shader err!"+nameID+" "+mainID);
		return pre.createShader(define,shaderName,createShader);
	}

	Shader.addInclude=function(fileName,txt){
		ShaderCompile.addInclude(fileName,txt);
	}

	Shader.preCompile=function(nameID,vs,ps,nameMap){
		var id=0.0002 *nameID;
		Shader._preCompileShader[id]=new ShaderCompile(id,vs,ps,nameMap);
	}

	Shader.preCompile2D=function(nameID,mainID,vs,ps,nameMap){
		var id=0.0002 *nameID+mainID;
		Shader._preCompileShader[id]=new ShaderCompile(id,vs,ps,nameMap);
	}

	Shader._createShader=function(gl,str,type){
		var shader=gl.createShader(type);
		gl.shaderSource(shader,str);
		gl.compileShader(shader);
		return shader;
	}

	Shader._TEXTURES=[0x84C0,0x84C1,0x84C2,0x84C3,0x84C4,0x84C5,0x84C6,,0x84C7,0x84C8];
	Shader._count=0;
	Shader._preCompileShader={};
	Shader.SHADERNAME2ID=0.0002;
	Shader.sharders=(Shader.sharders=[],Shader.sharders.length=0x20,Shader.sharders);
	__static(Shader,
	['nameKey',function(){return this.nameKey=new StringKey();}
	]);
	return Shader;
})(BaseShader)


//class laya.webgl.utils.Buffer2D extends laya.webgl.utils.Buffer
var Buffer2D=(function(_super){
	function Buffer2D(){
		this._maxsize=0;
		this._upload=true;
		this._uploadSize=0;
		Buffer2D.__super.call(this);
		this.lock=true;
	}

	__class(Buffer2D,'laya.webgl.utils.Buffer2D',_super);
	var __proto=Buffer2D.prototype;
	/**
	*在当前的基础上需要多大空间，单位是byte
	*@param sz
	*@return 增加大小之前的写位置。单位是byte
	*/
	__proto.needSize=function(sz){
		var old=this._byteLength;
		if (sz){
			var needsz=this._byteLength+sz;
			needsz <=this._buffer.byteLength || (this._resizeBuffer(needsz << 1,true));
			this._byteLength=needsz;
		}
		return old;
	}

	__proto._bufferData=function(){
		this._maxsize=Math.max(this._maxsize,this._byteLength);
		if (Stat.loopCount % 30==0){
			if (this._buffer.byteLength > (this._maxsize+64)){
				this.memorySize=this._buffer.byteLength;
				this._buffer=this._buffer.slice(0,this._maxsize+64);
				this._checkArrayUse();
			}
			this._maxsize=this._byteLength;
		}
		if (this._uploadSize < this._buffer.byteLength){
			this._uploadSize=this._buffer.byteLength;
			Buffer._gl.bufferData(this._bufferType,this._uploadSize,this._bufferUsage);
			this.memorySize=this._uploadSize;
		}
		Buffer._gl.bufferSubData(this._bufferType,0,this._buffer);
	}

	__proto._bufferSubData=function(offset,dataStart,dataLength){
		(offset===void 0)&& (offset=0);
		(dataStart===void 0)&& (dataStart=0);
		(dataLength===void 0)&& (dataLength=0);
		this._maxsize=Math.max(this._maxsize,this._byteLength);
		if (Stat.loopCount % 30==0){
			if (this._buffer.byteLength > (this._maxsize+64)){
				this.memorySize=this._buffer.byteLength;
				this._buffer=this._buffer.slice(0,this._maxsize+64);
				this._checkArrayUse();
			}
			this._maxsize=this._byteLength;
		}
		if (this._uploadSize < this._buffer.byteLength){
			this._uploadSize=this._buffer.byteLength;
			Buffer._gl.bufferData(this._bufferType,this._uploadSize,this._bufferUsage);
			this.memorySize=this._uploadSize;
		}
		if (dataStart || dataLength){
			var subBuffer=this._buffer.slice(dataStart,dataLength);
			Buffer._gl.bufferSubData(this._bufferType,offset,subBuffer);
			}else {
			Buffer._gl.bufferSubData(this._bufferType,offset,this._buffer);
		}
	}

	__proto._checkArrayUse=function(){}
	__proto._bind_upload=function(){
		if (!this._upload)
			return false;
		this._upload=false;
		this._bind();
		this._bufferData();
		return true;
	}

	__proto._bind_subUpload=function(offset,dataStart,dataLength){
		(offset===void 0)&& (offset=0);
		(dataStart===void 0)&& (dataStart=0);
		(dataLength===void 0)&& (dataLength=0);
		if (!this._upload)
			return false;
		this._upload=false;
		this._bind();
		this._bufferSubData(offset,dataStart,dataLength);
		return true;
	}

	__proto._resizeBuffer=function(nsz,copy){
		if (nsz < this._buffer.byteLength)
			return this;
		this.memorySize=nsz;
		if (copy && this._buffer && this._buffer.byteLength > 0){
			var newbuffer=new ArrayBuffer(nsz);
			var n=new Uint8Array(newbuffer);
			n.set(new Uint8Array(this._buffer),0);
			this._buffer=newbuffer;
		}else
		this._buffer=new ArrayBuffer(nsz);
		this._checkArrayUse();
		this._upload=true;
		return this;
	}

	__proto.append=function(data){
		this._upload=true;
		var byteLen=0,n;
		byteLen=data.byteLength;
		if ((data instanceof Uint8Array)){
			this._resizeBuffer(this._byteLength+byteLen,true);
			n=new Uint8Array(this._buffer,this._byteLength);
			}else if ((data instanceof Uint16Array)){
			this._resizeBuffer(this._byteLength+byteLen,true);
			n=new Uint16Array(this._buffer,this._byteLength);
			}else if ((data instanceof Float32Array)){
			this._resizeBuffer(this._byteLength+byteLen,true);
			n=new Float32Array(this._buffer,this._byteLength);
		}
		n.set(data,0);
		this._byteLength+=byteLen;
		this._checkArrayUse();
	}

	/**
	*附加Uint16Array的数据。数据长度是len。byte的话要*2
	*@param data
	*@param len
	*/
	__proto.appendU16Array=function(data,len){
		this._resizeBuffer(this._byteLength+len*2,true);
		var u=new Uint16Array(this._buffer,this._byteLength,len);
		for (var i=0;i < len;i++){
			u[i]=data[i];
		}
		this._byteLength+=len *2;
		this._checkArrayUse();
	}

	__proto.appendEx=function(data,type){
		this._upload=true;
		var byteLen=0,n;
		byteLen=data.byteLength;
		this._resizeBuffer(this._byteLength+byteLen,true);
		n=new type(this._buffer,this._byteLength);
		n.set(data,0);
		this._byteLength+=byteLen;
		this._checkArrayUse();
	}

	__proto.appendEx2=function(data,type,dataLen,perDataLen){
		(perDataLen===void 0)&& (perDataLen=1);
		this._upload=true;
		var byteLen=0,n;
		byteLen=dataLen*perDataLen;
		this._resizeBuffer(this._byteLength+byteLen,true);
		n=new type(this._buffer,this._byteLength);
		var i=0;
		for (i=0;i < dataLen;i++){
			n[i]=data[i];
		}
		this._byteLength+=byteLen;
		this._checkArrayUse();
	}

	__proto.getBuffer=function(){
		return this._buffer;
	}

	__proto.setNeedUpload=function(){
		this._upload=true;
	}

	__proto.getNeedUpload=function(){
		return this._upload;
	}

	__proto.upload=function(){
		var scuess=this._bind_upload();
		Buffer._gl.bindBuffer(this._bufferType,null);
		Buffer._bindActive[this._bufferType]=null;
		BaseShader.activeShader=null
		return scuess;
	}

	__proto.subUpload=function(offset,dataStart,dataLength){
		(offset===void 0)&& (offset=0);
		(dataStart===void 0)&& (dataStart=0);
		(dataLength===void 0)&& (dataLength=0);
		var scuess=this._bind_subUpload();
		Buffer._gl.bindBuffer(this._bufferType,null);
		Buffer._bindActive[this._bufferType]=null;
		BaseShader.activeShader=null
		return scuess;
	}

	__proto.disposeResource=function(){
		_super.prototype.disposeResource.call(this);
		this._upload=true;
		this._uploadSize=0;
	}

	__proto.clear=function(){
		this._byteLength=0;
		this._upload=true;
	}

	__getset(0,__proto,'bufferLength',function(){
		return this._buffer.byteLength;
	});

	__getset(0,__proto,'byteLength',null,function(value){
		if (this._byteLength===value)
			return;
		value <=this._buffer.byteLength || (this._resizeBuffer(value *2+256,true));
		this._byteLength=value;
	});

	Buffer2D.__int__=function(gl){
		IndexBuffer2D.QuadrangleIB=IndexBuffer2D.create(0x88E4);
		GlUtils.fillIBQuadrangle(IndexBuffer2D.QuadrangleIB,16);
	}

	Buffer2D.FLOAT32=4;
	Buffer2D.SHORT=2;
	return Buffer2D;
})(Buffer)


/**
*@private
*<code>FileBitmap</code> 是图片文件资源类。
*/
//class laya.resource.FileBitmap extends laya.resource.Bitmap
var FileBitmap=(function(_super){
	function FileBitmap(){
		/**@private 文件路径全名。*/
		this._src=null;
		/**@private onload触发函数*/
		this._onload=null;
		/**@private onerror触发函数*/
		this._onerror=null;
		FileBitmap.__super.call(this);
	}

	__class(FileBitmap,'laya.resource.FileBitmap',_super);
	var __proto=FileBitmap.prototype;
	/**
	*文件路径全名。
	*/
	__getset(0,__proto,'src',function(){
		return this._src;
		},function(value){
		this._src=value;
	});

	/**
	*载入完成处理函数。
	*/
	__getset(0,__proto,'onload',null,function(value){
	});

	/**
	*错误处理函数。
	*/
	__getset(0,__proto,'onerror',null,function(value){
	});

	return FileBitmap;
})(Bitmap)


/**
*<code>HTMLCanvas</code> 是 Html Canvas 的代理类，封装了 Canvas 的属性和方法。。请不要直接使用 new HTMLCanvas！
*/
//class laya.resource.HTMLCanvas extends laya.resource.Bitmap
var HTMLCanvas=(function(_super){
	function HTMLCanvas(type,canvas){
		//this._ctx=null;
		this._is2D=false;
		HTMLCanvas.__super.call(this);
		var _$this=this;
		this._source=this;
		if (type==="2D" || (type==="AUTO" && !Render.isWebGL)){
			this._is2D=true;
			this._source=canvas || Browser.createElement("canvas");
			this._w=this._source.width;
			this._h=this._source.height;
			var o=this;
			o.getContext=function (contextID,other){
				if (_$this._ctx)return _$this._ctx;
				var ctx=_$this._ctx=_$this._source.getContext(contextID,other);
				if (ctx){
					ctx._canvas=o;
					if(!Render.isFlash&&!Browser.onLimixiu)ctx.size=function (w,h){
					};
				}
				return ctx;
			}
		}
		this.lock=true;
	}

	__class(HTMLCanvas,'laya.resource.HTMLCanvas',_super);
	var __proto=HTMLCanvas.prototype;
	/**
	*清空画布内容。
	*/
	__proto.clear=function(){
		this._ctx && this._ctx.clear();
	}

	/**
	*销毁。
	*/
	__proto.destroy=function(){
		this._ctx && this._ctx.destroy();
		this._ctx=null;
		laya.resource.Resource.prototype.destroy.call(this);
	}

	/**
	*释放。
	*/
	__proto.release=function(){}
	/**
	*@private
	*设置 Canvas 渲染上下文。
	*@param context Canvas 渲染上下文。
	*/
	__proto._setContext=function(context){
		this._ctx=context;
	}

	/**
	*获取 Canvas 渲染上下文。
	*@param contextID 上下文ID.
	*@param other
	*@return Canvas 渲染上下文 Context 对象。
	*/
	__proto.getContext=function(contextID,other){
		return this._ctx ? this._ctx :(this._ctx=HTMLCanvas._createContext(this));
	}

	/**
	*获取内存大小。
	*@return 内存大小。
	*/
	__proto.getMemSize=function(){
		return 0;
	}

	/**
	*设置宽高。
	*@param w 宽度。
	*@param h 高度。
	*/
	__proto.size=function(w,h){
		if (this._w !=w || this._h !=h ||(this._source && (this._source.width!=w || this._source.height!=h))){
			this._w=w;
			this._h=h;
			this.memorySize=this._w *this._h *4;
			this._ctx && this._ctx.size(w,h);
			this._source && (this._source.height=h,this._source.width=w);
		}
	}

	__proto.getCanvas=function(){
		return this._source;
	}

	__proto.toBase64=function(type,encoderOptions,callBack){
		if (this._source){
			if (Render.isConchApp && this._source.toBase64){
				this._source.toBase64(type,encoderOptions,callBack);
			}
			else {
				var base64Data=this._source.toDataURL(type,encoderOptions);
				callBack.call(this,base64Data);
			}
		}
	}

	/**
	*Canvas 渲染上下文。
	*/
	__getset(0,__proto,'context',function(){
		return this._ctx;
	});

	/**
	*是否当作 Bitmap 对象。
	*/
	__getset(0,__proto,'asBitmap',null,function(value){
	});

	HTMLCanvas.create=function(type,canvas){
		return new HTMLCanvas(type,canvas);
	}

	HTMLCanvas.TYPE2D="2D";
	HTMLCanvas.TYPE3D="3D";
	HTMLCanvas.TYPEAUTO="AUTO";
	HTMLCanvas._createContext=null;
	return HTMLCanvas;
})(Bitmap)


/**
*@private
*/
//class laya.resource.HTMLSubImage extends laya.resource.Bitmap
var HTMLSubImage=(function(_super){
	//请不要直接使用new HTMLSubImage
	function HTMLSubImage(canvas,offsetX,offsetY,width,height,atlasImage,src,allowMerageInAtlas){
		HTMLSubImage.__super.call(this);
		throw new Error("不允许new！");
	}

	__class(HTMLSubImage,'laya.resource.HTMLSubImage',_super);
	HTMLSubImage.create=function(canvas,offsetX,offsetY,width,height,atlasImage,src,allowMerageInAtlas){
		(allowMerageInAtlas===void 0)&& (allowMerageInAtlas=false);
		return new HTMLSubImage(canvas,offsetX,offsetY,width,height,atlasImage,src,allowMerageInAtlas);
	}

	return HTMLSubImage;
})(Bitmap)


//class laya.webgl.atlas.AtlasWebGLCanvas extends laya.resource.Bitmap
var AtlasWebGLCanvas=(function(_super){
	function AtlasWebGLCanvas(){
		this._atlaser=null;
		/**兼容Stage3D使用*/
		this._flashCacheImage=null;
		this._flashCacheImageNeedFlush=false;
		AtlasWebGLCanvas.__super.call(this);
	}

	__class(AtlasWebGLCanvas,'laya.webgl.atlas.AtlasWebGLCanvas',_super);
	var __proto=AtlasWebGLCanvas.prototype;
	/***重新创建资源*/
	__proto.recreateResource=function(){
		var gl=WebGL.mainContext;
		var glTex=this._source=gl.createTexture();
		var preTarget=WebGLContext.curBindTexTarget;
		var preTexture=WebGLContext.curBindTexValue;
		WebGLContext.bindTexture(gl,0x0DE1,glTex);
		gl.texImage2D(0x0DE1,0,0x1908,this._w,this._h,0,0x1908,0x1401,null);
		gl.texParameteri(0x0DE1,0x2801,0x2601);
		gl.texParameteri(0x0DE1,0x2800,0x2601);
		gl.texParameteri(0x0DE1,0x2802,0x812F);
		gl.texParameteri(0x0DE1,0x2803,0x812F);
		(preTarget && preTexture)&& (WebGLContext.bindTexture(gl,preTarget,preTexture));
		this.memorySize=this._w *this._h *4;
		this.completeCreate();
	}

	/***销毁资源*/
	__proto.disposeResource=function(){
		if (this._source){
			WebGL.mainContext.deleteTexture(this._source);
			this._source=null;
			this.memorySize=0;
		}
	}

	/**采样image到WebGLTexture的一部分*/
	__proto.texSubImage2D=function(xoffset,yoffset,bitmap){
		if (!Render.isFlash){
			var gl=WebGL.mainContext;
			var preTarget=WebGLContext.curBindTexTarget;
			var preTexture=WebGLContext.curBindTexValue;
			WebGLContext.bindTexture(gl,0x0DE1,this._source);
			gl.pixelStorei(0x9241,true);
			(xoffset-1 >=0)&& (gl.texSubImage2D(0x0DE1,0,xoffset-1,yoffset,0x1908,0x1401,bitmap));
			(xoffset+1 <=this._w)&& (gl.texSubImage2D(0x0DE1,0,xoffset+1,yoffset,0x1908,0x1401,bitmap));
			(yoffset-1 >=0)&& (gl.texSubImage2D(0x0DE1,0,xoffset,yoffset-1,0x1908,0x1401,bitmap));
			(yoffset+1 <=this._h)&& (gl.texSubImage2D(0x0DE1,0,xoffset,yoffset+1,0x1908,0x1401,bitmap));
			gl.texSubImage2D(0x0DE1,0,xoffset,yoffset,0x1908,0x1401,bitmap);
			gl.pixelStorei(0x9241,false);
			(preTarget && preTexture)&& (WebGLContext.bindTexture(gl,preTarget,preTexture));
			}else {
			if (!this._flashCacheImage){
				this._flashCacheImage=HTMLImage.create("");
				this._flashCacheImage._image.createCanvas(this._w,this._h);
			};
			var bmData=bitmap.bitmapdata;
			this._flashCacheImage._image.copyPixels(bmData,0,0,bmData.width,bmData.height,xoffset,yoffset);
			(this._flashCacheImageNeedFlush)|| (this._flashCacheImageNeedFlush=true);
		}
	}

	/**采样image到WebGLTexture的一部分*/
	__proto.texSubImage2DPixel=function(xoffset,yoffset,width,height,pixel){
		var gl=WebGL.mainContext;
		var preTarget=WebGLContext.curBindTexTarget;
		var preTexture=WebGLContext.curBindTexValue;
		WebGLContext.bindTexture(gl,0x0DE1,this._source);
		var pixels=new Uint8Array(pixel.data);
		gl.pixelStorei(0x9241,true);
		gl.texSubImage2D(0x0DE1,0,xoffset,yoffset,width,height,0x1908,0x1401,pixels);
		gl.pixelStorei(0x9241,false);
		(preTarget && preTexture)&& (WebGLContext.bindTexture(gl,preTarget,preTexture));
	}

	/***
	*设置图片宽度
	*@param value 图片宽度
	*/
	__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
		this._w=value;
	});

	/***
	*设置图片高度
	*@param value 图片高度
	*/
	__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
		this._h=value;
	});

	return AtlasWebGLCanvas;
})(Bitmap)


/**@private */
//class laya.webgl.resource.WebGLCanvas extends laya.resource.Bitmap
var WebGLCanvas=(function(_super){
	function WebGLCanvas(){
		this.flipY=true;
		//上传的时候是否上下颠倒
		this.premulAlpha=false;
		//上传的时候是否预乘alpha
		//this._ctx=null;
		/**HTML Canvas*/
		//this._canvas=null;
		//this._imgData=null;
		//}
		//this.iscpuSource=false;
		this.alwaysChange=false;
		WebGLCanvas.__super.call(this);
	}

	__class(WebGLCanvas,'laya.webgl.resource.WebGLCanvas',_super);
	var __proto=WebGLCanvas.prototype;
	//}
	__proto.getCanvas=function(){
		return this._canvas;
	}

	__proto.clear=function(){
		this._ctx && this._ctx.clear();
	}

	__proto.destroy=function(){
		this._ctx && this._ctx.destroy();
		this._ctx=null;
	}

	__proto._setContext=function(context){
		this._ctx=context;
	}

	__proto.getContext=function(contextID,other){
		return this._ctx ? this._ctx :(this._ctx=WebGLCanvas._createContext(this));
	}

	/*override public function copyTo(dec:Bitmap):void {
	super.copyTo(dec);
	(dec as WebGLCanvas)._ctx=_ctx;
}*/


__proto.size=function(w,h){
	if (this._w !=w || this._h !=h){
		this._w=w;
		this._h=h;
		this._ctx && this._ctx.size(w,h);
		this._canvas && (this._canvas.height=h,this._canvas.width=w);
	}

}


__proto.activeResource=function(force){
	(force===void 0)&& (force=false);
	if (!this._source){
		this.recreateResource();
	}

}


__proto.recreateResource=function(){
	this.createWebGlTexture();
	this.completeCreate();
}


__proto.disposeResource=function(){
	if (this._source && !this.iscpuSource){
		WebGL.mainContext.deleteTexture(this._source);
		this._source=null;
		this.memorySize=0;
	}

}


__proto.createWebGlTexture=function(){
	var gl=WebGL.mainContext;
	if (!this._canvas){
	};

	var glTex=this._source=gl.createTexture();
	this.iscpuSource=false;
	var preTarget=WebGLContext.curBindTexTarget;
	var preTexture=WebGLContext.curBindTexValue;
	WebGLContext.bindTexture(gl,0x0DE1,glTex);
	gl.pixelStorei(0x9240,this.flipY?1:0);
	this.premulAlpha&&gl.pixelStorei(0x9241,true);
	gl.texImage2D(0x0DE1,0,0x1908,0x1908,0x1401,this._imgData);
	this.premulAlpha && gl.pixelStorei(0x9241,false);
	gl.texParameteri(0x0DE1,0x2800,0x2601);
	gl.texParameteri(0x0DE1,0x2801,0x2601);
	gl.texParameteri(0x0DE1,0x2802,0x812F);
	gl.texParameteri(0x0DE1,0x2803,0x812F);
	gl.pixelStorei(0x9240,0);
	this.memorySize=this._w *this._h *4;
	(preTarget && preTexture)&& (WebGLContext.bindTexture(gl,preTarget,preTexture));
}


//_canvas=null;
__proto.reloadCanvasData=function(){
	var gl=WebGL.mainContext;
	if (!this._source){
		throw "reloadCanvasData error, gl texture not created!";
	};

	var preTarget=WebGLContext.curBindTexTarget;
	var preTexture=WebGLContext.curBindTexValue;
	WebGLContext.bindTexture(gl,0x0DE1,this._source);
	this.premulAlpha&&gl.pixelStorei(0x9241,true);
	gl.texImage2D(0x0DE1,0,0x1908,0x1908,0x1401,this._imgData);
	this.premulAlpha && gl.pixelStorei(0x9241,false);
	gl.pixelStorei(0x9240,0);
	(preTarget && preTexture)&& (WebGLContext.bindTexture(gl,preTarget,preTexture));
}


//_canvas=null;
__proto.texSubImage2D=function(webglCanvas,xoffset,yoffset){
	var gl=WebGL.mainContext;
	var preTarget=WebGLContext.curBindTexTarget;
	var preTexture=WebGLContext.curBindTexValue;
	WebGLContext.bindTexture(gl,0x0DE1,this._source);
	gl.pixelStorei(0x9241,true);
	gl.texSubImage2D(0x0DE1,0,xoffset,yoffset,0x1908,0x1401,webglCanvas._source);
	gl.pixelStorei(0x9241,false);
	(preTarget && preTexture)&& (WebGLContext.bindTexture(gl,preTarget,preTexture));
}


__proto.toBase64=function(type,encoderOptions,callBack){
	var base64Data=null;
	if (this._canvas){
		base64Data=this._canvas.toDataURL(type,encoderOptions);
	}

	callBack.call(this,base64Data);
}


__getset(0,__proto,'context',function(){
	return this._ctx;
});


__getset(0,__proto,'source',function(){
	if (this.alwaysChange)this.reloadCanvasData();
	return this._source;
});


__getset(0,__proto,'asBitmap',null,function(value){
	this._ctx && (this._ctx.asBitmap=value);
});


WebGLCanvas._createContext=null;
return WebGLCanvas;
})(Bitmap)


//class laya.webgl.resource.WebGLCharImage extends laya.resource.Bitmap
var WebGLCharImage=(function(_super){
	function WebGLCharImage(content,drawValue){
		this.CborderSize=12;
		//this._ctx=null;
		/***是否创建私有Source*/
		//this._allowMerageInAtlas=false;
		/**是否允许加入大图合集*/
		//this._enableMerageInAtlas=false;
		/**HTML Canvas，绘制字符载体,非私有数据载体*/
		//this.canvas=null;
		/**********************************************************************************/
		//this.cw=NaN;
		//this.ch=NaN;
		//this.xs=NaN;
		//this.ys=NaN;
		//this.char=null;
		//this.fillColor=null;
		//this.borderColor=null;
		//this.borderSize=0;
		//this.font=null;
		//this.fontSize=0;
		//this.texture=null;
		//this.lineWidth=0;
		//this.UV=null;
		//this.isSpace=false;
		//this.underLine=0;
		WebGLCharImage.__super.call(this);
		this.char=content;
		this.isSpace=content===' ';
		this.xs=drawValue.scaleX;
		this.ys=drawValue.scaleY;
		this.font=drawValue.font.toString();
		this.fontSize=drawValue.font.size;
		this.fillColor=drawValue.fillColor;
		this.borderColor=drawValue.borderColor;
		this.lineWidth=drawValue.lineWidth;
		this.underLine=drawValue.underLine;
		var bIsConchApp=Render.isConchApp;
		var pCanvas;
		if (bIsConchApp){
			pCanvas=ConchTextCanvas;
			pCanvas._source=ConchTextCanvas;
			pCanvas._source.canvas=ConchTextCanvas;
			}else {
			pCanvas=Browser.canvas.source;
		}
		this.canvas=pCanvas;
		this._enableMerageInAtlas=true;
		if (bIsConchApp){
			this._ctx=pCanvas;
			}else {
			this._ctx=this.canvas.getContext('2d',undefined);
		};
		var t=Utils.measureText(this.char,this.font);
		this.cw=t.width *this.xs;
		this.ch=(t.height || this.fontSize)*this.ys;
		this.onresize(this.cw+this.CborderSize *2,this.ch+this.CborderSize *2);
		this.texture=new Texture(this);
	}

	__class(WebGLCharImage,'laya.webgl.resource.WebGLCharImage',_super);
	var __proto=WebGLCharImage.prototype;
	Laya.imps(__proto,{"laya.webgl.resource.IMergeAtlasBitmap":true})
	__proto.active=function(){
		this.texture.active();
	}

	__proto.recreateResource=function(){
		var bIsConchApp=Render.isConchApp;
		this.onresize(this.cw+this.CborderSize *2,this.ch+this.CborderSize *2);
		this.canvas && (this.canvas.height=this._h,this.canvas.width=this._w);
		if (bIsConchApp){
			var nFontSize=this.fontSize;
			if (this.xs !=1 || this.ys !=1){
				nFontSize=parseInt(nFontSize *((this.xs > this.ys)? this.xs :this.ys)+"");
			};
			var sFont="normal 100 "+nFontSize+"px Arial";
			if (this.borderColor){
				sFont+=" 1 "+this.borderColor;
			}
			this._ctx.font=sFont;
			this._ctx.textBaseline="top";
			this._ctx.fillStyle=this.fillColor;
			this._ctx.fillText(this.char,this.CborderSize,this.CborderSize,null,null,null);
			}else {
			this._ctx.save();
			(this._ctx).clearRect(0,0,this.cw+this.CborderSize *2,this.ch+this.CborderSize *2);
			this._ctx.font=this.font;
			if (Text.RightToLeft){
				this._ctx.textAlign="end";
			}
			this._ctx.textBaseline="top";
			this._ctx.translate(this.CborderSize,this.CborderSize);
			if (this.xs !=1 || this.ys !=1){
				this._ctx.scale(this.xs,this.ys);
			}
			if (this.fillColor && this.borderColor){
				this._ctx.strokeStyle=this.borderColor;
				this._ctx.lineWidth=this.lineWidth;
				this._ctx.strokeText(this.char,0,0,null,null,0,null);
				this._ctx.fillStyle=this.fillColor;
				this._ctx.fillText(this.char,0,0,null,null,null);
				}else {
				if (this.lineWidth===-1){
					this._ctx.fillStyle=this.fillColor ? this.fillColor :"white";
					this._ctx.fillText(this.char,0,0,null,null,null);
					}else {
					this._ctx.strokeStyle=this.borderColor?this.borderColor:'white';
					this._ctx.lineWidth=this.lineWidth;
					this._ctx.strokeText(this.char,0,0,null,null,0,null);
				}
			}
			if (this.underLine){
				this._ctx.lineWidth=1;
				this._ctx.strokeStyle=this.fillColor;
				this._ctx.beginPath();
				this._ctx.moveTo(0,this.fontSize+1);
				var nW=this._ctx.measureText(this.char).width+1;
				this._ctx.lineTo(nW,this.fontSize+1);
				this._ctx.stroke();
			}
			this._ctx.restore();
		}
		this.borderSize=this.CborderSize;
		this.completeCreate();
	}

	__proto.onresize=function(w,h){
		this._w=w;
		this._h=h;
		this._allowMerageInAtlas=true;
	}

	__proto.clearAtlasSource=function(){}
	/**
	*是否创建私有Source
	*@return 是否创建
	*/
	__getset(0,__proto,'allowMerageInAtlas',function(){
		return this._allowMerageInAtlas;
	});

	__getset(0,__proto,'atlasSource',function(){
		return this.canvas;
	});

	/**
	*是否创建私有Source,通常禁止修改
	*@param value 是否创建
	*/
	/**
	*是否创建私有Source
	*@return 是否创建
	*/
	__getset(0,__proto,'enableMerageInAtlas',function(){
		return this._enableMerageInAtlas;
		},function(value){
		this._enableMerageInAtlas=value;
	});

	WebGLCharImage.createOneChar=function(content,drawValue){
		var char=new WebGLCharImage(content,drawValue);
		return char;
	}

	return WebGLCharImage;
})(Bitmap)


//class laya.webgl.resource.WebGLRenderTarget extends laya.resource.Bitmap
var WebGLRenderTarget=(function(_super){
	function WebGLRenderTarget(width,height,surfaceFormat,surfaceType,depthStencilFormat,mipMap,repeat,minFifter,magFifter){
		//this._frameBuffer=null;
		//this._depthStencilBuffer=null;
		//this._surfaceFormat=0;
		//this._surfaceType=0;
		//this._depthStencilFormat=0;
		//this._mipMap=false;
		//this._repeat=false;
		//this._minFifter=0;
		//this._magFifter=0;
		(surfaceFormat===void 0)&& (surfaceFormat=0x1908);
		(surfaceType===void 0)&& (surfaceType=0x1401);
		(depthStencilFormat===void 0)&& (depthStencilFormat=0x84F9);
		(mipMap===void 0)&& (mipMap=false);
		(repeat===void 0)&& (repeat=false);
		(minFifter===void 0)&& (minFifter=-1);
		(magFifter===void 0)&& (magFifter=1);
		WebGLRenderTarget.__super.call(this);
		this._w=width;
		this._h=height;
		this._surfaceFormat=surfaceFormat;
		this._surfaceType=surfaceType;
		this._depthStencilFormat=depthStencilFormat;
		this._mipMap=mipMap;
		this._repeat=repeat;
		this._minFifter=minFifter;
		this._magFifter=magFifter;
	}

	__class(WebGLRenderTarget,'laya.webgl.resource.WebGLRenderTarget',_super);
	var __proto=WebGLRenderTarget.prototype;
	__proto.recreateResource=function(){
		var gl=WebGL.mainContext;
		this._frameBuffer || (this._frameBuffer=gl.createFramebuffer());
		this._source || (this._source=gl.createTexture());
		var preTarget=WebGLContext.curBindTexTarget;
		var preTexture=WebGLContext.curBindTexValue;
		WebGLContext.bindTexture(gl,0x0DE1,this._source);
		gl.texImage2D(0x0DE1,0,0x1908,this._w,this._h,0,this._surfaceFormat,this._surfaceType,null);
		var minFifter=this._minFifter;
		var magFifter=this._magFifter;
		var repeat=this._repeat ? 0x2901 :0x812F;
		var isPot=Arith.isPOT(this._w,this._h);
		if (isPot){
			if (this._mipMap)
				(minFifter!==-1)|| (minFifter=0x2703);
			else
			(minFifter!==-1)|| (minFifter=0x2601);
			(magFifter!==-1)|| (magFifter=0x2601);
			gl.texParameteri(0x0DE1,0x2801,minFifter);
			gl.texParameteri(0x0DE1,0x2800,magFifter);
			gl.texParameteri(0x0DE1,0x2802,repeat);
			gl.texParameteri(0x0DE1,0x2803,repeat);
			this._mipMap && gl.generateMipmap(0x0DE1);
			}else {
			(minFifter!==-1)|| (minFifter=0x2601);
			(magFifter!==-1)|| (magFifter=0x2601);
			gl.texParameteri(0x0DE1,0x2801,minFifter);
			gl.texParameteri(0x0DE1,0x2800,magFifter);
			gl.texParameteri(0x0DE1,0x2802,0x812F);
			gl.texParameteri(0x0DE1,0x2803,0x812F);
		}
		gl.bindFramebuffer(0x8D40,this._frameBuffer);
		gl.framebufferTexture2D(0x8D40,0x8CE0,0x0DE1,this._source,0);
		if (this._depthStencilFormat){
			this._depthStencilBuffer || (this._depthStencilBuffer=gl.createRenderbuffer());
			gl.bindRenderbuffer(0x8D41,this._depthStencilBuffer);
			gl.renderbufferStorage(0x8D41,this._depthStencilFormat,this._w,this._h);
			switch (this._depthStencilFormat){
				case 0x81A5:
					gl.framebufferRenderbuffer(0x8D40,0x8D00,0x8D41,this._depthStencilBuffer);
					break ;
				case 0x8D48:
					gl.framebufferRenderbuffer(0x8D40,0x8D20,0x8D41,this._depthStencilBuffer);
					break ;
				case 0x84F9:
					gl.framebufferRenderbuffer(0x8D40,0x821A,0x8D41,this._depthStencilBuffer);
					break ;
				}
		}
		gl.bindFramebuffer(0x8D40,null);
		(preTarget && preTexture)&& (WebGLContext.bindTexture(gl,preTarget,preTexture));
		gl.bindRenderbuffer(0x8D41,null);
		if (isPot && this._mipMap)
			this.memorySize=this._w *this._h *4 *(1+1 / 3);
		else
		this.memorySize=this._w *this._h *4;
		this.completeCreate();
	}

	__proto.disposeResource=function(){
		if (this._frameBuffer){
			WebGL.mainContext.deleteTexture(this._source);
			WebGL.mainContext.deleteFramebuffer(this._frameBuffer);
			WebGL.mainContext.deleteRenderbuffer(this._depthStencilBuffer);
			this._source=null;
			this._frameBuffer=null;
			this._depthStencilBuffer=null;
			this.memorySize=0;
		}
	}

	__getset(0,__proto,'depthStencilBuffer',function(){
		return this._depthStencilBuffer;
	});

	__getset(0,__proto,'frameBuffer',function(){
		return this._frameBuffer;
	});

	return WebGLRenderTarget;
})(Bitmap)


//class laya.webgl.resource.WebGLSubImage extends laya.resource.Bitmap
var WebGLSubImage=(function(_super){
	function WebGLSubImage(canvas,offsetX,offsetY,width,height,atlasImage,src){
		/**HTML Context*/
		//this._ctx=null;
		/***是否创建私有Source,值为false时不根据src创建私有WebGLTexture,同时销毁时也只清空source=null,不调用WebGL.mainContext.deleteTexture类似函数，调用资源激活前有效*/
		//this._allowMerageInAtlas=false;
		/**是否允许加入大图合集*/
		//this._enableMerageInAtlas=false;
		/**HTML Canvas，绘制子图载体,非私有数据载体*/
		//this.canvas=null;
		/**是否使用重复模式纹理寻址*/
		//this.repeat=false;
		/**是否使用mipLevel*/
		//this.mipmap=false;
		/**缩小过滤器*/
		//this.minFifter=0;
		/**放大过滤器*/
		//this.magFifter=0;
		//动态默认值，判断是否可生成miplevel
		//this.atlasImage=null;
		this.offsetX=0;
		this.offsetY=0;
		//this.src=null;
		WebGLSubImage.__super.call(this);
		this.repeat=true;
		this.mipmap=false;
		this.minFifter=-1;
		this.magFifter=-1;
		this.atlasImage=atlasImage;
		this.canvas=canvas;
		this._ctx=canvas.getContext('2d',undefined);
		this._w=width;
		this._h=height;
		this.offsetX=offsetX;
		this.offsetY=offsetY;
		this.src=src;
		this._enableMerageInAtlas=true;
		(AtlasResourceManager.enabled)&& (this._w < AtlasResourceManager.atlasLimitWidth && this._h < AtlasResourceManager.atlasLimitHeight)? this._allowMerageInAtlas=true :this._allowMerageInAtlas=false;
	}

	__class(WebGLSubImage,'laya.webgl.resource.WebGLSubImage',_super);
	var __proto=WebGLSubImage.prototype;
	Laya.imps(__proto,{"laya.webgl.resource.IMergeAtlasBitmap":true})
	/*override public function copyTo(dec:Bitmap):void {
	var d:WebGLSubImage=dec as WebGLSubImage;
	super.copyTo(dec);
	d._ctx=_ctx;
}*/


__proto.size=function(w,h){
	this._w=w;
	this._h=h;
	this._ctx && this._ctx.size(w,h);
	this.canvas && (this.canvas.height=h,this.canvas.width=w);
}


__proto.recreateResource=function(){
	this.size(this._w,this._h);
	this._ctx.drawImage(this.atlasImage,this.offsetX,this.offsetY,this._w,this._h,0,0,this._w,this._h);
	(!(this._allowMerageInAtlas && this._enableMerageInAtlas))? (this.createWebGlTexture()):(this.memorySize=0);
	this.completeCreate();
}


__proto.createWebGlTexture=function(){
	var gl=WebGL.mainContext;
	if (!this.canvas){
		throw "create GLTextur err:no data:"+this.canvas;
	};

	var glTex=this._source=gl.createTexture();
	var preTarget=WebGLContext.curBindTexTarget;
	var preTexture=WebGLContext.curBindTexValue;
	WebGLContext.bindTexture(gl,0x0DE1,glTex);
	gl.pixelStorei(0x9241,true);
	gl.texImage2D(0x0DE1,0,0x1908,0x1908,0x1401,this.canvas);
	gl.pixelStorei(0x9241,false);
	var minFifter=this.minFifter;
	var magFifter=this.magFifter;
	var repeat=this.repeat ? 0x2901 :0x812F;
	var isPOT=Arith.isPOT(this.width,this.height);
	if (isPOT){
		if (this.mipmap)
			(minFifter!==-1)|| (minFifter=0x2703);
		else
		(minFifter!==-1)|| (minFifter=0x2601);
		(magFifter!==-1)|| (magFifter=0x2601);
		gl.texParameteri(0x0DE1,0x2800,magFifter);
		gl.texParameteri(0x0DE1,0x2801,minFifter);
		gl.texParameteri(0x0DE1,0x2802,repeat);
		gl.texParameteri(0x0DE1,0x2803,repeat);
		this.mipmap && gl.generateMipmap(0x0DE1);
		}else {
		(minFifter!==-1)|| (minFifter=0x2601);
		(magFifter!==-1)|| (magFifter=0x2601);
		gl.texParameteri(0x0DE1,0x2801,minFifter);
		gl.texParameteri(0x0DE1,0x2800,magFifter);
		gl.texParameteri(0x0DE1,0x2802,0x812F);
		gl.texParameteri(0x0DE1,0x2803,0x812F);
	}

	(preTarget && preTexture)&& (WebGLContext.bindTexture(gl,preTarget,preTexture));
	this.canvas=null;
	if (isPOT && this.mipmap)
		this.memorySize=this._w *this._h *4 *(1+1 / 3);
	else
	this.memorySize=this._w *this._h *4;
}


__proto.disposeResource=function(){
	if (!(AtlasResourceManager.enabled && this._allowMerageInAtlas)&& this._source){
		WebGL.mainContext.deleteTexture(this._source);
		this._source=null;
		this.memorySize=0;
	}

}


//}
__proto.clearAtlasSource=function(){}
/**
*是否创建私有Source
*@return 是否创建
*/
__getset(0,__proto,'allowMerageInAtlas',function(){
	return this._allowMerageInAtlas;
});


//public var createFromPixel:Boolean=true;
__getset(0,__proto,'atlasSource',function(){
	return this.canvas;
});


/**
*是否创建私有Source,通常禁止修改
*@param value 是否创建
*/
/**
*是否创建私有Source
*@return 是否创建
*/
__getset(0,__proto,'enableMerageInAtlas',function(){
	return this._allowMerageInAtlas;
	},function(value){

	this._allowMerageInAtlas=value;
});


return WebGLSubImage;
})(Bitmap)


//class laya.webgl.shader.d2.value.TextSV extends laya.webgl.shader.d2.value.TextureSV
var TextSV=(function(_super){
	function TextSV(args){
		TextSV.__super.call(this,0x40);
		this.defines.add(0x40);
	}

	__class(TextSV,'laya.webgl.shader.d2.value.TextSV',_super);
	var __proto=TextSV.prototype;
	__proto.release=function(){
		TextSV.pool[TextSV._length++]=this;
		this.clear();
	}

	__proto.clear=function(){
		_super.prototype.clear.call(this);
	}

	TextSV.create=function(){
		if (TextSV._length)return TextSV.pool[--TextSV._length];
		else return new TextSV(null);
	}

	TextSV.pool=[];
	TextSV._length=0;
	return TextSV;
})(TextureSV)


/**
*角色皮肤
*@author guowc
*
*/
//class game.Body.SkinAct extends game.Body.BaseAct
var SkinAct=(function(_super){
	function SkinAct(){
		this.isPush=false;
		this.mount=null;
		this._status=null;
		this._skindir=0;
		this._skinbodydir=0;
		this.role=null;
		this.isMount=false;
		this.bodygay=10;
		this.frameDelay=80;
		this.nowimgurl=null;
		this.weapond=null;
		this.weapond1=null;
		this.weapondPt=null;
		this.weapon=null;
		this.handl0=null;
		this._bodydir=NaN;
		this.body=null;
		this.weaponFrame=NaN;
		SkinAct.__super.call(this);
		this.weapondPt=new Point;
	}

	__class(SkinAct,'game.Body.SkinAct',_super);
	var __proto=SkinAct.prototype;
	__proto.init=function(){
		_super.prototype.init.call(this);
	}

	__proto.getTouchGround=function(){
		return this.touchGround;
	}

	__proto.setBody=function(ang){
		if(this.weapon){
			if(ang>90 && ang<270){
				this._bodydir=1;
				this.handl0.scaleY=this.weapon.scaleY=this.body.scaleX=-1;
				this.weapondPt.x=this.weapond1.x=this.weapond.x=this.baseRoleData.dis;
				}else{
				this._bodydir=5;
				this.handl0.scaleY=this.weapon.scaleY=this.body.scaleX=1;
				this.weapondPt.x=this.weapond1.x=this.weapond.x=-this.baseRoleData.dis;
			}
			this.weapond1.rotation=this.weapond.rotation=ang;
			var frame=0;
			if(this._bodydir==5){
				ang=ang-270;
				if(ang<0){
					ang+=360;
				}
				frame=ang*0.1>>0;
				}else{
				ang=270-ang;
				frame=ang*0.1>>0;
			}
			frame=frame>15 ? 15 :frame;
			this.body.setStop(frame);
		}
	}

	__proto.updateWeaponSkin=function(val){
		this.weaponFrame=val;
		this.weapon.gotoAndStop(this.weaponFrame);
		this.weapond.scale(0.1,0.1,true);
		Tween.to(this.weapond,{scaleX:1,scaleY:1,ease:Ease.backOut},200);
	}

	__proto.move=function(dx,dy,dir){
		(dir===void 0)&& (dir=true);
		_super.prototype.move.call(this,dx,dy,dir);
		if(this.oldRect.x !=this._rect.x || this.oldRect.y !=this._rect.y){
			if(this.isMount){
				if(this.touchGround){
					this.showRole("M_");
					this.mount.updateSkin("R_",this._dir);
				}
				}else{
				if(this.touchGround){
					if(this.isPush){
						this.showRole("P_");
						}else{
						this.showRole("R_");
					}
				}
			}
		}
	}

	__proto.loaded=function(){
		this.role.off("roleload",this,this.loaded);
		this.addChildAt(this.role,0);
		if(!this._pause){
			this.role.play();
		}
		this.setWH();
		this.hurtBody=this.role;
	}

	__proto.setMountSkin=function(url){
		if(!this.mount)
			this.mount=new RoleSkin;
		this.mount.reset();
		this.isMount=Boolean(url);
		if(this.isMount){
			this.mount.interval=this.frameDelay;
			this.mount.on("roleload",this,this.mountLoaded);
			this.mount.loadResource(url+"base.json",url+"base"+".ani");
			this.mount.updateSkin("S_",this._dir);
			this.addChildAt(this.mount,0);
			this.mount.play();
			this.showRole("M_");
			}else{
			if(this.mount){
				this.mount.stop();
				if(this.mount.parent){
					this.mount.parent.removeChild(this.mount);
				}
			}
			this.showRole("S_");
		}
	}

	__proto.mountLoaded=function(){
		this.mount.off("roleload",this,this.mountLoaded);
		this.addChildAt(this.mount,0);
		if(this.isMount)
			this.mount.play();
	}

	__proto.setWH=function(){
		var rect=this.role.getBounds();
		if(rect.width>0){
			this.killRect.width=rect.width;
			this.killRect.height=rect.height-this.bodygay;
			}else{
			this.killRect.width=this.killRect.height=this.bodyWid;
		}
		this.bodyRect.width=rect.width;
		this.bodyRect.height=rect.height-this.bodygay;
		this.bodyRect.x=-this.role.pivotX;
		this.bodyRect.y=-this.bodyRect.height;
		this.redraw();
	}

	__proto.isTransparent=function(x,y){
		var dx=-this.role.x+x;
		var dy=-this.role.y+y;
		return this.role.isTransparent(dx,dy);
	}

	/**
	*点碰撞
	*@param x
	*@param y
	*@return
	*
	*/
	__proto.isHitPt=function(x,y){
		if(!this.isMount){
		}else{}
		return false;
	}

	__proto.isHitAct=function(act){
		return HitTestUtil.hitTest(this.getHitRect(),act.getHitRect());
	}

	__proto.getHitRect=function(wid,hei){
		(wid===void 0)&& (wid=-1);
		(hei===void 0)&& (hei=0);
		if(wid<1){
			wid=this.bodyWid;
		}
		this.hitRect.x=this._rect.x-wid-1;
		this.hitRect.y=this._rect.y;
		this.hitRect.height=this._rect.height+hei;
		this.hitRect.width=wid*2+2;
		return this.hitRect;
	}

	__proto.getKillRect=function(atk){
		(atk===void 0)&& (atk=false);
		this.killRect.x=this._rect.x-this.killRect.width*0.5;
		this.killRect.y=this._rect.y;
		return this.killRect;
	}

	__proto.getbitmapData=function(){
		return this.role.texture;
	}

	__proto.setData=function(val){
		_super.prototype.setData.call(this,val);
		this.showRole("S_");
		this.setXY(val.startX,val.startY);
	}

	//_dir=val.dir==-1 ? DirectType.LEFT :DirectType.RIGHT;
	__proto.updateRoleSkin=function(){
		if(this.role==null)
			return;
		if(this.nowimgurl !=this.baseRoleData.imgurl){
			this.nowimgurl=this.baseRoleData.imgurl;
			this.role.reset();
			this.role.on("roleload",this,this.loaded);
			this.role.loadResource(this.baseRoleData.imgurl+"base.json",this.baseRoleData.imgurl+"base"+".ani");
		}
	}

	//role.updateSkin(RoleStatus.STATUS_STATIC,DirectType.RIGHT);
	__proto.showRole=function(status){
		if(this._status==status && this._skindir==this._dir)
			return;
		this._status=status;
		if(!this.role){
			this.role=GlobalAPI.poolMgr.getRoleSkin();
			this.role.interval=this.frameDelay;
			this.role.updateSkin(this._status,this._dir);
			this.role.on("roleload",this,this.loaded);
			this.nowimgurl=this.baseRoleData.imgurl;
			this.role.loadResource(this.baseRoleData.imgurl+"base.json",this.baseRoleData.imgurl+"base"+".ani");
			}else{
			this.role.updateSkin(this._status,this._dir);
		}
		this._skindir=this._dir;
	}

	//暂停活动
	__proto.pause=function(show){
		(show===void 0)&& (show=false);
		_super.prototype.pause.call(this,show);
		if(this.role)
			this.role.stop();
		if(this.mount)
			this.mount.stop();
	}

	__proto.play=function(val){
		_super.prototype.play.call(this,val);
		this.roleplay();
		if(this.isMount && this.mount)
			this.mount.play();
	}

	__proto.roleplay=function(){
		this.role.play();
	}

	__proto.stop=function(){}
	__proto.clear=function(){
		this.pause();
		this.stop();
	}

	__proto.dispose=function(){
		_super.prototype.dispose.call(this);
		if(this.role){
			this.role.offAll();
			this.role.rotation=0;
			this.role.x=this.role.y=0;
			this.role.dispose();
			GlobalAPI.poolMgr.disposeRoleSkin(this.role);
		}
		if(this.mount){
			this.mount.off("roleload",this,this.mountLoaded);
			this.mount.dispose();
		}
		this.mount=this.role=null;
		this.nowimgurl=null;
	}

	return SkinAct;
})(BaseAct)


/**
*<p> <code>Animation</code> 是Graphics动画类。实现了基于Graphics的动画创建、播放、控制接口。</p>
*<p>本类使用了动画模版缓存池，它以一定的内存开销来节省CPU开销，当相同的动画模版被多次使用时，相比于每次都创建新的动画模版，使用动画模版缓存池，只需创建一次，缓存之后多次复用，从而节省了动画模版创建的开销。</p>
*<p>动画模版缓存池，以key-value键值对存储，key可以自定义，也可以从指定的配置文件中读取，value为对应的动画模版，是一个Graphics对象数组，每个Graphics对象对应一个帧图像，动画的播放实质就是定时切换Graphics对象。</p>
*<p>使用set source、loadImages(...)、loadAtlas(...)、loadAnimation(...)方法可以创建动画模版。使用play(...)可以播放指定动画。</p>
*@example <caption>以下示例代码，创建了一个 <code>Text</code> 实例。</caption>
*package
*{
	*import laya.display.Animation;
	*import laya.net.Loader;
	*import laya.utils.Handler;
	*public class Animation_Example
	*{
		*public function Animation_Example()
		*{
			*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*init();//初始化
			*}
		*private function init():void
		*{
			*var animation:Animation=new Animation();//创建一个 Animation 类的实例对象 animation 。
			*animation.loadAtlas("resource/ani/fighter.json");//加载图集并播放
			*animation.x=200;//设置 animation 对象的属性 x 的值，用于控制 animation 对象的显示位置。
			*animation.y=200;//设置 animation 对象的属性 x 的值，用于控制 animation 对象的显示位置。
			*animation.interval=50;//设置 animation 对象的动画播放间隔时间，单位：毫秒。
			*animation.play();//播放动画。
			*Laya.stage.addChild(animation);//将 animation 对象添加到显示列表。
			*}
		*}
	*}
*
*@example
*Animation_Example();
*function Animation_Example(){
	*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
	*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
	*init();//初始化
	*}
*function init()
*{
	*var animation=new Laya.Animation();//创建一个 Animation 类的实例对象 animation 。
	*animation.loadAtlas("resource/ani/fighter.json");//加载图集并播放
	*animation.x=200;//设置 animation 对象的属性 x 的值，用于控制 animation 对象的显示位置。
	*animation.y=200;//设置 animation 对象的属性 x 的值，用于控制 animation 对象的显示位置。
	*animation.interval=50;//设置 animation 对象的动画播放间隔时间，单位：毫秒。
	*animation.play();//播放动画。
	*Laya.stage.addChild(animation);//将 animation 对象添加到显示列表。
	*}
*
*@example
*import Animation=laya.display.Animation;
*class Animation_Example {
	*constructor(){
		*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
		*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
		*this.init();
		*}
	*private init():void {
		*var animation:Animation=new Laya.Animation();//创建一个 Animation 类的实例对象 animation 。
		*animation.loadAtlas("resource/ani/fighter.json");//加载图集并播放
		*animation.x=200;//设置 animation 对象的属性 x 的值，用于控制 animation 对象的显示位置。
		*animation.y=200;//设置 animation 对象的属性 x 的值，用于控制 animation 对象的显示位置。
		*animation.interval=50;//设置 animation 对象的动画播放间隔时间，单位：毫秒。
		*animation.play();//播放动画。
		*Laya.stage.addChild(animation);//将 animation 对象添加到显示列表。
		*}
	*}
*new Animation_Example();
*/
//class laya.display.Animation extends laya.display.AnimationPlayerBase
var Animation=(function(_super){
	function Animation(){
		/**@private */
		this._frames=null;
		/**@private */
		this._url=null;
		Animation.__super.call(this);
		this._setControlNode(this);
	}

	__class(Animation,'laya.display.Animation',_super);
	var __proto=Animation.prototype;
	/**@inheritDoc */
	__proto.destroy=function(destroyChild){
		(destroyChild===void 0)&& (destroyChild=true);
		this.stop();
		laya.display.Sprite.prototype.destroy.call(this,destroyChild);
		this._frames=null;
		this._labels=null;
	}

	/**
	*<p>开始播放动画。会在动画模版缓存池中查找key值为name的动画模版，存在则用此动画模版初始化当前序列帧， 如果不存在，则使用当前序列帧。</p>
	*<p>play(...)方法被设计为在创建实例后的任何时候都可以被调用，调用后就处于播放状态，当相应的资源加载完毕、调用动画帧填充方法(set frames)或者将实例显示在舞台上时，会判断是否处于播放状态，如果是，则开始播放。</p>
	*<p>配合wrapMode属性，可设置动画播放顺序类型。</p>
	*@param start （可选）指定动画播放开始的索引(int)或帧标签(String)。帧标签可以通过addLabel(...)和removeLabel(...)进行添加和删除。
	*@param loop （可选）是否循环播放。
	*@param name （可选）动画模板在动画模版缓存池中的key，也可认为是动画名称。如果name为空，则播放当前动画序列帧；如果不为空，则在动画模版缓存池中寻找key值为name的动画模版，如果存在则用此动画模版初始化当前序列帧并播放，如果不存在，则仍然播放当前动画序列帧；如果没有当前动画的帧数据，则不播放，但该实例仍然处于播放状态。
	*@param showWarn（可选）是否动画不存在时打印警告
	*/
	__proto.play=function(start,loop,name,showWarn){
		(start===void 0)&& (start=0);
		(loop===void 0)&& (loop=true);
		(name===void 0)&& (name="");
		(showWarn===void 0)&& (showWarn=true);
		if (name)this._setFramesFromCache(name,showWarn);
		this._isPlaying=true;
		this.index=((typeof start=='string'))? this._getFrameByLabel(start):start;
		this.loop=loop;
		this._actionName=name;
		this._isReverse=this.wrapMode==1;
		if (this._frames && this.interval > 0){
			this.timerLoop(this.interval,this,this._frameLoop,null,true,true);
		}
	}

	/**@private */
	__proto._setFramesFromCache=function(name,showWarn){
		(showWarn===void 0)&& (showWarn=false);
		if (this._url)name=this._url+"#"+name;
		if (name && Animation.framesMap[name]){
			var tAniO;
			tAniO=Animation.framesMap[name];
			if ((tAniO instanceof Array)){
				this._frames=Animation.framesMap[name];
				this._count=this._frames.length;
				}else {
				if (tAniO.nodeRoot){
					Animation.framesMap[name]=this._parseGraphicAnimationByData(tAniO);
					tAniO=Animation.framesMap[name];
				}
				this._frames=tAniO.frames;
				this._count=this._frames.length;
				if (!this._frameRateChanged)this._interval=tAniO.interval;
				this._labels=this._copyLabels(tAniO.labels);
			}
			return true;
			}else {
			if (showWarn){
				console.log("ani not found:",name);
			}
		}
		return false;
	}

	/**@private */
	__proto._copyLabels=function(labels){
		if (!labels)return null;
		var rst;
		rst={};
		var key;
		for (key in labels){
			rst[key]=Utils.copyArray([],labels[key]);
		}
		return rst;
	}

	/**@private */
	__proto._frameLoop=function(){
		if (this._style.visible && this._style.alpha > 0.01){
			_super.prototype._frameLoop.call(this);
		}
	}

	/**@private */
	__proto._displayToIndex=function(value){
		if (this._frames)this.graphics=this._frames[value];
	}

	/**
	*停止动画播放，并清理对象属性。之后可存入对象池，方便对象复用。
	*/
	__proto.clear=function(){
		this.stop();
		this.graphics=null;
		this._frames=null;
		this._labels=null;
	}

	/**
	*<p>根据指定的动画模版初始化当前动画序列帧。选择动画模版的过程如下：1. 动画模版缓存池中key为cacheName的动画模版；2. 如果不存在，则加载指定的图片集合并创建动画模版。注意：只有指定不为空的cacheName，才能将创建好的动画模版以此为key缓存到动画模版缓存池，否则不进行缓存。</p>
	*<p>动画模版缓存池是以一定的内存开销来节省CPU开销，当相同的动画模版被多次使用时，相比于每次都创建新的动画模版，使用动画模版缓存池，只需创建一次，缓存之后多次复用，从而节省了动画模版创建的开销。</p>
	*<p>因为返回值为Animation对象本身，所以可以使用如下语法：ani.loadImages(...).loadImages(...).play(...);。</p>
	*@param urls 图片路径集合。需要创建动画模版时，会以此为数据源。参数形如：[url1,url2,url3,...]。
	*@param cacheName （可选）动画模板在动画模版缓存池中的key。如果此参数不为空，表示使用动画模版缓存池。如果动画模版缓存池中存在key为cacheName的动画模版，则使用此模版。否则，创建新的动画模版，如果cacheName不为空，则以cacheName为key缓存到动画模版缓存池中，如果cacheName为空，不进行缓存。
	*@return 返回Animation对象本身。
	*/
	__proto.loadImages=function(urls,cacheName){
		(cacheName===void 0)&& (cacheName="");
		this._url="";
		if (!this._setFramesFromCache(cacheName)){
			this.frames=Animation.framesMap[cacheName] ? Animation.framesMap[cacheName] :Animation.createFrames(urls,cacheName);
		}
		return this;
	}

	/**
	*<p>根据指定的动画模版初始化当前动画序列帧。选择动画模版的过程如下：1. 动画模版缓存池中key为cacheName的动画模版；2. 如果不存在，则加载指定的图集并创建动画模版。</p>
	*<p>注意：只有指定不为空的cacheName，才能将创建好的动画模版以此为key缓存到动画模版缓存池，否则不进行缓存。</p>
	*<p>动画模版缓存池是以一定的内存开销来节省CPU开销，当相同的动画模版被多次使用时，相比于每次都创建新的动画模版，使用动画模版缓存池，只需创建一次，缓存之后多次复用，从而节省了动画模版创建的开销。</p>
	*<p>因为返回值为Animation对象本身，所以可以使用如下语法：ani.loadAtlas(...).loadAtlas(...).play(...);。</p>
	*@param url 图集路径。需要创建动画模版时，会以此为数据源。
	*@param loaded （可选）使用指定图集初始化动画完毕的回调。
	*@param cacheName （可选）动画模板在动画模版缓存池中的key。如果此参数不为空，表示使用动画模版缓存池。如果动画模版缓存池中存在key为cacheName的动画模版，则使用此模版。否则，创建新的动画模版，如果cacheName不为空，则以cacheName为key缓存到动画模版缓存池中，如果cacheName为空，不进行缓存。
	*@return 返回动画本身。
	*/
	__proto.loadAtlas=function(url,loaded,cacheName){
		(cacheName===void 0)&& (cacheName="");
		this._url="";
		var _this_=this;
		function onLoaded (loadUrl){
			if (url===loadUrl){
				_this_.frames=Animation.framesMap[cacheName] ? Animation.framesMap[cacheName] :Animation.createFrames(url,cacheName);
				if (loaded)loaded.run();
			}
		}
		if (!_this_._setFramesFromCache(cacheName)){
			if (Loader.getAtlas(url))onLoaded(url);
			else Laya.loader.load(url,Handler.create(null,onLoaded,[url]),null,"atlas");
		}
		return this;
	}

	/**
	*<p>加载并解析由LayaAir IDE制作的动画文件，此文件中可能包含多个动画。默认帧率为在IDE中设计的帧率，如果调用过set interval，则使用此帧间隔对应的帧率。加载后创建动画模版，并缓存到动画模版缓存池，key "url#动画名称" 对应相应动画名称的动画模板，key "url#" 对应动画模版集合的默认动画模版。</p>
	*<p>注意：如果调用本方法前，还没有预加载动画使用的图集，请将atlas参数指定为对应的图集路径，否则会导致动画创建失败。</p>
	*<p>动画模版缓存池是以一定的内存开销来节省CPU开销，当相同的动画模版被多次使用时，相比于每次都创建新的动画模版，使用动画模版缓存池，只需创建一次，缓存之后多次复用，从而节省了动画模版创建的开销。</p>
	*<p>因为返回值为Animation对象本身，所以可以使用如下语法：ani.loadAnimation(...).loadAnimation(...).play(...);。</p>
	*@param url 动画文件路径。可由LayaAir IDE创建并发布。
	*@param loaded （可选）使用指定动画资源初始化动画完毕的回调。
	*@param atlas （可选）动画用到的图集地址（可选）。
	*@return 返回动画本身。
	*/
	__proto.loadAnimation=function(url,loaded,atlas){
		this._url=url;
		var _this_=this;
		if (!this._actionName)this._actionName="";
		if (!_this_._setFramesFromCache("")){
			if (!atlas || Loader.getAtlas(atlas)){
				this._loadAnimationData(url,loaded,atlas);
				}else {
				Laya.loader.load(atlas,Handler.create(this,this._loadAnimationData,[url,loaded,atlas]),null,"atlas")
			}
			}else {
			_this_._setFramesFromCache(this._actionName,true);
			this.index=0;
			if (loaded)loaded.run();
		}
		return this;
	}

	/**@private */
	__proto._loadAnimationData=function(url,loaded,atlas){
		var _$this=this;
		if (atlas && !Loader.getAtlas(atlas)){
			console.warn("atlas load fail:"+atlas);
			return;
		};
		var _this_=this;
		function onLoaded (loadUrl){
			if (!Loader.getRes(loadUrl))return;
			if (url===loadUrl){
				var tAniO;
				if (!Animation.framesMap[url+"#"]){
					var aniData=_this_._parseGraphicAnimation(Loader.getRes(url));
					if (!aniData)return;
					var aniList=aniData.animationList;
					var i=0,len=aniList.length;
					var defaultO;
					for (i=0;i < len;i++){
						tAniO=aniList[i];
						Animation.framesMap[url+"#"+tAniO.name]=tAniO;
						if (!defaultO)defaultO=tAniO;
					}
					if (defaultO){
						Animation.framesMap[url+"#"]=defaultO;
						_this_._setFramesFromCache(_$this._actionName,true);
						_$this.index=0;
					}
					_$this._checkResumePlaying();
					}else {
					_this_._setFramesFromCache(_$this._actionName,true);
					_$this.index=0;
					_$this._checkResumePlaying();
				}
				if (loaded)loaded.run();
			}
		}
		if (Loader.getRes(url))onLoaded(url);
		else Laya.loader.load(url,Handler.create(null,onLoaded,[url]),null,"json");
		Loader.clearRes(url);
	}

	/**@private */
	__proto._parseGraphicAnimation=function(animationData){
		return GraphicAnimation.parseAnimationData(animationData);
	}

	/**@private */
	__proto._parseGraphicAnimationByData=function(animationObject){
		return GraphicAnimation.parseAnimationByData(animationObject);
	}

	/**
	*当前动画的帧图像数组。本类中，每个帧图像是一个Graphics对象，而动画播放就是定时切换Graphics对象的过程。
	*/
	__getset(0,__proto,'frames',function(){
		return this._frames;
		},function(value){
		this._frames=value;
		if (value){
			this._count=value.length;
			if (this._isPlaying)this.play(this._index,this.loop,this._actionName);
			else this.index=this._index;
		}
	});

	/**
	*是否自动播放，默认为false。如果设置为true，则动画被创建并添加到舞台后自动播放。
	*/
	__getset(0,__proto,'autoPlay',null,function(value){
		if (value)this.play();
		else this.stop();
	});

	/**
	*<p>动画数据源。</p>
	*<p>类型如下：<br/>
	*1. LayaAir IDE动画文件路径：使用此类型需要预加载所需的图集资源，否则会创建失败，如果不想预加载或者需要创建完毕的回调，请使用loadAnimation(...)方法；<br/>
	*2. 图集路径：使用此类型创建的动画模版不会被缓存到动画模版缓存池中，如果需要缓存或者创建完毕的回调，请使用loadAtlas(...)方法；<br/>
	*3. 图片路径集合：使用此类型创建的动画模版不会被缓存到动画模版缓存池中，如果需要缓存，请使用loadImages(...)方法。</p>
	*@param value 数据源。比如：图集："xx/a1.atlas"；图片集合："a1.png,a2.png,a3.png"；LayaAir IDE动画"xx/a1.ani"。
	*/
	__getset(0,__proto,'source',null,function(value){
		if (value.indexOf(".ani")>-1)this.loadAnimation(value);
		else if (value.indexOf(".json")>-1 || value.indexOf("als")>-1 || value.indexOf("atlas")>-1)this.loadAtlas(value);
		else this.loadImages(value.split(","));
	});

	/**
	*设置自动播放的动画名称，在LayaAir IDE中可以创建的多个动画组成的动画集合，选择其中一个动画名称进行播放。
	*/
	__getset(0,__proto,'autoAnimation',null,function(value){
		this.play(0,true,value,false);
	});

	Animation.createFrames=function(url,name){
		var arr,i=0,n=0,g;
		if ((typeof url=='string')){
			var atlas=Loader.getAtlas(url);
			if (atlas && atlas.length){
				arr=[];
				for (i=0,n=atlas.length;i < n;i++){
					g=new RunDriver.createGraphics();
					g.drawTexture(Loader.getRes(atlas[i]),0,0);
					arr.push(g);
				}
			}
			}else if ((url instanceof Array)){
			arr=[];
			for (i=0,n=url.length;i < n;i++){
				g=new RunDriver.createGraphics();
				g.loadImage(url[i],0,0);
				arr.push(g);
			}
		}
		if (name)Animation.framesMap[name]=arr;
		return arr;
	}

	Animation.clearCache=function(key){
		var cache=Animation.framesMap;
		var val;
		var key2=key+"#";
		for (val in cache){
			if (val===key || val.indexOf(key2)==0){
				delete Animation.framesMap[val];
			}
		}
	}

	Animation.framesMap={};
	return Animation;
})(AnimationPlayerBase)


/**
*<code>Box</code> 类是一个控件容器类。
*/
//class laya.ui.Box extends laya.ui.Component
var Box=(function(_super){
	function Box(){
		Box.__super.call(this);;
	}

	__class(Box,'laya.ui.Box',_super);
	var __proto=Box.prototype;
	Laya.imps(__proto,{"laya.ui.IBox":true})
	/**@inheritDoc */
	__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
		this._dataSource=value;
		for (var name in value){
			var comp=this.getChildByName(name);
			if (comp)comp.dataSource=value[name];
			else if (this.hasOwnProperty(name)&& !((typeof (this[name])=='function')))this[name]=value[name];
		}
	});

	return Box;
})(Component)


/**
*<code>ProgressBar</code> 组件显示内容的加载进度。
*@example <caption>以下示例代码，创建了一个新的 <code>ProgressBar</code> 实例，设置了它的皮肤、位置、宽高、网格等信息，并添加到舞台上。</caption>
*package
*{
	*import laya.ui.ProgressBar;
	*import laya.utils.Handler;
	*public class ProgressBar_Example
	*{
		*private var progressBar:ProgressBar;
		*public function ProgressBar_Example()
		*{
			*Laya.init(640,800);//设置游戏画布宽高。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load(["resource/ui/progress.png","resource/ui/progress$bar.png"],Handler.create(this,onLoadComplete));//加载资源。
			*}
		*private function onLoadComplete():void
		*{
			*progressBar=new ProgressBar("resource/ui/progress.png");//创建一个 ProgressBar 类的实例对象 progressBar 。
			*progressBar.x=100;//设置 progressBar 对象的属性 x 的值，用于控制 progressBar 对象的显示位置。
			*progressBar.y=100;//设置 progressBar 对象的属性 y 的值，用于控制 progressBar 对象的显示位置。
			*progressBar.value=0.3;//设置 progressBar 的进度值。
			*progressBar.width=200;//设置 progressBar 的宽度。
			*progressBar.height=50;//设置 progressBar 的高度。
			*progressBar.sizeGrid="5,10,5,10";//设置 progressBar 的网格信息。
			*progressBar.changeHandler=new Handler(this,onChange);//设置 progressBar 的value值改变时执行的处理器。
			*Laya.stage.addChild(progressBar);//将 progressBar 添加到显示列表。
			*Laya.timer.once(3000,this,changeValue);//设定 3000ms（毫秒）后，执行函数changeValue。
			*}
		*private function changeValue():void
		*{
			*trace("改变进度条的进度值。");
			*progressBar.value=0.6;
			*}
		*private function onChange(value:Number):void
		*{
			*trace("进度发生改变： value=" ,value);
			*}
		*}
	*}
*@example
*Laya.init(640,800);//设置游戏画布宽高
*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
*var res=["resource/ui/progress.png","resource/ui/progress$bar.png"];
*Laya.loader.load(res,laya.utils.Handler.create(this,onLoadComplete));//加载资源。
*function onLoadComplete()
*{
	*progressBar=new laya.ui.ProgressBar("resource/ui/progress.png");//创建一个 ProgressBar 类的实例对象 progressBar 。
	*progressBar.x=100;//设置 progressBar 对象的属性 x 的值，用于控制 progressBar 对象的显示位置。
	*progressBar.y=100;//设置 progressBar 对象的属性 y 的值，用于控制 progressBar 对象的显示位置。
	*progressBar.value=0.3;//设置 progressBar 的进度值。
	*progressBar.width=200;//设置 progressBar 的宽度。
	*progressBar.height=50;//设置 progressBar 的高度。
	*progressBar.sizeGrid="10,5,10,5";//设置 progressBar 的网格信息。
	*progressBar.changeHandler=new laya.utils.Handler(this,onChange);//设置 progressBar 的value值改变时执行的处理器。
	*Laya.stage.addChild(progressBar);//将 progressBar 添加到显示列表。
	*Laya.timer.once(3000,this,changeValue);//设定 3000ms（毫秒）后，执行函数changeValue。
	*}
*function changeValue()
*{
	*console.log("改变进度条的进度值。");
	*progressBar.value=0.6;
	*}
*function onChange(value)
*{
	*console.log("进度发生改变： value=" ,value);
	*}
*@example
*import ProgressBar=laya.ui.ProgressBar;
*import Handler=laya.utils.Handler;
*class ProgressBar_Example {
	*private progressBar:ProgressBar;
	*public ProgressBar_Example(){
		*Laya.init(640,800);//设置游戏画布宽高。
		*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
		*Laya.loader.load(["resource/ui/progress.png","resource/ui/progress$bar.png"],Handler.create(this,this.onLoadComplete));//加载资源。
		*}
	*private onLoadComplete():void {
		*this.progressBar=new ProgressBar("resource/ui/progress.png");//创建一个 ProgressBar 类的实例对象 progressBar 。
		*this.progressBar.x=100;//设置 progressBar 对象的属性 x 的值，用于控制 progressBar 对象的显示位置。
		*this.progressBar.y=100;//设置 progressBar 对象的属性 y 的值，用于控制 progressBar 对象的显示位置。
		*this.progressBar.value=0.3;//设置 progressBar 的进度值。
		*this.progressBar.width=200;//设置 progressBar 的宽度。
		*this.progressBar.height=50;//设置 progressBar 的高度。
		*this.progressBar.sizeGrid="5,10,5,10";//设置 progressBar 的网格信息。
		*this.progressBar.changeHandler=new Handler(this,this.onChange);//设置 progressBar 的value值改变时执行的处理器。
		*Laya.stage.addChild(this.progressBar);//将 progressBar 添加到显示列表。
		*Laya.timer.once(3000,this,this.changeValue);//设定 3000ms（毫秒）后，执行函数changeValue。
		*}
	*private changeValue():void {
		*console.log("改变进度条的进度值。");
		*this.progressBar.value=0.6;
		*}
	*private onChange(value:number):void {
		*console.log("进度发生改变： value=",value);
		*}
	*}
*/
//class laya.ui.ProgressBar extends laya.ui.Component
var ProgressBar=(function(_super){
	function ProgressBar(skin){
		/**
		*当 <code>ProgressBar</code> 实例的 <code>value</code> 属性发生变化时的函数处理器。
		*<p>默认返回参数<code>value</code> 属性（进度值）。</p>
		*/
		this.changeHandler=null;
		/**@private */
		this._bg=null;
		/**@private */
		this._bar=null;
		/**@private */
		this._skin=null;
		/**@private */
		this._value=0.5;
		ProgressBar.__super.call(this);
		this.skin=skin;
	}

	__class(ProgressBar,'laya.ui.ProgressBar',_super);
	var __proto=ProgressBar.prototype;
	/**@inheritDoc */
	__proto.destroy=function(destroyChild){
		(destroyChild===void 0)&& (destroyChild=true);
		_super.prototype.destroy.call(this,destroyChild);
		this._bg && this._bg.destroy(destroyChild);
		this._bar && this._bar.destroy(destroyChild);
		this._bg=this._bar=null;
		this.changeHandler=null;
	}

	/**@inheritDoc */
	__proto.createChildren=function(){
		this.addChild(this._bg=new Image());
		this.addChild(this._bar=new Image());
		this._bar._bitmap.autoCacheCmd=false;
	}

	/**
	*@private
	*更改进度值的显示。
	*/
	__proto.changeValue=function(){
		if (this.sizeGrid){
			var grid=this.sizeGrid.split(",");
			var left=Number(grid[3]);
			var right=Number(grid[1]);
			var max=this.width-left-right;
			var sw=max *this._value;
			this._bar.width=left+right+sw;
			this._bar.visible=this._bar.width > left+right;
			}else {
			this._bar.width=this.width *this._value;
		}
	}

	/**@inheritDoc */
	__getset(0,__proto,'measureHeight',function(){
		return this._bg.height;
	});

	/**
	*@copy laya.ui.Image#skin
	*/
	__getset(0,__proto,'skin',function(){
		return this._skin;
		},function(value){
		if (this._skin !=value){
			this._skin=value;
			this._bg.skin=this._skin;
			this._bar.skin=this._skin.replace(".png","$bar.png");
			this.callLater(this.changeValue);
		}
	});

	/**@inheritDoc */
	__getset(0,__proto,'measureWidth',function(){
		return this._bg.width;
	});

	/**@inheritDoc */
	__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
		Laya.superSet(Component,this,'height',value);
		this._bg.height=this._height;
		this._bar.height=this._height;
	});

	/**
	*获取进度条对象。
	*/
	__getset(0,__proto,'bar',function(){
		return this._bar;
	});

	/**
	*当前的进度量。
	*<p><b>取值：</b>介于0和1之间。</p>
	*/
	__getset(0,__proto,'value',function(){
		return this._value;
		},function(num){
		if (this._value !=num){
			num=num > 1 ? 1 :num < 0 ? 0 :num;
			this._value=num;
			this.callLater(this.changeValue);
			this.event("change");
			this.changeHandler && this.changeHandler.runWith(num);
		}
	});

	/**
	*获取背景条对象。
	*/
	__getset(0,__proto,'bg',function(){
		return this._bg;
	});

	/**
	*<p>当前 <code>ProgressBar</code> 实例的进度条背景位图（ <code>Image</code> 实例）的有效缩放网格数据。</p>
	*<p>数据格式："上边距,右边距,下边距,左边距,是否重复填充(值为0：不重复填充，1：重复填充)"，以逗号分隔。
	*<ul><li>例如："4,4,4,4,1"</li></ul></p>
	*@see laya.ui.AutoBitmap.sizeGrid
	*/
	__getset(0,__proto,'sizeGrid',function(){
		return this._bg.sizeGrid;
		},function(value){
		this._bg.sizeGrid=this._bar.sizeGrid=value;
	});

	/**@inheritDoc */
	__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
		Laya.superSet(Component,this,'width',value);
		this._bg.width=this._width;
		this.callLater(this.changeValue);
	});

	/**@inheritDoc */
	__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
		this._dataSource=value;
		if ((typeof value=='number')|| (typeof value=='string'))this.value=Number(value);
		else Laya.superSet(Component,this,'dataSource',value);
	});

	return ProgressBar;
})(Component)


//class game.view.skillui.SkillBox extends mylaya.common.TimerCD
var SkillBox=(function(_super){
	function SkillBox(time,rect){
		this._$4__handler=null;
		this.lockMc=null;
		this._islock=false;
		this.idOrder=0;
		this.isSkillTime=false;
		this.isSkillNow=false;
		this.skillTime=0;
		this.box=null;
		SkillBox.__super.call(this,time,rect);
		this.size(rect.width,rect.height);
		this.showtime();
	}

	__class(SkillBox,'game.view.skillui.SkillBox',_super);
	var __proto=SkillBox.prototype;
	__proto.init=function(){
		_super.prototype.init.call(this);
		this.box=new SkillBoxUI;
		var bg=new Image();
		if(GlobalAPI.isPC==false){
			bg.skin="othericon/cirlbg.png";
			this.box.topicon.visible=false;
			bg.size(70,70);
			}else{
			bg.skin="othericon/border.png";
			bg.sizeGrid="30,29,30,24";
			bg.size(62,62);
		}
		this.addChildAt(bg,0);
		this.box.x=this._rect.width-this.box.width>>1;
		this.box.y=this._rect.height-this.box.height>>1;
		bg.x=this._rect.width-bg.width>>1;
		bg.y=this._rect.height-bg.height>>1;
		this.addChild(this.box);
		this.lockMc=new Image("othericon/lockimg.png");
		this.addChild(this.lockMc);
		this.lockMc.pos(this._width-this.lockMc.width>>1,this._height-this.lockMc.height>>1);
	}

	__proto.cacheBitmaps=function(){
		if(GlobalAPI.isPC){
			_super.prototype.cacheBitmaps.call(this);
			}else{
			this.radius=this._rect.width+5>>1;
		}
	}

	__proto.setLock=function(val){
		this._islock=val;
		this.lockMc.visible=this._islock;
	}

	__proto.getLock=function(){
		return this._islock;
	}

	__proto.update=function(){
		_super.prototype.update.call(this);
		this.isSkillTime=Boolean(this.passtime<this.skillTime);
	}

	__proto.setSkillTime=function(val){
		this.isSkillTime=true;
		this.isSkillNow=true;
		this.skillTime=val;
	}

	__proto.setIdx=function(val){
		if(val.length>1){
			this.box.toptxt.fontSize=13;
			}else{
			this.box.toptxt.fontSize=16;
		}
		this.box.toptxt.text=val;
		this.box.toptxt.visible=val!="";
	}

	__proto.setNum=function(val){
		this.box.downtxt.text=val+"";
		this.box.downtxt.visible=val>-1;
	}

	__proto.overHandler=function(handler){
		this._$4__handler=handler;
	}

	__proto.cdover=function(){
		if(this._$4__handler){
			this._$4__handler.run();
		}
		_super.prototype.cdover.call(this);
	}

	__proto.stop=function(){
		_super.prototype.stop.call(this);
		this._$4__handler=null;
		this.isSkillNow=false;
		this.isSkillTime=false;
	}

	return SkillBox;
})(TimerCD)


/**
*<code>Button</code> 组件用来表示常用的多态按钮。 <code>Button</code> 组件可显示文本标签、图标或同时显示两者。 *
*<p>可以是单态，两态和三态，默认三态(up,over,down)。</p>
*
*@example <caption>以下示例代码，创建了一个 <code>Button</code> 实例。</caption>
*package
*{
	*import laya.ui.Button;
	*import laya.utils.Handler;
	*public class Button_Example
	*{
		*public function Button_Example()
		*{
			*Laya.init(640,800);//设置游戏画布宽高。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load("resource/ui/button.png",Handler.create(this,onLoadComplete));//加载资源。
			*}
		*private function onLoadComplete():void
		*{
			*trace("资源加载完成！");
			*var button:Button=new Button("resource/ui/button.png","label");//创建一个 Button 类的实例对象 button ,并传入它的皮肤。
			*button.x=100;//设置 button 对象的属性 x 的值，用于控制 button 对象的显示位置。
			*button.y=100;//设置 button 对象的属性 y 的值，用于控制 button 对象的显示位置。
			*button.clickHandler=new Handler(this,onClickButton,[button]);//设置 button 的点击事件处理器。
			*Laya.stage.addChild(button);//将此 button 对象添加到显示列表。
			*}
		*private function onClickButton(button:Button):void
		*{
			*trace("按钮button被点击了！");
			*}
		*}
	*}
*@example
*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
*Laya.loader.load("resource/ui/button.png",laya.utils.Handler.create(this,loadComplete));//加载资源
*function loadComplete()
*{
	*console.log("资源加载完成！");
	*var button=new laya.ui.Button("resource/ui/button.png","label");//创建一个 Button 类的实例对象 button ,传入它的皮肤skin和标签label。
	*button.x=100;//设置 button 对象的属性 x 的值，用于控制 button 对象的显示位置。
	*button.y=100;//设置 button 对象的属性 y 的值，用于控制 button 对象的显示位置。
	*button.clickHandler=laya.utils.Handler.create(this,onClickButton,[button],false);//设置 button 的点击事件处理函数。
	*Laya.stage.addChild(button);//将此 button 对象添加到显示列表。
	*}
*function onClickButton(button)
*{
	*console.log("按钮被点击了。",button);
	*}
*@example
*import Button=laya.ui.Button;
*import Handler=laya.utils.Handler;
*class Button_Example{
	*constructor()
	*{
		*Laya.init(640,800);
		*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
		*Laya.loader.load("resource/ui/button.png",laya.utils.Handler.create(this,this.onLoadComplete));//加载资源。
		*}
	*private onLoadComplete()
	*{
		*var button:Button=new Button("resource/ui/button.png","label");//创建一个 Button 类的实例对象 button ,并传入它的皮肤。
		*button.x=100;//设置 button 对象的属性 x 的值，用于控制 button 对象的显示位置。
		*button.y=100;//设置 button 对象的属性 y 的值，用于控制 button 对象的显示位置。
		*button.clickHandler=new Handler(this,this.onClickButton,[button]);//设置 button 的点击事件处理器。
		*Laya.stage.addChild(button);//将此 button 对象添加到显示列表。
		*}
	*private onClickButton(button:Button):void
	*{
		*console.log("按钮button被点击了！")
		*}
	*}
*/
//class laya.ui.Button extends laya.ui.Component
var Button=(function(_super){
	function Button(skin,label){
		/**
		*指定按钮按下时是否是切换按钮的显示状态。
		*
		*@example 以下示例代码，创建了一个 <code>Button</code> 实例，并设置为切换按钮。
		*@example
		*package
		*{
			*import laya.ui.Button;
			*import laya.utils.Handler;
			*public class Button_toggle
			*{
				*public function Button_toggle()
				*{
					*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
					*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
					*Laya.loader.load("resource/ui/button.png",Handler.create(this,onLoadComplete));
					*}
				*private function onLoadComplete():void
				*{
					*trace("资源加载完成！");
					*var button:Button=new Button("resource/ui/button.png","label");//创建一个 Button 实例对象 button ,传入它的皮肤skin和标签label。
					*button.x=100;//设置 button 对象的属性 x 的值，用于控制 button 对象的显示位置。
					*button.y=100;//设置 button 对象的属性 y 的值，用于控制 button 对象的显示位置。
					*button.toggle=true;//设置 button 对象为切换按钮。
					*button.clickHandler=new Handler(this,onClickButton,[button]);//设置 button 的点击事件处理器。
					*Laya.stage.addChild(button);//将此 button 对象添加到显示列表。
					*}
				*private function onClickButton(button:Button):void
				*{
					*trace("button.selected = "+button.selected);
					*}
				*}
			*}
		*@example
		*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
		*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
		*Laya.loader.load("resource/ui/button.png",laya.utils.Handler.create(this,loadComplete));//加载资源
		*function loadComplete()
		*{
			*console.log("资源加载完成！");
			*var button=new laya.ui.Button("resource/ui/button.png","label");//创建一个 Button 类的实例对象 button ,传入它的皮肤skin和标签label。
			*button.x=100;//设置 button 对象的属性 x 的值，用于控制 button 对象的显示位置。
			*button.y=100;//设置 button 对象的属性 y 的值，用于控制 button 对象的显示位置。
			*button.toggle=true;//设置 button 对象为切换按钮。
			*button.clickHandler=laya.utils.Handler.create(this,onClickButton,[button],false);//设置 button 的点击事件处理器。
			*Laya.stage.addChild(button);//将此 button 对象添加到显示列表。
			*}
		*function onClickButton(button)
		*{
			*console.log("button.selected = ",button.selected);
			*}
		*@example
		*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
		*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
		*Laya.loader.load("button.png",null,null,null,null,null);//加载资源
		*function loadComplete(){
			*console.log("资源加载完成！");
			*var button:laya.ui.Button=new laya.ui.Button("button.png","label");//创建一个 Button 类的实例对象 button ,传入它的皮肤skin和标签label。
			*button.x=100;//设置 button 对象的属性 x 的值，用于控制 button 对象的显示位置。
			*button.y=100;//设置 button 对象的属性 y 的值，用于控制 button 对象的显示位置。
			*button.toggle=true;//设置 button 对象为切换按钮。
			*button.clickHandler=laya.utils.Handler.create(this,onClickButton,[button],false);//设置 button 的点击事件处理器。
			*Laya.stage.addChild(button);//将此 button 对象添加到显示列表。
			*}
		*function onClickButton(button){
			*console.log("button.selected = ",button.selected);
			*}
		*/
		this.toggle=false;
		/**
		*@private
		*/
		this._bitmap=null;
		/**
		*@private
		*按钮上的文本。
		*/
		this._text=null;
		/**
		*@private
		*按钮文本标签描边的颜色值。
		*/
		this._strokeColors=null;
		/**
		*@private
		*按钮的状态值。
		*/
		this._state=0;
		/**
		*@private
		*表示按钮的选中状态。
		*/
		this._selected=false;
		/**
		*@private
		*按钮的皮肤资源。
		*/
		this._skin=null;
		/**
		*@private
		*指定此显示对象是否自动计算并改变大小等属性。
		*/
		this._autoSize=true;
		/**
		*@private
		*源数据。
		*/
		this._sources=null;
		/**
		*@private
		*按钮的点击事件函数。
		*/
		this._clickHandler=null;
		/**
		*@private
		*/
		this._stateChanged=false;
		Button.__super.call(this);
		this._labelColors=Styles.buttonLabelColors;
		this._stateNum=Styles.buttonStateNum;
		(label===void 0)&& (label="");
		this.skin=skin;
		this.label=label;
	}

	__class(Button,'laya.ui.Button',_super);
	var __proto=Button.prototype;
	Laya.imps(__proto,{"laya.ui.ISelect":true})
	/**@inheritDoc */
	__proto.destroy=function(destroyChild){
		(destroyChild===void 0)&& (destroyChild=true);
		_super.prototype.destroy.call(this,destroyChild);
		this._bitmap && this._bitmap.destroy();
		this._text && this._text.destroy(destroyChild);
		this._bitmap=null;
		this._text=null;
		this._clickHandler=null;
		this._labelColors=this._sources=this._strokeColors=null;
	}

	/**@inheritDoc */
	__proto.createChildren=function(){
		this.graphics=this._bitmap=new AutoBitmap();
	}

	/**@private */
	__proto.createText=function(){
		if (!this._text){
			this._text=new Text();
			this._text.overflow=Text.HIDDEN;
			this._text.align="center";
			this._text.valign="middle";
			this._text.width=this._width;
			this._text.height=this._height;
		}
	}

	/**@inheritDoc */
	__proto.initialize=function(){
		if (this._mouseEnableState!==1){
			this.mouseEnabled=true;
			this._setBit(0x2,true);
		}
		this._createListener("mouseover",this,this.onMouse,null,false,false);
		this._createListener("mouseout",this,this.onMouse,null,false,false);
		this._createListener("mousedown",this,this.onMouse,null,false,false);
		this._createListener("mouseup",this,this.onMouse,null,false,false);
		this._createListener("click",this,this.onMouse,null,false,false);
	}

	/**
	*对象的 <code>Event.MOUSE_OVER、Event.MOUSE_OUT、Event.MOUSE_DOWN、Event.MOUSE_UP、Event.CLICK</code> 事件侦听处理函数。
	*@param e Event 对象。
	*/
	__proto.onMouse=function(e){
		if (this.toggle===false && this._selected)return;
		if (e.type==="click"){
			this.toggle && (this.selected=!this._selected);
			this._clickHandler && this._clickHandler.run();
			return;
		}
		!this._selected && (this.state=Button.stateMap[e.type]);
	}

	/**
	*@private
	*对象的资源切片发生改变。
	*/
	__proto.changeClips=function(){
		var img=Loader.getRes(this._skin);
		if (!img){
			console.log("lose skin",this._skin);
			return;
		};
		var width=img.sourceWidth;
		var height=img.sourceHeight / this._stateNum;
		img.$_GID || (img.$_GID=Utils.getGID());
		var key=img.$_GID+"-"+this._stateNum;
		var clips=WeakObject.I.get(key);
		if (!Utils.isOkTextureList(clips)){
			clips=null;
		}
		if (clips)this._sources=clips;
		else {
			this._sources=[];
			if (this._stateNum===1){
				this._sources.push(img);
				}else {
				for (var i=0;i < this._stateNum;i++){
					this._sources.push(Texture.createFromTexture(img,0,height *i,width,height));
				}
			}
			WeakObject.I.set(key,this._sources);
		}
		if (this._autoSize){
			this._bitmap.width=this._width || width;
			this._bitmap.height=this._height || height;
			if (this._text){
				this._text.width=this._bitmap.width;
				this._text.height=this._bitmap.height;
			}
			}else {
			this._text && (this._text.x=width);
		}
	}

	/**
	*@private
	*改变对象的状态。
	*/
	__proto.changeState=function(){
		this._stateChanged=false;
		this.runCallLater(this.changeClips);
		var index=this._state < this._stateNum ? this._state :this._stateNum-1;
		this._sources && (this._bitmap.source=this._sources[index]);
		if (this.label){
			this._text.color=this._labelColors[index];
			if (this._strokeColors)this._text.strokeColor=this._strokeColors[index];
		}
	}

	/**@private */
	__proto._setStateChanged=function(){
		if (!this._stateChanged){
			this._stateChanged=true;
			this.callLater(this.changeState);
		}
	}

	/**
	*<p>描边颜色，以字符串表示。</p>
	*默认值为 "#000000"（黑色）;
	*@see laya.display.Text.strokeColor()
	*/
	__getset(0,__proto,'labelStrokeColor',function(){
		this.createText();
		return this._text.strokeColor;
		},function(value){
		this.createText();
		this._text.strokeColor=value
	});

	/**
	*@inheritDoc
	*/
	__getset(0,__proto,'measureHeight',function(){
		this.runCallLater(this.changeClips);
		return this._text ? Math.max(this._bitmap.height,this._text.height):this._bitmap.height;
	});

	/**
	*<p>对象的皮肤资源地址。</p>
	*支持单态，两态和三态，用 <code>stateNum</code> 属性设置
	*<p>对象的皮肤地址，以字符串表示。</p>
	*@see #stateNum
	*/
	__getset(0,__proto,'skin',function(){
		return this._skin;
		},function(value){
		if (this._skin !=value){
			this._skin=value;
			this.callLater(this.changeClips);
			this._setStateChanged();
		}
	});

	/**
	*对象的状态值。
	*@see #stateMap
	*/
	__getset(0,__proto,'state',function(){
		return this._state;
		},function(value){
		if (this._state !=value){
			this._state=value;
			this._setStateChanged();
		}
	});

	/**
	*按钮文本标签 <code>Text</code> 控件。
	*/
	__getset(0,__proto,'text',function(){
		this.createText();
		return this._text;
	});

	/**
	*<p>指定对象的状态值，以数字表示。</p>
	*<p>默认值为3。此值决定皮肤资源图片的切割方式。</p>
	*<p><b>取值：</b>
	*<li>1：单态。图片不做切割，按钮的皮肤状态只有一种。</li>
	*<li>2：两态。图片将以竖直方向被等比切割为2部分，从上向下，依次为
	*弹起状态皮肤、
	*按下和经过及选中状态皮肤。</li>
	*<li>3：三态。图片将以竖直方向被等比切割为3部分，从上向下，依次为
	*弹起状态皮肤、
	*经过状态皮肤、
	*按下和选中状态皮肤</li>
	*</p>
	*/
	__getset(0,__proto,'stateNum',function(){
		return this._stateNum;
		},function(value){
		if ((typeof value=='string')){
			value=parseInt(value);
		}
		if (this._stateNum !=value){
			this._stateNum=value < 1 ? 1 :value > 3 ? 3 :value;
			this.callLater(this.changeClips);
		}
	});

	/**
	*表示按钮各个状态下的描边颜色。
	*<p><b>格式:</b> "upColor,overColor,downColor,disableColor"。</p>
	*/
	__getset(0,__proto,'strokeColors',function(){
		return this._strokeColors ? this._strokeColors.join(","):"";
		},function(value){
		this._strokeColors=UIUtils.fillArray(Styles.buttonLabelColors,value,String);
		this._setStateChanged();
	});

	/**
	*表示按钮各个状态下的文本颜色。
	*<p><b>格式:</b> "upColor,overColor,downColor,disableColor"。</p>
	*/
	__getset(0,__proto,'labelColors',function(){
		return this._labelColors.join(",");
		},function(value){
		this._labelColors=UIUtils.fillArray(Styles.buttonLabelColors,value,String);
		this._setStateChanged();
	});

	/**
	*@inheritDoc
	*/
	__getset(0,__proto,'measureWidth',function(){
		this.runCallLater(this.changeClips);
		if (this._autoSize)return this._bitmap.width;
		this.runCallLater(this.changeState);
		return this._bitmap.width+(this._text ? this._text.width :0);
	});

	/**
	*按钮的文本内容。
	*/
	__getset(0,__proto,'label',function(){
		return this._text ? this._text.text :null;
		},function(value){
		if (!this._text && !value)return;
		this.createText();
		if (this._text.text !=value){
			value && !this._text.parent && this.addChild(this._text);
			this._text.text=(value+"").replace(/\\n/g,"\n");
			this._setStateChanged();
		}
	});

	/**
	*表示按钮的选中状态。
	*<p>如果值为true，表示该对象处于选中状态。否则该对象处于未选中状态。</p>
	*/
	__getset(0,__proto,'selected',function(){
		return this._selected;
		},function(value){
		if (this._selected !=value){
			this._selected=value;
			this.state=this._selected ? 2 :0;
			this.event("change");
		}
	});

	/**
	*表示按钮文本标签的边距。
	*<p><b>格式：</b>"上边距,右边距,下边距,左边距"。</p>
	*/
	__getset(0,__proto,'labelPadding',function(){
		this.createText();
		return this._text.padding.join(",");
		},function(value){
		this.createText();
		this._text.padding=UIUtils.fillArray(Styles.labelPadding,value,Number);
	});

	/**
	*表示按钮文本标签的字体大小。
	*@see laya.display.Text.fontSize()
	*/
	__getset(0,__proto,'labelSize',function(){
		this.createText();
		return this._text.fontSize;
		},function(value){
		this.createText();
		this._text.fontSize=value
	});

	/**
	*<p>描边宽度（以像素为单位）。</p>
	*默认值0，表示不描边。
	*@see laya.display.Text.stroke()
	*/
	__getset(0,__proto,'labelStroke',function(){
		this.createText();
		return this._text.stroke;
		},function(value){
		this.createText();
		this._text.stroke=value
	});

	/**
	*表示按钮文本标签是否为粗体字。
	*@see laya.display.Text.bold()
	*/
	__getset(0,__proto,'labelBold',function(){
		this.createText();
		return this._text.bold;
		},function(value){
		this.createText();
		this._text.bold=value;
	});

	/**
	*表示按钮文本标签的字体名称，以字符串形式表示。
	*@see laya.display.Text.font()
	*/
	__getset(0,__proto,'labelFont',function(){
		this.createText();
		return this._text.font;
		},function(value){
		this.createText();
		this._text.font=value;
	});

	/**标签对齐模式，默认为居中对齐。*/
	__getset(0,__proto,'labelAlign',function(){
		this.createText()
		return this._text.align;
		},function(value){
		this.createText()
		this._text.align=value;
	});

	/**
	*对象的点击事件处理器函数（无默认参数）。
	*/
	__getset(0,__proto,'clickHandler',function(){
		return this._clickHandler;
		},function(value){
		this._clickHandler=value;
	});

	/**
	*<p>当前实例的位图 <code>AutoImage</code> 实例的有效缩放网格数据。</p>
	*<p>数据格式："上边距,右边距,下边距,左边距,是否重复填充(值为0：不重复填充，1：重复填充)"，以逗号分隔。
	*<ul><li>例如："4,4,4,4,1"</li></ul></p>
	*@see laya.ui.AutoBitmap.sizeGrid
	*/
	__getset(0,__proto,'sizeGrid',function(){
		if (this._bitmap.sizeGrid)return this._bitmap.sizeGrid.join(",");
		return null;
		},function(value){
		this._bitmap.sizeGrid=UIUtils.fillArray(Styles.defaultSizeGrid,value,Number);
	});

	/**@inheritDoc */
	__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
		Laya.superSet(Component,this,'width',value);
		if (this._autoSize){
			this._bitmap.width=value;
			this._text && (this._text.width=value);
		}
	});

	/**@inheritDoc */
	__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
		Laya.superSet(Component,this,'height',value);
		if (this._autoSize){
			this._bitmap.height=value;
			this._text && (this._text.height=value);
		}
	});

	/**@inheritDoc */
	__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
		this._dataSource=value;
		if ((typeof value=='number')|| (typeof value=='string'))this.label=value+"";
		else Laya.superSet(Component,this,'dataSource',value);
	});

	/**图标x,y偏移，格式：100,100*/
	__getset(0,__proto,'iconOffset',function(){
		return this._bitmap._offset ? this._bitmap._offset.join(","):null;
		},function(value){
		if (value)this._bitmap._offset=UIUtils.fillArray([1,1],value,Number);
		else this._bitmap._offset=[];
	});

	__static(Button,
	['stateMap',function(){return this.stateMap={"mouseup":0,"mouseover":1,"mousedown":2,"mouseout":0};}
	]);
	return Button;
})(Component)


/**
*关键帧动画播放类。
*/
//class laya.display.FrameAnimation extends laya.display.AnimationPlayerBase
var FrameAnimation=(function(_super){
	function FrameAnimation(){
		/**
		*@private
		*id对象表
		*/
		this._targetDic=null;
		/**
		*@private
		*动画数据
		*/
		this._animationData=null;
		/**@private */
		this._animationNewFrames=null;
		FrameAnimation.__super.call(this);
		if (FrameAnimation._sortIndexFun==null){
			FrameAnimation._sortIndexFun=MathUtil$1.sortByKey("index",false,true);
		}
	}

	__class(FrameAnimation,'laya.display.FrameAnimation',_super);
	var __proto=FrameAnimation.prototype;
	/**
	*@private
	*初始化动画数据
	*@param targetDic 对象表
	*@param animationData 动画数据
	*
	*/
	__proto._setUp=function(targetDic,animationData){
		this._labels=null;
		this._animationNewFrames=null;
		this._targetDic=targetDic;
		this._animationData=animationData;
		this.interval=1000 / animationData.frameRate;
		if (animationData.parsed){
			this._count=animationData.count;
			this._labels=animationData.labels;
			this._animationNewFrames=animationData.animationNewFrames;
			}else {
			this._animationNewFrames=[];
			this._calculateDatas();
		}
		animationData.parsed=true;
		animationData.labels=this._labels;
		animationData.count=this._count;
		animationData.animationNewFrames=this._animationNewFrames;
	}

	/**@inheritDoc */
	__proto.clear=function(){
		_super.prototype.clear.call(this);
		this._targetDic=null;
		this._animationData=null;
	}

	/**@inheritDoc */
	__proto._displayToIndex=function(value){
		if (!this._animationData)return;
		if (value < 0)value=0;
		if (value > this._count)value=this._count;
		var nodes=this._animationData.nodes,i=0,len=nodes.length;
		for (i=0;i < len;i++){
			this._displayNodeToFrame(nodes[i],value);
		}
	}

	/**
	*@private
	*将节点设置到某一帧的状态
	*@param node 节点ID
	*@param frame
	*@param targetDic 节点表
	*
	*/
	__proto._displayNodeToFrame=function(node,frame,targetDic){
		if (!targetDic)targetDic=this._targetDic;
		var target=targetDic[node.target];
		if (!target){
			return;
		};
		var frames=node.frames,key,propFrames,value;
		var keys=node.keys,i=0,len=keys.length;
		for (i=0;i < len;i++){
			key=keys[i];
			propFrames=frames[key];
			if (propFrames.length > frame){
				value=propFrames[frame];
				}else {
				value=propFrames[propFrames.length-1];
			}
			target[key]=value;
		}
	}

	/**
	*@private
	*计算帧数据
	*
	*/
	__proto._calculateDatas=function(){
		if (!this._animationData)return;
		var nodes=this._animationData.nodes,i=0,len=nodes.length,tNode;
		this._count=0;
		for (i=0;i < len;i++){
			tNode=nodes[i];
			this._calculateNodeKeyFrames(tNode);
		}
		this._count+=1;
	}

	/**
	*@private
	*计算某个节点的帧数据
	*@param node
	*
	*/
	__proto._calculateNodeKeyFrames=function(node){
		var keyFrames=node.keyframes,key,tKeyFrames,target=node.target;
		if (!node.frames){
			node.frames={};
		}
		if (!node.keys){
			node.keys=[];
			}else {
			node.keys.length=0;
		}
		if (!node.initValues){
			node.initValues={};
		}
		for (key in keyFrames){
			tKeyFrames=keyFrames[key];
			if (!node.frames[key]){
				node.frames[key]=[];
			}
			if (this._targetDic && this._targetDic[target]){
				node.initValues[key]=this._targetDic[target][key];
			}
			tKeyFrames.sort(FrameAnimation._sortIndexFun);
			node.keys.push(key);
			this._calculateNodePropFrames(tKeyFrames,node.frames[key],key,target);
		}
	}

	/**
	*将动画控制对象还原到动画控制之前的状态
	*/
	__proto.resetToInitState=function(){
		if (!this._targetDic)return;
		if (!this._animationData)return;
		var nodes=this._animationData.nodes,i=0,len=nodes.length;
		var tNode;
		var initValues;
		for (i=0;i < len;i++){
			tNode=nodes[i];
			initValues=tNode.initValues;
			if (!initValues)continue ;
			var target=this._targetDic[tNode.target];
			if (!target)continue ;
			var key;
			for (key in initValues){
				target[key]=initValues[key];
			}
		}
	}

	/**
	*@private
	*计算节点某个属性的帧数据
	*@param keyframes
	*@param frames
	*@param key
	*@param target
	*
	*/
	__proto._calculateNodePropFrames=function(keyframes,frames,key,target){
		var i=0,len=keyframes.length-1;
		frames.length=keyframes[len].index+1;
		for (i=0;i < len;i++){
			this._dealKeyFrame(keyframes[i]);
			this._calculateFrameValues(keyframes[i],keyframes[i+1],frames);
		}
		if (len==0){
			frames[0]=keyframes[0].value;
			if (this._animationNewFrames)
				this._animationNewFrames[keyframes[0].index]=true;
		}
		this._dealKeyFrame(keyframes[i]);
	}

	/**
	*@private
	*
	*/
	__proto._dealKeyFrame=function(keyFrame){
		if (keyFrame.label && keyFrame.label !="")this.addLabel(keyFrame.label,keyFrame.index);
	}

	/**
	*@private
	*计算两个关键帧直接的帧数据
	*@param startFrame
	*@param endFrame
	*@param result
	*
	*/
	__proto._calculateFrameValues=function(startFrame,endFrame,result){
		var i=0,easeFun;
		var start=startFrame.index,end=endFrame.index;
		var startValue=startFrame.value;
		var dValue=endFrame.value-startFrame.value;
		var dLen=end-start;
		if (end > this._count)this._count=end;
		if (startFrame.tween){
			easeFun=Ease[startFrame.tweenMethod];
			if (easeFun==null){
				easeFun=Ease.linearNone;
			}
			for (i=start;i < end;i++){
				result[i]=easeFun(i-start,startValue,dValue,dLen);
				if (this._animationNewFrames){
					this._animationNewFrames[i]=true;
				}
			}
			}else {
			for (i=start;i < end;i++){
				result[i]=startValue;
			}
		}
		if (this._animationNewFrames){
			this._animationNewFrames[startFrame.index]=true;
			this._animationNewFrames[endFrame.index]=true;
		}
		result[endFrame.index]=endFrame.value;
	}

	FrameAnimation._sortIndexFun=null;
	return FrameAnimation;
})(AnimationPlayerBase)


/**
*<p> <code>Clip</code> 类是位图切片动画。</p>
*<p> <code>Clip</code> 可将一张图片，按横向分割数量 <code>clipX</code> 、竖向分割数量 <code>clipY</code> ，
*或横向分割每个切片的宽度 <code>clipWidth</code> 、竖向分割每个切片的高度 <code>clipHeight</code> ，
*从左向右，从上到下，分割组合为一个切片动画。</p>
*Image和Clip组件是唯一支持异步加载的两个组件，比如clip.skin="abc/xxx.png"，其他UI组件均不支持异步加载。
*
*@example <caption>以下示例代码，创建了一个 <code>Clip</code> 实例。</caption>
*package
*{
	*import laya.ui.Clip;
	*public class Clip_Example
	*{
		*private var clip:Clip;
		*public function Clip_Example()
		*{
			*Laya.init(640,800);//设置游戏画布宽高。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*onInit();
			*}
		*private function onInit():void
		*{
			*clip=new Clip("resource/ui/clip_num.png",10,1);//创建一个 Clip 类的实例对象 clip ,传入它的皮肤skin和横向分割数量、竖向分割数量。
			*clip.autoPlay=true;//设置 clip 动画自动播放。
			*clip.interval=100;//设置 clip 动画的播放时间间隔。
			*clip.x=100;//设置 clip 对象的属性 x 的值，用于控制 clip 对象的显示位置。
			*clip.y=100;//设置 clip 对象的属性 y 的值，用于控制 clip 对象的显示位置。
			*clip.on(Event.CLICK,this,onClick);//给 clip 添加点击事件函数侦听。
			*Laya.stage.addChild(clip);//将此 clip 对象添加到显示列表。
			*}
		*private function onClick():void
		*{
			*trace("clip 的点击事件侦听处理函数。clip.total="+clip.total);
			*if (clip.isPlaying==true)
			*{
				*clip.stop();//停止动画。
				*}else {
				*clip.play();//播放动画。
				*}
			*}
		*}
	*}
*@example
*Laya.init(640,800);//设置游戏画布宽高
*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
*var clip;
*Laya.loader.load("resource/ui/clip_num.png",laya.utils.Handler.create(this,loadComplete));//加载资源
*function loadComplete(){
	*console.log("资源加载完成！");
	*clip=new laya.ui.Clip("resource/ui/clip_num.png",10,1);//创建一个 Clip 类的实例对象 clip ,传入它的皮肤skin和横向分割数量、竖向分割数量。
	*clip.autoPlay=true;//设置 clip 动画自动播放。
	*clip.interval=100;//设置 clip 动画的播放时间间隔。
	*clip.x=100;//设置 clip 对象的属性 x 的值，用于控制 clip 对象的显示位置。
	*clip.y=100;//设置 clip 对象的属性 y 的值，用于控制 clip 对象的显示位置。
	*clip.on(Event.CLICK,this,onClick);//给 clip 添加点击事件函数侦听。
	*Laya.stage.addChild(clip);//将此 clip 对象添加到显示列表。
	*}
*function onClick()
*{
	*console.log("clip 的点击事件侦听处理函数。");
	*if(clip.isPlaying==true)
	*{
		*clip.stop();
		*}else {
		*clip.play();
		*}
	*}
*@example
*import Clip=laya.ui.Clip;
*import Handler=laya.utils.Handler;
*class Clip_Example {
	*private clip:Clip;
	*constructor(){
		*Laya.init(640,800);//设置游戏画布宽高。
		*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
		*this.onInit();
		*}
	*private onInit():void {
		*this.clip=new Clip("resource/ui/clip_num.png",10,1);//创建一个 Clip 类的实例对象 clip ,传入它的皮肤skin和横向分割数量、竖向分割数量。
		*this.clip.autoPlay=true;//设置 clip 动画自动播放。
		*this.clip.interval=100;//设置 clip 动画的播放时间间隔。
		*this.clip.x=100;//设置 clip 对象的属性 x 的值，用于控制 clip 对象的显示位置。
		*this.clip.y=100;//设置 clip 对象的属性 y 的值，用于控制 clip 对象的显示位置。
		*this.clip.on(laya.events.Event.CLICK,this,this.onClick);//给 clip 添加点击事件函数侦听。
		*Laya.stage.addChild(this.clip);//将此 clip 对象添加到显示列表。
		*}
	*private onClick():void {
		*console.log("clip 的点击事件侦听处理函数。clip.total="+this.clip.total);
		*if (this.clip.isPlaying==true){
			*this.clip.stop();//停止动画。
			*}else {
			*this.clip.play();//播放动画。
			*}
		*}
	*}
*
*/
//class laya.ui.Clip extends laya.ui.Component
var Clip=(function(_super){
	function Clip(url,clipX,clipY){
		/**@private */
		this._sources=null;
		/**@private */
		this._bitmap=null;
		/**@private */
		this._skin=null;
		/**@private */
		this._clipX=1;
		/**@private */
		this._clipY=1;
		/**@private */
		this._clipWidth=0;
		/**@private */
		this._clipHeight=0;
		/**@private */
		this._autoPlay=false;
		/**@private */
		this._interval=50;
		/**@private */
		this._complete=null;
		/**@private */
		this._isPlaying=false;
		/**@private */
		this._index=0;
		/**@private */
		this._clipChanged=false;
		/**@private */
		this._group=null;
		/**@private */
		this._toIndex=-1;
		Clip.__super.call(this);
		(clipX===void 0)&& (clipX=1);
		(clipY===void 0)&& (clipY=1);
		this._clipX=clipX;
		this._clipY=clipY;
		this.skin=url;
	}

	__class(Clip,'laya.ui.Clip',_super);
	var __proto=Clip.prototype;
	/**@inheritDoc */
	__proto.destroy=function(destroyChild){
		(destroyChild===void 0)&& (destroyChild=true);
		_super.prototype.destroy.call(this,true);
		this._bitmap && this._bitmap.destroy();
		this._bitmap=null;
		this._sources=null;
	}

	/**
	*销毁对象并释放加载的皮肤资源。
	*/
	__proto.dispose=function(){
		this.destroy(true);
		Laya.loader.clearRes(this._skin);
	}

	/**@inheritDoc */
	__proto.createChildren=function(){
		this.graphics=this._bitmap=new AutoBitmap();
	}

	/**@private */
	__proto._onDisplay=function(e){
		if (this._isPlaying){
			if (this._displayedInStage)this.play();
			else this.stop();
			}else if (this._autoPlay){
			this.play();
		}
	}

	/**
	*@private
	*改变切片的资源、切片的大小。
	*/
	__proto.changeClip=function(){
		this._clipChanged=false;
		if (!this._skin)return;
		var img=Loader.getRes(this._skin);
		if (img){
			this.loadComplete(this._skin,img);
			}else {
			Laya.loader.load(this._skin,Handler.create(this,this.loadComplete,[this._skin]));
		}
	}

	/**
	*@private
	*加载切片图片资源完成函数。
	*@param url 资源地址。
	*@param img 纹理。
	*/
	__proto.loadComplete=function(url,img){
		if (url===this._skin && img){
			var w=this._clipWidth || Math.ceil(img.sourceWidth / this._clipX);
			var h=this._clipHeight || Math.ceil(img.sourceHeight / this._clipY);
			var key=this._skin+w+h;
			var clips=WeakObject.I.get(key);
			if (!Utils.isOkTextureList(clips)){
				clips=null;
			}
			if (clips)this._sources=clips;
			else {
				this._sources=[];
				for (var i=0;i < this._clipY;i++){
					for (var j=0;j < this._clipX;j++){
						this._sources.push(Texture.createFromTexture(img,w *j,h *i,w,h));
					}
				}
				WeakObject.I.set(key,this._sources);
			}
			this.index=this._index;
			this.event("loaded");
			this.onCompResize();
		}
	}

	/**
	*播放动画。
	*@param from 开始索引
	*@param to 结束索引，-1为不限制
	*/
	__proto.play=function(from,to){
		(from===void 0)&& (from=0);
		(to===void 0)&& (to=-1);
		this._isPlaying=true;
		this.index=from;
		this._toIndex=to;
		this._index++;
		Laya.timer.loop(this.interval,this,this._loop);
		this.on("display",this,this._onDisplay);
		this.on("undisplay",this,this._onDisplay);
	}

	/**
	*@private
	*/
	__proto._loop=function(){
		if (this._style.visible && this._sources){
			this._index++;
			if (this._toIndex >-1 && this._index >=this._toIndex)this.stop();
			else if (this._index >=this._sources.length)this._index=0;
			this.index=this._index;
		}
	}

	/**
	*停止动画。
	*/
	__proto.stop=function(){
		this._isPlaying=false;
		Laya.timer.clear(this,this._loop);
		this.event("complete");
	}

	/**@private */
	__proto._setClipChanged=function(){
		if (!this._clipChanged){
			this._clipChanged=true;
			this.callLater(this.changeClip);
		}
	}

	/**
	*表示动画播放间隔时间(以毫秒为单位)。
	*/
	__getset(0,__proto,'interval',function(){
		return this._interval;
		},function(value){
		if (this._interval !=value){
			this._interval=value;
			if (this._isPlaying)this.play();
		}
	});

	/**
	*@copy laya.ui.Image#skin
	*/
	__getset(0,__proto,'skin',function(){
		return this._skin;
		},function(value){
		if (this._skin !=value){
			this._skin=value;
			if (value){
				this._setClipChanged()
				}else {
				this._bitmap.source=null;
			}
		}
	});

	/**
	*源数据。
	*/
	__getset(0,__proto,'sources',function(){
		return this._sources;
		},function(value){
		this._sources=value;
		this.index=this._index;
		this.event("loaded");
	});

	/**X轴（横向）切片数量。*/
	__getset(0,__proto,'clipX',function(){
		return this._clipX;
		},function(value){
		this._clipX=value || 1;
		this._setClipChanged()
	});

	/**Y轴(竖向)切片数量。*/
	__getset(0,__proto,'clipY',function(){
		return this._clipY;
		},function(value){
		this._clipY=value || 1;
		this._setClipChanged()
	});

	/**
	*切片动画的总帧数。
	*/
	__getset(0,__proto,'total',function(){
		this.runCallLater(this.changeClip);
		return this._sources ? this._sources.length :0;
	});

	/**
	*横向分割时每个切片的宽度，与 <code>clipX</code> 同时设置时优先级高于 <code>clipX</code> 。
	*/
	__getset(0,__proto,'clipWidth',function(){
		return this._clipWidth;
		},function(value){
		this._clipWidth=value;
		this._setClipChanged()
	});

	/**
	*<p>当前实例的位图 <code>AutoImage</code> 实例的有效缩放网格数据。</p>
	*<p>数据格式："上边距,右边距,下边距,左边距,是否重复填充(值为0：不重复填充，1：重复填充)"，以逗号分隔。
	*<ul><li>例如："4,4,4,4,1"</li></ul></p>
	*@see laya.ui.AutoBitmap.sizeGrid
	*/
	__getset(0,__proto,'sizeGrid',function(){
		if (this._bitmap.sizeGrid)return this._bitmap.sizeGrid.join(",");
		return null;
		},function(value){
		this._bitmap.sizeGrid=UIUtils.fillArray(Styles.defaultSizeGrid,value,Number);
	});

	/**
	*资源分组。
	*/
	__getset(0,__proto,'group',function(){
		return this._group;
		},function(value){
		if (value && this._skin)Loader.setGroup(this._skin,value);
		this._group=value;
	});

	/**
	*竖向分割时每个切片的高度，与 <code>clipY</code> 同时设置时优先级高于 <code>clipY</code> 。
	*/
	__getset(0,__proto,'clipHeight',function(){
		return this._clipHeight;
		},function(value){
		this._clipHeight=value;
		this._setClipChanged()
	});

	/**@inheritDoc */
	__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
		Laya.superSet(Component,this,'width',value);
		this._bitmap.width=value;
	});

	/**@inheritDoc */
	__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
		Laya.superSet(Component,this,'height',value);
		this._bitmap.height=value;
	});

	/**@inheritDoc */
	__getset(0,__proto,'measureWidth',function(){
		this.runCallLater(this.changeClip);
		return this._bitmap.width;
	});

	/**@inheritDoc */
	__getset(0,__proto,'measureHeight',function(){
		this.runCallLater(this.changeClip);
		return this._bitmap.height;
	});

	/**
	*当前帧索引。
	*/
	__getset(0,__proto,'index',function(){
		return this._index;
		},function(value){
		this._index=value;
		this._bitmap && this._sources && (this._bitmap.source=this._sources[value]);
		this.event("change");
	});

	/**
	*表示是否自动播放动画，若自动播放值为true,否则值为false;
	*<p>可控制切片动画的播放、停止。</p>
	*/
	__getset(0,__proto,'autoPlay',function(){
		return this._autoPlay;
		},function(value){
		if (this._autoPlay !=value){
			this._autoPlay=value;
			value ? this.play():this.stop();
		}
	});

	/**
	*表示动画的当前播放状态。
	*如果动画正在播放中，则为true，否则为flash。
	*/
	__getset(0,__proto,'isPlaying',function(){
		return this._isPlaying;
		},function(value){
		this._isPlaying=value;
	});

	/**@inheritDoc */
	__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
		this._dataSource=value;
		if (((typeof value=='number')&& Math.floor(value)==value)|| (typeof value=='string'))this.index=parseInt(value);
		else Laya.superSet(Component,this,'dataSource',value);
	});

	/**
	*<code>AutoBitmap</code> 位图实例。
	*/
	__getset(0,__proto,'bitmap',function(){
		return this._bitmap;
	});

	return Clip;
})(Component)


/**
*<code>ColorPicker</code> 组件将显示包含多个颜色样本的列表，用户可以从中选择颜色。
*
*@example <caption>以下示例代码，创建了一个 <code>ColorPicker</code> 实例。</caption>
*package
*{
	*import laya.ui.ColorPicker;
	*import laya.utils.Handler;
	*public class ColorPicker_Example
	*{
		*public function ColorPicker_Example()
		*{
			*Laya.init(640,800);//设置游戏画布宽高。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load("resource/ui/color.png",Handler.create(this,onLoadComplete));//加载资源。
			*}
		*private function onLoadComplete():void
		*{
			*trace("资源加载完成！");
			*var colorPicket:ColorPicker=new ColorPicker();//创建一个 ColorPicker 类的实例对象 colorPicket 。
			*colorPicket.skin="resource/ui/color.png";//设置 colorPicket 的皮肤。
			*colorPicket.x=100;//设置 colorPicket 对象的属性 x 的值，用于控制 colorPicket 对象的显示位置。
			*colorPicket.y=100;//设置 colorPicket 对象的属性 y 的值，用于控制 colorPicket 对象的显示位置。
			*colorPicket.changeHandler=new Handler(this,onChangeColor,[colorPicket]);//设置 colorPicket 的颜色改变回调函数。
			*Laya.stage.addChild(colorPicket);//将此 colorPicket 对象添加到显示列表。
			*}
		*private function onChangeColor(colorPicket:ColorPicker):void
		*{
			*trace("当前选择的颜色： "+colorPicket.selectedColor);
			*}
		*}
	*}
*@example
*Laya.init(640,800);//设置游戏画布宽高
*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
*Laya.loader.load("resource/ui/color.png",laya.utils.Handler.create(this,loadComplete));//加载资源
*function loadComplete()
*{
	*console.log("资源加载完成！");
	*var colorPicket=new laya.ui.ColorPicker();//创建一个 ColorPicker 类的实例对象 colorPicket 。
	*colorPicket.skin="resource/ui/color.png";//设置 colorPicket 的皮肤。
	*colorPicket.x=100;//设置 colorPicket 对象的属性 x 的值，用于控制 colorPicket 对象的显示位置。
	*colorPicket.y=100;//设置 colorPicket 对象的属性 y 的值，用于控制 colorPicket 对象的显示位置。
	*colorPicket.changeHandler=laya.utils.Handler.create(this,onChangeColor,[colorPicket],false);//设置 colorPicket 的颜色改变回调函数。
	*Laya.stage.addChild(colorPicket);//将此 colorPicket 对象添加到显示列表。
	*}
*function onChangeColor(colorPicket)
*{
	*console.log("当前选择的颜色： "+colorPicket.selectedColor);
	*}
*@example
*import ColorPicker=laya.ui.ColorPicker;
*import Handler=laya.utils.Handler;
*class ColorPicker_Example {
	*constructor(){
		*Laya.init(640,800);//设置游戏画布宽高。
		*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
		*Laya.loader.load("resource/ui/color.png",Handler.create(this,this.onLoadComplete));//加载资源。
		*}
	*private onLoadComplete():void {
		*console.log("资源加载完成！");
		*var colorPicket:ColorPicker=new ColorPicker();//创建一个 ColorPicker 类的实例对象 colorPicket 。
		*colorPicket.skin="resource/ui/color.png";//设置 colorPicket 的皮肤。
		*colorPicket.x=100;//设置 colorPicket 对象的属性 x 的值，用于控制 colorPicket 对象的显示位置。
		*colorPicket.y=100;//设置 colorPicket 对象的属性 y 的值，用于控制 colorPicket 对象的显示位置。
		*colorPicket.changeHandler=new Handler(this,this.onChangeColor,[colorPicket]);//设置 colorPicket 的颜色改变回调函数。
		*Laya.stage.addChild(colorPicket);//将此 colorPicket 对象添加到显示列表。
		*}
	*private onChangeColor(colorPicket:ColorPicker):void {
		*console.log("当前选择的颜色： "+colorPicket.selectedColor);
		*}
	*}
*/
//class laya.ui.ColorPicker extends laya.ui.Component
var ColorPicker=(function(_super){
	function ColorPicker(){
		/**
		*当颜色发生改变时执行的函数处理器。
		*默认返回参数color：颜色值字符串。
		*/
		this.changeHandler=null;
		/**
		*@private
		*指定每个正方形的颜色小格子的宽高（以像素为单位）。
		*/
		this._gridSize=11;
		/**
		*@private
		*表示颜色样本列表面板的背景颜色值。
		*/
		this._bgColor="#ffffff";
		/**
		*@private
		*表示颜色样本列表面板的边框颜色值。
		*/
		this._borderColor="#000000";
		/**
		*@private
		*表示颜色样本列表面板选择或输入的颜色值。
		*/
		this._inputColor="#000000";
		/**
		*@private
		*表示颜色输入框的背景颜色值。
		*/
		this._inputBgColor="#efefef";
		/**
		*@private
		*表示颜色样本列表面板。
		*/
		this._colorPanel=null;
		/**
		*@private
		*表示颜色网格。
		*/
		this._colorTiles=null;
		/**
		*@private
		*表示颜色块显示对象。
		*/
		this._colorBlock=null;
		/**
		*@private
		*表示颜色输入框控件 <code>Input</code> 。
		*/
		this._colorInput=null;
		/**
		*@private
		*表示点击后显示颜色样本列表面板的按钮控件 <code>Button</code> 。
		*/
		this._colorButton=null;
		/**
		*@private
		*表示颜色值列表。
		*/
		this._colors=[];
		/**
		*@private
		*表示选择的颜色值。
		*/
		this._selectedColor="#000000";
		/**@private */
		this._panelChanged=false;
		ColorPicker.__super.call(this);
	}

	__class(ColorPicker,'laya.ui.ColorPicker',_super);
	var __proto=ColorPicker.prototype;
	/**@inheritDoc */
	__proto.destroy=function(destroyChild){
		(destroyChild===void 0)&& (destroyChild=true);
		_super.prototype.destroy.call(this,destroyChild);
		this._colorPanel && this._colorPanel.destroy(destroyChild);
		this._colorButton && this._colorButton.destroy(destroyChild);
		this._colorPanel=null;
		this._colorTiles=null;
		this._colorBlock=null;
		this._colorInput=null;
		this._colorButton=null;
		this._colors=null;
		this.changeHandler=null;
	}

	/**@inheritDoc */
	__proto.createChildren=function(){
		this.addChild(this._colorButton=new Button());
		this._colorPanel=new Box();
		this._colorPanel.size(230,166);
		this._colorPanel.addChild(this._colorTiles=new Sprite());
		this._colorPanel.addChild(this._colorBlock=new Sprite());
		this._colorPanel.addChild(this._colorInput=new Input());
	}

	/**@inheritDoc */
	__proto.initialize=function(){
		this._colorButton.on("click",this,this.onColorButtonClick);
		this._colorBlock.pos(5,5);
		this._colorInput.pos(60,5);
		this._colorInput.size(60,20);
		this._colorInput.on("change",this,this.onColorInputChange);
		this._colorInput.on("keydown",this,this.onColorFieldKeyDown);
		this._colorTiles.pos(5,30);
		this._colorTiles.on("mousemove",this,this.onColorTilesMouseMove);
		this._colorTiles.on("click",this,this.onColorTilesClick);
		this._colorTiles.size(20 *this._gridSize,12 *this._gridSize);
		this._colorPanel.on("mousedown",this,this.onPanelMouseDown);
		this.bgColor=this._bgColor;
	}

	__proto.onPanelMouseDown=function(e){
		e.stopPropagation();
	}

	/**
	*改变颜色样本列表面板。
	*/
	__proto.changePanel=function(){
		this._panelChanged=false;
		var g=this._colorPanel.graphics;
		g.clear();
		g.drawRect(0,0,230,166,this._bgColor,this._borderColor);
		this.drawBlock(this._selectedColor);
		this._colorInput.borderColor=this._borderColor;
		this._colorInput.bgColor=this._inputBgColor;
		this._colorInput.color=this._inputColor;
		g=this._colorTiles.graphics;
		g.clear();
		var mainColors=[0x000000,0x333333,0x666666,0x999999,0xCCCCCC,0xFFFFFF,0xFF0000,0x00FF00,0x0000FF,0xFFFF00,0x00FFFF,0xFF00FF];
		for (var i=0;i < 12;i++){
			for (var j=0;j < 20;j++){
				var color=0;
				if (j===0)color=mainColors[i];
				else if (j===1)color=0x000000;
				else color=(((i *3+j / 6)% 3 << 0)+((i / 6)<< 0)*3)*0x33 << 16 | j % 6 *0x33 << 8 | (i << 0)% 6 *0x33;
				var strColor=UIUtils.toColor(color);
				this._colors.push(strColor);
				var x=j *this._gridSize;
				var y=i *this._gridSize;
				g.drawRect(x,y,this._gridSize,this._gridSize,strColor,"#000000");
			}
		}
	}

	/**
	*颜色样本列表面板的显示按钮的 <code>Event.MOUSE_DOWN</code> 事件侦听处理函数。
	*/
	__proto.onColorButtonClick=function(e){
		if (this._colorPanel.parent)this.close();
		else this.open();
	}

	/**
	*打开颜色样本列表面板。
	*/
	__proto.open=function(){
		var p=this.localToGlobal(new Point());
		var px=p.x+this._colorPanel.width <=Laya.stage.width ? p.x :Laya.stage.width-this._colorPanel.width;
		var py=p.y+this._colorButton.height;
		py=py+this._colorPanel.height <=Laya.stage.height ? py :p.y-this._colorPanel.height;
		this._colorPanel.pos(px,py);
		this._colorPanel.zOrder=1001;
		Laya._currentStage.addChild(this._colorPanel);
		Laya.stage.on("mousedown",this,this.removeColorBox);
	}

	/**
	*关闭颜色样本列表面板。
	*/
	__proto.close=function(){
		Laya.stage.off("mousedown",this,this.removeColorBox);
		this._colorPanel.removeSelf();
	}

	/**
	*舞台的 <code>Event.MOUSE_DOWN</code> 事件侦听处理函数。
	*/
	__proto.removeColorBox=function(e){
		this.close();
	}

	/**
	*小格子色块的 <code>Event.KEY_DOWN</code> 事件侦听处理函数。
	*/
	__proto.onColorFieldKeyDown=function(e){
		if (e.keyCode==13){
			if (this._colorInput.text)this.selectedColor=this._colorInput.text;
			else this.selectedColor=null;
			this.close();
			e.stopPropagation();
		}
	}

	/**
	*颜色值输入框 <code>Event.CHANGE</code> 事件侦听处理函数。
	*/
	__proto.onColorInputChange=function(e){
		if (this._colorInput.text)this.drawBlock(this._colorInput.text);
		else this.drawBlock("#FFFFFF");
	}

	/**
	*小格子色块的 <code>Event.CLICK</code> 事件侦听处理函数。
	*/
	__proto.onColorTilesClick=function(e){
		this.selectedColor=this.getColorByMouse();
		this.close();
	}

	/**
	*@private
	*小格子色块的 <code>Event.MOUSE_MOVE</code> 事件侦听处理函数。
	*/
	__proto.onColorTilesMouseMove=function(e){
		this._colorInput.focus=false;
		var color=this.getColorByMouse();
		this._colorInput.text=color;
		this.drawBlock(color);
	}

	/**
	*通过鼠标位置取对应的颜色块的颜色值。
	*/
	__proto.getColorByMouse=function(){
		var point=this._colorTiles.getMousePoint();
		var x=Math.floor(point.x / this._gridSize);
		var y=Math.floor(point.y / this._gridSize);
		return this._colors[y *20+x];
	}

	/**
	*绘制颜色块。
	*@param color 需要绘制的颜色块的颜色值。
	*/
	__proto.drawBlock=function(color){
		var g=this._colorBlock.graphics;
		g.clear();
		var showColor=color ? color :"#ffffff";
		g.drawRect(0,0,50,20,showColor,this._borderColor);
		color || g.drawLine(0,0,50,20,"#ff0000");
	}

	/**
	*改变颜色。
	*/
	__proto.changeColor=function(){
		var g=this.graphics;
		g.clear();
		var showColor=this._selectedColor || "#000000";
		g.drawRect(0,0,this._colorButton.width,this._colorButton.height,showColor);
	}

	/**@private */
	__proto._setPanelChanged=function(){
		if (!this._panelChanged){
			this._panelChanged=true;
			this.callLater(this.changePanel);
		}
	}

	/**
	*表示颜色输入框的背景颜色值。
	*/
	__getset(0,__proto,'inputBgColor',function(){
		return this._inputBgColor;
		},function(value){
		this._inputBgColor=value;
		this._setPanelChanged();
	});

	/**
	*表示选择的颜色值。
	*/
	__getset(0,__proto,'selectedColor',function(){
		return this._selectedColor;
		},function(value){
		if (this._selectedColor !=value){
			this._selectedColor=this._colorInput.text=value;
			this.drawBlock(value);
			this.changeColor();
			this.changeHandler && this.changeHandler.runWith(this._selectedColor);
			this.event("change",Event.EMPTY.setTo("change",this,this));
		}
	});

	/**
	*@copy laya.ui.Button#skin
	*/
	__getset(0,__proto,'skin',function(){
		return this._colorButton.skin;
		},function(value){
		this._colorButton.skin=value;
		this.changeColor();
	});

	/**
	*表示颜色样本列表面板的背景颜色值。
	*/
	__getset(0,__proto,'bgColor',function(){
		return this._bgColor;
		},function(value){
		this._bgColor=value;
		this._setPanelChanged();
	});

	/**
	*表示颜色样本列表面板的边框颜色值。
	*/
	__getset(0,__proto,'borderColor',function(){
		return this._borderColor;
		},function(value){
		this._borderColor=value;
		this._setPanelChanged();
	});

	/**
	*表示颜色样本列表面板选择或输入的颜色值。
	*/
	__getset(0,__proto,'inputColor',function(){
		return this._inputColor;
		},function(value){
		this._inputColor=value;
		this._setPanelChanged();
	});

	return ColorPicker;
})(Component)


/**
*<code>ComboBox</code> 组件包含一个下拉列表，用户可以从该列表中选择单个值。
*
*@example <caption>以下示例代码，创建了一个 <code>ComboBox</code> 实例。</caption>
*package
*{
	*import laya.ui.ComboBox;
	*import laya.utils.Handler;
	*public class ComboBox_Example
	*{
		*public function ComboBox_Example()
		*{
			*Laya.init(640,800);//设置游戏画布宽高。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load("resource/ui/button.png",Handler.create(this,onLoadComplete));//加载资源。
			*}
		*private function onLoadComplete():void
		*{
			*trace("资源加载完成！");
			*var comboBox:ComboBox=new ComboBox("resource/ui/button.png","item0,item1,item2,item3,item4,item5");//创建一个 ComboBox 类的实例对象 comboBox ,传入它的皮肤和标签集。
			*comboBox.x=100;//设置 comboBox 对象的属性 x 的值，用于控制 comboBox 对象的显示位置。
			*comboBox.y=100;//设置 comboBox 对象的属性 x 的值，用于控制 comboBox 对象的显示位置。
			*comboBox.selectHandler=new Handler(this,onSelect);//设置 comboBox 选择项改变时执行的处理器。
			*Laya.stage.addChild(comboBox);//将此 comboBox 对象添加到显示列表。
			*}
		*private function onSelect(index:int):void
		*{
			*trace("当前选中的项对象索引： ",index);
			*}
		*}
	*}
*@example
*Laya.init(640,800);//设置游戏画布宽高。
*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
*Laya.loader.load("resource/ui/button.png",laya.utils.Handler.create(this,loadComplete));//加载资源
*function loadComplete(){
	*console.log("资源加载完成！");
	*var comboBox=new laya.ui.ComboBox("resource/ui/button.png","item0,item1,item2,item3,item4,item5");//创建一个 ComboBox 类的实例对象 comboBox ,传入它的皮肤和标签集。
	*comboBox.x=100;//设置 comboBox 对象的属性 x 的值，用于控制 comboBox 对象的显示位置。
	*comboBox.y=100;//设置 comboBox 对象的属性 x 的值，用于控制 comboBox 对象的显示位置。
	*comboBox.selectHandler=new laya.utils.Handler(this,onSelect);//设置 comboBox 选择项改变时执行的处理器。
	*Laya.stage.addChild(comboBox);//将此 comboBox 对象添加到显示列表。
	*}
*function onSelect(index)
*{
	*console.log("当前选中的项对象索引： ",index);
	*}
*@example
*import ComboBox=laya.ui.ComboBox;
*import Handler=laya.utils.Handler;
*class ComboBox_Example {
	*constructor(){
		*Laya.init(640,800);//设置游戏画布宽高。
		*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
		*Laya.loader.load("resource/ui/button.png",Handler.create(this,this.onLoadComplete));//加载资源。
		*}
	*private onLoadComplete():void {
		*console.log("资源加载完成！");
		*var comboBox:ComboBox=new ComboBox("resource/ui/button.png","item0,item1,item2,item3,item4,item5");//创建一个 ComboBox 类的实例对象 comboBox ,传入它的皮肤和标签集。
		*comboBox.x=100;//设置 comboBox 对象的属性 x 的值，用于控制 comboBox 对象的显示位置。
		*comboBox.y=100;//设置 comboBox 对象的属性 x 的值，用于控制 comboBox 对象的显示位置。
		*comboBox.selectHandler=new Handler(this,this.onSelect);//设置 comboBox 选择项改变时执行的处理器。
		*Laya.stage.addChild(comboBox);//将此 comboBox 对象添加到显示列表。
		*}
	*private onSelect(index:number):void {
		*console.log("当前选中的项对象索引： ",index);
		*}
	*}
*
*/
//class laya.ui.ComboBox extends laya.ui.Component
var ComboBox=(function(_super){
	function ComboBox(skin,labels){
		/**@private */
		this._visibleNum=6;
		/**
		*@private
		*/
		this._button=null;
		/**
		*@private
		*/
		this._list=null;
		/**
		*@private
		*/
		this._isOpen=false;
		/**
		*@private
		*/
		this._itemSize=12;
		/**
		*@private
		*/
		this._labels=[];
		/**
		*@private
		*/
		this._selectedIndex=-1;
		/**
		*@private
		*/
		this._selectHandler=null;
		/**
		*@private
		*/
		this._itemHeight=NaN;
		/**
		*@private
		*/
		this._listHeight=NaN;
		/**
		*@private
		*/
		this._listChanged=false;
		/**
		*@private
		*/
		this._itemChanged=false;
		/**
		*@private
		*/
		this._scrollBarSkin=null;
		/**
		*@private
		*/
		this._isCustomList=false;
		/**
		*渲染项，用来显示下拉列表展示对象
		*/
		this.itemRender=null;
		ComboBox.__super.call(this);
		this._itemColors=Styles.comboBoxItemColors;
		this.skin=skin;
		this.labels=labels;
	}

	__class(ComboBox,'laya.ui.ComboBox',_super);
	var __proto=ComboBox.prototype;
	/**@inheritDoc */
	__proto.destroy=function(destroyChild){
		(destroyChild===void 0)&& (destroyChild=true);
		_super.prototype.destroy.call(this,destroyChild);
		this._button && this._button.destroy(destroyChild);
		this._list && this._list.destroy(destroyChild);
		this._button=null;
		this._list=null;
		this._itemColors=null;
		this._labels=null;
		this._selectHandler=null;
	}

	/**@inheritDoc */
	__proto.createChildren=function(){
		this.addChild(this._button=new Button());
		this._button.text.align="left";
		this._button.labelPadding="0,0,0,5";
		this._button.on("mousedown",this,this.onButtonMouseDown);
	}

	__proto._createList=function(){
		this._list=new List();
		if (this._scrollBarSkin)this._list.vScrollBarSkin=this._scrollBarSkin;
		this._setListEvent(this._list);
	}

	__proto._setListEvent=function(list){
		this._list.selectEnable=true;
		this._list.on("mousedown",this,this.onListDown);
		this._list.mouseHandler=Handler.create(this,this.onlistItemMouse,null,false);
		if (this._list.scrollBar)this._list.scrollBar.on("mousedown",this,this.onScrollBarDown);
	}

	/**
	*@private
	*/
	__proto.onListDown=function(e){
		e.stopPropagation();
	}

	__proto.onScrollBarDown=function(e){
		e.stopPropagation();
	}

	__proto.onButtonMouseDown=function(e){
		this.callLater(this.switchTo,[!this._isOpen]);
	}

	/**
	*@private
	*/
	__proto.changeList=function(){
		this._listChanged=false;
		var labelWidth=this.width-2;
		var labelColor=this._itemColors[2];
		this._itemHeight=this._itemSize+6;
		this._list.itemRender=this.itemRender || {type:"Box",child:[{type:"Label",props:{name:"label",x:1,padding:"3,3,3,3",width:labelWidth,height:this._itemHeight,fontSize:this._itemSize,color:labelColor}}]};
		this._list.repeatY=this._visibleNum;
		this._list.refresh();
	}

	/**
	*@private
	*下拉列表的鼠标事件响应函数。
	*/
	__proto.onlistItemMouse=function(e,index){
		var type=e.type;
		if (type==="mouseover" || type==="mouseout"){
			if (this._isCustomList)return;
			var box=this._list.getCell(index);
			if (!box)return;
			var label=box.getChildByName("label");
			if (label){
				if (type==="mouseover"){
					label.bgColor=this._itemColors[0];
					label.color=this._itemColors[1];
					}else {
					label.bgColor=null;
					label.color=this._itemColors[2];
				}
			}
			}else if (type==="click"){
			this.selectedIndex=index;
			this.isOpen=false;
		}
	}

	/**
	*@private
	*/
	__proto.switchTo=function(value){
		this.isOpen=value;
	}

	/**
	*更改下拉列表的打开状态。
	*/
	__proto.changeOpen=function(){
		this.isOpen=!this._isOpen;
	}

	/**
	*更改下拉列表。
	*/
	__proto.changeItem=function(){
		this._itemChanged=false;
		this._listHeight=this._labels.length > 0 ? Math.min(this._visibleNum,this._labels.length)*this._itemHeight :this._itemHeight;
		if (!this._isCustomList){
			var g=this._list.graphics;
			g.clear();
			g.drawRect(0,0,this.width-1,this._listHeight,this._itemColors[4],this._itemColors[3]);
		};
		var a=this._list.array || [];
		a.length=0;
		for (var i=0,n=this._labels.length;i < n;i++){
			a.push({label:this._labels[i]});
		}
		this._list.height=this._listHeight;
		this._list.array=a;
	}

	__proto.changeSelected=function(){
		this._button.label=this.selectedLabel;
	}

	__proto._onStageMouseWheel=function(e){
		if(!this._list||this._list.contains(e.target))return;
		this.removeList(null);
	}

	/**
	*关闭下拉列表。
	*/
	__proto.removeList=function(e){
		Laya.stage.off("mousedown",this,this.removeList);
		Laya.stage.off("mousewheel",this,this._onStageMouseWheel);
		this.isOpen=false;
	}

	/**
	*表示选择的下拉列表项的索引。
	*/
	__getset(0,__proto,'selectedIndex',function(){
		return this._selectedIndex;
		},function(value){
		if (this._selectedIndex !=value){
			this._selectedIndex=value;
			if (this._labels.length > 0)this.changeSelected();
			else this.callLater(this.changeSelected);
			this.event("change",[Event.EMPTY.setTo("change",this,this)]);
			this._selectHandler && this._selectHandler.runWith(this._selectedIndex);
		}
	});

	/**@inheritDoc */
	__getset(0,__proto,'measureHeight',function(){
		return this._button.height;
	});

	/**
	*@copy laya.ui.Button#skin
	*/
	__getset(0,__proto,'skin',function(){
		return this._button.skin;
		},function(value){
		if (this._button.skin !=value){
			this._button.skin=value;
			this._listChanged=true;
		}
	});

	/**@inheritDoc */
	__getset(0,__proto,'measureWidth',function(){
		return this._button.width;
	});

	/**@inheritDoc */
	__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
		Laya.superSet(Component,this,'width',value);
		this._button.width=this._width;
		this._itemChanged=true;
		this._listChanged=true;
	});

	/**
	*表示选择的下拉列表项的的标签。
	*/
	__getset(0,__proto,'selectedLabel',function(){
		return this._selectedIndex >-1 && this._selectedIndex < this._labels.length ? this._labels[this._selectedIndex] :null;
		},function(value){
		this.selectedIndex=this._labels.indexOf(value);
	});

	/**
	*标签集合字符串。
	*/
	__getset(0,__proto,'labels',function(){
		return this._labels.join(",");
		},function(value){
		if (this._labels.length > 0)this.selectedIndex=-1;
		if (value)this._labels=value.split(",");
		else this._labels.length=0;
		this._itemChanged=true;
	});

	/**@inheritDoc */
	__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
		Laya.superSet(Component,this,'height',value);
		this._button.height=this._height;
	});

	/**
	*改变下拉列表的选择项时执行的处理器(默认返回参数index:int)。
	*/
	__getset(0,__proto,'selectHandler',function(){
		return this._selectHandler;
		},function(value){
		this._selectHandler=value;
	});

	/**
	*获取或设置没有滚动条的下拉列表中可显示的最大行数。
	*/
	__getset(0,__proto,'visibleNum',function(){
		return this._visibleNum;
		},function(value){
		this._visibleNum=value;
		this._listChanged=true;
	});

	/**
	*表示按钮文本标签是否为粗体字。
	*@see laya.display.Text#bold
	*/
	__getset(0,__proto,'labelBold',function(){
		return this._button.text.bold;
		},function(value){
		this._button.text.bold=value
	});

	/**
	*下拉列表项颜色。
	*<p><b>格式：</b>"悬停或被选中时背景颜色,悬停或被选中时标签颜色,标签颜色,边框颜色,背景颜色"</p>
	*/
	__getset(0,__proto,'itemColors',function(){
		return String(this._itemColors)
		},function(value){
		this._itemColors=UIUtils.fillArray(this._itemColors,value,String);
		this._listChanged=true;
	});

	/**
	*下拉列表项标签的字体大小。
	*/
	__getset(0,__proto,'itemSize',function(){
		return this._itemSize;
		},function(value){
		this._itemSize=value;
		this._listChanged=true;
	});

	/**
	*获取对 <code>ComboBox</code> 组件所包含的 <code>VScrollBar</code> 滚动条组件的引用。
	*/
	__getset(0,__proto,'scrollBar',function(){
		return this.list.scrollBar;
	});

	/**
	*表示下拉列表的打开状态。
	*/
	__getset(0,__proto,'isOpen',function(){
		return this._isOpen;
		},function(value){
		if (this._isOpen !=value){
			this._isOpen=value;
			this._button.selected=this._isOpen;
			if (this._isOpen){
				this._list || this._createList();
				this._listChanged && !this._isCustomList && this.changeList();
				this._itemChanged && this.changeItem();
				var p=this.localToGlobal(Point.TEMP.setTo(0,0));
				var py=p.y+this._button.height;
				py=py+this._listHeight <=Laya.stage.height ? py :p.y-this._listHeight;
				this._list.pos(p.x,py);
				this._list.zOrder=1001;
				Laya._currentStage.addChild(this._list);
				Laya.stage.once("mousedown",this,this.removeList);
				Laya.stage.on("mousewheel",this,this._onStageMouseWheel);
				this._list.selectedIndex=this._selectedIndex;
				}else {
				this._list && this._list.removeSelf();
			}
		}
	});

	/**
	*滚动条皮肤。
	*/
	__getset(0,__proto,'scrollBarSkin',function(){
		return this._scrollBarSkin;
		},function(value){
		this._scrollBarSkin=value;
	});

	/**
	*<p>当前实例的位图 <code>AutoImage</code> 实例的有效缩放网格数据。</p>
	*<p>数据格式："上边距,右边距,下边距,左边距,是否重复填充(值为0：不重复填充，1：重复填充)"，以逗号分隔。
	*<ul><li>例如："4,4,4,4,1"</li></ul></p>
	*@see laya.ui.AutoBitmap.sizeGrid
	*/
	__getset(0,__proto,'sizeGrid',function(){
		return this._button.sizeGrid;
		},function(value){
		this._button.sizeGrid=value;
	});

	/**
	*获取对 <code>ComboBox</code> 组件所包含的 <code>Button</code> 组件的引用。
	*/
	__getset(0,__proto,'button',function(){
		return this._button;
	});

	/**
	*获取对 <code>ComboBox</code> 组件所包含的 <code>List</code> 列表组件的引用。
	*/
	__getset(0,__proto,'list',function(){
		this._list || this._createList();
		return this._list;
		},function(value){
		if (value){
			value.removeSelf();
			this._isCustomList=true;
			this._list=value;
			this._setListEvent(value);
			this._itemHeight=value.getCell(0).height+value.spaceY;
		}
	});

	/**@inheritDoc */
	__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
		this._dataSource=value;
		if (((typeof value=='number')&& Math.floor(value)==value)|| (typeof value=='string'))this.selectedIndex=parseInt(value);
		else if ((value instanceof Array))this.labels=(value).join(",");
		else Laya.superSet(Component,this,'dataSource',value);
	});

	/**
	*获取或设置对 <code>ComboBox</code> 组件所包含的 <code>Button</code> 组件的文本标签颜色。
	*<p><b>格式：</b>upColor,overColor,downColor,disableColor</p>
	*/
	__getset(0,__proto,'labelColors',function(){
		return this._button.labelColors;
		},function(value){
		if (this._button.labelColors !=value){
			this._button.labelColors=value;
		}
	});

	/**
	*获取或设置对 <code>ComboBox</code> 组件所包含的 <code>Button</code> 组件的文本边距。
	*<p><b>格式：</b>上边距,右边距,下边距,左边距</p>
	*/
	__getset(0,__proto,'labelPadding',function(){
		return this._button.text.padding.join(",");
		},function(value){
		this._button.text.padding=UIUtils.fillArray(Styles.labelPadding,value,Number);
	});

	/**
	*获取或设置对 <code>ComboBox</code> 组件所包含的 <code>Button</code> 组件的标签字体大小。
	*/
	__getset(0,__proto,'labelSize',function(){
		return this._button.text.fontSize;
		},function(value){
		this._button.text.fontSize=value
	});

	/**
	*表示按钮文本标签的字体名称，以字符串形式表示。
	*@see laya.display.Text#font
	*/
	__getset(0,__proto,'labelFont',function(){
		return this._button.text.font;
		},function(value){
		this._button.text.font=value
	});

	/**
	*表示按钮的状态值。
	*@see laya.ui.Button#stateNum
	*/
	__getset(0,__proto,'stateNum',function(){
		return this._button.stateNum;
		},function(value){
		this._button.stateNum=value
	});

	return ComboBox;
})(Component)


/**
*<code>ScrollBar</code> 组件是一个滚动条组件。
*<p>当数据太多以至于显示区域无法容纳时，最终用户可以使用 <code>ScrollBar</code> 组件控制所显示的数据部分。</p>
*<p> 滚动条由四部分组成：两个箭头按钮、一个轨道和一个滑块。 </p> *
*
*@see laya.ui.VScrollBar
*@see laya.ui.HScrollBar
*/
//class laya.ui.ScrollBar extends laya.ui.Component
var ScrollBar=(function(_super){
	function ScrollBar(skin){
		/**滚动衰减系数*/
		this.rollRatio=0.95;
		/**滚动变化时回调，回传value参数。*/
		this.changeHandler=null;
		/**是否缩放滑动条，默认值为true。 */
		this.scaleBar=true;
		/**一个布尔值，指定是否自动隐藏滚动条(无需滚动时)，默认值为false。*/
		this.autoHide=false;
		/**橡皮筋效果极限距离，0为没有橡皮筋效果。*/
		this.elasticDistance=0;
		/**橡皮筋回弹时间，单位为毫秒。*/
		this.elasticBackTime=500;
		/**上按钮 */
		this.upButton=null;
		/**下按钮 */
		this.downButton=null;
		/**滑条 */
		this.slider=null;
		/**@private */
		this._scrollSize=1;
		/**@private */
		this._skin=null;
		/**@private */
		this._thumbPercent=1;
		/**@private */
		this._target=null;
		/**@private */
		this._lastPoint=null;
		/**@private */
		this._lastOffset=0;
		/**@private */
		this._checkElastic=false;
		/**@private */
		this._isElastic=false;
		/**@private */
		this._value=NaN;
		/**@private */
		this._hide=false;
		/**@private */
		this._clickOnly=true;
		/**@private */
		this._offsets=null;
		ScrollBar.__super.call(this);
		this._showButtons=UIConfig.showButtons;
		this._touchScrollEnable=UIConfig.touchScrollEnable;
		this._mouseWheelEnable=UIConfig.mouseWheelEnable;
		this.skin=skin;
		this.max=1;
	}

	__class(ScrollBar,'laya.ui.ScrollBar',_super);
	var __proto=ScrollBar.prototype;
	/**@inheritDoc */
	__proto.destroy=function(destroyChild){
		(destroyChild===void 0)&& (destroyChild=true);
		this.stopScroll();
		this.target=null;
		_super.prototype.destroy.call(this,destroyChild);
		this.upButton && this.upButton.destroy(destroyChild);
		this.downButton && this.downButton.destroy(destroyChild);
		this.slider && this.slider.destroy(destroyChild);
		this.upButton=this.downButton=null;
		this.slider=null;
		this.changeHandler=null;
		this._offsets=null;
	}

	/**@inheritDoc */
	__proto.createChildren=function(){
		this.addChild(this.slider=new Slider());
		this.addChild(this.upButton=new Button());
		this.addChild(this.downButton=new Button());
	}

	/**@inheritDoc */
	__proto.initialize=function(){
		this.slider.showLabel=false;
		this.slider.on("change",this,this.onSliderChange);
		this.slider.setSlider(0,0,0);
		this.upButton.on("mousedown",this,this.onButtonMouseDown);
		this.downButton.on("mousedown",this,this.onButtonMouseDown);
	}

	/**
	*@private
	*滑块位置发生改变的处理函数。
	*/
	__proto.onSliderChange=function(){
		if(this._value !=this.slider.value)this.value=this.slider.value;
	}

	/**
	*@private
	*向上和向下按钮的 <code>Event.MOUSE_DOWN</code> 事件侦听处理函数。
	*/
	__proto.onButtonMouseDown=function(e){
		var isUp=e.currentTarget===this.upButton;
		this.slide(isUp);
		Laya.timer.once(Styles.scrollBarDelayTime,this,this.startLoop,[isUp]);
		Laya.stage.once("mouseup",this,this.onStageMouseUp);
	}

	/**@private */
	__proto.startLoop=function(isUp){
		Laya.timer.frameLoop(1,this,this.slide,[isUp]);
	}

	/**@private */
	__proto.slide=function(isUp){
		if (isUp)this.value-=this._scrollSize;
		else this.value+=this._scrollSize;
	}

	/**
	*@private
	*舞台的 <code>Event.MOUSE_DOWN</code> 事件侦听处理函数。
	*/
	__proto.onStageMouseUp=function(e){
		Laya.timer.clear(this,this.startLoop);
		Laya.timer.clear(this,this.slide);
	}

	/**
	*@private
	*更改对象的皮肤及位置。
	*/
	__proto.changeScrollBar=function(){
		this.upButton.visible=this._showButtons;
		this.downButton.visible=this._showButtons;
		if (this._showButtons){
			this.upButton.skin=this._skin.replace(".png","$up.png");
			this.downButton.skin=this._skin.replace(".png","$down.png");
		}
		if (this.slider.isVertical)this.slider.y=this._showButtons ? this.upButton.height :0;
		else this.slider.x=this._showButtons ? this.upButton.width :0;
		this.resetPositions();
		this.repaint();
	}

	/**@inheritDoc */
	__proto.changeSize=function(){
		_super.prototype.changeSize.call(this);
		this.repaint();
		this.resetPositions();
		this.event("change");
		this.changeHandler && this.changeHandler.runWith(this.value);
	}

	/**@private */
	__proto.resetPositions=function(){
		if (this.slider.isVertical)this.slider.height=this.height-(this._showButtons ? (this.upButton.height+this.downButton.height):0);
		else this.slider.width=this.width-(this._showButtons ? (this.upButton.width+this.downButton.width):0);
		this.resetButtonPosition();
	}

	/**@private */
	__proto.resetButtonPosition=function(){
		if (this.slider.isVertical)this.downButton.y=this.slider.y+this.slider.height;
		else this.downButton.x=this.slider.x+this.slider.width;
	}

	/**
	*设置滚动条信息。
	*@param min 滚动条最小位置值。
	*@param max 滚动条最大位置值。
	*@param value 滚动条当前位置值。
	*/
	__proto.setScroll=function(min,max,value){
		this.runCallLater(this.changeSize);
		this.slider.setSlider(min,max,value);
		this.slider.bar.visible=max > 0;
		if (!this._hide && this.autoHide)this.visible=false;
	}

	/**@private */
	__proto.onTargetMouseWheel=function(e){
		this.value-=e.delta *this._scrollSize;
		this.target=this._target;
	}

	/**@private */
	__proto.onTargetMouseDown=function(e){
		this._clickOnly=true;
		this._lastOffset=0;
		this._checkElastic=false;
		this._lastPoint || (this._lastPoint=new Point());
		this._lastPoint.setTo(Laya.stage.mouseX,Laya.stage.mouseY);
		Laya.timer.clear(this,this.tweenMove);
		Tween.clearTween(this);
		Laya.stage.once("mouseup",this,this.onStageMouseUp2);
		Laya.stage.once("mouseout",this,this.onStageMouseUp2);
		Laya.timer.frameLoop(1,this,this.loop);
	}

	/**@private */
	__proto.loop=function(){
		var mouseY=Laya.stage.mouseY;
		var mouseX=Laya.stage.mouseX;
		this._lastOffset=this.isVertical ? (mouseY-this._lastPoint.y):(mouseX-this._lastPoint.x);
		if (this._clickOnly){
			if (Math.abs(this._lastOffset *(this.isVertical ? Laya.stage._canvasTransform.getScaleY():Laya.stage._canvasTransform.getScaleX()))> 1){
				this._clickOnly=false;
				this._offsets || (this._offsets=[]);
				this._offsets.length=0;
				this._target.mouseEnabled=false;
				if (!this.hide && this.autoHide){
					this.alpha=1;
					this.visible=true;
				}
				this.event("start");
			}else return;
		}
		this._offsets.push(this._lastOffset);
		this._lastPoint.x=mouseX;
		this._lastPoint.y=mouseY;
		if (this._lastOffset===0)return;
		if (!this._checkElastic){
			if (this.elasticDistance > 0){
				if (!this._checkElastic && this._lastOffset !=0){
					if ((this._lastOffset > 0 && this._value <=this.min)|| (this._lastOffset < 0 && this._value >=this.max)){
						this._isElastic=true;
						this._checkElastic=true;
						}else {
						this._isElastic=false;
					}
				}
				}else {
				this._checkElastic=true;
			}
		}
		if (this._isElastic){
			if (this._value <=this.min){
				this.value-=this._lastOffset *Math.max(0,(1-((this.min-this._value)/ this.elasticDistance)));
				}else if (this._value >=this.max){
				this.value-=this._lastOffset *Math.max(0,(1-((this._value-this.max)/ this.elasticDistance)));
			}
			}else {
			this.value-=this._lastOffset;
		}
	}

	/**@private */
	__proto.onStageMouseUp2=function(e){
		Laya.stage.off("mouseup",this,this.onStageMouseUp2);
		Laya.stage.off("mouseout",this,this.onStageMouseUp2);
		Laya.timer.clear(this,this.loop);
		if (this._clickOnly){
			if(this._value>=this.min&&this._value<=this.max)
				return;
		}
		this._target.mouseEnabled=true;
		if (this._isElastic){
			if (this._value < this.min){
				Tween.to(this,{value:this.min},this.elasticBackTime,Ease.sineOut,Handler.create(this,this.elasticOver));
				}else if (this._value > this.max){
				Tween.to(this,{value:this.max},this.elasticBackTime,Ease.sineOut,Handler.create(this,this.elasticOver));
			}
			}else {
			if (!this._offsets)return;
			if (this._offsets.length < 1){
				this._offsets[0]=this.isVertical ? Laya.stage.mouseY-this._lastPoint.y :Laya.stage.mouseX-this._lastPoint.x;
			};
			var offset=0;
			var n=Math.min(this._offsets.length,3);
			for (var i=0;i < n;i++){
				offset+=this._offsets[this._offsets.length-1-i];
			}
			this._lastOffset=offset / n;
			offset=Math.abs(this._lastOffset);
			if (offset < 2){
				this.event("end");
				return;
			}
			if (offset > 60)this._lastOffset=this._lastOffset > 0 ? 60 :-60;
			var dis=Math.round(Math.abs(this.elasticDistance *(this._lastOffset / 240)));
			Laya.timer.frameLoop(1,this,this.tweenMove,[dis]);
		}
	}

	/**@private */
	__proto.elasticOver=function(){
		this._isElastic=false;
		if (!this.hide && this.autoHide){
			Tween.to(this,{alpha:0},500);
		}
		this.event("end");
	}

	/**@private */
	__proto.tweenMove=function(maxDistance){
		this._lastOffset *=this.rollRatio;
		var tarSpeed=NaN;
		if (maxDistance > 0){
			if (this._lastOffset > 0 && this.value <=this.min){
				this._isElastic=true;
				tarSpeed=-(this.min-maxDistance-this.value)*0.5;
				if (this._lastOffset > tarSpeed)this._lastOffset=tarSpeed;
				}else if (this._lastOffset < 0 && this.value >=this.max){
				this._isElastic=true;
				tarSpeed=-(this.max+maxDistance-this.value)*0.5;
				if (this._lastOffset < tarSpeed)this._lastOffset=tarSpeed;
			}
		}
		this.value-=this._lastOffset;
		if (Math.abs(this._lastOffset)< 1){
			Laya.timer.clear(this,this.tweenMove);
			if (this._isElastic){
				if (this._value < this.min){
					Tween.to(this,{value:this.min},this.elasticBackTime,Ease.sineOut,Handler.create(this,this.elasticOver));
					}else if (this._value > this.max){
					Tween.to(this,{value:this.max},this.elasticBackTime,Ease.sineOut,Handler.create(this,this.elasticOver));
					}else {
					this.elasticOver();
				}
				return;
			}
			this.event("end");
			if (!this.hide && this.autoHide){
				Tween.to(this,{alpha:0},500);
			}
		}
	}

	/**
	*停止滑动。
	*/
	__proto.stopScroll=function(){
		this.onStageMouseUp2(null);
		Laya.timer.clear(this,this.tweenMove);
		Tween.clearTween(this);
	}

	/**@inheritDoc */
	__getset(0,__proto,'measureHeight',function(){
		if (this.slider.isVertical)return 100;
		return this.slider.height;
	});

	/**
	*@copy laya.ui.Image#skin
	*/
	__getset(0,__proto,'skin',function(){
		return this._skin;
		},function(value){
		if (this._skin !=value){
			this._skin=value;
			this.slider.skin=this._skin;
			this.callLater(this.changeScrollBar);
		}
	});

	/**
	*获取或设置表示最高滚动位置的数字。
	*/
	__getset(0,__proto,'max',function(){
		return this.slider.max;
		},function(value){
		this.slider.max=value;
	});

	/**一个布尔值，指定是否显示向上、向下按钮，默认值为true。*/
	__getset(0,__proto,'showButtons',function(){
		return this._showButtons;
		},function(value){
		this._showButtons=value;
		this.callLater(this.changeScrollBar);
	});

	/**@inheritDoc */
	__getset(0,__proto,'measureWidth',function(){
		if (this.slider.isVertical)return this.slider.width;
		return 100;
	});

	/**
	*获取或设置表示最低滚动位置的数字。
	*/
	__getset(0,__proto,'min',function(){
		return this.slider.min;
		},function(value){
		this.slider.min=value;
	});

	/**
	*获取或设置表示当前滚动位置的数字。
	*/
	__getset(0,__proto,'value',function(){
		return this._value;
		},function(v){
		if (v!==this._value){
			this._value=v;
			if (!this._isElastic){
				if (this.slider._value !=v){
					this.slider._value=v;
					this.slider.changeValue();
				}
				this._value=this.slider._value;
			}
			this.event("change");
			this.changeHandler && this.changeHandler.runWith(this._value);
		}
	});

	/**
	*一个布尔值，指示滚动条是否为垂直滚动。如果值为true，则为垂直滚动，否则为水平滚动。
	*<p>默认值为：true。</p>
	*/
	__getset(0,__proto,'isVertical',function(){
		return this.slider.isVertical;
		},function(value){
		this.slider.isVertical=value;
	});

	/**
	*<p>当前实例的 <code>Slider</code> 实例的有效缩放网格数据。</p>
	*<p>数据格式："上边距,右边距,下边距,左边距,是否重复填充(值为0：不重复填充，1：重复填充)"，以逗号分隔。
	*<ul><li>例如："4,4,4,4,1"</li></ul></p>
	*@see laya.ui.AutoBitmap.sizeGrid
	*/
	__getset(0,__proto,'sizeGrid',function(){
		return this.slider.sizeGrid;
		},function(value){
		this.slider.sizeGrid=value;
	});

	/**获取或设置一个值，该值表示按下滚动条轨道时页面滚动的增量。 */
	__getset(0,__proto,'scrollSize',function(){
		return this._scrollSize;
		},function(value){
		this._scrollSize=value;
	});

	/**@inheritDoc */
	__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
		this._dataSource=value;
		if ((typeof value=='number')|| (typeof value=='string'))this.value=Number(value);
		else Laya.superSet(Component,this,'dataSource',value);
	});

	/**获取或设置一个值，该值表示滑条长度比例，值为：（0-1）。 */
	__getset(0,__proto,'thumbPercent',function(){
		return this._thumbPercent;
		},function(value){
		this.runCallLater(this.changeScrollBar);
		this.runCallLater(this.changeSize);
		value=value >=1 ? 0.99 :value;
		this._thumbPercent=value;
		if (this.scaleBar){
			if (this.slider.isVertical)this.slider.bar.height=Math.max(this.slider.height *value,Styles.scrollBarMinNum);
			else this.slider.bar.width=Math.max(this.slider.width *value,Styles.scrollBarMinNum);
		}
	});

	/**
	*设置滚动对象。
	*@see laya.ui.TouchScroll#target
	*/
	__getset(0,__proto,'target',function(){
		return this._target;
		},function(value){
		if (this._target){
			this._target.off("mousewheel",this,this.onTargetMouseWheel);
			this._target.off("mousedown",this,this.onTargetMouseDown);
		}
		this._target=value;
		if (value){
			this._mouseWheelEnable && this._target.on("mousewheel",this,this.onTargetMouseWheel);
			this._touchScrollEnable && this._target.on("mousedown",this,this.onTargetMouseDown);
		}
	});

	/**是否隐藏滚动条，不显示滚动条，但是可以正常滚动，默认为false。*/
	__getset(0,__proto,'hide',function(){
		return this._hide;
		},function(value){
		this._hide=value;
		this.visible=!value;
	});

	/**一个布尔值，指定是否开启触摸，默认值为true。*/
	__getset(0,__proto,'touchScrollEnable',function(){
		return this._touchScrollEnable;
		},function(value){
		this._touchScrollEnable=value;
		this.target=this._target;
	});

	/**一个布尔值，指定是否滑轮滚动，默认值为true。*/
	__getset(0,__proto,'mouseWheelEnable',function(){
		return this._mouseWheelEnable;
		},function(value){
		this._mouseWheelEnable=value;
	});

	/**
	*滚动的刻度值，滑动数值为tick的整数倍。默认值为1。
	*/
	__getset(0,__proto,'tick',function(){
		return this.slider.tick;
		},function(value){
		this.slider.tick=value;
	});

	return ScrollBar;
})(Component)


/**
*使用 <code>Slider</code> 控件，用户可以通过在滑块轨道的终点之间移动滑块来选择值。
*<p>滑块的当前值由滑块端点（对应于滑块的最小值和最大值）之间滑块的相对位置确定。</p>
*<p>滑块允许最小值和最大值之间特定间隔内的值。滑块还可以使用数据提示显示其当前值。</p>
*
*@see laya.ui.HSlider
*@see laya.ui.VSlider
*/
//class laya.ui.Slider extends laya.ui.Component
var Slider=(function(_super){
	function Slider(skin){
		/**
		*数据变化处理器。
		*<p>默认回调参数为滑块位置属性 <code>value</code>属性值：Number 。</p>
		*/
		this.changeHandler=null;
		/**
		*一个布尔值，指示是否为垂直滚动。如果值为true，则为垂直方向，否则为水平方向。
		*<p>默认值为：true。</p>
		*@default true
		*/
		this.isVertical=true;
		/**
		*一个布尔值，指示是否显示标签。
		*@default true
		*/
		this.showLabel=true;
		/**@private */
		this._allowClickBack=false;
		/**@private */
		this._max=100;
		/**@private */
		this._min=0;
		/**@private */
		this._tick=1;
		/**@private */
		this._value=0;
		/**@private */
		this._skin=null;
		/**@private */
		this._bg=null;
		/**@private */
		this._progress=null;
		/**@private */
		this._bar=null;
		/**@private */
		this._tx=NaN;
		/**@private */
		this._ty=NaN;
		/**@private */
		this._maxMove=NaN;
		/**@private */
		this._globalSacle=null;
		Slider.__super.call(this);
		this.skin=skin;
	}

	__class(Slider,'laya.ui.Slider',_super);
	var __proto=Slider.prototype;
	/**
	*@inheritDoc
	*/
	__proto.destroy=function(destroyChild){
		(destroyChild===void 0)&& (destroyChild=true);
		_super.prototype.destroy.call(this,destroyChild);
		this._bg && this._bg.destroy(destroyChild);
		this._bar && this._bar.destroy(destroyChild);
		this._progress && this._progress.destroy(destroyChild);
		this._bg=null;
		this._bar=null;
		this._progress=null;
		this.changeHandler=null;
	}

	/**@inheritDoc */
	__proto.createChildren=function(){
		this.addChild(this._bg=new Image());
		this.addChild(this._bar=new Button());
	}

	/**@inheritDoc */
	__proto.initialize=function(){
		this._bar.on("mousedown",this,this.onBarMouseDown);
		this._bg.sizeGrid=this._bar.sizeGrid="4,4,4,4,0";
		if (this._progress)this._progress.sizeGrid=this._bar.sizeGrid;
		this.allowClickBack=true;
	}

	/**
	*@private
	*滑块的的 <code>Event.MOUSE_DOWN</code> 事件侦听处理函数。
	*/
	__proto.onBarMouseDown=function(e){
		this._globalSacle || (this._globalSacle=new Point());
		this._globalSacle.setTo(this.globalScaleX || 0.01,this.globalScaleY || 0.01);
		this._maxMove=this.isVertical ? (this.height-this._bar.height):(this.width-this._bar.width);
		this._tx=Laya.stage.mouseX;
		this._ty=Laya.stage.mouseY;
		Laya.stage.on("mousemove",this,this.mouseMove);
		Laya.stage.once("mouseup",this,this.mouseUp);
		Laya.stage.once("mouseout",this,this.mouseUp);
		this.showValueText();
	}

	/**
	*@private
	*显示标签。
	*/
	__proto.showValueText=function(){
		if (this.showLabel){
			var label=laya.ui.Slider.label;
			this.addChild(label);
			label.textField.changeText(this._value+"");
			if (this.isVertical){
				label.x=this._bar.x+20;
				label.y=(this._bar.height-label.height)*0.5+this._bar.y;
				}else {
				label.y=this._bar.y-20;
				label.x=(this._bar.width-label.width)*0.5+this._bar.x;
			}
		}
	}

	/**
	*@private
	*隐藏标签。
	*/
	__proto.hideValueText=function(){
		laya.ui.Slider.label && laya.ui.Slider.label.removeSelf();
	}

	/**
	*@private
	*/
	__proto.mouseUp=function(e){
		Laya.stage.off("mousemove",this,this.mouseMove);
		Laya.stage.off("mouseup",this,this.mouseUp);
		Laya.stage.off("mouseout",this,this.mouseUp);
		this.sendChangeEvent("changed");
		this.hideValueText();
	}

	/**
	*@private
	*/
	__proto.mouseMove=function(e){
		var oldValue=this._value;
		if (this.isVertical){
			this._bar.y+=(Laya.stage.mouseY-this._ty)/ this._globalSacle.y;
			if (this._bar.y > this._maxMove)this._bar.y=this._maxMove;
			else if (this._bar.y < 0)this._bar.y=0;
			this._value=this._bar.y / this._maxMove *(this._max-this._min)+this._min;
			if(this._progress)this._progress.height=this._bar.y+0.5*this._bar.height;
			}else {
			this._bar.x+=(Laya.stage.mouseX-this._tx)/ this._globalSacle.x;
			if (this._bar.x > this._maxMove)this._bar.x=this._maxMove;
			else if (this._bar.x < 0)this._bar.x=0;
			this._value=this._bar.x / this._maxMove *(this._max-this._min)+this._min;
			if(this._progress)this._progress.width=this._bar.x+0.5*this._bar.width;
		}
		this._tx=Laya.stage.mouseX;
		this._ty=Laya.stage.mouseY;
		var pow=Math.pow(10,(this._tick+"").length-1);
		this._value=Math.round(Math.round(this._value / this._tick)*this._tick *pow)/ pow;
		if (this._value !=oldValue){
			this.sendChangeEvent();
		}
		this.showValueText();
	}

	/**
	*@private
	*/
	__proto.sendChangeEvent=function(type){
		(type===void 0)&& (type="change");
		this.event(type);
		this.changeHandler && this.changeHandler.runWith(this._value);
	}

	/**
	*@private
	*设置滑块的位置信息。
	*/
	__proto.setBarPoint=function(){
		if (this.isVertical)this._bar.x=Math.round((this._bg.width-this._bar.width)*0.5);
		else this._bar.y=Math.round((this._bg.height-this._bar.height)*0.5);
	}

	/**@inheritDoc */
	__proto.changeSize=function(){
		_super.prototype.changeSize.call(this);
		if (this.isVertical)this._bg.height=this.height;
		else this._bg.width=this.width;
		this.setBarPoint();
		this.changeValue();
	}

	/**
	*设置滑动条的信息。
	*@param min 滑块的最小值。
	*@param max 滑块的最小值。
	*@param value 滑块的当前值。
	*/
	__proto.setSlider=function(min,max,value){
		this._value=-1;
		this._min=min;
		this._max=max > min ? max :min;
		this.value=value < min ? min :value > max ? max :value;
	}

	/**
	*@private
	*改变滑块的位置值。
	*/
	__proto.changeValue=function(){
		var pow=Math.pow(10,(this._tick+"").length-1);
		this._value=Math.round(Math.round(this._value / this._tick)*this._tick *pow)/ pow;
		this._value=this._value > this._max ? this._max :this._value < this._min ? this._min :this._value;
		var num=this._max-this._min;
		if (num===0)num=1;
		if (this.isVertical){
			this._bar.y=(this._value-this._min)/ num *(this.height-this._bar.height);
			if(this._progress)this._progress.height=this._bar.y+0.5*this._bar.height;
		}
		else{
			this._bar.x=(this._value-this._min)/ num *(this.width-this._bar.width);
			if(this._progress)this._progress.width=this._bar.x+0.5*this._bar.width;
		}
	}

	/**
	*@private
	*滑动条的 <code>Event.MOUSE_DOWN</code> 事件侦听处理函数。
	*/
	__proto.onBgMouseDown=function(e){
		var point=this._bg.getMousePoint();
		if (this.isVertical)this.value=point.y / (this.height-this._bar.height)*(this._max-this._min)+this._min;
		else this.value=point.x / (this.width-this._bar.width)*(this._max-this._min)+this._min;
	}

	/**@inheritDoc */
	__getset(0,__proto,'measureHeight',function(){
		return Math.max(this._bg.height,this._bar.height);
	});

	/**
	*@copy laya.ui.Image#skin
	*/
	__getset(0,__proto,'skin',function(){
		return this._skin;
		},function(value){
		if (this._skin !=value){
			this._skin=value;
			this._bg.skin=this._skin;
			this._bar.skin=this._skin.replace(".png","$bar.png");
			var progressSkin=this._skin.replace(".png","$progress.png");
			if (Loader.getRes(progressSkin)){
				if (!this._progress){
					this.addChild(this._progress=new Image());
					this._progress.sizeGrid=this._bar.sizeGrid;
					this.setChildIndex(this._progress,1);
				}
				this._progress.skin=progressSkin;
			}
			this.setBarPoint();
			this.callLater(this.changeValue);
		}
	});

	/**
	*一个布尔值，指定是否允许通过点击滑动条改变 <code>Slider</code> 的 <code>value</code> 属性值。
	*/
	__getset(0,__proto,'allowClickBack',function(){
		return this._allowClickBack;
		},function(value){
		if (this._allowClickBack !=value){
			this._allowClickBack=value;
			if (value)this._bg.on("mousedown",this,this.onBgMouseDown);
			else this._bg.off("mousedown",this,this.onBgMouseDown);
		}
	});

	/**
	*获取或设置表示最高位置的数字。 默认值为100。
	*/
	__getset(0,__proto,'max',function(){
		return this._max;
		},function(value){
		if (this._max !=value){
			this._max=value;
			this.callLater(this.changeValue);
		}
	});

	/**@inheritDoc */
	__getset(0,__proto,'measureWidth',function(){
		return Math.max(this._bg.width,this._bar.width);
	});

	/**
	*滑动的刻度值，滑动数值为tick的整数倍。默认值为1。
	*/
	__getset(0,__proto,'tick',function(){
		return this._tick;
		},function(value){
		if (this._tick !=value){
			this._tick=value;
			this.callLater(this.changeValue);
		}
	});

	/**
	*<p>当前实例的背景图（ <code>Image</code> ）和滑块按钮（ <code>Button</code> ）实例的有效缩放网格数据。</p>
	*<p>数据格式："上边距,右边距,下边距,左边距,是否重复填充(值为0：不重复填充，1：重复填充)"，以逗号分隔。
	*<ul><li>例如："4,4,4,4,1"</li></ul></p>
	*@see laya.ui.AutoBitmap.sizeGrid
	*/
	__getset(0,__proto,'sizeGrid',function(){
		return this._bg.sizeGrid;
		},function(value){
		this._bg.sizeGrid=value;
		this._bar.sizeGrid=value;
		if (this._progress)this._progress.sizeGrid=this._bar.sizeGrid;
	});

	/**
	*获取或设置表示最低位置的数字。 默认值为0。
	*/
	__getset(0,__proto,'min',function(){
		return this._min;
		},function(value){
		if (this._min !=value){
			this._min=value;
			this.callLater(this.changeValue);
		}
	});

	/**
	*获取或设置表示当前滑块位置的数字。
	*/
	__getset(0,__proto,'value',function(){
		return this._value;
		},function(num){
		if (this._value !=num){
			var oldValue=this._value;
			this._value=num;
			this.changeValue();
			if (this._value !=oldValue){
				this.sendChangeEvent();
			}
		}
	});

	/**@inheritDoc */
	__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
		this._dataSource=value;
		if ((typeof value=='number')|| (typeof value=='string'))this.value=Number(value);
		else Laya.superSet(Component,this,'dataSource',value);
	});

	/**
	*表示滑块按钮的引用。
	*/
	__getset(0,__proto,'bar',function(){
		return this._bar;
	});

	__static(Slider,
	['label',function(){return this.label=new Label();}
	]);
	return Slider;
})(Component)


/**
*<code>Image</code> 类是用于表示位图图像或绘制图形的显示对象。
*Image和Clip组件是唯一支持异步加载的两个组件，比如img.skin="abc/xxx.png"，其他UI组件均不支持异步加载。
*
*@example <caption>以下示例代码，创建了一个新的 <code>Image</code> 实例，设置了它的皮肤、位置信息，并添加到舞台上。</caption>
*package
*{
	*import laya.ui.Image;
	*public class Image_Example
	*{
		*public function Image_Example()
		*{
			*Laya.init(640,800);//设置游戏画布宽高。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*onInit();
			*}
		*private function onInit():void
		*{
			*var bg:Image=new Image("resource/ui/bg.png");//创建一个 Image 类的实例对象 bg ,并传入它的皮肤。
			*bg.x=100;//设置 bg 对象的属性 x 的值，用于控制 bg 对象的显示位置。
			*bg.y=100;//设置 bg 对象的属性 y 的值，用于控制 bg 对象的显示位置。
			*bg.sizeGrid="40,10,5,10";//设置 bg 对象的网格信息。
			*bg.width=150;//设置 bg 对象的宽度。
			*bg.height=250;//设置 bg 对象的高度。
			*Laya.stage.addChild(bg);//将此 bg 对象添加到显示列表。
			*var image:Image=new Image("resource/ui/image.png");//创建一个 Image 类的实例对象 image ,并传入它的皮肤。
			*image.x=100;//设置 image 对象的属性 x 的值，用于控制 image 对象的显示位置。
			*image.y=100;//设置 image 对象的属性 y 的值，用于控制 image 对象的显示位置。
			*Laya.stage.addChild(image);//将此 image 对象添加到显示列表。
			*}
		*}
	*}
*@example
*Laya.init(640,800);//设置游戏画布宽高
*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
*onInit();
*function onInit(){
	*var bg=new laya.ui.Image("resource/ui/bg.png");//创建一个 Image 类的实例对象 bg ,并传入它的皮肤。
	*bg.x=100;//设置 bg 对象的属性 x 的值，用于控制 bg 对象的显示位置。
	*bg.y=100;//设置 bg 对象的属性 y 的值，用于控制 bg 对象的显示位置。
	*bg.sizeGrid="40,10,5,10";//设置 bg 对象的网格信息。
	*bg.width=150;//设置 bg 对象的宽度。
	*bg.height=250;//设置 bg 对象的高度。
	*Laya.stage.addChild(bg);//将此 bg 对象添加到显示列表。
	*var image=new laya.ui.Image("resource/ui/image.png");//创建一个 Image 类的实例对象 image ,并传入它的皮肤。
	*image.x=100;//设置 image 对象的属性 x 的值，用于控制 image 对象的显示位置。
	*image.y=100;//设置 image 对象的属性 y 的值，用于控制 image 对象的显示位置。
	*Laya.stage.addChild(image);//将此 image 对象添加到显示列表。
	*}
*@example
*class Image_Example {
	*constructor(){
		*Laya.init(640,800);//设置游戏画布宽高。
		*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
		*this.onInit();
		*}
	*private onInit():void {
		*var bg:laya.ui.Image=new laya.ui.Image("resource/ui/bg.png");//创建一个 Image 类的实例对象 bg ,并传入它的皮肤。
		*bg.x=100;//设置 bg 对象的属性 x 的值，用于控制 bg 对象的显示位置。
		*bg.y=100;//设置 bg 对象的属性 y 的值，用于控制 bg 对象的显示位置。
		*bg.sizeGrid="40,10,5,10";//设置 bg 对象的网格信息。
		*bg.width=150;//设置 bg 对象的宽度。
		*bg.height=250;//设置 bg 对象的高度。
		*Laya.stage.addChild(bg);//将此 bg 对象添加到显示列表。
		*var image:laya.ui.Image=new laya.ui.Image("resource/ui/image.png");//创建一个 Image 类的实例对象 image ,并传入它的皮肤。
		*image.x=100;//设置 image 对象的属性 x 的值，用于控制 image 对象的显示位置。
		*image.y=100;//设置 image 对象的属性 y 的值，用于控制 image 对象的显示位置。
		*Laya.stage.addChild(image);//将此 image 对象添加到显示列表。
		*}
	*}
*@see laya.ui.AutoBitmap
*/
//class laya.ui.Image extends laya.ui.Component
var Image=(function(_super){
	function Image(skin){
		/**@private */
		this._bitmap=null;
		/**@private */
		this._skin=null;
		/**@private */
		this._group=null;
		Image.__super.call(this);
		this.skin=skin;
	}

	__class(Image,'laya.ui.Image',_super);
	var __proto=Image.prototype;
	/**@inheritDoc */
	__proto.destroy=function(destroyChild){
		(destroyChild===void 0)&& (destroyChild=true);
		_super.prototype.destroy.call(this,true);
		this._bitmap && this._bitmap.destroy();
		this._bitmap=null;
	}

	/**
	*销毁对象并释放加载的皮肤资源。
	*/
	__proto.dispose=function(){
		this.destroy(true);
		Laya.loader.clearRes(this._skin);
	}

	/**@inheritDoc */
	__proto.createChildren=function(){
		this.graphics=this._bitmap=new AutoBitmap();
		this._bitmap.autoCacheCmd=false;
	}

	/**
	*@private
	*设置皮肤资源。
	*/
	__proto.setSource=function(url,img){
		if (url===this._skin && img){
			this.source=img
			this.onCompResize();
		}
	}

	/**
	*@copy laya.ui.AutoBitmap#source
	*/
	__getset(0,__proto,'source',function(){
		return this._bitmap.source;
		},function(value){
		if (!this._bitmap)return;
		this._bitmap.source=value;
		this.event("loaded");
		this.repaint();
	});

	/**@inheritDoc */
	__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
		this._dataSource=value;
		if ((typeof value=='string'))this.skin=value;
		else Laya.superSet(Component,this,'dataSource',value);
	});

	/**@inheritDoc */
	__getset(0,__proto,'measureHeight',function(){
		return this._bitmap.height;
	});

	/**
	*<p>对象的皮肤地址，以字符串表示。</p>
	*<p>如果资源未加载，则先加载资源，加载完成后应用于此对象。</p>
	*<b>注意：</b>资源加载完成后，会自动缓存至资源库中。
	*/
	__getset(0,__proto,'skin',function(){
		return this._skin;
		},function(value){
		if (this._skin !=value){
			this._skin=value;
			if (value){
				var source=Loader.getRes(value);
				if (source){
					this.source=source;
					this.onCompResize();
				}else Laya.loader.load(this._skin,Handler.create(this,this.setSource,[this._skin]),null,"image",1,true,this._group);
				}else {
				this.source=null;
			}
		}
	});

	/**
	*资源分组。
	*/
	__getset(0,__proto,'group',function(){
		return this._group;
		},function(value){
		if (value && this._skin)Loader.setGroup(this._skin,value);
		this._group=value;
	});

	/**
	*<p>当前实例的位图 <code>AutoImage</code> 实例的有效缩放网格数据。</p>
	*<p>数据格式："上边距,右边距,下边距,左边距,是否重复填充(值为0：不重复填充，1：重复填充)"，以逗号分隔。
	*<ul><li>例如："4,4,4,4,1"。</li></ul></p>
	*@see laya.ui.AutoBitmap#sizeGrid
	*/
	__getset(0,__proto,'sizeGrid',function(){
		if (this._bitmap.sizeGrid)return this._bitmap.sizeGrid.join(",");
		return null;
		},function(value){
		this._bitmap.sizeGrid=UIUtils.fillArray(Styles.defaultSizeGrid,value,Number);
	});

	/**@inheritDoc */
	__getset(0,__proto,'measureWidth',function(){
		return this._bitmap.width;
	});

	/**@inheritDoc */
	__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
		Laya.superSet(Component,this,'width',value);
		this._bitmap.width=value==0 ? 0.0000001 :value;
	});

	/**@inheritDoc */
	__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
		Laya.superSet(Component,this,'height',value);
		this._bitmap.height=value==0 ? 0.0000001 :value;
	});

	return Image;
})(Component)


/**
*<p> <code>Label</code> 类用于创建显示对象以显示文本。</p>
*
*@example <caption>以下示例代码，创建了一个 <code>Label</code> 实例。</caption>
*package
*{
	*import laya.ui.Label;
	*public class Label_Example
	*{
		*public function Label_Example()
		*{
			*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*onInit();
			*}
		*private function onInit():void
		*{
			*var label:Label=new Label();//创建一个 Label 类的实例对象 label 。
			*label.font="Arial";//设置 label 的字体。
			*label.bold=true;//设置 label 显示为粗体。
			*label.leading=4;//设置 label 的行间距。
			*label.wordWrap=true;//设置 label 自动换行。
			*label.padding="10,10,10,10";//设置 label 的边距。
			*label.color="#ff00ff";//设置 label 的颜色。
			*label.text="Hello everyone,我是一个可爱的文本！";//设置 label 的文本内容。
			*label.x=100;//设置 label 对象的属性 x 的值，用于控制 label 对象的显示位置。
			*label.y=100;//设置 label 对象的属性 y 的值，用于控制 label 对象的显示位置。
			*label.width=300;//设置 label 的宽度。
			*label.height=200;//设置 label 的高度。
			*Laya.stage.addChild(label);//将 label 添加到显示列表。
			*var passwordLabel:Label=new Label("请原谅我，我不想被人看到我心里话。");//创建一个 Label 类的实例对象 passwordLabel 。
			*passwordLabel.asPassword=true;//设置 passwordLabel 的显示反式为密码显示。
			*passwordLabel.x=100;//设置 passwordLabel 对象的属性 x 的值，用于控制 passwordLabel 对象的显示位置。
			*passwordLabel.y=350;//设置 passwordLabel 对象的属性 y 的值，用于控制 passwordLabel 对象的显示位置。
			*passwordLabel.width=300;//设置 passwordLabel 的宽度。
			*passwordLabel.color="#000000";//设置 passwordLabel 的文本颜色。
			*passwordLabel.bgColor="#ccffff";//设置 passwordLabel 的背景颜色。
			*passwordLabel.fontSize=20;//设置 passwordLabel 的文本字体大小。
			*Laya.stage.addChild(passwordLabel);//将 passwordLabel 添加到显示列表。
			*}
		*}
	*}
*@example
*Laya.init(640,800);//设置游戏画布宽高
*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
*onInit();
*function onInit(){
	*var label=new laya.ui.Label();//创建一个 Label 类的实例对象 label 。
	*label.font="Arial";//设置 label 的字体。
	*label.bold=true;//设置 label 显示为粗体。
	*label.leading=4;//设置 label 的行间距。
	*label.wordWrap=true;//设置 label 自动换行。
	*label.padding="10,10,10,10";//设置 label 的边距。
	*label.color="#ff00ff";//设置 label 的颜色。
	*label.text="Hello everyone,我是一个可爱的文本！";//设置 label 的文本内容。
	*label.x=100;//设置 label 对象的属性 x 的值，用于控制 label 对象的显示位置。
	*label.y=100;//设置 label 对象的属性 y 的值，用于控制 label 对象的显示位置。
	*label.width=300;//设置 label 的宽度。
	*label.height=200;//设置 label 的高度。
	*Laya.stage.addChild(label);//将 label 添加到显示列表。
	*var passwordLabel=new laya.ui.Label("请原谅我，我不想被人看到我心里话。");//创建一个 Label 类的实例对象 passwordLabel 。
	*passwordLabel.asPassword=true;//设置 passwordLabel 的显示反式为密码显示。
	*passwordLabel.x=100;//设置 passwordLabel 对象的属性 x 的值，用于控制 passwordLabel 对象的显示位置。
	*passwordLabel.y=350;//设置 passwordLabel 对象的属性 y 的值，用于控制 passwordLabel 对象的显示位置。
	*passwordLabel.width=300;//设置 passwordLabel 的宽度。
	*passwordLabel.color="#000000";//设置 passwordLabel 的文本颜色。
	*passwordLabel.bgColor="#ccffff";//设置 passwordLabel 的背景颜色。
	*passwordLabel.fontSize=20;//设置 passwordLabel 的文本字体大小。
	*Laya.stage.addChild(passwordLabel);//将 passwordLabel 添加到显示列表。
	*}
*@example
*import Label=laya.ui.Label;
*class Label_Example {
	*constructor(){
		*Laya.init(640,800);//设置游戏画布宽高。
		*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
		*this.onInit();
		*}
	*private onInit():void {
		*var label:Label=new Label();//创建一个 Label 类的实例对象 label 。
		*label.font="Arial";//设置 label 的字体。
		*label.bold=true;//设置 label 显示为粗体。
		*label.leading=4;//设置 label 的行间距。
		*label.wordWrap=true;//设置 label 自动换行。
		*label.padding="10,10,10,10";//设置 label 的边距。
		*label.color="#ff00ff";//设置 label 的颜色。
		*label.text="Hello everyone,我是一个可爱的文本！";//设置 label 的文本内容。
		*label.x=100;//设置 label 对象的属性 x 的值，用于控制 label 对象的显示位置。
		*label.y=100;//设置 label 对象的属性 y 的值，用于控制 label 对象的显示位置。
		*label.width=300;//设置 label 的宽度。
		*label.height=200;//设置 label 的高度。
		*Laya.stage.addChild(label);//将 label 添加到显示列表。
		*var passwordLabel:Label=new Label("请原谅我，我不想被人看到我心里话。");//创建一个 Label 类的实例对象 passwordLabel 。
		*passwordLabel.asPassword=true;//设置 passwordLabel 的显示反式为密码显示。
		*passwordLabel.x=100;//设置 passwordLabel 对象的属性 x 的值，用于控制 passwordLabel 对象的显示位置。
		*passwordLabel.y=350;//设置 passwordLabel 对象的属性 y 的值，用于控制 passwordLabel 对象的显示位置。
		*passwordLabel.width=300;//设置 passwordLabel 的宽度。
		*passwordLabel.color="#000000";//设置 passwordLabel 的文本颜色。
		*passwordLabel.bgColor="#ccffff";//设置 passwordLabel 的背景颜色。
		*passwordLabel.fontSize=20;//设置 passwordLabel 的文本字体大小。
		*Laya.stage.addChild(passwordLabel);//将 passwordLabel 添加到显示列表。
		*}
	*}
*@see laya.display.Text
*/
//class laya.ui.Label extends laya.ui.Component
var Label=(function(_super){
	function Label(text){
		/**
		*@private
		*文本 <code>Text</code> 实例。
		*/
		this._tf=null;
		Label.__super.call(this);
		(text===void 0)&& (text="");
		Font.defaultColor=Styles.labelColor;
		this.text=text;
	}

	__class(Label,'laya.ui.Label',_super);
	var __proto=Label.prototype;
	/**@inheritDoc */
	__proto.destroy=function(destroyChild){
		(destroyChild===void 0)&& (destroyChild=true);
		_super.prototype.destroy.call(this,destroyChild);
		this._tf=null;
	}

	/**@inheritDoc */
	__proto.createChildren=function(){
		this.addChild(this._tf=new Text());
	}

	/**@copy laya.display.Text#changeText()
	**/
	__proto.changeText=function(text){
		this._tf.changeText(text);
	}

	/**
	*<p>边距信息</p>
	*<p>"上边距，右边距，下边距 , 左边距（边距以像素为单位）"</p>
	*@see laya.display.Text.padding
	*/
	__getset(0,__proto,'padding',function(){
		return this._tf.padding.join(",");
		},function(value){
		this._tf.padding=UIUtils.fillArray(Styles.labelPadding,value,Number);
	});

	/**
	*@copy laya.display.Text#bold
	*/
	__getset(0,__proto,'bold',function(){
		return this._tf.bold;
		},function(value){
		this._tf.bold=value;
	});

	/**
	*@copy laya.display.Text#align
	*/
	__getset(0,__proto,'align',function(){
		return this._tf.align;
		},function(value){
		this._tf.align=value;
	});

	/**
	*当前文本内容字符串。
	*@see laya.display.Text.text
	*/
	__getset(0,__proto,'text',function(){
		return this._tf.text;
		},function(value){
		if (this._tf.text !=value){
			if(value)
				value=UIUtils.adptString(value+"");
			this._tf.text=value;
			this.event("change");
			if (!this._width || !this._height)this.onCompResize();
		}
	});

	/**
	*@copy laya.display.Text#italic
	*/
	__getset(0,__proto,'italic',function(){
		return this._tf.italic;
		},function(value){
		this._tf.italic=value;
	});

	/**
	*@copy laya.display.Text#wordWrap
	*/
	/**
	*@copy laya.display.Text#wordWrap
	*/
	__getset(0,__proto,'wordWrap',function(){
		return this._tf.wordWrap;
		},function(value){
		this._tf.wordWrap=value;
	});

	/**
	*@copy laya.display.Text#font
	*/
	__getset(0,__proto,'font',function(){
		return this._tf.font;
		},function(value){
		this._tf.font=value;
	});

	/**@inheritDoc */
	__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
		this._dataSource=value;
		if ((typeof value=='number')|| (typeof value=='string'))this.text=value+"";
		else Laya.superSet(Component,this,'dataSource',value);
	});

	/**
	*@copy laya.display.Text#color
	*/
	__getset(0,__proto,'color',function(){
		return this._tf.color;
		},function(value){
		this._tf.color=value;
	});

	/**
	*@copy laya.display.Text#valign
	*/
	__getset(0,__proto,'valign',function(){
		return this._tf.valign;
		},function(value){
		this._tf.valign=value;
	});

	/**
	*@copy laya.display.Text#leading
	*/
	__getset(0,__proto,'leading',function(){
		return this._tf.leading;
		},function(value){
		this._tf.leading=value;
	});

	/**
	*@copy laya.display.Text#fontSize
	*/
	__getset(0,__proto,'fontSize',function(){
		return this._tf.fontSize;
		},function(value){
		this._tf.fontSize=value;
	});

	/**
	*@copy laya.display.Text#bgColor
	*/
	__getset(0,__proto,'bgColor',function(){
		return this._tf.bgColor
		},function(value){
		this._tf.bgColor=value;
	});

	/**
	*@copy laya.display.Text#borderColor
	*/
	__getset(0,__proto,'borderColor',function(){
		return this._tf.borderColor
		},function(value){
		this._tf.borderColor=value;
	});

	/**
	*@copy laya.display.Text#stroke
	*/
	__getset(0,__proto,'stroke',function(){
		return this._tf.stroke;
		},function(value){
		this._tf.stroke=value;
	});

	/**
	*@copy laya.display.Text#strokeColor
	*/
	__getset(0,__proto,'strokeColor',function(){
		return this._tf.strokeColor;
		},function(value){
		this._tf.strokeColor=value;
	});

	/**
	*文本控件实体 <code>Text</code> 实例。
	*/
	__getset(0,__proto,'textField',function(){
		return this._tf;
	});

	/**
	*@inheritDoc
	*/
	__getset(0,__proto,'measureWidth',function(){
		return this._tf.width;
	});

	/**
	*@inheritDoc
	*/
	__getset(0,__proto,'measureHeight',function(){
		return this._tf.height;
	});

	/**
	*@inheritDoc
	*/
	/**
	*@inheritDoc
	*/
	__getset(0,__proto,'width',function(){
		if (this._width || this._tf.text)return Laya.superGet(Component,this,'width');
		return 0;
		},function(value){
		Laya.superSet(Component,this,'width',value);
		this._tf.width=value;
	});

	/**
	*@inheritDoc
	*/
	/**
	*@inheritDoc
	*/
	__getset(0,__proto,'height',function(){
		if (this._height || this._tf.text)return Laya.superGet(Component,this,'height');
		return 0;
		},function(value){
		Laya.superSet(Component,this,'height',value);
		this._tf.height=value;
	});

	/**
	*@copy laya.display.Text#overflow
	*/
	/**
	*@copy laya.display.Text#overflow
	*/
	__getset(0,__proto,'overflow',function(){
		return this._tf.overflow;
		},function(value){
		this._tf.overflow=value;
	});

	/**
	*@copy laya.display.Text#underline
	*/
	/**
	*@copy laya.display.Text#underline
	*/
	__getset(0,__proto,'underline',function(){
		return this._tf.underline;
		},function(value){
		this._tf.underline=value;
	});

	/**
	*@copy laya.display.Text#underlineColor
	*/
	/**
	*@copy laya.display.Text#underlineColor
	*/
	__getset(0,__proto,'underlineColor',function(){
		return this._tf.underlineColor;
		},function(value){
		this._tf.underlineColor=value;
	});

	return Label;
})(Component)


//class game.weapon.EfollowBom extends game.weapon.FollowBom
var EfollowBom=(function(_super){
	function EfollowBom(){
		EfollowBom.__super.call(this);
		this.isEnemyBom=true;
	}

	__class(EfollowBom,'game.weapon.EfollowBom',_super);
	var __proto=EfollowBom.prototype;
	__proto.addGas=function(){
		if(this.endgas){
			if(!this.endgas.isPlaying){
				this.endgas.play();
			}
			return;
		}
		this.endgas=GlobalAPI.miniAniEffect.start(null,0,0,"endgasB",false);
		this.endgas.x=-this._rect.width>>1;
		this.sp.addChild(this.endgas);
	}

	__proto.dispose=function(){
		if(this._dispose)return;
		if(this.act){
			GlobalAPI.weaponMgr.removeFollowEnemy(this.act.getData().id);
			this.act=null;
		}
		_super.prototype.dispose.call(this);
		GlobalAPI.weaponEnemyMgr.remove(this);
		Pool.recover("EfollowBom",this);
	}

	return EfollowBom;
})(FollowBom)


//class game.weapon.FollowBom1 extends game.weapon.FollowBom
var FollowBom1=(function(_super){
	function FollowBom1(){
		FollowBom1.__super.call(this);
		this.speed=15;
		this.scale=1.5;
		this.rect=null;
	}

	__class(FollowBom1,'game.weapon.FollowBom1',_super);
	var __proto=FollowBom1.prototype;
	__proto.dispose=function(){
		if(this._dispose)return;
		_super.prototype.dispose.call(this);
		GlobalAPI.weaponMgr.remove(this);
		Pool.recover("FollowBom1",this);
	}

	return FollowBom1;
})(FollowBom)


//class game.weapon.FollowBom2 extends game.weapon.FollowBom
var FollowBom2=(function(_super){
	function FollowBom2(){
		FollowBom2.__super.call(this);
		this.speed=15;
		this.scale=1.5;
		this.rect=null;
	}

	__class(FollowBom2,'game.weapon.FollowBom2',_super);
	var __proto=FollowBom2.prototype;
	__proto.addGas=function(){}
	__proto.dispose=function(){
		if(this._dispose)return;
		_super.prototype.dispose.call(this);
		GlobalAPI.weaponMgr.remove(this);
		Pool.recover("FollowBom2",this);
	}

	return FollowBom2;
})(FollowBom)


/**
*<p><code>Input</code> 类用于创建显示对象以显示和输入文本。</p>
*<p>Input 类封装了原生的文本输入框，由于不同浏览器的差异，会导致此对象的默认文本的位置与用户点击输入时的文本的位置有少许的偏差。</p>
*/
//class laya.display.Input extends laya.display.Text
var Input=(function(_super){
	function Input(){
		/**@private */
		this._focus=false;
		/**@private */
		this._multiline=false;
		/**@private */
		this._editable=true;
		/**@private */
		this._restrictPattern=null;
		this._type="text";
		/**输入提示符。*/
		this._prompt='';
		/**输入提示符颜色。*/
		this._promptColor="#A9A9A9";
		this._originColor="#000000";
		this._content='';
		Input.__super.call(this);
		this._maxChars=1E5;
		this._width=100;
		this._height=20;
		this.multiline=false;
		this.overflow=Text.SCROLL;
		this.on("mousedown",this,this._onMouseDown);
		this.on("undisplay",this,this._onUnDisplay);
	}

	__class(Input,'laya.display.Input',_super);
	var __proto=Input.prototype;
	/**
	*设置光标位置和选取字符。
	*@param startIndex 光标起始位置。
	*@param endIndex 光标结束位置。
	*/
	__proto.setSelection=function(startIndex,endIndex){
		this.focus=true;
		laya.display.Input.inputElement.selectionStart=startIndex;
		laya.display.Input.inputElement.selectionEnd=endIndex;
	}

	__proto._onUnDisplay=function(e){
		this.focus=false;
	}

	__proto._onMouseDown=function(e){
		this.focus=true;
	}

	/**
	*在输入期间，如果 Input 实例的位置改变，调用_syncInputTransform同步输入框的位置。
	*/
	__proto._syncInputTransform=function(){
		var inputElement=this.nativeInput;
		var transform=Utils.getTransformRelativeToWindow(this,this.padding[3],this.padding[0]);
		var inputWid=this._width-this.padding[1]-this.padding[3];
		var inputHei=this._height-this.padding[0]-this.padding[2];
		if (Render.isConchApp){
			inputElement.setScale(transform.scaleX,transform.scaleY);
			inputElement.setSize(inputWid,inputHei);
			inputElement.setPos(transform.x,transform.y);
			}else {
			Input.inputContainer.style.transform=Input.inputContainer.style.webkitTransform="scale("+transform.scaleX+","+transform.scaleY+") rotate("+(Laya.stage.canvasDegree)+"deg)";
			inputElement.style.width=inputWid+'px';
			inputElement.style.height=inputHei+'px';
			Input.inputContainer.style.left=transform.x+'px';
			Input.inputContainer.style.top=transform.y+'px';
		}
	}

	/**选中当前实例的所有文本。*/
	__proto.select=function(){
		this.nativeInput.select();
	}

	__proto._setInputMethod=function(){
		Input.input.parentElement && (Input.inputContainer.removeChild(Input.input));
		Input.area.parentElement && (Input.inputContainer.removeChild(Input.area));
		Input.inputElement=(this._multiline ? Input.area :Input.input);
		Input.inputContainer.appendChild(Input.inputElement);
		if (Text.RightToLeft){
			Input.inputElement.style.direction="rtl";
		}
	}

	__proto._focusIn=function(){
		laya.display.Input.isInputting=true;
		var input=this.nativeInput;
		this._focus=true;
		var cssStyle=input.style;
		cssStyle.whiteSpace=(this.wordWrap ? "pre-wrap" :"nowrap");
		this._setPromptColor();
		input.readOnly=!this._editable;
		if (Render.isConchApp){
			input.setType(this._type);
			input.setForbidEdit(!this._editable);
		}
		input.maxLength=this._maxChars;
		var padding=this.padding;
		input.type=this._type;
		input.value=this._content;
		input.placeholder=this._prompt;
		Laya.stage.off("keydown",this,this._onKeyDown);
		Laya.stage.on("keydown",this,this._onKeyDown);
		Laya.stage.focus=this;
		this.event("focus");
		if (Browser.onPC)input.focus();
		if(!Browser.onMiniGame){
			var temp=this._text;
			this._text=null;
		}
		this.typeset();
		input.setColor(this._originColor);
		input.setFontSize(this.fontSize);
		input.setFontFace(Browser.onIPhone ? (Text._fontFamilyMap[this.font] || this.font):this.font);
		if (Render.isConchApp){
			input.setMultiAble && input.setMultiAble(this._multiline);
		}
		cssStyle.lineHeight=(this.leading+this.fontSize)+"px";
		cssStyle.fontStyle=(this.italic ? "italic" :"normal");
		cssStyle.fontWeight=(this.bold ? "bold" :"normal");
		cssStyle.textAlign=this.align;
		cssStyle.padding="0 0";
		this._syncInputTransform();
		if (!Render.isConchApp && Browser.onPC)
			Laya.timer.frameLoop(1,this,this._syncInputTransform);
	}

	// 设置DOM输入框提示符颜色。
	__proto._setPromptColor=function(){
		Input.promptStyleDOM=Browser.getElementById("promptStyle");
		if (!Input.promptStyleDOM){
			Input.promptStyleDOM=Browser.createElement("style");
			Input.promptStyleDOM.setAttribute("id","promptStyle");
			Browser.document.head.appendChild(Input.promptStyleDOM);
		}
		Input.promptStyleDOM.innerText="input::-webkit-input-placeholder, textarea::-webkit-input-placeholder {"+"color:"+this._promptColor+"}"+"input:-moz-placeholder, textarea:-moz-placeholder {"+"color:"+this._promptColor+"}"+"input::-moz-placeholder, textarea::-moz-placeholder {"+"color:"+this._promptColor+"}"+"input:-ms-input-placeholder, textarea:-ms-input-placeholder {"+"color:"+this._promptColor+"}";
	}

	/**@private */
	__proto._focusOut=function(){
		laya.display.Input.isInputting=false;
		this._focus=false;
		this._text=null;
		this._content=this.nativeInput.value;
		if (!this._content){
			Laya.superSet(Text,this,'text',this._prompt);
			Laya.superSet(Text,this,'color',this._promptColor);
			}else {
			Laya.superSet(Text,this,'text',this._content);
			Laya.superSet(Text,this,'color',this._originColor);
		}
		Laya.stage.off("keydown",this,this._onKeyDown);
		Laya.stage.focus=null;
		this.event("blur");
		if (Render.isConchApp)this.nativeInput.blur();
		Browser.onPC && Laya.timer.clear(this,this._syncInputTransform);
	}

	/**@private */
	__proto._onKeyDown=function(e){
		if (e.keyCode===13){
			if (Browser.onMobile && !this._multiline)
				this.focus=false;
			this.event("enter");
		}
	}

	__proto.changeText=function(text){
		this._content=text;
		if (this._focus){
			this.nativeInput.value=text || '';
			this.event("change");
		}else
		_super.prototype.changeText.call(this,text);
	}

	/**@inheritDoc */
	__getset(0,__proto,'color',_super.prototype._$get_color,function(value){
		if (this._focus)
			this.nativeInput.setColor(value);
		Laya.superSet(Text,this,'color',this._content?value:this._promptColor);
		this._originColor=value;
	});

	//[Deprecated]
	__getset(0,__proto,'inputElementYAdjuster',function(){
		console.warn("deprecated: 由于即使设置了该值，在各平台和浏览器之间也不一定一致，inputElementYAdjuster已弃用。");
		return 0;
		},function(value){
		console.warn("deprecated: 由于即使设置了该值，在各平台和浏览器之间也不一定一致，inputElementYAdjuster已弃用。");
	});

	/**表示是否是多行输入框。*/
	__getset(0,__proto,'multiline',function(){
		return this._multiline;
		},function(value){
		this._multiline=value;
		this.valign=value ? "top" :"middle";
	});

	/**
	*<p>字符数量限制，默认为10000。</p>
	*<p>设置字符数量限制时，小于等于0的值将会限制字符数量为10000。</p>
	*/
	__getset(0,__proto,'maxChars',function(){
		return this._maxChars;
		},function(value){
		if (value <=0)
			value=1E5;
		this._maxChars=value;
	});

	/**@inheritDoc */
	__getset(0,__proto,'text',function(){
		if (this._focus)
			return this.nativeInput.value;
		else
		return this._content || "";
		},function(value){
		Laya.superSet(Text,this,'color',this._originColor);
		value+='';
		if (this._focus){
			this.nativeInput.value=value || '';
			this.event("change");
			}else {
			if (!this._multiline)
				value=value.replace(/\r?\n/g,'');
			this._content=value;
			if (value)
				Laya.superSet(Text,this,'text',value);
			else {
				Laya.superSet(Text,this,'text',this._prompt);
				Laya.superSet(Text,this,'color',this.promptColor);
			}
		}
	});

	/**
	*获取对输入框的引用实例。
	*/
	__getset(0,__proto,'nativeInput',function(){
		return this._multiline ? Input.area :Input.input;
	});

	/**
	*设置输入提示符。
	*/
	__getset(0,__proto,'prompt',function(){
		return this._prompt;
		},function(value){
		if (!this._text && value)
			Laya.superSet(Text,this,'color',this._promptColor);
		this.promptColor=this._promptColor;
		if (this._text)
			Laya.superSet(Text,this,'text',(this._text==this._prompt)?value:this._text);
		else
		Laya.superSet(Text,this,'text',value);
		this._prompt=Text.langPacks && Text.langPacks[value] ? Text.langPacks[value] :value;
	});

	// 因此 调用focus接口是无法都在移动平台立刻弹出键盘的
	/**
	*表示焦点是否在此实例上。
	*/
	__getset(0,__proto,'focus',function(){
		return this._focus;
		},function(value){
		var input=this.nativeInput;
		if (this._focus!==value){
			if (value){
				if (input.target){
					input.target._focusOut();
					}else {
					this._setInputMethod();
				}
				input.target=this;
				this._focusIn();
				}else {
				input.target=null;
				this._focusOut();
				Browser.document.body.scrollTop=0;
				input.blur();
				if (Render.isConchApp){
					input.setPos(-10000,-10000);
				}else if (Input.inputContainer.contains(input))
				Input.inputContainer.removeChild(input);
			}
		}
	});

	/**限制输入的字符。*/
	__getset(0,__proto,'restrict',function(){
		if (this._restrictPattern){
			return this._restrictPattern.source;
		}
		return "";
		},function(pattern){
		if (pattern){
			pattern="[^"+pattern+"]";
			if (pattern.indexOf("^^")>-1)
				pattern=pattern.replace("^^","");
			this._restrictPattern=new RegExp(pattern,"g");
		}else
		this._restrictPattern=null;
	});

	/**
	*是否可编辑。
	*/
	__getset(0,__proto,'editable',function(){
		return this._editable;
		},function(value){
		this._editable=value;
		if (Render.isConchApp){
			Input.input.setForbidEdit(!value);
		}
	});

	/**
	*设置输入提示符颜色。
	*/
	__getset(0,__proto,'promptColor',function(){
		return this._promptColor;
		},function(value){
		this._promptColor=value;
		if (!this._content)Laya.superSet(Text,this,'color',value);
	});

	/**
	*<p>输入框类型为Input静态常量之一。</p>
	*<ul>
	*<li>TYPE_TEXT</li>
	*<li>TYPE_PASSWORD</li>
	*<li>TYPE_EMAIL</li>
	*<li>TYPE_URL</li>
	*<li>TYPE_NUMBER</li>
	*<li>TYPE_RANGE</li>
	*<li>TYPE_DATE</li>
	*<li>TYPE_MONTH</li>
	*<li>TYPE_WEEK</li>
	*<li>TYPE_TIME</li>
	*<li>TYPE_DATE_TIME</li>
	*<li>TYPE_DATE_TIME_LOCAL</li>
	*</ul>
	*<p>平台兼容性参见http://www.w3school.com.cn/html5/html_5_form_input_types.asp。</p>
	*/
	__getset(0,__proto,'type',function(){
		return this._type;
		},function(value){
		if (value=="password")
			this._getCSSStyle().password=true;
		else
		this._getCSSStyle().password=false;
		this._type=value;
		if (Render.isConchApp){
			this.nativeInput.setType(value);
		}
	});

	/**
	*<p>原生输入框 X 轴调整值，用来调整输入框坐标。</p>
	*<p>由于即使设置了该值，在各平台和浏览器之间也不一定一致，inputElementXAdjuster已弃用。</p>
	*@deprecated
	*/
	__getset(0,__proto,'inputElementXAdjuster',function(){
		console.warn("deprecated: 由于即使设置了该值，在各平台和浏览器之间也不一定一致，inputElementXAdjuster已弃用。");
		return 0;
		},function(value){
		console.warn("deprecated: 由于即使设置了该值，在各平台和浏览器之间也不一定一致，inputElementXAdjuster已弃用。");
	});

	//[Deprecated(replacement="Input.type")]
	__getset(0,__proto,'asPassword',function(){
		return this._getCSSStyle().password;
		},function(value){
		this._getCSSStyle().password=value;
		this._type="password";
		console.warn("deprecated: 使用type=\"password\"替代设置asPassword, asPassword将在下次重大更新时删去");
		this.isChanged=true;
	});

	Input.__init__=function(){
		Input._createInputElement();
		if (Browser.onMobile)
			Render.canvas.addEventListener(Input.IOS_IFRAME ?(Browser.onMiniGame ? "touchend" :"click"):"touchend",Input._popupInputMethod);
	}

	Input._popupInputMethod=function(e){
		if (!laya.display.Input.isInputting)return;
		var input=laya.display.Input.inputElement;
		input.focus();
	}

	Input._createInputElement=function(){
		Input._initInput(Input.area=Browser.createElement("textarea"));
		Input._initInput(Input.input=Browser.createElement("input"));
		Input.inputContainer=Browser.createElement("div");
		Input.inputContainer.style.position="absolute";
		Input.inputContainer.style.zIndex=1E5;
		Browser.container.appendChild(Input.inputContainer);
		Input.inputContainer.setPos=function (x,y){Input.inputContainer.style.left=x+'px';Input.inputContainer.style.top=y+'px';};
	}

	Input._initInput=function(input){
		var style=input.style;
		style.cssText="position:absolute;overflow:hidden;resize:none;transform-origin:0 0;-webkit-transform-origin:0 0;-moz-transform-origin:0 0;-o-transform-origin:0 0;";
		style.resize='none';
		style.backgroundColor='transparent';
		style.border='none';
		style.outline='none';
		style.zIndex=1;
		input.addEventListener('input',Input._processInputting);
		input.addEventListener('mousemove',Input._stopEvent);
		input.addEventListener('mousedown',Input._stopEvent);
		input.addEventListener('touchmove',Input._stopEvent);
		input.setFontFace=function (fontFace){input.style.fontFamily=fontFace;};
		if(!Render.isConchApp){
			input.setColor=function (color){input.style.color=color;};
			input.setFontSize=function (fontSize){input.style.fontSize=fontSize+'px';};
		}
	}

	Input._processInputting=function(e){
		var input=laya.display.Input.inputElement.target;
		if (!input)return;
		var value=laya.display.Input.inputElement.value;
		if (input._restrictPattern){
			value=value.replace(/\u2006|\x27/g,"");
			if (input._restrictPattern.test(value)){
				value=value.replace(input._restrictPattern,"");
				laya.display.Input.inputElement.value=value;
			}
		}
		input._text=value;
		input.event("input");
	}

	Input._stopEvent=function(e){
		if (e.type=='touchmove')
			e.preventDefault();
		e.stopPropagation && e.stopPropagation();
	}

	Input.TYPE_TEXT="text";
	Input.TYPE_PASSWORD="password";
	Input.TYPE_EMAIL="email";
	Input.TYPE_URL="url";
	Input.TYPE_NUMBER="number";
	Input.TYPE_RANGE="range";
	Input.TYPE_DATE="date";
	Input.TYPE_MONTH="month";
	Input.TYPE_WEEK="week";
	Input.TYPE_TIME="time";
	Input.TYPE_DATE_TIME="datetime";
	Input.TYPE_DATE_TIME_LOCAL="datetime-local";
	Input.TYPE_SEARCH="search";
	Input.input=null;
	Input.area=null;
	Input.inputElement=null;
	Input.inputContainer=null;
	Input.confirmButton=null;
	Input.promptStyleDOM=null;
	Input.inputHeight=45;
	Input.isInputting=false;
	Input.stageMatrix=null;
	__static(Input,
	['IOS_IFRAME',function(){return this.IOS_IFRAME=(Browser.onIOS && Browser.window.top !=Browser.window.self);}
	]);
	return Input;
})(Text)


//class laya.webgl.shader.d2.Shader2X extends laya.webgl.shader.Shader
var Shader2X=(function(_super){
	function Shader2X(vs,ps,saveName,nameMap){
		this._params2dQuick1=null;
		this._params2dQuick2=null;
		this._shaderValueWidth=NaN;
		this._shaderValueHeight=NaN;
		Shader2X.__super.call(this,vs,ps,saveName,nameMap);
	}

	__class(Shader2X,'laya.webgl.shader.d2.Shader2X',_super);
	var __proto=Shader2X.prototype;
	__proto.upload2dQuick1=function(shaderValue){
		this.upload(shaderValue,this._params2dQuick1 || this._make2dQuick1());
	}

	__proto._make2dQuick1=function(){
		if (!this._params2dQuick1){
			this.activeResource();
			this._params2dQuick1=[];
			var params=this._params,one;
			for (var i=0,n=params.length;i < n;i++){
				one=params[i];
				if (!Render.isFlash && (one.name==="size" || one.name==="position" || one.name==="texcoord"))continue ;
				this._params2dQuick1.push(one);
			}
		}
		return this._params2dQuick1;
	}

	__proto.disposeResource=function(){
		_super.prototype.disposeResource.call(this);
		this._params2dQuick1=null;
		this._params2dQuick2=null;
	}

	__proto.upload2dQuick2=function(shaderValue){
		this.upload(shaderValue,this._params2dQuick2 || this._make2dQuick2());
	}

	__proto._make2dQuick2=function(){
		if (!this._params2dQuick2){
			this.activeResource();
			this._params2dQuick2=[];
			var params=this._params,one;
			for (var i=0,n=params.length;i < n;i++){
				one=params[i];
				if (!Render.isFlash && (one.name==="size"))continue ;
				this._params2dQuick2.push(one);
			}
		}
		return this._params2dQuick2;
	}

	Shader2X.create=function(vs,ps,saveName,nameMap){
		return new Shader2X(vs,ps,saveName,nameMap);
	}

	return Shader2X;
})(Shader)


/**
*@private
*<p> <code>HTMLImage</code> 用于创建 HTML Image 元素。</p>
*<p>请使用 <code>HTMLImage.create()<code>获取新实例，不要直接使用 <code>new HTMLImage<code> 。</p>
*/
//class laya.resource.HTMLImage extends laya.resource.FileBitmap
var HTMLImage=(function(_super){
	function HTMLImage(src,def){
		/**异步加载锁*/
		this._recreateLock=false;
		/**异步加载完成后是否需要释放（有可能在恢复过程中,再次被释放，用此变量做标记）*/
		this._needReleaseAgain=false;
		this._enableMerageInAtlas=true;
		HTMLImage.__super.call(this);
		this._init_(src,def);
	}

	__class(HTMLImage,'laya.resource.HTMLImage',_super);
	var __proto=HTMLImage.prototype;
	__proto._init_=function(src,def){
		this._src=src;
		this._source=new Browser.window.Image();
		if (def){
			def.onload && (this.onload=def.onload);
			def.onerror && (this.onerror=def.onerror);
			def.onCreate && def.onCreate(this);
		}
		if (src.indexOf("data:image")!=0)this._source.crossOrigin="";
		(src)&& (this._source.src=src);
	}

	/**
	*@inheritDoc
	*/
	__proto.recreateResource=function(){
		var _$this=this;
		if (this._src==="")
			throw new Error("src no null！");
		this._needReleaseAgain=false;
		if (!this._source){
			this._recreateLock=true;
			var _this=this;
			this._source=new Browser.window.Image();
			this._source.crossOrigin="";
			this._source.onload=function (){
				if (_this._needReleaseAgain){
					_this._needReleaseAgain=false;
					_this._source.onload=null;
					_this._source=null;
					return;
				}
				_this._source.onload=null;
				_this.memorySize=_$this._w *_$this._h *4;
				_this._recreateLock=false;
				_this.completeCreate();
			};
			this._source.src=this._src;
			}else {
			if (this._recreateLock)
				return;
			this.memorySize=this._w *this._h *4;
			this._recreateLock=false;
			this.completeCreate();
		}
	}

	/**
	*@inheritDoc
	*/
	__proto.disposeResource=function(){
		if (this._recreateLock)
			this._needReleaseAgain=true;
		(this._source)&& (this._source=null,this.memorySize=0);
	}

	/***调整尺寸。*/
	__proto.onresize=function(){
		this._w=this._source.width;
		this._h=this._source.height;
	}

	/**
	*@inheritDoc
	*/
	__getset(0,__proto,'onload',null,function(value){
		var _$this=this;
		this._onload=value;
		this._source && (this._source.onload=this._onload !=null ? (function(){
			_$this.onresize();
			_$this._onload();
		}):null);
	});

	/**
	*@inheritDoc
	*/
	__getset(0,__proto,'onerror',null,function(value){
		var _$this=this;
		this._onerror=value;
		this._source && (this._source.onerror=this._onerror !=null ? (function(){
			_$this._onerror()
		}):null);
	});

	__getset(0,__proto,'enableMerageInAtlas',function(){
		return this._enableMerageInAtlas;
		},function(value){
		this._enableMerageInAtlas=value;
		if (Render.isConchApp){
			if (this._source)this._source.enableMerageInAtlas=value;
		}
	});

	HTMLImage.create=function(src,def){
		return new HTMLImage(src,def);
	}

	return HTMLImage;
})(FileBitmap)


//class laya.webgl.utils.IndexBuffer2D extends laya.webgl.utils.Buffer2D
var IndexBuffer2D=(function(_super){
	function IndexBuffer2D(bufferUsage){
		this._uint8Array=null;
		this._uint16Array=null;
		(bufferUsage===void 0)&& (bufferUsage=0x88E4);
		IndexBuffer2D.__super.call(this);
		this._bufferUsage=bufferUsage;
		this._bufferType=0x8893;
		Render.isFlash || (this._buffer=new ArrayBuffer(8));
	}

	__class(IndexBuffer2D,'laya.webgl.utils.IndexBuffer2D',_super);
	var __proto=IndexBuffer2D.prototype;
	__proto._checkArrayUse=function(){
		this._uint8Array && (this._uint8Array=new Uint8Array(this._buffer));
		this._uint16Array && (this._uint16Array=new Uint16Array(this._buffer));
	}

	__proto.getUint8Array=function(){
		return this._uint8Array || (this._uint8Array=new Uint8Array(this._buffer));
	}

	__proto.getUint16Array=function(){
		return this._uint16Array || (this._uint16Array=new Uint16Array(this._buffer));
	}

	__proto.destory=function(){
		this._uint16Array=null;
		this._uint8Array=null;
		this._buffer=null;
	}

	IndexBuffer2D.QuadrangleIB=null;
	IndexBuffer2D.create=function(bufferUsage){
		(bufferUsage===void 0)&& (bufferUsage=0x88E4);
		return new IndexBuffer2D(bufferUsage);
	}

	return IndexBuffer2D;
})(Buffer2D)


//class laya.webgl.utils.VertexBuffer2D extends laya.webgl.utils.Buffer2D
var VertexBuffer2D=(function(_super){
	function VertexBuffer2D(vertexStride,bufferUsage){
		this._floatArray32=null;
		this._vertexStride=0;
		VertexBuffer2D.__super.call(this);
		this._vertexStride=vertexStride;
		this._bufferUsage=bufferUsage;
		this._bufferType=0x8892;
		Render.isFlash || (this._buffer=new ArrayBuffer(8));
		this.getFloat32Array();
	}

	__class(VertexBuffer2D,'laya.webgl.utils.VertexBuffer2D',_super);
	var __proto=VertexBuffer2D.prototype;
	__proto.getFloat32Array=function(){
		return this._floatArray32 || (this._floatArray32=new Float32Array(this._buffer));
	}

	__proto.bind=function(ibBuffer){
		(ibBuffer)&& (ibBuffer._bind());
		this._bind();
	}

	__proto.insertData=function(data,pos){
		var vbdata=this.getFloat32Array();
		vbdata.set(data,pos);
		this._upload=true;
	}

	__proto.bind_upload=function(ibBuffer){
		(ibBuffer._bind_upload())|| (ibBuffer._bind());
		(this._bind_upload())|| (this._bind());
	}

	__proto._checkArrayUse=function(){
		this._floatArray32 && (this._floatArray32=new Float32Array(this._buffer));
	}

	__proto.disposeResource=function(){
		_super.prototype.disposeResource.call(this);
		var enableAtributes=Buffer._enableAtributes;
		for (var i=0;i < 10;i++){
			WebGL.mainContext.disableVertexAttribArray(i);
			enableAtributes[i]=null;
		}
	}

	//}
	__proto.destory=function(){
		this._byteLength=0;
		this._upload=true;
		this._buffer=null;
		this._floatArray32=null;
	}

	__getset(0,__proto,'vertexStride',function(){
		return this._vertexStride;
	});

	VertexBuffer2D.create=function(vertexStride,bufferUsage){
		(bufferUsage===void 0)&& (bufferUsage=0x88E8);
		return new VertexBuffer2D(vertexStride,bufferUsage);
	}

	return VertexBuffer2D;
})(Buffer2D)


/**
*下落动作体
*@author guowc
*
*/
//class game.Body.DropAct extends game.Body.SkinAct
var DropAct=(function(_super){
	function DropAct(){
		this._iMap=null;
		this.g=1;
		//重力
		this.isWaterOld=false;
		this.isWater=false;
		//水中
		this.waterspeedx=2;
		this.waterspeedy=2;
		this.moveballs=null;
		this.inbevel=false;
		//在斜面格
		this.intypeY=0;
		//Y下一格type(主要用于判定大斜面情况移动不会显示为下落态)
		this.isDrop=false;
		//跳跃状态
		this.isJump=false;
		this.onedrop=false;
		DropAct.__super.call(this);
		this._iMap=MapProxy.getInstance();
		this.moveballs=this._iMap.getmoveball();
	}

	__class(DropAct,'game.Body.DropAct',_super);
	var __proto=DropAct.prototype;
	__proto.isInWater=function(){
		var dx=this._pt.x*MapData.rboxW>>0;
		var dy=this._pt.y*MapData.rboxH>>0;
		if(MapData.mapData){
			var ar=MapData.mapData[dy];
			this.isWaterOld=this.isWater;
			if(ar && ar[dx]==MapData.waterSort){
				this.isWater=true;
				}else{
				this.isWater=false;
			}
		}
	}

	__proto.step=function(){
		if (!this._pause){
			this.dropCheck();
			if (this.isDrop){
				this.dropFrameHandler();
			}
		}
		game.Body.BaseAct.prototype.step.call(this);
	}

	__proto.getIsDrop=function(){
		return this.isDrop;
	}

	__proto.getIsJump=function(){
		return this.isJump;
	}

	/**
	*根据坐标取得斜面站立点
	*@param dx
	*@param dy _rect.y+_rect.height
	*@return
	*
	*/
	__proto.dropFramebevel=function(dx,dy){
		var tx=dx*MapData.rboxW>>0;
		var ty=dy*MapData.rboxH>>0;
		var py=ty*MapData.boxH>>0;
		var type=MapData.getType1(tx,ty);
		var bd;
		var xx=dx-tx*MapData.boxW>>0;
		var yy=py+MapData.boxH-2>>0;
		if(type > 0 && type<MapData.bgboxSort){
			if(type<MapData.bevel){
				var pixrects=MapData.blevelRects[type];
				if(pixrects){
					var rt=pixrects[xx];
					if(rt){
						MapData.rectpix.x=xx;
						MapData.rectpix.y=yy-py;
						MapData.rectpix.width=2;
						MapData.rectpix.height=2;
						while(HitTestUtil.hitTest(rt,MapData.rectpix)){
							yy-=1;
							MapData.rectpix.y=yy-py;
						}
					}
				}
			}
		}
		return yy;
	}

	__proto.dropFrameCheck=function(dx,tx){
		var ty=(this._rect.y+this._rect.height)*MapData.rboxH>>0;
		var py=ty*MapData.boxH>>0;
		var type=MapData.getType1(tx,ty);
		var bd;
		if(type > 0 && type<MapData.bgboxSort){
			if(type<MapData.bevel){
				var pixrects=MapData.blevelRects[type];
				if(pixrects){
					var tt=dx-tx*MapData.boxW>>0;
					var rt=pixrects[tt];
					if(rt){
						MapData.rectpix.x=rt.x+tx*MapData.boxW;
						MapData.rectpix.y=rt.y+py;
						MapData.rectpix.width=rt.width;
						MapData.rectpix.height=rt.height;
						if(HitTestUtil.hitTest(this.getHitRect(),MapData.rectpix)){
							this._rect.y=MapData.rectpix.y-1-this._rect.height;
							this.g=1;
						}
					}
				}
				}else{
				if(MapData.isJumpWallType(type)){
					if(this.oldRect.y+this.oldRect.height<py){
						this._rect.y=py-this._rect.height-1;
						this.g=1;
					}
					}else{
					this._rect.y=py-this._rect.height-1;
					this.g=1;
					if(MapData.getType(dx,this._rect.y+this._rect.height)>0){
						this.dropFrameCheck(dx,tx);
					}
				}
			}
		}
	}

	//特殊地形格检测
	__proto.checkdropwall=function(tx,ty,type){
		var ttx=tx;
		var tty=ty;
		if(MapData.mapData[tty][ttx]==type){
			while(true){
				ttx--;
				if(MapData.mapData[tty][ttx]!=type){
					ttx++;
					if(type==MapData.jumpWallClearSort){
						GlobalAPI.sceneRoleMgr.checkClearBox(ttx,tty);
						}else if(type==MapData.moveSortL){
						if(this.baseRoleData.speed>2){
							this._rect.x-=2;
							}else{
							this._rect.x-=1;
						}
						this.isRender=true;
						this.checklr();
						}else if(type==MapData.moveSortR){
						if(this.baseRoleData.speed>2){
							this._rect.x+=2;
							}else{
							this._rect.x-=1;
						}
						this.isRender=true;
						this.checklr();
						}else if(type==1260){
						GlobalAPI.sceneRoleMgr.checkSpringBox(this,ttx,tty);
					}
					break ;
				}
			}
		}
	}

	__proto.dropFrameHandler=function(){
		this.g+=0.5;
		if(this.isWater){
			if(this.g>this.waterspeedy){
				this.g=this.waterspeedy;
			}
			}else{
			if(this.g>this.areaNum){
				this.g=this.areaNum;
			}
		}
		this._rect.y+=this.g;
		var dx=this._rect.x+this.bodyWid>>0;
		var tx=dx*MapData.rboxW>>0;
		this.dropFrameCheck(dx,tx);
		this.dropFrameCheck(dx,tx);
		this.moveDropFrameHandler(dx);
		if(this.bodyWid>0){
			dx=this._rect.x-this.bodyWid;
			tx=dx*MapData.rboxW>>0;
			this.dropFrameCheck(dx,tx);
			this.dropFrameCheck(dx,tx);
			this.moveDropFrameHandler(dx);
		}
		this.isRender=true;
	}

	__proto.moveDropFrameHandler=function(dx){
		var bmp;
		var bd;
		var ar=this._iMap.getMoveBlock();
		var a;
		var b=false;
		var bmpx=0;
		var bmpy=0;
		var $each_a;
		for($each_a in ar){
			a=ar[$each_a];
			b=false;
			bmp=a.bmp;
			bmpx=bmp.x>>0;
			bmpy=bmp.y>>0;
			bd=bmp.texture;
			if(HitTestUtil.hitTest(this.getHitRect(),a.bmprect)){
				if(this.touchGround==false && this.oldRect.y+this.oldRect.height>a.bmprect.y){
					}else{
					this._rect.y=a.bmprect.y-this._rect.height-1;
					this.g=1;
					b=true;
				}
			}
			if(b){
				if(a.type==0 || a.type==2){
					this._rect.x+=a.dx;
					this.checklr();
				}
				break ;
			}
		}
	}

	//空中下坠检测
	__proto.dropCheck=function(){
		this.onedrop=true;
		if(this.bodyWid==0){
			this.inbevel=this.dropCheckd(this.bodyWid)
			}else{
			this.inbevel=this.dropCheckd(-this.bodyWid);
			this.onedrop=this.isDrop;
			if(this.inbevel==false){
				this.inbevel=this.dropCheckd(this.bodyWid);
				if(this.inbevel==false){
					this.isDrop=!this.isDrop || !this.onedrop ? false :true;
				}
			}
			if(this.isDrop){
				var tx=(this._rect.x+this.bodyWid)*MapData.rboxW>>0;
				var ty=(this._rect.y+this._rect.height)*MapData.rboxH>>0;
				var type=MapData.getType1(tx,ty);
				if(type>0 && type<MapData.bevel){
					this.dropCheckd(this.bodyWid);
				}
			}
		}
		if(this.isDrop==false)this.g=1;
		if(!this.inbevel){
			this.intypeY=MapData.getType(this._rect.x,this._rect.y+this._rect.height+MapData.boxH2);
		};
		var dx=this._rect.x>>0;
		var dy=this._rect.y+this._rect.height>>0;
		var bmp;
		var bd;
		var tmpx=0;
		var tmpy=0;
		this.touchGround=true;
		if(this.isJump){
			this.touchGround=false;
			}else if(this.isDrop){
			var b=false;
			b=this.movedropCheck(this._rect.x+this.bodyWid);
			if(b==false && this.bodyWid>0){
				b=this.movedropCheck(this._rect.x-this.bodyWid);
			}
			if(!b){
				var cx=dx-this.bodyWid>>0;
				var cy=dy+1>>0;
				if(!MapData.getIsWall(cx,cy)){
					if(this.bodyWid>0){
						cx=dx+this.bodyWid>>0;
						if(!MapData.getIsWall(cx,cy)){
							this.touchGround=false;
						}
						}else{
						this.touchGround=false;
					}
				}
				if(this.touchGround){
					cx=dx-this.bodyWid>>0;
					if(MapData.isJumpWall(cx,cy)){
						if(dy>cy-cy%MapData.boxH){
							this.touchGround=false;
						}
						}else if(this.bodyWid>0){
						cx=dx+this.bodyWid>>0;
						if(MapData.isJumpWall(cx,cy)){
							if(dy>cy-cy%MapData.boxH){
								this.touchGround=false;
							}
						}
					}
				}
			}
		}
	}

	__proto.movedropCheck=function(dx){
		var ar=this._iMap.getMoveBlock();
		var a;
		var $each_a;
		for($each_a in ar){
			a=ar[$each_a];
			MapData.rectpix.x=a.bmprect.x-a.dx;
			MapData.rectpix.y=a.bmprect.y-a.dy;
			MapData.rectpix.width=a.bmprect.width;
			MapData.rectpix.height=a.bmprect.height;
			if(HitTestUtil.hitTest(this.getHitRect(),MapData.rectpix)==false){
				MapData.rectpix.y=MapData.rectpix.y-1;
				if(HitTestUtil.hitTest(this.getHitRect(),MapData.rectpix)){
					this.g=1;
					return true;
				}
			}
		}
		return false;
	}

	__proto.dropCheckd=function(val){
		var dx=(this._rect.x+val)*MapData.rboxW>>0;
		var dy=(this._rect.y+this._rect.height)*MapData.rboxH>>0;
		var type=MapData.getType1(dx,dy);
		var py=dy*MapData.boxH>>0;
		if(type>0 && type<MapData.bevel){
			this.isDrop=true;
			var pixrects=MapData.blevelRects[type];
			if(pixrects){
				var tt=this._rect.x+val-dx*MapData.boxW>>0;
				var rt=pixrects[tt];
				if(rt){
					MapData.rectpix.x=rt.x+dx*MapData.boxW;
					MapData.rectpix.y=rt.y+py;
					if(HitTestUtil.hitTest(this.getHitRect(),MapData.rectpix)==false){
						MapData.rectpix.y=MapData.rectpix.y-1;
						if(HitTestUtil.hitTest(this.getHitRect(),MapData.rectpix)){
							this.isDrop=false;
						}
					}
				}
			}
			return true;
			}else{
			dy+=1;
			py=dy*MapData.boxH>>0;
			type=MapData.getType1(dx,dy);
			if(this.onedrop && type>MapData.bevel){
				if(this._rect.y+this._rect.height==py-1){
					if(type==MapData.jumpWallClearSort){
						this.checkdropwall(dx,dy,type);
						}else if(type==1260){
						this.checkdropwall(dx,dy,type);
					}
					if(type==MapData.moveSortL || type==MapData.moveSortR){
						this.checkdropwall(dx,dy,type);
					}
					this.isDrop=false;
					}else{
					this.isDrop=true;
				}
				}else{
				this.isDrop=true;
			}
		}
		return false;
	}

	__proto.dispose=function(){
		this.isJump=false;
		this.isDrop=false;
		this.g=1;
		this.isWaterOld=false;
		this.isWater=false;
		this.waterspeedx=3;
		this.waterspeedy=2;
		this.moveballs=null;
		this.inbevel=false;
		_super.prototype.dispose.call(this);
	}

	return DropAct;
})(SkinAct)


/**
*飞行敌人
*@author guowc
*
*/
//class game.role.ai.Enemy103 extends game.Body.SkinAct
var Enemy103=(function(_super){
	function Enemy103(){
		this.time=0;
		this.firemc=null;
		this.eyemc=null;
		this.go=0;
		//受伤时间断
		this._attack=false;
		//攻击状态
		this._attacktime=0;
		this._attackGay=100;
		//攻击间隔
		this.ex=0;
		this.ey=0;
		this.speed=NaN;
		this.hity=NaN;
		this.shootpt=null;
		this.shootGroundpt=null;
		Enemy103.__super.call(this);
		this.showHPBar(true);
		this.hity=Math.random()*50+30>>0;
		this.checkHit=false;
	}

	__class(Enemy103,'game.role.ai.Enemy103',_super);
	var __proto=Enemy103.prototype;
	__proto.step=function(){
		if(this._pause){
			return;
		}
		this.ai();
		game.Body.BaseAct.prototype.step.call(this);
	}

	__proto.showHPBar=function(val){
		game.Body.BaseAct.prototype.showHPBar.call(this,val);
		if(this._showBar){
			this.hpbar.y=this.bodyRect.y+30;
		}
	}

	__proto.startNewFire=function(id){
		if(this.fireing==0 && !this.firemc){
			this.firemc=GlobalAPI.miniAniEffect.start(this,0,0,"fire",false,30);
			this.firemc.setPlay(0,true,"fire");
			DepthManager.bringToBottom(this.firemc);
			UIUtils.addFilter(this.role,GlobalAPI.blackFilter);
			if(!this.eyemc){
				this.eyemc=ImgAniEffect.getInstance().start(this,0,0,"fire_eye",false);
				this.eyemc.gotoAndStop(this.baseRoleData.score);
				GlobalAPI.taskVO.fireZombie++;
			}
			this.addChild(this.eyemc);
		}
		this.showRole("R_");
		return game.Body.BaseAct.prototype.startNewFire.call(this,id);
	}

	__proto.ai=function(){
		if(GlobalAPI.nowdouble==false){
			this.shootpt=GlobalAPI.shootpt;
			this.shootGroundpt=GlobalAPI.shootGroundpt;
			}else{
			if(this.shootGroundpt==GlobalAPI.heroGroundPt){
				if(this._pt.distance(GlobalAPI.heroGroundPt.x,GlobalAPI.heroGroundPt.y)>200 &&
					this._pt.distance(GlobalAPI.heroGroundPt2.x,GlobalAPI.heroGroundPt2.y)<200){
					this.shootpt=GlobalAPI.heropt2;
					this.shootGroundpt=GlobalAPI.heroGroundPt2;
				}
				}else{
				if(this._pt.distance(GlobalAPI.heroGroundPt2.x,GlobalAPI.heroGroundPt2.y)>200 &&
					this._pt.distance(GlobalAPI.heroGroundPt.x,GlobalAPI.heroGroundPt.y)<200){
					this.shootpt=GlobalAPI.heropt;
					this.shootGroundpt=GlobalAPI.heroGroundPt;
				}
			}
		}
		if(this.go>0){
			this.go--;
		}
		if(this._attackGay<80){
			this._attackGay++;
			return;
		}
		if(this.fireing>0){
			this.fireing++;
			if(this.fireing>30){
				this.fireing=0;
				GlobalAPI.miniAniEffect.over(this.firemc);
				UIUtils.clearFilter(this.role,ColorFilter);
				this.firemc=null;
				this.eyemc.removeSelf();
			}
			if(this.hurt(1)){
				GlobalAPI.sceneRoleMgr.removeEnemy(this.baseRoleData.id,true,0,-1);
			}
			return;
		}
		if(this.time<100){
			this.time++;
			}else if(Math.random()*3>>0==1){
			this.speed=this.baseRoleData.speed+1;
			this.time=0;
			}else{
			this.speed=this.baseRoleData.speed;
			this.time=0;
		}
		if(this._pt.x<this.maxRect.x){
			this.ex=this.speed;
			this.move(this._pt.x+this.ex,this._pt.y);
			return;
			}else if(this._pt.x>this.maxRect.right){
			this.ex=-this.speed;
			this.move(this._pt.x+this.ex,this._pt.y);
			return;
		}
		if(this._attack==false){
			if(this.shootpt.distance(this._pt.x,this._pt.y+this.hity)<50){
				this.ex=this.ey=0;
				this._attack=true;
				this._attacktime=0;
				this.checkHit=true;
				this.showRole("A_");
				this.role.play(1,false);
				this.role.once("complete",this,this.attackOver);
				}else{
				if(Math.abs(this.shootpt.x-this._pt.x)>this.speed){
					this.ex=this.shootpt.x<this._pt.x ?-this.speed :this.speed;
					}else{
					this.ex=0;
				}
				if(Math.abs(this.shootpt.y-this._pt.y-this.hity)>this.speed){
					this.ey=this.shootpt.y<this._pt.y+this.hity ?-2 :2;
					}else{
					this.ey=0;
				}
			}
			if(this.ex!=0 || this.ey!=0){
				this.move(this._pt.x+this.ex,this._pt.y+this.ey);
			}
		}else{}
	}

	/*if(_attacktime>3){
	checkHit=true;
	}else{

	_attacktime++;
}*/


__proto.attackOver=function(){
	this.hity=Math.random()*70+30>>0;
	this._attackGay=Math.random()*10>>0;
	this.role.play();
	this._attacktime=0;
	this._attack=false;
	this.checkHit=false;
	this.showRole("S_");
	this.ex=this._dir==1 ?-this.speed :this.speed;
}


__proto.hurt=function(val,isAoe){
	(isAoe===void 0)&& (isAoe=false);
	if(this.hurtStep<10)return 0;
	if(this._attack==false
		&& this.go<1){
		if(isAoe && this.baseRoleData.hp>val){
			if(this._dir==5){
				if(this._pt.x>GlobalAPI.moveViewPort.maxRect.x+64){
					this.move(this._pt.x-MapData.boxW-Math.random()*8>>0,this._pt.y,false);
				}
				}else{
				if(this._pt.x<GlobalAPI.moveViewPort.maxRect.right-64){
					this.move(this._pt.x+MapData.boxW+Math.random()*8>>0,this._pt.y,false);
				}
			}
		}
		this._attackGay=80;
		this.go=20;
		this.ex=this.ey=0;
		this.showRole("H_");
	}

	return game.Body.BaseAct.prototype.hurt.call(this,val);
}


__proto.setData=function(val){
	if(GlobalAPI.nowdouble){
		if(Math.random()*2>>0==0){
			this.shootpt=GlobalAPI.heropt;
			this.shootGroundpt=GlobalAPI.heroGroundPt;
			}else{
			this.shootpt=GlobalAPI.heropt2;
			this.shootGroundpt=GlobalAPI.heroGroundPt2;
		}
	}

	_super.prototype.setData.call(this,val);
	this.speed=this.baseRoleData.speed;
	this.ey=0;
	this.ex=this.speed*this.baseRoleData.dir;
}


__proto.die=function(dir){
	this.checkHit=false;
	GlobalAPI.soundMgr.playSound("zombiediesound");
	GlobalAPI.soundMgr.playSound("jizhongsound");
	this.touchGround=false;
	game.Body.BaseAct.prototype.die.call(this,dir);
	this.role.offAll();
	this.dispose();
}


__proto.showRole=function(status){
	if((this._status !=status || this._skindir !=this._dir)&& this.firemc){
		this.eyemc.scaleX=this._dir==5 ? 1:-1;
	}

	if(this.fireing && status !="F_"){
		return;
	}

	if(this.isDie && status !="F_"){
		return;
	}

	_super.prototype.showRole.call(this,status);
}


__proto.dispose=function(){
	UIUtils.clearFilter(this.role,ColorFilter);
	this.time=0;
	if(this.firemc){
		GlobalAPI.miniAniEffect.over(this.firemc);
		this.firemc=null;
	}

	_super.prototype.dispose.call(this);
}


return Enemy103;
})(SkinAct)


/**
*静止的物体
*@author guowc
*
*/
//class game.role.ai.Enemy108 extends game.Body.SkinAct
var Enemy108=(function(_super){
	function Enemy108(){
		this.idx=0;
		this.rw=0;
		this.rh=0;
		Enemy108.__super.call(this);
		this.frameDelay=60;
	}

	__class(Enemy108,'game.role.ai.Enemy108',_super);
	var __proto=Enemy108.prototype;
	__proto.init=function(){
		_super.prototype.init.call(this);
	}

	__proto.setData=function(val){
		this.rw=(val).rw;
		this.rh=(val).rh;
		_super.prototype.setData.call(this,val);
		this.checkHit=val.hurt>0;
	}

	__proto.showRole=function(status){
		if(this.role!=null || this._status)return;
		this._status=status;
		if(!this.role){
			this.role=GlobalAPI.poolMgr.getRoleSkin();
			this.role.interval=this.frameDelay;
			this.role.on("roleload",this,this.loaded);
			this.role.loadResource(PathMgr.path_miniani+"miniani.json",PathMgr.path_miniani+"miniani"+".ani");
			this.role.updateSkin(this._status,this._dir);
		}
		this._skindir=this._dir;
	}

	__proto.aniPlay=function(loop){
		(loop===void 0)&& (loop=true);
		if(this.role){
			this.role.play(0,loop,"e"+this.baseRoleData.skin);
			if(this.baseRoleData.score>0){
				this.idx=Math.random()*this.role.count>>0;
			}
		}
	}

	__proto.updateXY=function(){
		game.Body.BaseAct.prototype.updateXY.call(this);
		if(this.rw==0)
			this._shootpt.x=this._rect.x+this._rect.width*0.5;
		if(this.rh==0)
			this._shootpt.y=this._rect.y+this._rect.height+this._rect.height*0.5;
	}

	__proto.setWH=function(){
		this.aniPlay();
		var rect=this.role.getBounds();
		if(rect.width>0){
			this.killRect.width=rect.width;
			this.killRect.height=rect.height;
			}else{
			this.killRect.width=this.killRect.height=this.bodyWid;
		}
		this.bodyRect.width=rect.width;
		this.bodyRect.height=rect.height;
		if(this.rh==0){
			this.bodyRect.y=0;
			}else{
			if(this.isFrontBg){
				this.bodyRect.y=-this.bodyRect.height+6;
				this.role.y=6;
				}else{
				this.bodyRect.y=-this.bodyRect.height;
				this.role.y=0;
			}
		}
		this.redraw();
	}

	__proto.getKillRect=function(atk){
		(atk===void 0)&& (atk=false);
		this.killRect.x=this._rect.x;
		this.killRect.y=this._rect.y+this._rect.height;
		return this.killRect;
	}

	__proto.play=function(val){
		if(this.baseRoleData.skin==240 || this.baseRoleData.skin==241){
			val=GlobalAPI.moveViewPort.getLayerContainer(0);
		}
		_super.prototype.play.call(this,val);
	}

	__proto.roleplay=function(){
		if(this.baseRoleData.score>0){
			this.role.gotoAndStop(this.idx);
			}else{
			this.role.play();
		}
	}

	return Enemy108;
})(SkinAct)


/**
*静止的物体
*@author guowc
*
*/
//class game.role.ai.Enemy401 extends game.Body.SkinAct
var Enemy401=(function(_super){
	function Enemy401(){
		this.rw=0;
		this.rh=0;
		Enemy401.__super.call(this);
	}

	__class(Enemy401,'game.role.ai.Enemy401',_super);
	var __proto=Enemy401.prototype;
	__proto.setData=function(val){
		this.rw=(val).rw;
		this.rh=(val).rh;
		_super.prototype.setData.call(this,val);
	}

	__proto.play=function(val){
		_super.prototype.play.call(this,val);
	}

	//}
	__proto.setWH=function(){
		this.bodyRect.width=this.role.getBounds().width;
		this.bodyRect.height=this.role.getBounds().height-this.bodygay;
		if(this.rw==0)
			this.bodyRect.x=0;
		else
		this.bodyRect.x=-this.bodyRect.width>>1;
		if(this.rh==0)
			this.bodyRect.y=0;
		else
		this.bodyRect.y=-this.bodyRect.height;
		if(this.bodyRect.width>0){
			this.killRect.width=this.rw<2 ? this.bodyRect.width :this.rw;
			this.killRect.height=this.rh<2 ? this.bodyRect.height :this.rh;
			}else{
			this.killRect.width=this.killRect.height=this.bodyWid;
		}
		this.redraw();
	}

	__proto.getKillRect=function(atk){
		(atk===void 0)&& (atk=false);
		if(this.rw==0){
			this.killRect.x=this._rect.x;
			}else{
			this.killRect.x=this._rect.x-this.killRect.width*0.5;
		}
		if(this.rh==0){
			this.killRect.y=this._rect.y+this._rect.height;
			}else{
			this.killRect.y=this._rect.y;
		}
		return this.killRect;
	}

	__proto.updateXY=function(){
		game.Body.BaseAct.prototype.updateXY.call(this);
		if(this.rw==0)
			this._shootpt.x=this._rect.x+this.bodyRect.width*0.5;
		if(this.rh==0)
			this._shootpt.y=this._rect.y+this._rect.height*0.5+this._rect.height;
	}

	__proto.dispose=function(){
		_super.prototype.dispose.call(this);
	}

	return Enemy401;
})(SkinAct)


//class game.role.HeroDemo extends game.Body.SkinAct
var HeroDemo=(function(_super){
	function HeroDemo(){
		this.proxy=null;
		this.hproxy=null;
		this.weaponid=1;
		this.roleVO=null;
		this.handr0=null;
		HeroDemo.__super.call(this);
		this.pt=new Point;
		this.proxy=GlobalAPI.mountproxy;
		this.hproxy=GlobalAPI.heroproxy;
		this.frameDelay=120;
	}

	__class(HeroDemo,'game.role.HeroDemo',_super);
	var __proto=HeroDemo.prototype;
	__proto.choose=function(id){
		this.roleVO=GlobalAPI.heroinfo.getRoleVO(id);
		this.setData(this.roleVO);
		if(this.weapond){
			this.handr0.removeSelf();
			this.handl0.removeSelf();
			this.weapon.removeSelf();
			this.body.removeSelf();
			}else{
			this.weapond=new Sprite;
			this.addChild(this.weapond);
			this.weapond1=new Sprite;
			this.addChildAt(this.weapond1,0);
		}
		this.handr0=GlobalAPI.roleAniEffect.start(this.weapond,0,0,"handr"+id,false);
		this.handr0.setStop(0);
		this.handl0=GlobalAPI.roleAniEffect.start(this.weapond,0,0,"handl"+id,false);
		this.handl0.setStop(0);
		this.weapon=this.hproxy.getWeaponSkin(0);
		this.weapon.removeChildren();
		this.weapon.setStop(0);
		this.body=GlobalAPI.roleAniEffect.start(this,0,0,"hero"+id,false);
		this.body.setStop(0);
		this.weapond.addChild(this.weapon);
		this.weapon.addChild(this.handr0);
		this.weapond1.addChild(this.handl0);
		this.body.x=0;
		this.addChild(this.body);
		DepthManager.bringToTop(this.weapond);
		this.updateRoleSkin();
		this.setBody(15);
		this.updateBodyPt();
		this.setXY(this.pt.x,this.pt.y);
		this.setMountIdx(GlobalAPI.heroproxy.getMountSelect(this.roleVO.id));
	}

	/////////----------------------------
	__proto.checklr=function(){}
	__proto.updateWeaponPt=function(id){
		var skin=GlobalAPI.weaponinfo.getSkin(id);
		this.updateWeaponSkin(skin);
	}

	//weapond1.y=weapond.y=GlobalAPI.weaponptinfo.getWeaponPt(baseRoleData.skin,weaponid).y;
	__proto.show=function(val,id){
		(id===void 0)&& (id=0);
		this.choose(id);
		this.play(val);
	}

	__proto.setMountIdx=function(idx){
		this.proxy.setMount(idx);
		var b=Boolean(this.proxy.getUrl());
		this.setMount(b);
	}

	__proto.setMount=function(val){
		this.role.interval=this.frameDelay;
		if(val){
			this._dir=this._bodydir;
			this.isMount=true;
			}else{
			if(this.isMount){
				this._dir=this._bodydir;
				this.isMount=false;
			}
			this.proxy.setMount(-1);
		}
		this.setMountSkin(this.proxy.getUrl());
		if(this.isMount){
			this.showRole("M_");
			}else{
			this.showRole("S_");
		}
		if(this.role){
			this.role.y=this.proxy.getHerolegY();
		}
		this.updateBodyPt();
		this.setWH();
	}

	__proto.updateBodyPt=function(){
		var pt=GlobalAPI.weaponptinfo.getWeaponPt(this.baseRoleData.id,this.weaponid);
		if(this.isMount){
			this.body.y=this.proxy.getHerobodyY()-15;
			this.weapondPt.y=this.weapond.y=this.weapond1.y=pt.y+this.body.y+20;
			}else{
			this.body.y=-25;
			this.weapondPt.y=this.weapond.y=this.weapond1.y=pt.y+this.body.y+20;
		}
	}

	__proto.setPt=function(dx,dy){
		this.pt.x=dx;
		this.pt.y=dy;
		this.setXY(dx,dy);
	}

	__proto.updateWeaponSkin=function(val){
		_super.prototype.updateWeaponSkin.call(this,val);
		this.updateBodyPt();
	}

	__proto.updateLev=function(){
		GlobalAPI.miniAniEffect.start(this,0,0,"uplev",true,25);
		GlobalAPI.soundMgr.playSound("uplevelsound");
	}

	__proto.showRole=function(status){
		this._dir=5;
		this._status="";
		_super.prototype.showRole.call(this,status);
	}

	return HeroDemo;
})(SkinAct)


/**
*角色皮肤
*@author guowc
*
*/
//class mylaya.common.skin.RoleSkin extends laya.display.Animation
var RoleSkin=(function(_super){
	function RoleSkin(){
		//ani资源代号
		this._resourceId="";
		//当前状态
		this._status=null;
		//当前8方向中的方向值
		this._directType=5;
		//当前正在使用的影片名
		this._imgName=null;
		this._isRoleType=false;
		this._loop=true;
		RoleSkin.__super.call(this);
		this._isRoleType=true;
	}

	__class(RoleSkin,'mylaya.common.skin.RoleSkin',_super);
	var __proto=RoleSkin.prototype;
	__proto.setRoleType=function(val){
		this._isRoleType=val;
	}

	__proto.play=function(start,loop,name,showWarn){
		(start===void 0)&& (start=0);
		(loop===void 0)&& (loop=true);
		(name===void 0)&& (name="");
		(showWarn===void 0)&& (showWarn=false);
		_super.prototype.play.call(this,start,loop,name,showWarn);
	}

	/**
	*移除
	*/
	__proto.dispose=function(){
		this.reset();
		this._loop=true;
		this.removeSelf();
	}

	__proto.getStatus=function(){
		return this._status;
	}

	__proto.reset=function(){
		this._status=null;
		this._directType=5;
		this._imgName=null;
		this._resourceId="";
		this._actionName="";
		this.scaleX=1;
		this._isRoleType=true;
		this.pivotX=this.pivotY=0;
		this.clear();
	}

	__proto.nextFrame=function(loop){
		(loop===void 0)&& (loop=false);
		if(this.index>=this._count-1){
			if(loop){
				this.gotoAndStop(0);
			}
			}else{
			this.gotoAndStop(this.index+1);
		}
	}

	__proto.prevFrame=function(loop){
		(loop===void 0)&& (loop=false);
		if(this.index<0){
			if(loop){
				this.gotoAndStop(this._count-1);
			}
			}else{
			this.gotoAndStop(this.index-1);
		}
	}

	/**
	*更新皮肤状态和方向
	*@status RoleStatus定义
	*@directType DirectionType定义
	*/
	__proto.updateSkin=function(status,directType,ismirror){
		(ismirror===void 0)&& (ismirror=true);
		if(this._isRoleType==false)return;
		if(this._status==status && this._directType==directType)
			return;
		this._status=status;
		this._directType=directType;
		if(this._directType==1 ||
			this._directType==0 ||
		this._directType==2){
			this.scaleX=-1;
			}else{
			this.scaleX=1;
		}
		this.useImg(ismirror);
	}

	/**
	*
	*@param formatUrl　ATLAS格式地址
	*@param resourceId ani地址
	*
	*/
	__proto.loadResource=function(formatUrl,resourceId){
		var _$this=this;
		if(this._resourceId==resourceId){
			return;
		}
		this._resourceId=resourceId;
		if(Loader.getRes(formatUrl)){
			this.setResource(this._resourceId);
			return;
		}
		Laya.loader.load([{url:formatUrl,type:"atlas"}],
		Handler.create(this,picLoad,[this._resourceId]));
		function picLoad (url){
			if(_$this._resourceId==url){
				_$this.setResource(resourceId);
			}
		}
	}

	/**
	*皮肤数据源
	*/
	__proto.setResource=function(resourceId){
		var _$this=this;
		this.clear();
		this.loadAnimation(resourceId,Handler.create(this,loadani,[resourceId]));
		function loadani (url){
			if(_$this._resourceId==url){
				if(_$this._isRoleType==false){
					if(_$this._status!=null){
						_$this.updateSkin(_$this._status,_$this._directType);
						}else{
						_$this.updateSkin("S_",_$this._directType);
					}
				}
				_$this.event("roleload",_$this);
			}
		}
	}

	__proto.isTransparent=function(x,y){
		if(!this._frames || this._frames.length<1)return true;
		if(this.scaleX==1){
			}else{
			x=-x;
		};
		var gra=this.frames[this.index];
		var texture=gra._one[0];
		var px=gra._one[1];
		var py=gra._one[2];
		var dx=x+texture.offsetX-px;
		var dy=y+texture.offsetY-py;
		var ar=texture.getPixels(dx,dy,1,1);
		var i;
		for(var $each_i in ar){
			i=ar[$each_i];
			if(i>0)return false;
		}
		return true;
	}

	__proto.getCurrentFrameTexture=function(){
		if(!this._frames)return null;
		var gra=this._frames[this.index];
		if(gra && gra._one){
			return gra._one[0];
		}
		return null;
	}

	__proto.setLoop=function(val){
		this._loop=val;
	}

	//当前图像更新
	__proto.useImg=function(ismirror){
		var imgName;
		if(ismirror){
			imgName=this._status+DirectType.GetDir(this._directType);
			}else{
			imgName=this._status+DirectType.GetDirAll(this._directType);
		}
		if(imgName==this._imgName){
			return;
		}
		this._imgName=imgName;
		this.play(0,this._loop,this._imgName);
	}

	RoleSkin.RoleSkinLoad="roleload";
	return RoleSkin;
})(Animation)


/**
*<code>View</code> 是一个视图类。
*@internal <p><code>View</code></p>
*/
//class laya.ui.View extends laya.ui.Box
var View=(function(_super){
	var DataWatcher;
	function View(){
		/**@private */
		this._idMap=null;
		/**@private */
		this._aniList=null;
		/**@private */
		this._watchMap={};
		View.__super.call(this);
	}

	__class(View,'laya.ui.View',_super);
	var __proto=View.prototype;
	/**
	*@private
	*通过视图数据创建视图。
	*@param uiView 视图数据信息。
	*/
	__proto.createView=function(uiView){
		if (uiView.animations && !this._idMap)this._idMap={};
		View.createComp(uiView,this,this);
		if (uiView.animations){
			var anilist=[];
			var animations=uiView.animations;
			var i=0,len=animations.length;
			var tAni;
			var tAniO;
			for (i=0;i < len;i++){
				tAni=new FrameAnimation();
				tAniO=animations[i];
				tAni._setUp(this._idMap,tAniO);
				this[tAniO.name]=tAni;
				tAni._setControlNode(this);
				switch (tAniO.action){
					case 1:
						tAni.play(0,false);
						break ;
					case 2:
						tAni.play(0,true);
						break ;
					}
				anilist.push(tAni);
			}
			this._aniList=anilist;
		}
		if (this._width > 0 && uiView.props.hitTestPrior==null && !this.mouseThrough)this.hitTestPrior=true;
	}

	__proto.onEvent=function(type,event){}
	/**
	*@private
	*装载UI视图。用于加载模式。
	*@param path UI资源地址。
	*/
	__proto.loadUI=function(path){
		var uiView=View.uiMap[path];
		uiView && this.createView(uiView);
	}

	/**
	*<p>销毁此对象。</p>
	*@param destroyChild 是否同时销毁子节点，若值为true,则销毁子节点，否则不销毁子节点。
	*/
	__proto.destroy=function(destroyChild){
		(destroyChild===void 0)&& (destroyChild=true);
		if (this._aniList)this._aniList.length=0;
		this._idMap=null;
		this._aniList=null;
		this._watchMap=null;
		laya.ui.Component.prototype.destroy.call(this,destroyChild);
	}

	/**@private */
	__proto.changeData=function(key){
		var arr=this._watchMap[key];
		if (!arr)return;
		console.log("change",key);
		for (var i=0,n=arr.length;i < n;i++){
			var watcher=arr[i];
			watcher.exe(this);
		}
	}

	View._regs=function(){
		for (var key in View.uiClassMap){
			ClassUtils.regClass(key,View.uiClassMap[key]);
		}
	}

	View.createComp=function(uiView,comp,view,dataMap){
		comp=comp || View.getCompInstance(uiView);
		if (!comp){
			console.warn("can not create:"+uiView.type);
			return null;
		};
		var child=uiView.child;
		if (child){
			var isList=(comp instanceof laya.ui.List );
			for (var i=0,n=child.length;i < n;i++){
				var node=child[i];
				if (comp.hasOwnProperty("itemRender")&& (node.props.name=="render" || node.props.renderType==="render")){
					(comp).itemRender=node;
					}else if (node.type=="Graphic"){
					ClassUtils.addGraphicsToSprite(node,comp);
					}else if (ClassUtils.isDrawType(node.type)){
					ClassUtils.addGraphicToSprite(node,comp,true);
					}else {
					if (isList){
						var arr=[];
						var tChild=View.createComp(node,null,view,arr);
						if (arr.length)tChild["_$bindData"]=arr;
						}else {
						tChild=View.createComp(node,null,view,dataMap);
					}
					if (node.type=="Script"){
						if ("owner" in tChild){
							tChild["owner"]=comp;
							}else if ("target" in tChild){
							tChild["target"]=comp;
						}
						}else if (node.props.renderType=="mask" || node.props.name=="mask"){
						comp.mask=tChild;
						}else {(
						tChild instanceof laya.display.Sprite )&& comp.addChild(tChild);
					}
				}
			}
		};
		var props=uiView.props;
		for (var prop in props){
			var value=props[prop];
			if (View.eventDic[prop]){
				if (value&&view){
					(comp).on(prop,view,view.onEvent,[value]);
				}
			}else
			View.setCompValue(comp,prop,value,view,dataMap);
		}
		if (Laya.__typeof(comp,'laya.ui.IItem'))(comp).initItems();
		if (uiView.compId && view && view._idMap){
			view._idMap[uiView.compId]=comp;
		}
		return comp;
	}

	View.setCompValue=function(comp,prop,value,view,dataMap){
		if ((typeof value=='string')&& value.indexOf("${")>-1){
			View._sheet || (View._sheet=ClassUtils.getClass("laya.data.Table"));
			if (!View._sheet){
				console.warn("Can not find class Sheet");
				return;
			}
			if (dataMap){
				dataMap.push(comp,prop,value);
				}else if (view){
				if (value.indexOf("].")==-1){
					value=value.replace(".","[0].");
				};
				var watcher=new DataWatcher(comp,prop,value);
				watcher.exe(view);
				var one,temp;
				var str=value.replace(/\[.*?\]\./g,".");
				while ((one=View._parseWatchData.exec(str))!=null){
					var key1=one[1];
					while ((temp=View._parseKeyWord.exec(key1))!=null){
						var key2=temp[0];
						var arr=(view._watchMap[key2] || (view._watchMap[key2]=[]));
						arr.push(watcher);
						View._sheet.I.notifer.on(key2,view,view.changeData,[key2]);
					}
					arr=(view._watchMap[key1] || (view._watchMap[key1]=[]));
					arr.push(watcher);
					View._sheet.I.notifer.on(key1,view,view.changeData,[key1]);
				}
			}
			return;
		}
		if (prop==="var" && view){
			view[value]=comp;
			}else if (prop=="onClick"){
			var fun=Browser.window.eval("(function(){"+value+"})");
			comp.on("click",view,fun);
			}else {
			comp[prop]=(value==="true" ? true :(value==="false" ? false :value));
		}
	}

	View.getCompInstance=function(json){
		var runtime=json.props ? json.props.runtime :null;
		var compClass;
		compClass=runtime ? (View.viewClassMap[runtime] || View.uiClassMap[runtime]|| Laya["__classmap"][runtime]):View.uiClassMap[json.type];
		if (json.props && json.props.hasOwnProperty("renderType")&& json.props["renderType"]=="instance")return compClass["instance"];
		return compClass ? new compClass():null;
	}

	View.regComponent=function(key,compClass){
		View.uiClassMap[key]=compClass;
		ClassUtils.regClass(key,compClass);
	}

	View.regViewRuntime=function(key,compClass){
		View.viewClassMap[key]=compClass;
	}

	View.uiMap={};
	View.viewClassMap={};
	View._sheet=null;
	__static(View,
	['uiClassMap',function(){return this.uiClassMap={"ViewStack":ViewStack,"LinkButton":Button,"TextArea":TextArea,"ColorPicker":ColorPicker,"Box":Box,"Button":Button,"CheckBox":CheckBox,"Clip":Clip,"ComboBox":ComboBox,"Component":Component,"HScrollBar":HScrollBar,"HSlider":HSlider,"Image":Image,"Label":Label,"List":List,"Panel":Panel,"ProgressBar":ProgressBar,"Radio":Radio,"RadioGroup":RadioGroup,"ScrollBar":ScrollBar,"Slider":Slider,"Tab":Tab,"TextInput":TextInput,"View":View,"VScrollBar":VScrollBar,"VSlider":VSlider,"Tree":Tree,"HBox":HBox,"VBox":VBox,"Sprite":Sprite,"Animation":Animation,"Text":Text,"FontClip":FontClip};},'eventDic',function(){return this.eventDic={"mousedown":true,"mouseup":true,"mousemove":true,"mouseover":true,"mouseout":true,"click":true,"doubleclick":true,"rightmousedown":true,"rightmouseup":true,"rightclick":true };},'_parseWatchData',function(){return this._parseWatchData=/\${(.*?)}/g;},'_parseKeyWord',function(){return this._parseKeyWord=/[a-zA-Z_][a-zA-Z0-9_]*(?:(?:\.[a-zA-Z_][a-zA-Z0-9_]*)+)/g;}
	]);
	View.__init$=function(){
		View._regs()
		//class DataWatcher
		DataWatcher=(function(){
			function DataWatcher(comp,prop,value){
				this.comp=null;
				this.prop=null;
				this.value=null;
				this.comp=comp;
				this.prop=prop;
				this.value=value;
			}
			__class(DataWatcher,'');
			var __proto=DataWatcher.prototype;
			__proto.exe=function(view){
				var fun=UIUtils.getBindFun(this.value);
				this.comp[this.prop]=fun.call(this,view);
			}
			return DataWatcher;
		})()
	}

	return View;
})(Box)


//class game.view.MyProgressBar extends laya.ui.ProgressBar
var MyProgressBar=(function(_super){
	function MyProgressBar(skin){
		this.maxhp=0;
		this.txt=null;
		this._showtxt=false;
		this.numAni=null;
		MyProgressBar.__super.call(this,skin);
		this.txt=new Text;
		this.txt.y=-1;
		this.txt.size(100,20);
		this.txt.align="center";
		this.txt.valign="middle";
		this.txt.color="#ffffff";
		this.txt.fontSize=12;
		this.addChild(this.txt);
		this.numAni=new StepNumAni;
	}

	__class(MyProgressBar,'game.view.MyProgressBar',_super);
	var __proto=MyProgressBar.prototype;
	__proto.setData=function(val,max,showtxt,fast){
		(showtxt===void 0)&& (showtxt=false);
		(fast===void 0)&& (fast=false);
		this.txt.visible=this._showtxt=showtxt;
		this.maxhp=max;
		this.numAni.setData(val,Handler.create(this,this.step,null,false),fast);
	}

	__proto.step=function(num){
		this.value=num/this.maxhp;
		if(this._showtxt){
			this.txt.text=num+"/"+this.maxhp;
		}
	}

	__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
		Laya.superSet(ProgressBar,this,'width',value);
		this.txt.width=value;
	});

	__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
		Laya.superSet(ProgressBar,this,'height',value);
		this.txt.height=value;
	});

	return MyProgressBar;
})(ProgressBar)


/**
*<code>List</code> 控件可显示项目列表。默认为垂直方向列表。可通过UI编辑器自定义列表。
*
*@example <caption>以下示例代码，创建了一个 <code>List</code> 实例。</caption>
*package
*{
	*import laya.ui.List;
	*import laya.utils.Handler;
	*public class List_Example
	*{
		*public function List_Example()
		*{
			*Laya.init(640,800,"false");//设置游戏画布宽高、渲染模式。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load(["resource/ui/vscroll.png","resource/ui/vscroll$bar.png","resource/ui/vscroll$down.png","resource/ui/vscroll$up.png"],Handler.create(this,onLoadComplete));
			*}
		*private function onLoadComplete():void
		*{
			*var arr:Array=[];//创建一个数组，用于存贮列表的数据信息。
			*for (var i:int=0;i &lt;20;i++)
			*{
				*arr.push({label:"item"+i});
				*}
			*var list:List=new List();//创建一个 List 类的实例对象 list 。
			*list.itemRender=Item;//设置 list 的单元格渲染器。
			*list.repeatX=1;//设置 list 的水平方向单元格数量。
			*list.repeatY=10;//设置 list 的垂直方向单元格数量。
			*list.vScrollBarSkin="resource/ui/vscroll.png";//设置 list 的垂直方向滚动条皮肤。
			*list.array=arr;//设置 list 的列表数据源。
			*list.pos(100,100);//设置 list 的位置。
			*list.selectEnable=true;//设置 list 可选。
			*list.selectHandler=new Handler(this,onSelect);//设置 list 改变选择项执行的处理器。
			*Laya.stage.addChild(list);//将 list 添加到显示列表。
			*}
		*private function onSelect(index:int):void
		*{
			*trace("当前选择的项目索引： index= ",index);
			*}
		*}
	*}
*import laya.ui.Box;
*import laya.ui.Label;
*class Item extends Box
*{
	*public function Item()
	*{
		*graphics.drawRect(0,0,100,20,null,"#ff0000");
		*var label:Label=new Label();
		*label.text="100000";
		*label.name="label";//设置 label 的name属性值。
		*label.size(100,20);
		*addChild(label);
		*}
	*}
*@example
*(function (_super){
	*function Item(){
		*Item.__super.call(this);//初始化父类
		*this.graphics.drawRect(0,0,100,20,"#ff0000");
		*var label=new laya.ui.Label();//创建一个 Label 类的实例对象 label 。
		*label.text="100000";//设置 label 的文本内容。
		*label.name="label";//设置 label 的name属性值。
		*label.size(100,20);//设置 label 的宽度、高度。
		*this.addChild(label);//将 label 添加到显示列表。
		*};
	*Laya.class(Item,"mypackage.listExample.Item",_super);//注册类 Item 。
	*})(laya.ui.Box);
*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
*var res=["resource/ui/vscroll.png","resource/ui/vscroll$bar.png","resource/ui/vscroll$down.png","resource/ui/vscroll$up.png"];
*Laya.loader.load(res,new laya.utils.Handler(this,onLoadComplete));//加载资源。
*function onLoadComplete(){
	*var arr=[];//创建一个数组，用于存贮列表的数据信息。
	*for (var i=0;i &lt;20;i++){
		*arr.push({label:"item"+i});
		*}
	*var list=new laya.ui.List();//创建一个 List 类的实例对象 list 。
	*list.itemRender=mypackage.listExample.Item;//设置 list 的单元格渲染器。
	*list.repeatX=1;//设置 list 的水平方向单元格数量。
	*list.repeatY=10;//设置 list 的垂直方向单元格数量。
	*list.vScrollBarSkin="resource/ui/vscroll.png";//设置 list 的垂直方向滚动条皮肤。
	*list.array=arr;//设置 list 的列表数据源。
	*list.pos(100,100);//设置 list 的位置。
	*list.selectEnable=true;//设置 list 可选。
	*list.selectHandler=new laya.utils.Handler(this,onSelect);//设置 list 改变选择项执行的处理器。
	*Laya.stage.addChild(list);//将 list 添加到显示列表。
	*}
*function onSelect(index)
*{
	*console.log("当前选择的项目索引： index= ",index);
	*}
*
*@example
*import List=laya.ui.List;
*import Handler=laya.utils.Handler;
*public class List_Example {
	*public List_Example(){
		*Laya.init(640,800);//设置游戏画布宽高。
		*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
		*Laya.loader.load(["resource/ui/vscroll.png","resource/ui/vscroll$bar.png","resource/ui/vscroll$down.png","resource/ui/vscroll$up.png"],Handler.create(this,this.onLoadComplete));
		*}
	*private onLoadComplete():void {
		*var arr=[];//创建一个数组，用于存贮列表的数据信息。
		*for (var i:number=0;i &lt;20;i++)
		*{
			*arr.push({label:"item"+i });
			*}
		*var list:List=new List();//创建一个 List 类的实例对象 list 。
		*list.itemRender=Item;//设置 list 的单元格渲染器。
		*list.repeatX=1;//设置 list 的水平方向单元格数量。
		*list.repeatY=10;//设置 list 的垂直方向单元格数量。
		*list.vScrollBarSkin="resource/ui/vscroll.png";//设置 list 的垂直方向滚动条皮肤。
		*list.array=arr;//设置 list 的列表数据源。
		*list.pos(100,100);//设置 list 的位置。
		*list.selectEnable=true;//设置 list 可选。
		*list.selectHandler=new Handler(this,this.onSelect);//设置 list 改变选择项执行的处理器。
		*Laya.stage.addChild(list);//将 list 添加到显示列表。
		*}
	*private onSelect(index:number):void {
		*console.log("当前选择的项目索引： index= ",index);
		*}
	*}
*import Box=laya.ui.Box;
*import Label=laya.ui.Label;
*class Item extends Box {
	*constructor(){
		*this.graphics.drawRect(0,0,100,20,null,"#ff0000");
		*var label:Label=new Label();
		*label.text="100000";
		*label.name="label";//设置 label 的name属性值。
		*label.size(100,20);
		*this.addChild(label);
		*}
	*}
*/
//class laya.ui.List extends laya.ui.Box
var List=(function(_super){
	function List(){
		/**改变 <code>List</code> 的选择项时执行的处理器，(默认返回参数： 项索引（index:int）)。*/
		this.selectHandler=null;
		/**单元格渲染处理器(默认返回参数cell:Box,index:int)。*/
		this.renderHandler=null;
		/**单元格鼠标事件处理器(默认返回参数e:Event,index:int)。*/
		this.mouseHandler=null;
		/**指定是否可以选择，若值为true则可以选择，否则不可以选择。 @default false*/
		this.selectEnable=false;
		/**最大分页数。*/
		this.totalPage=0;
		/**@private */
		this._content=null;
		/**@private */
		this._scrollBar=null;
		/**@private */
		this._itemRender=null;
		/**@private */
		this._repeatX=0;
		/**@private */
		this._repeatY=0;
		/**@private */
		this._repeatX2=0;
		/**@private */
		this._repeatY2=0;
		/**@private */
		this._spaceX=0;
		/**@private */
		this._spaceY=0;
		/**@private */
		this._array=null;
		/**@private */
		this._startIndex=0;
		/**@private */
		this._selectedIndex=-1;
		/**@private */
		this._page=0;
		/**@private */
		this._isVertical=true;
		/**@private */
		this._cellSize=20;
		/**@private */
		this._cellOffset=0;
		/**@private */
		this._isMoved=false;
		/**是否缓存内容，如果数据源较少，并且list内无动画，设置此属性为true能大大提高性能 */
		this.cacheContent=false;
		/**@private */
		this._createdLine=0;
		/**@private */
		this._cellChanged=false;
		List.__super.call(this);
		this._cells=[];
		this._offset=new Point();
	}

	__class(List,'laya.ui.List',_super);
	var __proto=List.prototype;
	Laya.imps(__proto,{"laya.ui.IRender":true,"laya.ui.IItem":true})
	/**@inheritDoc */
	__proto.destroy=function(destroyChild){
		(destroyChild===void 0)&& (destroyChild=true);
		this._content && this._content.destroy(destroyChild);
		this._scrollBar && this._scrollBar.destroy(destroyChild);
		laya.ui.Component.prototype.destroy.call(this,destroyChild);
		this._content=null;
		this._scrollBar=null;
		this._itemRender=null;
		this._cells=null;
		this._array=null;
		this.selectHandler=this.renderHandler=this.mouseHandler=null;
	}

	/**@inheritDoc */
	__proto.createChildren=function(){
		this.addChild(this._content=new Box());
	}

	__proto.onScrollStart=function(){
		this._$P.cacheAs || (this._$P.cacheAs=Laya.superGet(Box,this,'cacheAs'));
		Laya.superSet(Box,this,'cacheAs',"none");
		this._scrollBar.once("end",this,this.onScrollEnd);
	}

	__proto.onScrollEnd=function(){
		Laya.superSet(Box,this,'cacheAs',this._$P.cacheAs);
	}

	__proto._removePreScrollBar=function(){
		var preNode=this.removeChildByName("scrollBar");
		if (preNode)preNode.destroy(true);
	}

	/**
	*@private
	*更改单元格的信息。
	*@internal 在此销毁、创建单元格，并设置单元格的位置等属性。相当于此列表内容发送改变时调用此函数。
	*/
	__proto.changeCells=function(){
		this._cellChanged=false;
		if (this._itemRender){
			this.scrollBar=this.getChildByName("scrollBar");
			var cell=this._getOneCell();
			var cellWidth=(cell.width+this._spaceX)|| 1;
			var cellHeight=(cell.height+this._spaceY)|| 1;
			if (this._width > 0)this._repeatX2=this._isVertical ? Math.round(this._width / cellWidth):Math.ceil(this._width / cellWidth);
			if (this._height > 0)this._repeatY2=this._isVertical ? Math.ceil(this._height / cellHeight):Math.round(this._height / cellHeight);
			var listWidth=this._width ? this._width :(cellWidth *this.repeatX-this._spaceX);
			var listHeight=this._height ? this._height :(cellHeight *this.repeatY-this._spaceY);
			this._cellSize=this._isVertical ? cellHeight :cellWidth;
			this._cellOffset=this._isVertical ? (cellHeight *Math.max(this._repeatY2,this._repeatY)-listHeight-this._spaceY):(cellWidth *Math.max(this._repeatX2,this._repeatX)-listWidth-this._spaceX);
			if (this._isVertical && this._scrollBar)this._scrollBar.height=listHeight;
			else if (!this._isVertical && this._scrollBar)this._scrollBar.width=listWidth;
			this.setContentSize(listWidth,listHeight);
			var numX=this._isVertical ? this.repeatX :this.repeatY;
			var numY=(this._isVertical ? this.repeatY :this.repeatX)+(this._scrollBar ? 1 :0);
			this._createItems(0,numX,numY);
			this._createdLine=numY;
			if (this._array){
				this.array=this._array;
				this.runCallLater(this.renderItems);
			}
		}
	}

	__proto._getOneCell=function(){
		if (this._cells.length===0){
			var item=this.createItem();
			this._offset.setTo(item.x,item.y);
			if (this.cacheContent)return item;
			this._cells.push(item);
		}
		return this._cells[0];
	}

	__proto._createItems=function(startY,numX,numY){
		var box=this._content;
		var cell=this._getOneCell();
		var cellWidth=cell.width+this._spaceX;
		var cellHeight=cell.height+this._spaceY;
		if (this.cacheContent){
			var cacheBox=new Box();
			cacheBox.cacheAsBitmap=true;
			cacheBox.pos((this._isVertical ? 0 :startY)*cellWidth,(this._isVertical ? startY :0)*cellHeight);
			this._content.addChild(cacheBox);
			this._content.optimizeScrollRect=true;
			box=cacheBox;
			}else {
			var arr=[];
			for (var i=this._cells.length-1;i >-1;i--){
				var item=this._cells[i];
				item.removeSelf();
				arr.push(item);
			}
			this._cells.length=0;
		}
		for (var k=startY;k < numY;k++){
			for (var l=0;l < numX;l++){
				if (arr && arr.length){
					cell=arr.pop();
					}else {
					cell=this.createItem();
				}
				cell.x=(this._isVertical ? l :k)*cellWidth-box.x;
				cell.y=(this._isVertical ? k :l)*cellHeight-box.y;
				cell.name="item"+(k *numX+l);
				box.addChild(cell);
				this.addCell(cell);
			}
		}
	}

	__proto.createItem=function(){
		var arr=[];
		if ((typeof this._itemRender=='function')){
			var box=new this._itemRender();
			}else {
			box=View.createComp(this._itemRender,null,null,arr)
		}
		if (arr.length==0 && box._watchMap){
			var watchMap=box._watchMap;
			for (var name in watchMap){
				var a=watchMap[name];
				for (var i=0;i < a.length;i++){
					var watcher=a[i];
					arr.push(watcher.comp,watcher.prop,watcher.value)
				}
			}
		}
		if (arr.length)box["_$bindData"]=arr;
		return box;
	}

	/**
	*@private
	*添加单元格。
	*@param cell 需要添加的单元格对象。
	*/
	__proto.addCell=function(cell){
		cell.on("click",this,this.onCellMouse);
		cell.on("rightclick",this,this.onCellMouse);
		cell.on("mouseover",this,this.onCellMouse);
		cell.on("mouseout",this,this.onCellMouse);
		cell.on("mousedown",this,this.onCellMouse);
		cell.on("mouseup",this,this.onCellMouse);
		this._cells.push(cell);
	}

	/**
	*初始化单元格信息。
	*/
	__proto.initItems=function(){
		if (!this._itemRender && this.getChildByName("item0")!=null){
			this.repeatX=1;
			var count=0;
			count=0;
			for (var i=0;i < 10000;i++){
				var cell=this.getChildByName("item"+i);
				if (cell){
					this.addCell(cell);
					count++;
					continue ;
				}
				break ;
			}
			this.repeatY=count;
		}
	}

	/**
	*设置可视区域大小。
	*<p>以（0，0，width参数，height参数）组成的矩形区域为可视区域。</p>
	*@param width 可视区域宽度。
	*@param height 可视区域高度。
	*/
	__proto.setContentSize=function(width,height){
		this._content.width=width;
		this._content.height=height;
		if (this._scrollBar || this._offset.x !=0 || this._offset.y !=0){
			this._content.scrollRect || (this._content.scrollRect=new Rectangle());
			this._content.scrollRect.setTo(-this._offset.x,-this._offset.y,width,height);
			this._content.scrollRect=this._content.scrollRect;
		}
		this.event("resize");
	}

	/**
	*@private
	*单元格的鼠标事件侦听处理函数。
	*/
	__proto.onCellMouse=function(e){
		if (e.type==="mousedown")this._isMoved=false;
		var cell=e.currentTarget;
		var index=this._startIndex+this._cells.indexOf(cell);
		if (index < 0)return;
		if (e.type==="click" || e.type==="rightclick"){
			if (this.selectEnable && !this._isMoved)this.selectedIndex=index;
			else this.changeCellState(cell,true,0);
			}else if ((e.type==="mouseover" || e.type==="mouseout")&& this._selectedIndex!==index){
			this.changeCellState(cell,e.type==="mouseover",0);
		}
		this.mouseHandler && this.mouseHandler.runWith([e,index]);
	}

	/**
	*@private
	*改变单元格的可视状态。
	*@param cell 单元格对象。
	*@param visable 是否显示。
	*@param index 单元格的属性 <code>index</code> 值。
	*/
	__proto.changeCellState=function(cell,visable,index){
		var selectBox=cell.getChildByName("selectBox");
		if (selectBox){
			this.selectEnable=true;
			selectBox.visible=visable;
			selectBox.index=index;
		}
	}

	/**@inheritDoc */
	__proto.changeSize=function(){
		laya.ui.Component.prototype.changeSize.call(this);
		this.setContentSize(this.width,this.height);
		if (this._scrollBar)this.callLater(this.onScrollBarChange);
	}

	/**
	*@private
	*滚动条的 <code>Event.CHANGE</code> 事件侦听处理函数。
	*/
	__proto.onScrollBarChange=function(e){
		this.runCallLater(this.changeCells);
		var scrollValue=this._scrollBar.value;
		var lineX=(this._isVertical ? this.repeatX :this.repeatY);
		var lineY=(this._isVertical ? this.repeatY :this.repeatX);
		var scrollLine=Math.floor(scrollValue / this._cellSize);
		if (!this.cacheContent){
			var index=scrollLine *lineX;
			var num=0;
			if (index > this._startIndex){
				num=index-this._startIndex;
				var down=true;
				var toIndex=this._startIndex+lineX *(lineY+1);
				this._isMoved=true;
				}else if (index < this._startIndex){
				num=this._startIndex-index;
				down=false;
				toIndex=this._startIndex-1;
				this._isMoved=true;
			}
			for (var i=0;i < num;i++){
				if (down){
					var cell=this._cells.shift();
					this._cells[this._cells.length]=cell;
					var cellIndex=toIndex+i;
					}else {
					cell=this._cells.pop();
					this._cells.unshift(cell);
					cellIndex=toIndex-i;
				};
				var pos=Math.floor(cellIndex / lineX)*this._cellSize;
				this._isVertical ? cell.y=pos :cell.x=pos;
				this.renderItem(cell,cellIndex);
			}
			this._startIndex=index;
			this.changeSelectStatus();
			}else {
			num=(lineY+1);
			if (this._createdLine-scrollLine < num){
				this._createItems(this._createdLine,lineX,this._createdLine+num);
				this.renderItems(this._createdLine *lineX,0);
				this._createdLine+=num;
			}
		};
		var r=this._content.scrollRect;
		if (this._isVertical){
			r.y=scrollValue-this._offset.y;
			r.x=-this._offset.x;
			}else {
			r.y=-this._offset.y;
			r.x=scrollValue-this._offset.x;
		}
		this._content.scrollRect=r;
	}

	__proto.posCell=function(cell,cellIndex){
		if (!this._scrollBar)return;
		var lineX=(this._isVertical ? this.repeatX :this.repeatY);
		var lineY=(this._isVertical ? this.repeatY :this.repeatX);
		var pos=Math.floor(cellIndex / lineX)*this._cellSize;
		this._isVertical ? cell.y=pos :cell.x=pos;
	}

	/**
	*@private
	*改变单元格的选择状态。
	*/
	__proto.changeSelectStatus=function(){
		for (var i=0,n=this._cells.length;i < n;i++){
			this.changeCellState(this._cells[i],this._selectedIndex===this._startIndex+i,1);
		}
	}

	/**
	*@private
	*渲染单元格列表。
	*/
	__proto.renderItems=function(from,to){
		(from===void 0)&& (from=0);
		(to===void 0)&& (to=0);
		for (var i=from,n=to || this._cells.length;i < n;i++){
			this.renderItem(this._cells[i],this._startIndex+i);
		}
		this.changeSelectStatus();
	}

	/**
	*渲染一个单元格。
	*@param cell 需要渲染的单元格对象。
	*@param index 单元格索引。
	*/
	__proto.renderItem=function(cell,index){
		if (this._array && index >=0 && index < this._array.length){
			cell.visible=true;
			if (cell._$bindData){
				cell._dataSource=this._array[index];
				this._bindData(cell,this._array[index]);
			}else cell.dataSource=this._array[index];
			if (!this.cacheContent){
				this.posCell(cell,index);
			}
			if (this.hasListener("render"))this.event("render",[cell,index]);
			if (this.renderHandler)this.renderHandler.runWith([cell,index]);
			}else {
			cell.visible=false;
			cell.dataSource=null;
		}
	}

	__proto._bindData=function(cell,data){
		var arr=cell._$bindData;
		for (var i=0,n=arr.length;i < n;i++){
			var ele=arr[i++];
			var prop=arr[i++];
			var value=arr[i];
			var fun=UIUtils.getBindFun(value);
			ele[prop]=fun.call(this,data);
		}
	}

	/**
	*刷新列表数据源。
	*/
	__proto.refresh=function(){
		this.array=this._array;
	}

	/**
	*获取单元格数据源。
	*@param index 单元格索引。
	*/
	__proto.getItem=function(index){
		if (index >-1 && index < this._array.length){
			return this._array[index];
		}
		return null;
	}

	/**
	*修改单元格数据源。
	*@param index 单元格索引。
	*@param source 单元格数据源。
	*/
	__proto.changeItem=function(index,source){
		if (index >-1 && index < this._array.length){
			this._array[index]=source;
			if (index >=this._startIndex && index < this._startIndex+this._cells.length){
				this.renderItem(this.getCell(index),index);
			}
		}
	}

	/**
	*设置单元格数据源。
	*@param index 单元格索引。
	*@param source 单元格数据源。
	*/
	__proto.setItem=function(index,source){
		this.changeItem(index,source);
	}

	/**
	*添加单元格数据源。
	*@param souce 数据源。
	*/
	__proto.addItem=function(souce){
		this._array.push(souce);
		this.array=this._array;
	}

	/**
	*添加单元格数据源到对应的数据索引处。
	*@param souce 单元格数据源。
	*@param index 索引。
	*/
	__proto.addItemAt=function(souce,index){
		this._array.splice(index,0,souce);
		this.array=this._array;
	}

	/**
	*通过数据源索引删除单元格数据源。
	*@param index 需要删除的数据源索引值。
	*/
	__proto.deleteItem=function(index){
		this._array.splice(index,1);
		this.array=this._array;
	}

	/**
	*通过可视单元格索引，获取单元格。
	*@param index 可视单元格索引。
	*@return 单元格对象。
	*/
	__proto.getCell=function(index){
		this.runCallLater(this.changeCells);
		if (index >-1 && this._cells){
			return this._cells[(index-this._startIndex)% this._cells.length];
		}
		return null;
	}

	/**
	*<p>滚动列表，以设定的数据索引对应的单元格为当前可视列表的第一项。</p>
	*@param index 单元格在数据列表中的索引。
	*/
	__proto.scrollTo=function(index){
		if (this._scrollBar){
			var numX=this._isVertical ? this.repeatX :this.repeatY;
			this._scrollBar.value=Math.floor(index / numX)*this._cellSize;
			}else {
			this.startIndex=index;
		}
	}

	/**
	*<p>缓动滚动列表，以设定的数据索引对应的单元格为当前可视列表的第一项。</p>
	*@param index 单元格在数据列表中的索引。
	*@param time 缓动时间。
	*@param complete 缓动结束回掉
	*/
	__proto.tweenTo=function(index,time,complete){
		(time===void 0)&& (time=200);
		if (this._scrollBar){
			var numX=this._isVertical ? this.repeatX :this.repeatY;
			Tween.to(this._scrollBar,{value:Math.floor(index / numX)*this._cellSize},time,null,complete,0,true);
			}else {
			this.startIndex=index;
			if (complete)complete.run();
		}
	}

	/**@private */
	__proto._setCellChanged=function(){
		if (!this._cellChanged){
			this._cellChanged=true;
			this.callLater(this.changeCells);
		}
	}

	__proto.commitMeasure=function(){
		this.runCallLater(this.changeCells);
	}

	/**@inheritDoc */
	__getset(0,__proto,'cacheAs',_super.prototype._$get_cacheAs,function(value){
		Laya.superSet(Box,this,'cacheAs',value);
		if (this._scrollBar){
			this._$P.cacheAs=null;
			if (value!=="none")this._scrollBar.on("start",this,this.onScrollStart);
			else this._scrollBar.off("start",this,this.onScrollStart);
		}
	});

	/**
	*获取对 <code>List</code> 组件所包含的内容容器 <code>Box</code> 组件的引用。
	*/
	__getset(0,__proto,'content',function(){
		return this._content;
	});

	/**@inheritDoc */
	__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
		if (value !=this._height){
			Laya.superSet(Box,this,'height',value);
			this._setCellChanged();
		}
	});

	/**
	*单元格渲染器。
	*<p><b>取值：</b>
	*<ol>
	*<li>单元格类对象。</li>
	*<li> UI 的 JSON 描述。</li>
	*</ol></p>
	*/
	__getset(0,__proto,'itemRender',function(){
		return this._itemRender;
		},function(value){
		if (this._itemRender !=value){
			this._itemRender=value;
			for (var i=this._cells.length-1;i >-1;i--){
				this._cells[i].destroy();
			}
			this._cells.length=0;
			this._setCellChanged();
		}
	});

	/**
	*垂直方向滚动条皮肤。
	*/
	__getset(0,__proto,'vScrollBarSkin',function(){
		return this._scrollBar ? this._scrollBar.skin :null;
		},function(value){
		this._removePreScrollBar();
		var scrollBar=new VScrollBar();
		scrollBar.name="scrollBar";
		scrollBar.right=0;
		if (value && value !=" ")
			scrollBar.skin=value;
		this.scrollBar=scrollBar;
		this.addChild(scrollBar);
		this._setCellChanged();
	});

	/**
	*列表的当前页码。
	*/
	__getset(0,__proto,'page',function(){
		return this._page;
		},function(value){
		this._page=value
		if (this._array){
			this._page=value > 0 ? value :0;
			this._page=this._page < this.totalPage ? this._page :this.totalPage-1;
			this.startIndex=this._page *this.repeatX *this.repeatY;
		}
	});

	/**
	*水平方向滚动条皮肤。
	*/
	__getset(0,__proto,'hScrollBarSkin',function(){
		return this._scrollBar ? this._scrollBar.skin :null;
		},function(value){
		this._removePreScrollBar();
		var scrollBar=new HScrollBar();
		scrollBar.name="scrollBar";
		scrollBar.bottom=0;
		if (value && value !=" ")
			scrollBar.skin=value;
		this.scrollBar=scrollBar;
		this.addChild(scrollBar);
		this._setCellChanged();
	});

	/**
	*水平方向显示的单元格数量。
	*/
	__getset(0,__proto,'repeatX',function(){
		return this._repeatX > 0 ? this._repeatX :this._repeatX2 > 0 ? this._repeatX2 :1;
		},function(value){
		this._repeatX=value;
		this._setCellChanged();
	});

	/**
	*获取对 <code>List</code> 组件所包含的滚动条 <code>ScrollBar</code> 组件的引用。
	*/
	__getset(0,__proto,'scrollBar',function(){
		return this._scrollBar;
		},function(value){
		if (this._scrollBar !=value){
			this._scrollBar=value;
			if (value){
				this._isVertical=this._scrollBar.isVertical;
				this.addChild(this._scrollBar);
				this._scrollBar.on("change",this,this.onScrollBarChange);
			}
		}
	});

	/**@inheritDoc */
	__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
		if (value !=this._width){
			Laya.superSet(Box,this,'width',value);
			this._setCellChanged();
		}
	});

	/**
	*垂直方向显示的单元格数量。
	*/
	__getset(0,__proto,'repeatY',function(){
		return this._repeatY > 0 ? this._repeatY :this._repeatY2 > 0 ? this._repeatY2 :1;
		},function(value){
		this._repeatY=value;
		this._setCellChanged();
	});

	/**
	*水平方向显示的单元格之间的间距（以像素为单位）。
	*/
	__getset(0,__proto,'spaceX',function(){
		return this._spaceX;
		},function(value){
		this._spaceX=value;
		this._setCellChanged();
	});

	/**
	*垂直方向显示的单元格之间的间距（以像素为单位）。
	*/
	__getset(0,__proto,'spaceY',function(){
		return this._spaceY;
		},function(value){
		this._spaceY=value;
		this._setCellChanged();
	});

	/**
	*表示当前选择的项索引。selectedIndex值更改会引起list重新渲染
	*/
	__getset(0,__proto,'selectedIndex',function(){
		return this._selectedIndex;
		},function(value){
		if (this._selectedIndex !=value){
			this._selectedIndex=value;
			this.changeSelectStatus();
			this.event("change");
			this.selectHandler && this.selectHandler.runWith(value);
			this.startIndex=this._startIndex;
		}
	});

	/**
	*当前选中的单元格数据源。
	*/
	__getset(0,__proto,'selectedItem',function(){
		return this._selectedIndex !=-1 ? this._array[this._selectedIndex] :null;
		},function(value){
		this.selectedIndex=this._array.indexOf(value);
	});

	/**
	*列表的数据总个数。
	*/
	__getset(0,__proto,'length',function(){
		return this._array ? this._array.length :0;
	});

	/**
	*获取或设置当前选择的单元格对象。
	*/
	__getset(0,__proto,'selection',function(){
		return this.getCell(this._selectedIndex);
		},function(value){
		this.selectedIndex=this._startIndex+this._cells.indexOf(value);
	});

	/**
	*当前显示的单元格列表的开始索引。
	*/
	__getset(0,__proto,'startIndex',function(){
		return this._startIndex;
		},function(value){
		this._startIndex=value > 0 ? value :0;
		this.callLater(this.renderItems);
	});

	/**
	*列表数据源。
	*/
	__getset(0,__proto,'array',function(){
		return this._array;
		},function(value){
		this.runCallLater(this.changeCells);
		this._array=value || [];
		var length=this._array.length;
		this.totalPage=Math.ceil(length / (this.repeatX *this.repeatY));
		this._selectedIndex=this._selectedIndex < length ? this._selectedIndex :length-1;
		this.startIndex=this._startIndex;
		if (this._scrollBar){
			this._scrollBar.stopScroll();
			var numX=this._isVertical ? this.repeatX :this.repeatY;
			var numY=this._isVertical ? this.repeatY :this.repeatX;
			var lineCount=Math.ceil(length / numX);
			var total=this._cellOffset > 0 ? this.totalPage+1 :this.totalPage;
			if (total > 1){
				this._scrollBar.scrollSize=this._cellSize;
				this._scrollBar.thumbPercent=numY / lineCount;
				this._scrollBar.setScroll(0,(lineCount-numY)*this._cellSize+this._cellOffset,this._scrollBar.value);
				this._scrollBar.target=this._content;
				}else {
				this._scrollBar.setScroll(0,0,0);
				this._scrollBar.target=this._content;
			}
		}
	});

	/**@inheritDoc */
	__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
		this._dataSource=value;
		if (((typeof value=='number')&& Math.floor(value)==value)|| (typeof value=='string'))this.selectedIndex=parseInt(value);
		else if ((value instanceof Array))this.array=value
		else Laya.superSet(Box,this,'dataSource',value);
	});

	/**
	*单元格集合。
	*/
	__getset(0,__proto,'cells',function(){
		this.runCallLater(this.changeCells);
		return this._cells;
	});

	return List;
})(Box)


/**
*<code>Tree</code> 控件使用户可以查看排列为可扩展树的层次结构数据。
*
*@example
*package
*{
	*import laya.ui.Tree;
	*import laya.utils.Browser;
	*import laya.utils.Handler;
	*public class Tree_Example
	*{
		*public function Tree_Example()
		*{
			*Laya.init(640,800);
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load(["resource/ui/vscroll.png","resource/ui/vscroll$bar.png","resource/ui/vscroll$down.png","resource/ui/vscroll$up.png","resource/ui/clip_selectBox.png","resource/ui/clip_tree_folder.png","resource/ui/clip_tree_arrow.png"],Handler.create(this,onLoadComplete));
			*}
		*private function onLoadComplete():void
		*{
			*var xmlString:String;//创建一个xml字符串，用于存储树结构数据。
			*xmlString="&lt;root&gt;&lt;item label='box1'&gt;&lt;abc label='child1'/&gt;&lt;abc label='child2'/&gt;&lt;abc label='child3'/&gt;&lt;abc label='child4'/&gt;&lt;abc label='child5'/&gt;&lt;/item&gt;&lt;item label='box2'&gt;&lt;abc label='child1'/&gt;&lt;abc label='child2'/&gt;&lt;abc label='child3'/&gt;&lt;abc label='child4'/&gt;&lt;/item&gt;&lt;/root&gt;";
			*var domParser:*=new Browser.window.DOMParser();//创建一个DOMParser实例domParser。
			*var xml:*=domParser.parseFromString(xmlString,"text/xml");//解析xml字符。
			*var tree:Tree=new Tree();//创建一个 Tree 类的实例对象 tree 。
			*tree.scrollBarSkin="resource/ui/vscroll.png";//设置 tree 的皮肤。
			*tree.itemRender=Item;//设置 tree 的项渲染器。
			*tree.xml=xml;//设置 tree 的树结构数据。
			*tree.x=100;//设置 tree 对象的属性 x 的值，用于控制 tree 对象的显示位置。
			*tree.y=100;//设置 tree 对象的属性 y 的值，用于控制 tree 对象的显示位置。
			*tree.width=200;//设置 tree 的宽度。
			*tree.height=100;//设置 tree 的高度。
			*Laya.stage.addChild(tree);//将 tree 添加到显示列表。
			*}
		*}
	*}
*import laya.ui.Box;
*import laya.ui.Clip;
*import laya.ui.Label;
*class Item extends Box
*{
	*public function Item()
	*{
		*this.name="render";
		*this.right=0;
		*this.left=0;
		*var selectBox:Clip=new Clip("resource/ui/clip_selectBox.png",1,2);
		*selectBox.name="selectBox";
		*selectBox.height=24;
		*selectBox.x=13;
		*selectBox.y=0;
		*selectBox.left=12;
		*addChild(selectBox);
		*var folder:Clip=new Clip("resource/ui/clip_tree_folder.png",1,3);
		*folder.name="folder";
		*folder.x=14;
		*folder.y=4;
		*addChild(folder);
		*var label:Label=new Label("treeItem");
		*label.name="label";
		*label.color="#ffff00";
		*label.width=150;
		*label.height=22;
		*label.x=33;
		*label.y=1;
		*label.left=33;
		*label.right=0;
		*addChild(label);
		*var arrow:Clip=new Clip("resource/ui/clip_tree_arrow.png",1,2);
		*arrow.name="arrow";
		*arrow.x=0;
		*arrow.y=5;
		*addChild(arrow);
		*}
	*}
*@example
*Laya.init(640,800);//设置游戏画布宽高、渲染模式
*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
*var res=["resource/ui/vscroll.png","resource/ui/vscroll$bar.png","resource/ui/vscroll$down.png","resource/ui/vscroll$up.png","resource/ui/clip_selectBox.png","resource/ui/clip_tree_folder.png","resource/ui/clip_tree_arrow.png"];
*Laya.loader.load(res,new laya.utils.Handler(this,onLoadComplete));
*function onLoadComplete(){
	*var xmlString;//创建一个xml字符串，用于存储树结构数据。
	*xmlString="&lt;root&gt;&lt;item label='box1'&gt;&lt;abc label='child1'/&gt;&lt;abc label='child2'/&gt;&lt;abc label='child3'/&gt;&lt;abc label='child4'/&gt;&lt;abc label='child5'/&gt;&lt;/item&gt;&lt;item label='box2'&gt;&lt;abc label='child1'/&gt;&lt;abc label='child2'/&gt;&lt;abc label='child3'/&gt;&lt;abc label='child4'/&gt;&lt;/item&gt;&lt;/root&gt;";
	*var domParser=new laya.utils.Browser.window.DOMParser();//创建一个DOMParser实例domParser。
	*var xml=domParser.parseFromString(xmlString,"text/xml");//解析xml字符。
	*var tree=new laya.ui.Tree();//创建一个 Tree 类的实例对象 tree 。
	*tree.scrollBarSkin="resource/ui/vscroll.png";//设置 tree 的皮肤。
	*tree.itemRender=mypackage.treeExample.Item;//设置 tree 的项渲染器。
	*tree.xml=xml;//设置 tree 的树结构数据。
	*tree.x=100;//设置 tree 对象的属性 x 的值，用于控制 tree 对象的显示位置。
	*tree.y=100;//设置 tree 对象的属性 y 的值，用于控制 tree 对象的显示位置。
	*tree.width=200;//设置 tree 的宽度。
	*tree.height=100;//设置 tree 的高度。
	*Laya.stage.addChild(tree);//将 tree 添加到显示列表。
	*}
*(function (_super){
	*function Item(){
		*Item.__super.call(this);//初始化父类。
		*this.right=0;
		*this.left=0;
		*var selectBox=new laya.ui.Clip("resource/ui/clip_selectBox.png",1,2);
		*selectBox.name="selectBox";//设置 selectBox 的name 为“selectBox”时，将被识别为树结构的项的背景。2帧：悬停时背景、选中时背景。
		*selectBox.height=24;
		*selectBox.x=13;
		*selectBox.y=0;
		*selectBox.left=12;
		*this.addChild(selectBox);//需要使用this.访问父类的属性或方法。
		*var folder=new laya.ui.Clip("resource/ui/clip_tree_folder.png",1,3);
		*folder.name="folder";//设置 folder 的name 为“folder”时，将被识别为树结构的文件夹开启状态图表。2帧：折叠状态、打开状态。
		*folder.x=14;
		*folder.y=4;
		*this.addChild(folder);
		*var label=new laya.ui.Label("treeItem");
		*label.name="label";//设置 label 的name 为“label”时，此值将用于树结构数据赋值。
		*label.color="#ffff00";
		*label.width=150;
		*label.height=22;
		*label.x=33;
		*label.y=1;
		*label.left=33;
		*label.right=0;
		*this.addChild(label);
		*var arrow=new laya.ui.Clip("resource/ui/clip_tree_arrow.png",1,2);
		*arrow.name="arrow";//设置 arrow 的name 为“arrow”时，将被识别为树结构的文件夹开启状态图表。2帧：折叠状态、打开状态。
		*arrow.x=0;
		*arrow.y=5;
		*this.addChild(arrow);
		*};
	*Laya.class(Item,"mypackage.treeExample.Item",_super);//注册类 Item 。
	*})(laya.ui.Box);
*@example
*import Tree=laya.ui.Tree;
*import Browser=laya.utils.Browser;
*import Handler=laya.utils.Handler;
*class Tree_Example {
	*constructor(){
		*Laya.init(640,800);
		*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
		*Laya.loader.load(["resource/ui/vscroll.png","resource/ui/vscroll$bar.png","resource/ui/vscroll$down.png","resource/ui/vscroll$up.png","resource/ui/vscroll$up.png","resource/ui/clip_selectBox.png","resource/ui/clip_tree_folder * . * png","resource/ui/clip_tree_arrow.png"],Handler.create(this,this.onLoadComplete));
		*}
	*private onLoadComplete():void {
		*var xmlString:String;//创建一个xml字符串，用于存储树结构数据。
		*xmlString="&lt;root&gt;&lt;item label='box1'&gt;&lt;abc label='child1'/&gt;&lt;abc label='child2'/&gt;&lt;abc label='child3'/&gt;&lt;abc label='child4'/&gt;&lt;abc label='child5'/&gt;&lt;/item&gt;&lt;item label='box2'&gt;&lt;abc  * label='child1'/&gt;&lt;abc label='child2'/&gt;&lt;abc label='child3'/&gt;&lt;abc label='child4'/&gt;&lt;/item&gt;&lt;/root&gt;";
		*var domParser:any=new Browser.window.DOMParser();//创建一个DOMParser实例domParser。
		*var xml:any=domParser.parseFromString(xmlString,"text/xml");//解析xml字符。
		*var tree:Tree=new Tree();//创建一个 Tree 类的实例对象 tree 。
		*tree.scrollBarSkin="resource/ui/vscroll.png";//设置 tree 的皮肤。
		*tree.itemRender=Item;//设置 tree 的项渲染器。
		*tree.xml=xml;//设置 tree 的树结构数据。
		*tree.x=100;//设置 tree 对象的属性 x 的值，用于控制 tree 对象的显示位置。
		*tree.y=100;//设置 tree 对象的属性 y 的值，用于控制 tree 对象的显示位置。
		*tree.width=200;//设置 tree 的宽度。
		*tree.height=100;//设置 tree 的高度。
		*Laya.stage.addChild(tree);//将 tree 添加到显示列表。
		*}
	*}
*import Box=laya.ui.Box;
*import Clip=laya.ui.Clip;
*import Label=laya.ui.Label;
*class Item extends Box {
	*constructor(){
		*super();
		*this.name="render";
		*this.right=0;
		*this.left=0;
		*var selectBox:Clip=new Clip("resource/ui/clip_selectBox.png",1,2);
		*selectBox.name="selectBox";
		*selectBox.height=24;
		*selectBox.x=13;
		*selectBox.y=0;
		*selectBox.left=12;
		*this.addChild(selectBox);
		*var folder:Clip=new Clip("resource/ui/clip_tree_folder.png",1,3);
		*folder.name="folder";
		*folder.x=14;
		*folder.y=4;
		*this.addChild(folder);
		*var label:Label=new Label("treeItem");
		*label.name="label";
		*label.color="#ffff00";
		*label.width=150;
		*label.height=22;
		*label.x=33;
		*label.y=1;
		*label.left=33;
		*label.right=0;
		*this.addChild(label);
		*var arrow:Clip=new Clip("resource/ui/clip_tree_arrow.png",1,2);
		*arrow.name="arrow";
		*arrow.x=0;
		*arrow.y=5;
		*this.addChild(arrow);
		*}
	*}
*/
//class laya.ui.Tree extends laya.ui.Box
var Tree=(function(_super){
	function Tree(){
		/**@private */
		this._list=null;
		/**@private */
		this._source=null;
		/**@private */
		this._renderHandler=null;
		/**@private */
		this._spaceLeft=10;
		/**@private */
		this._spaceBottom=0;
		/**@private */
		this._keepStatus=true;
		Tree.__super.call(this);
		this.width=this.height=200;
	}

	__class(Tree,'laya.ui.Tree',_super);
	var __proto=Tree.prototype;
	Laya.imps(__proto,{"laya.ui.IRender":true})
	/**@inheritDoc */
	__proto.destroy=function(destroyChild){
		(destroyChild===void 0)&& (destroyChild=true);
		laya.ui.Component.prototype.destroy.call(this,destroyChild);
		this._list && this._list.destroy(destroyChild);
		this._list=null;
		this._source=null;
		this._renderHandler=null;
	}

	/**@inheritDoc */
	__proto.createChildren=function(){
		this.addChild(this._list=new List());
		this._list.renderHandler=Handler.create(this,this.renderItem,null,false);
		this._list.repeatX=1;
		this._list.on("change",this,this.onListChange);
	}

	/**
	*@private
	*此对象包含的<code>List</code>实例的<code>Event.CHANGE</code>事件侦听处理函数。
	*/
	__proto.onListChange=function(e){
		this.event("change");
	}

	/**
	*@private
	*获取数据源集合。
	*/
	__proto.getArray=function(){
		var arr=[];
		var item;
		for(var $each_item in this._source){
			item=this._source[$each_item];
			if (this.getParentOpenStatus(item)){
				item.x=this._spaceLeft *this.getDepth(item);
				arr.push(item);
			}
		}
		return arr;
	}

	/**
	*@private
	*获取项对象的深度。
	*/
	__proto.getDepth=function(item,num){
		(num===void 0)&& (num=0);
		if (item.nodeParent==null)return num;
		else return this.getDepth(item.nodeParent,num+1);
	}

	/**
	*@private
	*获取项对象的上一级的打开状态。
	*/
	__proto.getParentOpenStatus=function(item){
		var parent=item.nodeParent;
		if (parent==null){
			return true;
			}else {
			if (parent.isOpen){
				if (parent.nodeParent !=null)return this.getParentOpenStatus(parent);
				else return true;
				}else {
				return false;
			}
		}
	}

	/**
	*@private
	*渲染一个项对象。
	*@param cell 一个项对象。
	*@param index 项的索引。
	*/
	__proto.renderItem=function(cell,index){
		var item=cell.dataSource;
		if (item){
			cell.left=item.x;
			var arrow=cell.getChildByName("arrow");
			if (arrow){
				if (item.hasChild){
					arrow.visible=true;
					arrow.index=item.isOpen ? 1 :0;
					arrow.tag=index;
					arrow.off("click",this,this.onArrowClick);
					arrow.on("click",this,this.onArrowClick);
					}else {
					arrow.visible=false;
				}
			};
			var folder=cell.getChildByName("folder");
			if (folder){
				if (folder.clipY==2){
					folder.index=item.isDirectory ? 0 :1;
					}else {
					folder.index=item.isDirectory ? item.isOpen ? 1 :0 :2;
				}
			}
			this._renderHandler && this._renderHandler.runWith([cell,index]);
		}
	}

	/**
	*@private
	*/
	__proto.onArrowClick=function(e){
		var arrow=e.currentTarget;
		var index=arrow.tag;
		this._list.array[index].isOpen=!this._list.array[index].isOpen;
		this.event("open");
		this._list.array=this.getArray();
	}

	/**
	*设置指定项索引的项对象的打开状态。
	*@param index 项索引。
	*@param isOpen 是否处于打开状态。
	*/
	__proto.setItemState=function(index,isOpen){
		if (!this._list.array[index])return;
		this._list.array[index].isOpen=isOpen;
		this._list.array=this.getArray();
	}

	/**
	*刷新项列表。
	*/
	__proto.fresh=function(){
		this._list.array=this.getArray();
		this.repaint();
	}

	/**
	*@private
	*解析并处理XML类型的数据源。
	*/
	__proto.parseXml=function(xml,source,nodeParent,isRoot){
		var obj;
		var list=xml.childNodes;
		var childCount=list.length;
		if (!isRoot){
			obj={};
			var list2=xml.attributes;
			var attrs;
			for(var $each_attrs in list2){
				attrs=list2[$each_attrs];
				var prop=attrs.nodeName;
				var value=attrs.nodeValue;
				obj[prop]=value=="true" ? true :value=="false" ? false :value;
			}
			obj.nodeParent=nodeParent;
			if (childCount > 0)obj.isDirectory=true;
			obj.hasChild=childCount > 0;
			source.push(obj);
		}
		for (var i=0;i < childCount;i++){
			var node=list[i];
			this.parseXml(node,source,obj,false);
		}
	}

	/**
	*@private
	*处理数据项的打开状态。
	*/
	__proto.parseOpenStatus=function(oldSource,newSource){
		for (var i=0,n=newSource.length;i < n;i++){
			var newItem=newSource[i];
			if (newItem.isDirectory){
				for (var j=0,m=oldSource.length;j < m;j++){
					var oldItem=oldSource[j];
					if (oldItem.isDirectory && this.isSameParent(oldItem,newItem)&& newItem.label==oldItem.label){
						newItem.isOpen=oldItem.isOpen;
						break ;
					}
				}
			}
		}
	}

	/**
	*@private
	*判断两个项对象在树结构中的父节点是否相同。
	*@param item1 项对象。
	*@param item2 项对象。
	*@return 如果父节点相同值为true，否则值为false。
	*/
	__proto.isSameParent=function(item1,item2){
		if (item1.nodeParent==null && item2.nodeParent==null)return true;
		else if (item1.nodeParent==null || item2.nodeParent==null)return false
		else {
			if (item1.nodeParent.label==item2.nodeParent.label)return this.isSameParent(item1.nodeParent,item2.nodeParent);
			else return false;
		}
	}

	/**
	*更新项列表，显示指定键名的数据项。
	*@param key 键名。
	*/
	__proto.filter=function(key){
		if (Boolean(key)){
			var result=[];
			this.getFilterSource(this._source,result,key);
			this._list.array=result;
			}else {
			this._list.array=this.getArray();
		}
	}

	/**
	*@private
	*获取数据源中指定键名的值。
	*/
	__proto.getFilterSource=function(array,result,key){
		key=key.toLocaleLowerCase();
		var item;
		for(var $each_item in array){
			item=array[$each_item];
			if (!item.isDirectory && String(item.label).toLowerCase().indexOf(key)>-1){
				item.x=0;
				result.push(item);
			}
			if (item.child && item.child.length > 0){
				this.getFilterSource(item.child,result,key);
			}
		}
	}

	/**
	*每一项之间的间隔距离（以像素为单位）。
	*/
	__getset(0,__proto,'spaceBottom',function(){
		return this._list.spaceY;
		},function(value){
		this._list.spaceY=value;
	});

	/**
	*数据源发生变化后，是否保持之前打开状态，默认为true。
	*<p><b>取值：</b>
	*<li>true：保持之前打开状态。</li>
	*<li>false：不保持之前打开状态。</li>
	*</p>
	*/
	__getset(0,__proto,'keepStatus',function(){
		return this._keepStatus;
		},function(value){
		this._keepStatus=value;
	});

	/**
	*此对象包含的<code>List</code>实例的单元格渲染器。
	*<p><b>取值：</b>
	*<ol>
	*<li>单元格类对象。</li>
	*<li> UI 的 JSON 描述。</li>
	*</ol></p>
	*/
	__getset(0,__proto,'itemRender',function(){
		return this._list.itemRender;
		},function(value){
		this._list.itemRender=value;
	});

	/**
	*列表数据源，只包含当前可视节点数据。
	*/
	__getset(0,__proto,'array',function(){
		return this._list.array;
		},function(value){
		if (this._keepStatus && this._list.array && value){
			this.parseOpenStatus(this._list.array,value);
		}
		this._source=value;
		this._list.array=this.getArray();
	});

	/**
	*单元格鼠标事件处理器。
	*<p>默认返回参数（e:Event,index:int）。</p>
	*/
	__getset(0,__proto,'mouseHandler',function(){
		return this._list.mouseHandler;
		},function(value){
		this._list.mouseHandler=value;
	});

	/**@inheritDoc */
	__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
		this._dataSource=value;
		Laya.superSet(Box,this,'dataSource',value);
	});

	/**
	*数据源，全部节点数据。
	*/
	__getset(0,__proto,'source',function(){
		return this._source;
	});

	/**滚动条*/
	__getset(0,__proto,'scrollBar',function(){
		return this._list.scrollBar;
	});

	/**
	*此对象包含的<code>List</code>实例对象。
	*/
	__getset(0,__proto,'list',function(){
		return this._list;
	});

	/**
	*滚动条皮肤。
	*/
	__getset(0,__proto,'scrollBarSkin',function(){
		return this._list.vScrollBarSkin;
		},function(value){
		this._list.vScrollBarSkin=value;
	});

	/**
	*<code>Tree</code> 实例的渲染处理器。
	*/
	__getset(0,__proto,'renderHandler',function(){
		return this._renderHandler;
		},function(value){
		this._renderHandler=value;
	});

	/**
	*表示当前选择的项索引。
	*/
	__getset(0,__proto,'selectedIndex',function(){
		return this._list.selectedIndex;
		},function(value){
		this._list.selectedIndex=value;
	});

	/**
	*左侧缩进距离（以像素为单位）。
	*/
	__getset(0,__proto,'spaceLeft',function(){
		return this._spaceLeft;
		},function(value){
		this._spaceLeft=value;
	});

	/**
	*当前选中的项对象的数据源。
	*/
	__getset(0,__proto,'selectedItem',function(){
		return this._list.selectedItem;
		},function(value){
		this._list.selectedItem=value;
	});

	/**
	*@inheritDoc
	*/
	__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
		Laya.superSet(Box,this,'width',value);
		this._list.width=value;
	});

	/**@inheritDoc */
	__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
		Laya.superSet(Box,this,'height',value);
		this._list.height=value;
	});

	/**
	*xml结构的数据源。
	*/
	__getset(0,__proto,'xml',null,function(value){
		var arr=[];
		this.parseXml(value.childNodes[0],arr,null,true);
		this.array=arr;
	});

	/**
	*表示选择的树节点项的<code>path</code>属性值。
	*/
	__getset(0,__proto,'selectedPath',function(){
		if (this._list.selectedItem){
			return this._list.selectedItem.path;
		}
		return null;
	});

	return Tree;
})(Box)


/**
*<code>LayoutBox</code> 是一个布局容器类。
*/
//class laya.ui.LayoutBox extends laya.ui.Box
var LayoutBox=(function(_super){
	function LayoutBox(){
		/**@private */
		this._space=0;
		/**@private */
		this._align="none";
		/**@private */
		this._itemChanged=false;
		LayoutBox.__super.call(this);
	}

	__class(LayoutBox,'laya.ui.LayoutBox',_super);
	var __proto=LayoutBox.prototype;
	/**@inheritDoc */
	__proto.addChild=function(child){
		child.on("resize",this,this.onResize);
		this._setItemChanged();
		return laya.display.Node.prototype.addChild.call(this,child);
	}

	__proto.onResize=function(e){
		this._setItemChanged();
	}

	/**@inheritDoc */
	__proto.addChildAt=function(child,index){
		child.on("resize",this,this.onResize);
		this._setItemChanged();
		return laya.display.Node.prototype.addChildAt.call(this,child,index);
	}

	/**@inheritDoc */
	__proto.removeChild=function(child){
		child.off("resize",this,this.onResize);
		this._setItemChanged();
		return laya.display.Node.prototype.removeChild.call(this,child);
	}

	/**@inheritDoc */
	__proto.removeChildAt=function(index){
		this.getChildAt(index).off("resize",this,this.onResize);
		this._setItemChanged();
		return laya.display.Node.prototype.removeChildAt.call(this,index);
	}

	/**刷新。*/
	__proto.refresh=function(){
		this._setItemChanged();
	}

	/**
	*改变子对象的布局。
	*/
	__proto.changeItems=function(){
		this._itemChanged=false;
	}

	/**
	*排序项目列表。可通过重写改变默认排序规则。
	*@param items 项目列表。
	*/
	__proto.sortItem=function(items){
		if (items)items.sort(function(a,b){return a.y-b.y;});
	}

	__proto._setItemChanged=function(){
		if (!this._itemChanged){
			this._itemChanged=true;
			this.callLater(this.changeItems);
		}
	}

	/**子对象的间隔。*/
	__getset(0,__proto,'space',function(){
		return this._space;
		},function(value){
		this._space=value;
		this._setItemChanged();
	});

	/**子对象对齐方式。*/
	__getset(0,__proto,'align',function(){
		return this._align;
		},function(value){
		this._align=value;
		this._setItemChanged();
	});

	return LayoutBox;
})(Box)


/**
*<code>Panel</code> 是一个面板容器类。
*/
//class laya.ui.Panel extends laya.ui.Box
var Panel=(function(_super){
	function Panel(){
		/**@private */
		this._content=null;
		/**@private */
		this._vScrollBar=null;
		/**@private */
		this._hScrollBar=null;
		/**@private */
		this._scrollChanged=false;
		Panel.__super.call(this);
		this.width=this.height=100;
	}

	__class(Panel,'laya.ui.Panel',_super);
	var __proto=Panel.prototype;
	/**@inheritDoc */
	__proto.destroy=function(destroyChild){
		(destroyChild===void 0)&& (destroyChild=true);
		laya.ui.Component.prototype.destroy.call(this,destroyChild);
		this._content && this._content.destroy(destroyChild);
		this._vScrollBar && this._vScrollBar.destroy(destroyChild);
		this._hScrollBar && this._hScrollBar.destroy(destroyChild);
		this._vScrollBar=null;
		this._hScrollBar=null;
		this._content=null;
	}

	/**@inheritDoc */
	__proto.destroyChildren=function(){
		this._content.destroyChildren();
	}

	/**@inheritDoc */
	__proto.createChildren=function(){
		laya.display.Node.prototype.addChild.call(this,this._content=new Box());
	}

	/**@inheritDoc */
	__proto.addChild=function(child){
		child.on("resize",this,this.onResize);
		this._setScrollChanged();
		return this._content.addChild(child);
	}

	/**
	*@private
	*子对象的 <code>Event.RESIZE</code> 事件侦听处理函数。
	*/
	__proto.onResize=function(){
		this._setScrollChanged();
	}

	/**@inheritDoc */
	__proto.addChildAt=function(child,index){
		child.on("resize",this,this.onResize);
		this._setScrollChanged();
		return this._content.addChildAt(child,index);
	}

	/**@inheritDoc */
	__proto.removeChild=function(child){
		child.off("resize",this,this.onResize);
		this._setScrollChanged();
		return this._content.removeChild(child);
	}

	/**@inheritDoc */
	__proto.removeChildAt=function(index){
		this.getChildAt(index).off("resize",this,this.onResize);
		this._setScrollChanged();
		return this._content.removeChildAt(index);
	}

	/**@inheritDoc */
	__proto.removeChildren=function(beginIndex,endIndex){
		(beginIndex===void 0)&& (beginIndex=0);
		(endIndex===void 0)&& (endIndex=0x7fffffff);
		for (var i=this._content.numChildren-1;i >-1;i--){
			this._content.removeChildAt(i);
		}
		this._setScrollChanged();
		return this;
	}

	/**@inheritDoc */
	__proto.getChildAt=function(index){
		return this._content.getChildAt(index);
	}

	/**@inheritDoc */
	__proto.getChildByName=function(name){
		return this._content.getChildByName(name);
	}

	/**@inheritDoc */
	__proto.getChildIndex=function(child){
		return this._content.getChildIndex(child);
	}

	/**@private */
	__proto.changeScroll=function(){
		this._scrollChanged=false;
		var contentW=this.contentWidth || 1;
		var contentH=this.contentHeight || 1;
		var vscroll=this._vScrollBar;
		var hscroll=this._hScrollBar;
		var vShow=vscroll && contentH > this._height;
		var hShow=hscroll && contentW > this._width;
		var showWidth=vShow ? this._width-vscroll.width :this._width;
		var showHeight=hShow ? this._height-hscroll.height :this._height;
		if (vscroll){
			vscroll.x=this._width-vscroll.width;
			vscroll.y=0;
			vscroll.height=this._height-(hShow ? hscroll.height :0);
			vscroll.scrollSize=Math.max(this._height *0.033,1);
			vscroll.thumbPercent=showHeight / contentH;
			vscroll.setScroll(0,contentH-showHeight,vscroll.value);
		}
		if (hscroll){
			hscroll.x=0;
			hscroll.y=this._height-hscroll.height;
			hscroll.width=this._width-(vShow ? vscroll.width :0);
			hscroll.scrollSize=Math.max(this._width *0.033,1);
			hscroll.thumbPercent=showWidth / contentW;
			hscroll.setScroll(0,contentW-showWidth,hscroll.value);
		}
	}

	/**@inheritDoc */
	__proto.changeSize=function(){
		laya.ui.Component.prototype.changeSize.call(this);
		this.setContentSize(this._width,this._height);
	}

	/**
	*@private
	*设置内容的宽度、高度（以像素为单位）。
	*@param width 宽度。
	*@param height 高度。
	*/
	__proto.setContentSize=function(width,height){
		var content=this._content;
		content.width=width;
		content.height=height;
		content.scrollRect || (content.scrollRect=new Rectangle());
		content.scrollRect.setTo(0,0,width,height);
		content.scrollRect=content.scrollRect;
	}

	/**
	*@private
	*滚动条的<code><code>Event.MOUSE_DOWN</code>事件侦听处理函数。</code>事件侦听处理函数。
	*@param scrollBar 滚动条对象。
	*@param e Event 对象。
	*/
	__proto.onScrollBarChange=function(scrollBar){
		var rect=this._content.scrollRect;
		if (rect){
			var start=Math.round(scrollBar.value);
			scrollBar.isVertical ? rect.y=start :rect.x=start;
			this._content.scrollRect=rect;
		}
	}

	/**
	*<p>滚动内容容器至设定的垂直、水平方向滚动条位置。</p>
	*@param x 水平方向滚动条属性value值。滚动条位置数字。
	*@param y 垂直方向滚动条属性value值。滚动条位置数字。
	*/
	__proto.scrollTo=function(x,y){
		(x===void 0)&& (x=0);
		(y===void 0)&& (y=0);
		if (this.vScrollBar)this.vScrollBar.value=y;
		if (this.hScrollBar)this.hScrollBar.value=x;
	}

	/**
	*刷新滚动内容。
	*/
	__proto.refresh=function(){
		this.changeScroll();
	}

	__proto.onScrollStart=function(){
		this._$P.cacheAs || (this._$P.cacheAs=Laya.superGet(Box,this,'cacheAs'));
		Laya.superSet(Box,this,'cacheAs',"none");
		this._hScrollBar && this._hScrollBar.once("end",this,this.onScrollEnd);
		this._vScrollBar && this._vScrollBar.once("end",this,this.onScrollEnd);
	}

	__proto.onScrollEnd=function(){
		Laya.superSet(Box,this,'cacheAs',this._$P.cacheAs);
	}

	/**@private */
	__proto._setScrollChanged=function(){
		if (!this._scrollChanged){
			this._scrollChanged=true;
			this.callLater(this.changeScroll);
		}
	}

	/**@inheritDoc */
	__getset(0,__proto,'numChildren',function(){
		return this._content.numChildren;
	});

	/**
	*水平方向滚动条皮肤。
	*/
	__getset(0,__proto,'hScrollBarSkin',function(){
		return this._hScrollBar ? this._hScrollBar.skin :null;
		},function(value){
		if (this._hScrollBar==null){
			laya.display.Node.prototype.addChild.call(this,this._hScrollBar=new HScrollBar());
			this._hScrollBar.on("change",this,this.onScrollBarChange,[this._hScrollBar]);
			this._hScrollBar.target=this._content;
			this._setScrollChanged();
		}
		this._hScrollBar.skin=value;
	});

	/**
	*@private
	*获取内容宽度（以像素为单位）。
	*/
	__getset(0,__proto,'contentWidth',function(){
		var max=0;
		for (var i=this._content.numChildren-1;i >-1;i--){
			var comp=this._content.getChildAt(i);
			max=Math.max(comp.x+comp.width *comp.scaleX,max);
		}
		return max;
	});

	/**
	*@private
	*获取内容高度（以像素为单位）。
	*/
	__getset(0,__proto,'contentHeight',function(){
		var max=0;
		for (var i=this._content.numChildren-1;i >-1;i--){
			var comp=this._content.getChildAt(i);
			max=Math.max(comp.y+comp.height *comp.scaleY,max);
		}
		return max;
	});

	/**
	*@inheritDoc
	*/
	__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
		Laya.superSet(Box,this,'width',value);
		this._setScrollChanged();
	});

	/**
	*水平方向滚动条对象。
	*/
	__getset(0,__proto,'hScrollBar',function(){
		return this._hScrollBar;
	});

	/**
	*获取内容容器对象。
	*/
	__getset(0,__proto,'content',function(){
		return this._content;
	});

	/**@inheritDoc */
	__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
		Laya.superSet(Box,this,'height',value);
		this._setScrollChanged();
	});

	/**
	*垂直方向滚动条皮肤。
	*/
	__getset(0,__proto,'vScrollBarSkin',function(){
		return this._vScrollBar ? this._vScrollBar.skin :null;
		},function(value){
		if (this._vScrollBar==null){
			laya.display.Node.prototype.addChild.call(this,this._vScrollBar=new VScrollBar());
			this._vScrollBar.on("change",this,this.onScrollBarChange,[this._vScrollBar]);
			this._vScrollBar.target=this._content;
			this._setScrollChanged();
		}
		this._vScrollBar.skin=value;
	});

	/**
	*垂直方向滚动条对象。
	*/
	__getset(0,__proto,'vScrollBar',function(){
		return this._vScrollBar;
	});

	/**@inheritDoc */
	__getset(0,__proto,'cacheAs',_super.prototype._$get_cacheAs,function(value){
		Laya.superSet(Box,this,'cacheAs',value);
		this._$P.cacheAs=null;
		if (value!=="none"){
			this._hScrollBar && this._hScrollBar.on("start",this,this.onScrollStart);
			this._vScrollBar && this._vScrollBar.on("start",this,this.onScrollStart);
			}else {
			this._hScrollBar && this._hScrollBar.off("start",this,this.onScrollStart);
			this._vScrollBar && this._vScrollBar.off("start",this,this.onScrollStart);
		}
	});

	return Panel;
})(Box)


/**
*<code>Group</code> 是一个可以自动布局的项集合控件。
*<p> <code>Group</code> 的默认项对象为 <code>Button</code> 类实例。
*<code>Group</code> 是 <code>Tab</code> 和 <code>RadioGroup</code> 的基类。</p>
*/
//class laya.ui.UIGroup extends laya.ui.Box
var UIGroup=(function(_super){
	function UIGroup(labels,skin){
		/**
		*改变 <code>Group</code> 的选择项时执行的处理器，(默认返回参数： 项索引（index:int）)。
		*/
		this.selectHandler=null;
		/**@private */
		this._items=null;
		/**@private */
		this._selectedIndex=-1;
		/**@private */
		this._skin=null;
		/**@private */
		this._direction="horizontal";
		/**@private */
		this._space=0;
		/**@private */
		this._labels=null;
		/**@private */
		this._labelColors=null;
		/**@private */
		this._labelFont=null;
		/**@private */
		this._labelStrokeColor=null;
		/**@private */
		this._strokeColors=null;
		/**@private */
		this._labelStroke=NaN;
		/**@private */
		this._labelSize=0;
		/**@private */
		this._labelBold=false;
		/**@private */
		this._labelPadding=null;
		/**@private */
		this._labelAlign=null;
		/**@private */
		this._stateNum=0;
		/**@private */
		this._labelChanged=false;
		UIGroup.__super.call(this);
		this.skin=skin;
		this.labels=labels;
	}

	__class(UIGroup,'laya.ui.UIGroup',_super);
	var __proto=UIGroup.prototype;
	Laya.imps(__proto,{"laya.ui.IItem":true})
	/**@inheritDoc */
	__proto.preinitialize=function(){
		this.mouseEnabled=true;
	}

	/**@inheritDoc */
	__proto.destroy=function(destroyChild){
		(destroyChild===void 0)&& (destroyChild=true);
		laya.ui.Component.prototype.destroy.call(this,destroyChild);
		this._items && (this._items.length=0);
		this._items=null;
		this.selectHandler=null;
	}

	/**
	*添加一个项对象，返回此项对象的索引id。
	*
	*@param item 需要添加的项对象。
	*@param autoLayOut 是否自动布局，如果为true，会根据 <code>direction</code> 和 <code>space</code> 属性计算item的位置。
	*@return
	*/
	__proto.addItem=function(item,autoLayOut){
		(autoLayOut===void 0)&& (autoLayOut=true);
		var display=item;
		var index=this._items.length;
		display.name="item"+index;
		this.addChild(display);
		this.initItems();
		if (autoLayOut && index > 0){
			var preItem=this._items [index-1];
			if (this._direction=="horizontal"){
				display.x=preItem.x+preItem.width+this._space;
				}else {
				display.y=preItem.y+preItem.height+this._space;
			}
			}else {
			if (autoLayOut){
				display.x=0;
				display.y=0;
			}
		}
		return index;
	}

	/**
	*删除一个项对象。
	*@param item 需要删除的项对象。
	*@param autoLayOut 是否自动布局，如果为true，会根据 <code>direction</code> 和 <code>space</code> 属性计算item的位置。
	*/
	__proto.delItem=function(item,autoLayOut){
		(autoLayOut===void 0)&& (autoLayOut=true);
		var index=this._items.indexOf(item);
		if (index !=-1){
			var display=item;
			this.removeChild(display);
			for (var i=index+1,n=this._items.length;i < n;i++){
				var child=this._items [i];
				child.name="item"+(i-1);
				if (autoLayOut){
					if (this._direction=="horizontal"){
						child.x-=display.width+this._space;
						}else {
						child.y-=display.height+this._space;
					}
				}
			}
			this.initItems();
			if (this._selectedIndex >-1){
				var newIndex=0;
				newIndex=this._selectedIndex < this._items.length ? this._selectedIndex :(this._selectedIndex-1);
				this._selectedIndex=-1;
				this.selectedIndex=newIndex;
			}
		}
	}

	/**
	*初始化项对象们。
	*/
	__proto.initItems=function(){
		this._items || (this._items=[]);
		this._items.length=0;
		for (var i=0;i < 10000;i++){
			var item=this.getChildByName("item"+i);
			if (item==null)break ;
			this._items.push(item);
			item.selected=(i===this._selectedIndex);
			item.clickHandler=Handler.create(this,this.itemClick,[i],false);
		}
	}

	/**
	*@private
	*项对象的点击事件侦听处理函数。
	*@param index 项索引。
	*/
	__proto.itemClick=function(index){
		this.selectedIndex=index;
	}

	/**
	*@private
	*通过对象的索引设置项对象的 <code>selected</code> 属性值。
	*@param index 需要设置的项对象的索引。
	*@param selected 表示项对象的选中状态。
	*/
	__proto.setSelect=function(index,selected){
		if (this._items && index >-1 && index < this._items.length)this._items[index].selected=selected;
	}

	/**
	*@private
	*创建一个项显示对象。
	*@param skin 项对象的皮肤。
	*@param label 项对象标签。
	*/
	__proto.createItem=function(skin,label){
		return null;
	}

	/**
	*@private
	*更改项对象的属性值。
	*/
	__proto.changeLabels=function(){
		this._labelChanged=false;
		if (this._items){
			var left=0
			for (var i=0,n=this._items.length;i < n;i++){
				var btn=this._items [i];
				this._skin && (btn.skin=this._skin);
				this._labelColors && (btn.labelColors=this._labelColors);
				this._labelSize && (btn.labelSize=this._labelSize);
				this._labelStroke && (btn.labelStroke=this._labelStroke);
				this._labelStrokeColor && (btn.labelStrokeColor=this._labelStrokeColor);
				this._strokeColors && (btn.strokeColors=this._strokeColors);
				this._labelBold && (btn.labelBold=this._labelBold);
				this._labelPadding && (btn.labelPadding=this._labelPadding);
				this._labelAlign && (btn.labelAlign=this._labelAlign);
				this._stateNum && (btn.stateNum=this._stateNum);
				this._labelFont && (btn.labelFont=this._labelFont);
				if (this._direction==="horizontal"){
					btn.y=0;
					btn.x=left;
					left+=btn.width+this._space;
					}else {
					btn.x=0;
					btn.y=left;
					left+=btn.height+this._space;
				}
			}
		}
		this.changeSize();
	}

	/**@inheritDoc */
	__proto.commitMeasure=function(){
		this.runCallLater(this.changeLabels);
	}

	/**@private */
	__proto._setLabelChanged=function(){
		if (!this._labelChanged){
			this._labelChanged=true;
			this.callLater(this.changeLabels);
		}
	}

	/**
	*<p>描边颜色，以字符串表示。</p>
	*默认值为 "#000000"（黑色）;
	*@see laya.display.Text.strokeColor()
	*/
	__getset(0,__proto,'labelStrokeColor',function(){
		return this._labelStrokeColor;
		},function(value){
		if (this._labelStrokeColor !=value){
			this._labelStrokeColor=value;
			this._setLabelChanged();
		}
	});

	/**
	*@copy laya.ui.Image#skin
	*/
	__getset(0,__proto,'skin',function(){
		return this._skin;
		},function(value){
		if (this._skin !=value){
			this._skin=value;
			this._setLabelChanged();
		}
	});

	/**
	*表示当前选择的项索引。默认值为-1。
	*/
	__getset(0,__proto,'selectedIndex',function(){
		return this._selectedIndex;
		},function(value){
		if (this._selectedIndex !=value){
			this.setSelect(this._selectedIndex,false);
			this._selectedIndex=value;
			this.setSelect(value,true);
			this.event("change");
			this.selectHandler && this.selectHandler.runWith(this._selectedIndex);
		}
	});

	/**
	*标签集合字符串。以逗号做分割，如"item0,item1,item2,item3,item4,item5"。
	*/
	__getset(0,__proto,'labels',function(){
		return this._labels;
		},function(value){
		if (this._labels !=value){
			this._labels=value;
			this.removeChildren();
			this._setLabelChanged();
			if (this._labels){
				var a=this._labels.split(",");
				for (var i=0,n=a.length;i < n;i++){
					var item=this.createItem(this._skin,a[i]);
					item.name="item"+i;
					this.addChild(item);
				}
			}
			this.initItems();
		}
	});

	/**
	*<p>表示各个状态下的描边颜色。</p>
	*@see laya.display.Text.strokeColor()
	*/
	__getset(0,__proto,'strokeColors',function(){
		return this._strokeColors;
		},function(value){
		if (this._strokeColors !=value){
			this._strokeColors=value;
			this._setLabelChanged();
		}
	});

	/**
	*@copy laya.ui.Button#labelColors()
	*/
	__getset(0,__proto,'labelColors',function(){
		return this._labelColors;
		},function(value){
		if (this._labelColors !=value){
			this._labelColors=value;
			this._setLabelChanged();
		}
	});

	/**
	*<p>描边宽度（以像素为单位）。</p>
	*默认值0，表示不描边。
	*@see laya.display.Text.stroke()
	*/
	__getset(0,__proto,'labelStroke',function(){
		return this._labelStroke;
		},function(value){
		if (this._labelStroke !=value){
			this._labelStroke=value;
			this._setLabelChanged();
		}
	});

	/**
	*表示按钮文本标签的字体大小。
	*/
	__getset(0,__proto,'labelSize',function(){
		return this._labelSize;
		},function(value){
		if (this._labelSize !=value){
			this._labelSize=value;
			this._setLabelChanged();
		}
	});

	/**
	*表示按钮的状态值，以数字表示，默认为3态。
	*@see laya.ui.Button#stateNum
	*/
	__getset(0,__proto,'stateNum',function(){
		return this._stateNum;
		},function(value){
		if (this._stateNum !=value){
			this._stateNum=value;
			this._setLabelChanged();
		}
	});

	/**
	*表示按钮文本标签是否为粗体字。
	*/
	__getset(0,__proto,'labelBold',function(){
		return this._labelBold;
		},function(value){
		if (this._labelBold !=value){
			this._labelBold=value;
			this._setLabelChanged();
		}
	});

	/**
	*表示按钮文本标签的字体名称，以字符串形式表示。
	*@see laya.display.Text.font()
	*/
	__getset(0,__proto,'labelFont',function(){
		return this._labelFont;
		},function(value){
		if (this._labelFont !=value){
			this._labelFont=value;
			this._setLabelChanged();
		}
	});

	/**
	*表示按钮文本标签的边距。
	*<p><b>格式：</b>"上边距,右边距,下边距,左边距"。</p>
	*/
	__getset(0,__proto,'labelPadding',function(){
		return this._labelPadding;
		},function(value){
		if (this._labelPadding !=value){
			this._labelPadding=value;
			this._setLabelChanged();
		}
	});

	/**
	*布局方向。
	*<p>默认值为"horizontal"。</p>
	*<p><b>取值：</b>
	*<li>"horizontal"：表示水平布局。</li>
	*<li>"vertical"：表示垂直布局。</li>
	*</p>
	*/
	__getset(0,__proto,'direction',function(){
		return this._direction;
		},function(value){
		this._direction=value;
		this._setLabelChanged();
	});

	/**
	*项对象们之间的间隔（以像素为单位）。
	*/
	__getset(0,__proto,'space',function(){
		return this._space;
		},function(value){
		this._space=value;
		this._setLabelChanged();
	});

	/**
	*项对象们的存放数组。
	*/
	__getset(0,__proto,'items',function(){
		return this._items;
	});

	/**
	*获取或设置当前选择的项对象。
	*/
	__getset(0,__proto,'selection',function(){
		return this._selectedIndex >-1 && this._selectedIndex < this._items.length ? this._items[this._selectedIndex] :null;
		},function(value){
		this.selectedIndex=this._items.indexOf(value);
	});

	/**@inheritDoc */
	__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
		this._dataSource=value;
		if (((typeof value=='number')&& Math.floor(value)==value)|| (typeof value=='string'))this.selectedIndex=parseInt(value);
		else if ((value instanceof Array))this.labels=(value).join(",");
		else Laya.superSet(Box,this,'dataSource',value);
	});

	return UIGroup;
})(Box)


/**
*<code>ViewStack</code> 类用于视图堆栈类，用于视图的显示等设置处理。
*/
//class laya.ui.ViewStack extends laya.ui.Box
var ViewStack=(function(_super){
	function ViewStack(){
		/**@private */
		this._items=null;
		/**@private */
		this._selectedIndex=0;
		ViewStack.__super.call(this);
		this._setIndexHandler=Handler.create(this,this.setIndex,null,false);
	}

	__class(ViewStack,'laya.ui.ViewStack',_super);
	var __proto=ViewStack.prototype;
	Laya.imps(__proto,{"laya.ui.IItem":true})
	/**
	*批量设置视图对象。
	*@param views 视图对象数组。
	*/
	__proto.setItems=function(views){
		this.removeChildren();
		var index=0;
		for (var i=0,n=views.length;i < n;i++){
			var item=views[i];
			if (item){
				item.name="item"+index;
				this.addChild(item);
				index++;
			}
		}
		this.initItems();
	}

	/**
	*添加视图。
	*@internal 添加视图对象，并设置此视图对象的<code>name</code> 属性。
	*@param view 需要添加的视图对象。
	*/
	__proto.addItem=function(view){
		view.name="item"+this._items.length;
		this.addChild(view);
		this.initItems();
	}

	/**
	*初始化视图对象集合。
	*/
	__proto.initItems=function(){
		this._items=[];
		for (var i=0;i < 10000;i++){
			var item=this.getChildByName("item"+i);
			if (item==null){
				break ;
			}
			this._items.push(item);
			item.visible=(i==this._selectedIndex);
		}
	}

	/**
	*@private
	*通过对象的索引设置项对象的 <code>selected</code> 属性值。
	*@param index 需要设置的对象的索引。
	*@param selected 表示对象的选中状态。
	*/
	__proto.setSelect=function(index,selected){
		if (this._items && index >-1 && index < this._items.length){
			this._items[index].visible=selected;
		}
	}

	/**
	*@private
	*设置属性<code>selectedIndex</code>的值。
	*@param index 选中项索引值。
	*/
	__proto.setIndex=function(index){
		this.selectedIndex=index;
	}

	/**@inheritDoc */
	__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
		this._dataSource=value;
		if (((typeof value=='number')&& Math.floor(value)==value)|| (typeof value=='string')){
			this.selectedIndex=parseInt(value);
			}else {
			for (var prop in this._dataSource){
				if (this.hasOwnProperty(prop)){
					this[prop]=this._dataSource[prop];
				}
			}
		}
	});

	/**
	*表示当前视图索引。
	*/
	__getset(0,__proto,'selectedIndex',function(){
		return this._selectedIndex;
		},function(value){
		if (this._selectedIndex !=value){
			this.setSelect(this._selectedIndex,false);
			this._selectedIndex=value;
			this.setSelect(this._selectedIndex,true);
		}
	});

	/**
	*获取或设置当前选择的项对象。
	*/
	__getset(0,__proto,'selection',function(){
		return this._selectedIndex >-1 && this._selectedIndex < this._items.length ? this._items[this._selectedIndex] :null;
		},function(value){
		this.selectedIndex=this._items.indexOf(value);
	});

	/**
	*视图集合数组。
	*/
	__getset(0,__proto,'items',function(){
		return this._items;
	});

	/**
	*索引设置处理器。
	*<p>默认回调参数：index:int</p>
	*/
	__getset(0,__proto,'setIndexHandler',function(){
		return this._setIndexHandler;
		},function(value){
		this._setIndexHandler=value;
	});

	return ViewStack;
})(Box)


/**
*<code>CheckBox</code> 组件显示一个小方框，该方框内可以有选中标记。
*<code>CheckBox</code> 组件还可以显示可选的文本标签，默认该标签位于 CheckBox 右侧。
*<p><code>CheckBox</code> 使用 <code>dataSource</code>赋值时的的默认属性是：<code>selected</code>。</p>
*
*@example <caption>以下示例代码，创建了一个 <code>CheckBox</code> 实例。</caption>
*package
*{
	*import laya.ui.CheckBox;
	*import laya.utils.Handler;
	*public class CheckBox_Example
	*{
		*public function CheckBox_Example()
		*{
			*Laya.init(640,800);//设置游戏画布宽高。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load("resource/ui/check.png",Handler.create(this,onLoadComplete));//加载资源。
			*}
		*private function onLoadComplete():void
		*{
			*trace("资源加载完成！");
			*var checkBox:CheckBox=new CheckBox("resource/ui/check.png","这个是一个CheckBox组件。");//创建一个 CheckBox 类的实例对象 checkBox ,传入它的皮肤skin和标签label。
			*checkBox.x=100;//设置 checkBox 对象的属性 x 的值，用于控制 checkBox 对象的显示位置。
			*checkBox.y=100;//设置 checkBox 对象的属性 y 的值，用于控制 checkBox 对象的显示位置。
			*checkBox.clickHandler=new Handler(this,onClick,[checkBox]);//设置 checkBox 的点击事件处理器。
			*Laya.stage.addChild(checkBox);//将此 checkBox 对象添加到显示列表。
			*}
		*private function onClick(checkBox:CheckBox):void
		*{
			*trace("输出选中状态: checkBox.selected = "+checkBox.selected);
			*}
		*}
	*}
*@example
*Laya.init(640,800);//设置游戏画布宽高
*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
*Laya.loader.load("resource/ui/check.png",laya.utils.Handler.create(this,loadComplete));//加载资源
*function loadComplete()
*{
	*console.log("资源加载完成！");
	*var checkBox:laya.ui.CheckBox=new laya.ui.CheckBox("resource/ui/check.png","这个是一个CheckBox组件。");//创建一个 CheckBox 类的类的实例对象 checkBox ,传入它的皮肤skin和标签label。
	*checkBox.x=100;//设置 checkBox 对象的属性 x 的值，用于控制 checkBox 对象的显示位置。
	*checkBox.y=100;//设置 checkBox 对象的属性 y 的值，用于控制 checkBox 对象的显示位置。
	*checkBox.clickHandler=new laya.utils.Handler(this,this.onClick,[checkBox],false);//设置 checkBox 的点击事件处理器。
	*Laya.stage.addChild(checkBox);//将此 checkBox 对象添加到显示列表。
	*}
*function onClick(checkBox)
*{
	*console.log("checkBox.selected = ",checkBox.selected);
	*}
*@example
*import CheckBox=laya.ui.CheckBox;
*import Handler=laya.utils.Handler;
*class CheckBox_Example{
	*constructor()
	*{
		*Laya.init(640,800);
		*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
		*Laya.loader.load("resource/ui/check.png",Handler.create(this,this.onLoadComplete));//加载资源。
		*}
	*private onLoadComplete()
	*{
		*var checkBox:CheckBox=new CheckBox("resource/ui/check.png","这个是一个CheckBox组件。");//创建一个 CheckBox 类的实例对象 checkBox ,传入它的皮肤skin和标签label。
		*checkBox.x=100;//设置 checkBox 对象的属性 x 的值，用于控制 checkBox 对象的显示位置。
		*checkBox.y=100;//设置 checkBox 对象的属性 y 的值，用于控制 checkBox 对象的显示位置。
		*checkBox.clickHandler=new Handler(this,this.onClick,[checkBox]);//设置 checkBox 的点击事件处理器。
		*Laya.stage.addChild(checkBox);//将此 checkBox 对象添加到显示列表。
		*}
	*private onClick(checkBox:CheckBox):void
	*{
		*console.log("输出选中状态: checkBox.selected = "+checkBox.selected);
		*}
	*}
*/
//class laya.ui.CheckBox extends laya.ui.Button
var CheckBox=(function(_super){
	/**
	*创建一个新的 <code>CheckBox</code> 组件实例。
	*@param skin 皮肤资源地址。
	*@param label 文本标签的内容。
	*/
	function CheckBox(skin,label){
		(label===void 0)&& (label="");
		CheckBox.__super.call(this,skin,label);
	}

	__class(CheckBox,'laya.ui.CheckBox',_super);
	var __proto=CheckBox.prototype;
	/**@inheritDoc */
	__proto.preinitialize=function(){
		laya.ui.Component.prototype.preinitialize.call(this);
		this.toggle=true;
		this._autoSize=false;
	}

	/**@inheritDoc */
	__proto.initialize=function(){
		_super.prototype.initialize.call(this);
		this.createText();
		this._text.align="left";
		this._text.valign="top";
		this._text.width=0;
	}

	/**@inheritDoc */
	__getset(0,__proto,'dataSource',_super.prototype._$get_dataSource,function(value){
		this._dataSource=value;
		if ((typeof value=='boolean'))this.selected=value;
		else if ((typeof value=='string'))this.selected=value==="true";
		else Laya.superSet(Button,this,'dataSource',value);
	});

	return CheckBox;
})(Button)


/**
*<code>Radio</code> 控件使用户可在一组互相排斥的选择中做出一种选择。
*用户一次只能选择 <code>Radio</code> 组中的一个成员。选择未选中的组成员将取消选择该组中当前所选的 <code>Radio</code> 控件。
*@see laya.ui.RadioGroup
*/
//class laya.ui.Radio extends laya.ui.Button
var Radio=(function(_super){
	function Radio(skin,label){
		/**@private */
		this._value=null;
		(label===void 0)&& (label="");
		Radio.__super.call(this,skin,label);
	}

	__class(Radio,'laya.ui.Radio',_super);
	var __proto=Radio.prototype;
	/**@inheritDoc */
	__proto.destroy=function(destroyChild){
		(destroyChild===void 0)&& (destroyChild=true);
		_super.prototype.destroy.call(this,destroyChild);
		this._value=null;
	}

	/**@inheritDoc */
	__proto.preinitialize=function(){
		laya.ui.Component.prototype.preinitialize.call(this);
		this.toggle=false;
		this._autoSize=false;
	}

	/**@inheritDoc */
	__proto.initialize=function(){
		_super.prototype.initialize.call(this);
		this.createText();
		this._text.align="left";
		this._text.valign="top";
		this._text.width=0;
		this.on("click",this,this.onClick);
	}

	/**
	*@private
	*对象的<code>Event.CLICK</code>事件侦听处理函数。
	*/
	__proto.onClick=function(e){
		this.selected=true;
	}

	/**
	*获取或设置 <code>Radio</code> 关联的可选用户定义值。
	*/
	__getset(0,__proto,'value',function(){
		return this._value !=null ? this._value :this.label;
		},function(obj){
		this._value=obj;
	});

	return Radio;
})(Button)


/**
*@private
*/
//class laya.utils.GraphicAnimation extends laya.display.FrameAnimation
var GraphicAnimation=(function(_super){
	var GraphicNode;
	function GraphicAnimation(){
		/**
		*@private
		*/
		this.animationList=null;
		/**
		*@private
		*/
		this.animationDic=null;
		/**
		*@private
		*/
		this._nodeList=null;
		/**
		*@private
		*/
		this._nodeDefaultProps=null;
		/**
		*@private
		*/
		this._gList=null;
		/**
		*@private
		*/
		this._nodeIDAniDic={};
		this._rootNode=null;
		this._nodeGDic=null;
		GraphicAnimation.__super.call(this);
	}

	__class(GraphicAnimation,'laya.utils.GraphicAnimation',_super);
	var __proto=GraphicAnimation.prototype;
	/**
	*@private
	*/
	__proto._parseNodeList=function(uiView){
		if (!this._nodeList){
			this._nodeList=[];
		}
		this._nodeDefaultProps[uiView.compId]=uiView.props;
		if (uiView.compId)
			this._nodeList.push(uiView.compId);
		var childs=uiView.child;
		if (childs){
			var i=0,len=childs.length;
			for (i=0;i < len;i++){
				this._parseNodeList(childs[i]);
			}
		}
	}

	/**
	*@private
	*/
	__proto._calGraphicData=function(aniData){
		this._setUp(null,aniData);
		this._createGraphicData();
		if (this._nodeIDAniDic){
			var key;
			for (key in this._nodeIDAniDic){
				this._nodeIDAniDic[key]=null;
			}
		}
	}

	/**
	*@private
	*/
	__proto._createGraphicData=function(){
		var gList=[];
		var i=0,len=this.count;
		var animationDataNew=this._animationNewFrames;
		if (!animationDataNew)animationDataNew=[];
		var preGraphic;
		for (i=0;i < len;i++){
			if (animationDataNew[i] || !preGraphic){
				preGraphic=this._createFrameGraphic(i);
			}
			gList.push(preGraphic);
		}
		this._gList=gList;
	}

	/**
	*@private
	*/
	__proto._createFrameGraphic=function(frame){
		var g=RunDriver.createGraphics();
		if (!GraphicAnimation._rootMatrix)
			GraphicAnimation._rootMatrix=new Matrix();
		this._updateNodeGraphic(this._rootNode,frame,GraphicAnimation._rootMatrix,g);
		return g;
	}

	__proto._updateNodeGraphic=function(node,frame,parentTransfrom,g,alpha){
		(alpha===void 0)&& (alpha=1);
		var tNodeG;
		tNodeG=this._nodeGDic[node.compId]=this._getNodeGraphicData(node.compId,frame,this._nodeGDic[node.compId]);
		var tGraphicAlpha=tNodeG.alpha *alpha;
		if (tGraphicAlpha < 0.01)return;
		if (!tNodeG.resultTransform){
			tNodeG.resultTransform=Matrix.create();
		};
		var tResultTransform;
		tResultTransform=tNodeG.resultTransform;
		Matrix.mul(tNodeG.transform,parentTransfrom,tResultTransform);
		var tTex;
		if (tNodeG.skin){
			tTex=this._getTextureByUrl(tNodeG.skin);
			if (tTex){
				if (tResultTransform._checkTransform()){
					g.drawTexture(tTex,0,0,tNodeG.width,tNodeG.height,tResultTransform,tGraphicAlpha);
					tNodeG.resultTransform=null;
					}else {
					g.drawTexture(tTex,tResultTransform.tx,tResultTransform.ty,tNodeG.width,tNodeG.height,null,tGraphicAlpha);
				}
			}
		};
		var childs;
		childs=node.child;
		if (!childs)
			return;
		var i=0,len=0;
		len=childs.length;
		for (i=0;i < len;i++){
			this._updateNodeGraphic(childs[i],frame,tResultTransform,g,tGraphicAlpha);
		}
	}

	__proto._updateNoChilds=function(tNodeG,g){
		if (!tNodeG.skin)
			return;
		var tTex=this._getTextureByUrl(tNodeG.skin);
		if (!tTex)
			return;
		var tTransform=tNodeG.transform;
		tTransform._checkTransform();
		var onlyTranslate=false;
		onlyTranslate=!tTransform.bTransform;
		if (!onlyTranslate){
			g.drawTexture(tTex,0,0,tNodeG.width,tNodeG.height,tTransform.clone(),tNodeG.alpha);
			}else {
			g.drawTexture(tTex,tTransform.tx,tTransform.ty,tNodeG.width,tNodeG.height,null,tNodeG.alpha);
		}
	}

	__proto._updateNodeGraphic2=function(node,frame,g){
		var tNodeG;
		tNodeG=this._nodeGDic[node.compId]=this._getNodeGraphicData(node.compId,frame,this._nodeGDic[node.compId]);
		if (!node.child){
			this._updateNoChilds(tNodeG,g);
			return;
		};
		var tTransform=tNodeG.transform;
		tTransform._checkTransform();
		var onlyTranslate=false;
		onlyTranslate=!tTransform.bTransform;
		var hasTrans=false;
		hasTrans=onlyTranslate && (tTransform.tx !=0 || tTransform.ty !=0);
		var ifSave=false;
		ifSave=(tTransform.bTransform)|| tNodeG.alpha !=1;
		if (ifSave){
			g.save();
		}
		if (tNodeG.alpha !=1){
			g.alpha(tNodeG.alpha);
		}
		if (!onlyTranslate){
			g.transform(tTransform.clone());
			}else if (hasTrans){
			g.translate(tTransform.tx,tTransform.ty);
		};
		var childs;
		childs=node.child;
		var tTex;
		if (tNodeG.skin){
			tTex=this._getTextureByUrl(tNodeG.skin);
			if (tTex){
				g.drawTexture(tTex,0,0,tNodeG.width,tNodeG.height);
			}
		}
		if (childs){
			var i=0,len=0;
			len=childs.length;
			for (i=0;i < len;i++){
				this._updateNodeGraphic2(childs[i],frame,g);
			}
		}
		if (ifSave){
			g.restore();
			}else {
			if (!onlyTranslate){
				g.transform(tTransform.clone().invert());
				}else if (hasTrans){
				g.translate(-tTransform.tx,-tTransform.ty);
			}
		}
	}

	/**
	*@private
	*/
	__proto._calculateNodeKeyFrames=function(node){
		_super.prototype._calculateNodeKeyFrames.call(this,node);
		this._nodeIDAniDic[node.target]=node;
	}

	/**
	*@private
	*/
	__proto.getNodeDataByID=function(nodeID){
		return this._nodeIDAniDic[nodeID];
	}

	/**
	*@private
	*/
	__proto._getParams=function(obj,params,frame,obj2){
		var rst=GraphicAnimation._temParam;
		rst.length=params.length;
		var i=0,len=params.length;
		for (i=0;i < len;i++){
			rst[i]=this._getObjVar(obj,params[i][0],frame,params[i][1],obj2);
		}
		return rst;
	}

	/**
	*@private
	*/
	__proto._getObjVar=function(obj,key,frame,noValue,obj2){
		if (obj.hasOwnProperty(key)){
			var vArr=obj[key];
			if (frame >=vArr.length)
				frame=vArr.length-1;
			return obj[key][frame];
		}
		if (obj2.hasOwnProperty(key)){
			return obj2[key];
		}
		return noValue;
	}

	__proto._getNodeGraphicData=function(nodeID,frame,rst){
		if (!rst)
			rst=GraphicNode.create();
		if (!rst.transform){
			rst.transform=Matrix.create();
			}else{
			rst.transform.identity();
		};
		var node=this.getNodeDataByID(nodeID);
		if (!node)
			return rst;
		var frameData=node.frames;
		var params=this._getParams(frameData,GraphicAnimation._drawTextureCmd,frame,this._nodeDefaultProps[nodeID]);
		var url=params[0];
		var width=NaN,height=NaN;
		var px=params[5],py=params[6];
		var aX=params[13],aY=params[14];
		var sx=params[7],sy=params[8];
		var rotate=params[9];
		var skewX=params[11],skewY=params[12]
		width=params[3];
		height=params[4];
		if (width==0 || height==0)url=null;
		if (width==-1)width=0;
		if (height==-1)height=0;
		var tex;
		rst.skin=url;
		rst.width=width;
		rst.height=height;
		if (url){
			tex=this._getTextureByUrl(url);
			if (tex){
				if (!width)
					width=tex.sourceWidth;
				if (!height)
					height=tex.sourceHeight;
				}else {
				console.warn("lost skin:",url,",you may load pics first");
			}
		}
		rst.alpha=params[10];
		var m;
		m=rst.transform;
		if (aX !=0){
			px=aX *width;
		}
		if (aY !=0){
			py=aY *height;
		}
		if (px !=0 || py !=0){
			m.translate(-px,-py);
		};
		var tm=null;
		if (rotate || sx!==1 || sy!==1 || skewX || skewY){
			tm=GraphicAnimation._tempMt;
			tm.identity();
			tm.bTransform=true;
			var skx=(rotate-skewX)*0.0174532922222222;
			var sky=(rotate+skewY)*0.0174532922222222;
			var cx=Math.cos(sky);
			var ssx=Math.sin(sky);
			var cy=Math.sin(skx);
			var ssy=Math.cos(skx);
			tm.a=sx *cx;
			tm.b=sx *ssx;
			tm.c=-sy *cy;
			tm.d=sy *ssy;
			tm.tx=tm.ty=0;
		}
		if (tm){
			m=Matrix.mul(m,tm,m);
		}
		m.translate(params[1],params[2]);
		return rst;
	}

	/**
	*@private
	*/
	__proto._getTextureByUrl=function(url){
		return Loader.getRes(url);
	}

	/**
	*@private
	*/
	__proto.setAniData=function(uiView,aniName){
		if (uiView.animations){
			this._nodeDefaultProps={};
			this._nodeGDic={};
			if (this._nodeList)
				this._nodeList.length=0;
			this._rootNode=uiView;
			this._parseNodeList(uiView);
			var aniDic={};
			var anilist=[];
			var animations=uiView.animations;
			var i=0,len=animations.length;
			var tAniO;
			for (i=0;i < len;i++){
				tAniO=animations[i];
				this._labels=null;
				if (aniName && aniName !=tAniO.name){
					continue ;
				}
				if (!tAniO)
					continue ;
				try {
					this._calGraphicData(tAniO);
					}catch (e){
					console.warn("parse animation fail:"+tAniO.name+",empty animation created");
					this._gList=[];
				};
				var frameO={};
				frameO.interval=1000 / tAniO["frameRate"];
				frameO.frames=this._gList;
				frameO.labels=this._labels;
				frameO.name=tAniO.name;
				anilist.push(frameO);
				aniDic[tAniO.name]=frameO;
			}
			this.animationList=anilist;
			this.animationDic=aniDic;
		}
		GraphicAnimation._temParam.length=0;
	}

	__proto.parseByData=function(aniData){
		var rootNode,aniO;
		rootNode=aniData.nodeRoot;
		aniO=aniData.aniO;
		delete aniData.nodeRoot;
		delete aniData.aniO;
		this._nodeDefaultProps={};
		this._nodeGDic={};
		if (this._nodeList)
			this._nodeList.length=0;
		this._rootNode=rootNode;
		this._parseNodeList(rootNode);
		this._labels=null;
		try {
			this._calGraphicData(aniO);
			}catch (e){
			console.warn("parse animation fail:"+aniO.name+",empty animation created");
			this._gList=[];
		};
		var frameO=aniData;
		frameO.interval=1000 / aniO["frameRate"];
		frameO.frames=this._gList;
		frameO.labels=this._labels;
		frameO.name=aniO.name;
		return frameO;
	}

	/**
	*@private
	*/
	__proto.setUpAniData=function(uiView){
		if (uiView.animations){
			var aniDic={};
			var anilist=[];
			var animations=uiView.animations;
			var i=0,len=animations.length;
			var tAniO;
			for (i=0;i < len;i++){
				tAniO=animations[i];
				if (!tAniO)
					continue ;
				var frameO={};
				frameO.name=tAniO.name;
				frameO.aniO=tAniO;
				frameO.nodeRoot=uiView;
				anilist.push(frameO);
				aniDic[tAniO.name]=frameO;
			}
			this.animationList=anilist;
			this.animationDic=aniDic;
		}
	}

	/**
	*@private
	*/
	__proto._clear=function(){
		this.animationList=null;
		this.animationDic=null;
		this._gList=null;
		if (this._nodeGDic){
			var key;
			var tGNode;
			for (key in this._nodeGDic){
				tGNode=this._nodeGDic[key];
				if (tGNode)tGNode.recover();
			}
		}
		this._nodeGDic=null;
	}

	GraphicAnimation.parseAnimationByData=function(animationObject){
		if (!GraphicAnimation._I)
			GraphicAnimation._I=new GraphicAnimation();
		var rst;
		rst=GraphicAnimation._I.parseByData(animationObject);
		GraphicAnimation._I._clear();
		return rst;
	}

	GraphicAnimation.parseAnimationData=function(aniData){
		if (!GraphicAnimation._I)
			GraphicAnimation._I=new GraphicAnimation();
		GraphicAnimation._I.setUpAniData(aniData);
		var rst;
		rst={};
		rst.animationList=GraphicAnimation._I.animationList;
		rst.animationDic=GraphicAnimation._I.animationDic;
		GraphicAnimation._I._clear();
		return rst;
	}

	GraphicAnimation._drawTextureCmd=[["skin",null],["x",0],["y",0],["width",-1],["height",-1],["pivotX",0],["pivotY",0],["scaleX",1],["scaleY",1],["rotation",0],["alpha",1],["skewX",0],["skewY",0],["anchorX",0],["anchorY",0]];
	GraphicAnimation._temParam=[];
	GraphicAnimation._I=null;
	GraphicAnimation._rootMatrix=null;
	__static(GraphicAnimation,
	['_tempMt',function(){return this._tempMt=new Matrix();}
	]);
	GraphicAnimation.__init$=function(){
		//class GraphicNode
		GraphicNode=(function(){
			function GraphicNode(){
				this.skin=null;
				this.transform=null;
				this.resultTransform=null;
				this.width=NaN;
				this.height=NaN;
				this.alpha=1;
			}
			__class(GraphicNode,'');
			var __proto=GraphicNode.prototype;
			__proto.recover=function(){
				this.skin=null;
				this.width=0;
				this.height=0;
				this.alpha=1;
				if (this.transform){
					this.transform.destroy();
					this.transform=null;
				}
				if (this.resultTransform){
					this.resultTransform.destroy();
					this.resultTransform=null;
				}
				Pool.recover("GraphicNode",this);
			}
			GraphicNode.create=function(){
				return Pool.getItemByClass("GraphicNode",GraphicNode);
			}
			return GraphicNode;
		})()
	}

	return GraphicAnimation;
})(FrameAnimation)


/**
*字体切片，简化版的位图字体，只需设置一个切片图片和文字内容即可使用，效果同位图字体
*使用方式：设置位图字体皮肤skin，设置皮肤对应的字体内容sheet（如果多行，可以使用空格换行），示例：
*fontClip.skin="font1.png";//设置皮肤
*fontClip.sheet="abc123 456";//设置皮肤对应的内容，空格换行。此皮肤为2行5列（显示时skin会被等分为2行5列），第一行对应的文字为"abc123"，第二行为"456"
*fontClip.value="a1326";//显示"a1326"文字
*/
//class laya.ui.FontClip extends laya.ui.Clip
var FontClip=(function(_super){
	function FontClip(skin,sheet){
		/**数值*/
		this._valueArr=null;
		/**文字内容数组**/
		this._indexMap=null;
		/**位图字体内容**/
		this._sheet=null;
		/**@private */
		this._direction="horizontal";
		/**X方向间隙*/
		this._spaceX=0;
		/**Y方向间隙*/
		this._spaceY=0;
		/**@private 水平对齐方式*/
		this._align="left";
		/**@private 显示文字宽*/
		this._wordsW=0;
		/**@private 显示文字高*/
		this._wordsH=0;
		FontClip.__super.call(this);
		if (skin)this.skin=skin;
		if (sheet)this.sheet=sheet;
	}

	__class(FontClip,'laya.ui.FontClip',_super);
	var __proto=FontClip.prototype;
	__proto.createChildren=function(){
		this._bitmap=new AutoBitmap();
		this.on("loaded",this,this._onClipLoaded);
	}

	/**
	*资源加载完毕
	*/
	__proto._onClipLoaded=function(){
		this.callLater(this.changeValue);
	}

	/**渲染数值*/
	__proto.changeValue=function(){
		if (!this._sources)return;
		if (!this._valueArr)return;
		this.graphics.clear(true);
		var texture;
		texture=this._sources[0];
		if (!texture)return;
		var isHorizontal=(this._direction==="horizontal");
		if (isHorizontal){
			this._wordsW=this._valueArr.length *(texture.sourceWidth+this.spaceX);
			this._wordsH=texture.sourceHeight;
			}else{
			this._wordsW=texture.sourceWidth;
			this._wordsH=(texture.sourceHeight+this.spaceY)*this._valueArr.length;
		};
		var dX=0;
		if (this._width){
			switch(this._align){
				case "center":
					dX=0.5 *(this._width-this._wordsW);
					break ;
				case "right":
					dX=this._width-this._wordsW;
					break ;
				default :
					dX=0;
				}
		}
		for (var i=0,sz=this._valueArr.length;i < sz;i++){
			var index=this._indexMap[this._valueArr.charAt(i)];
			if (!this.sources[index])continue ;
			texture=this.sources[index];
			if (isHorizontal)this.graphics.drawTexture(texture,dX+i *(texture.sourceWidth+this.spaceX),0,texture.sourceWidth,texture.sourceHeight);
			else this.graphics.drawTexture(texture,0+dX,i *(texture.sourceHeight+this.spaceY),texture.sourceWidth,texture.sourceHeight);
		}
		if (!this._width){
			this.resetLayoutX();
			this.callLater(this.changeSize);
		}
		if (!this._height){
			this.resetLayoutY();
			this.callLater(this.changeSize);
		}
	}

	__proto.destroy=function(destroyChild){
		(destroyChild===void 0)&& (destroyChild=true);
		this._valueArr=null;
		this._indexMap=null;
		this.graphics.clear(true);
		this.removeSelf();
		this.off("loaded",this,this._onClipLoaded);
		_super.prototype.destroy.call(this,destroyChild);
	}

	/**
	*设置位图字体内容，空格代表换行。比如"abc123 456"，代表第一行对应的文字为"abc123"，第二行为"456"
	*/
	__getset(0,__proto,'sheet',function(){
		return this._sheet;
		},function(value){
		value+="";
		this._sheet=value;
		var arr=value.split(" ");
		this._clipX=String(arr[0]).length;
		this.clipY=arr.length;
		this._indexMap={};
		for (var i=0;i < this._clipY;i++){
			var line=arr[i].split("");
			for (var j=0,n=line.length;j < n;j++){
				this._indexMap[line[j]]=i *this._clipX+j;
			}
		}
	});

	__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
		Laya.superSet(Clip,this,'height',value);
		this.callLater(this.changeValue);
	});

	/**
	*布局方向。
	*<p>默认值为"horizontal"。</p>
	*<p><b>取值：</b>
	*<li>"horizontal"：表示水平布局。</li>
	*<li>"vertical"：表示垂直布局。</li>
	*</p>
	*/
	__getset(0,__proto,'direction',function(){
		return this._direction;
		},function(value){
		this._direction=value;
		this.callLater(this.changeValue);
	});

	/**
	*设置位图字体的显示内容
	*/
	__getset(0,__proto,'value',function(){
		if (!this._valueArr)return "";
		return this._valueArr;
		},function(value){
		value+="";
		this._valueArr=value;
		this.callLater(this.changeValue);
	});

	__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
		Laya.superSet(Clip,this,'width',value);
		this.callLater(this.changeValue);
	});

	/**X方向文字间隙*/
	__getset(0,__proto,'spaceX',function(){
		return this._spaceX;
		},function(value){
		this._spaceX=value;
		if (this._direction==="horizontal")this.callLater(this.changeValue);
	});

	/**Y方向文字间隙*/
	__getset(0,__proto,'spaceY',function(){
		return this._spaceY;
		},function(value){
		this._spaceY=value;
		if (!(this._direction==="horizontal"))this.callLater(this.changeValue);
	});

	/**水平对齐方式*/
	__getset(0,__proto,'align',function(){
		return this._align;
		},function(v){
		this._align=v;
		this.callLater(this.changeValue);
	});

	__getset(0,__proto,'measureWidth',function(){
		return this._wordsW;
	});

	__getset(0,__proto,'measureHeight',function(){
		return this._wordsH;
	});

	return FontClip;
})(Clip)


/**
*使用 <code>HScrollBar</code> （水平 <code>ScrollBar</code> ）控件，可以在因数据太多而不能在显示区域完全显示时控制显示的数据部分。
*@example <caption>以下示例代码，创建了一个 <code>HScrollBar</code> 实例。</caption>
*package
*{
	*import laya.ui.HScrollBar;
	*import laya.utils.Handler;
	*public class HScrollBar_Example
	*{
		*private var hScrollBar:HScrollBar;
		*public function HScrollBar_Example()
		*{
			*Laya.init(640,800);//设置游戏画布宽高。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load(["resource/ui/hscroll.png","resource/ui/hscroll$bar.png","resource/ui/hscroll$down.png","resource/ui/hscroll$up.png"],Handler.create(this,onLoadComplete));//加载资源。
			*}
		*private function onLoadComplete():void
		*{
			*hScrollBar=new HScrollBar();//创建一个 HScrollBar 类的实例对象 hScrollBar 。
			*hScrollBar.skin="resource/ui/hscroll.png";//设置 hScrollBar 的皮肤。
			*hScrollBar.x=100;//设置 hScrollBar 对象的属性 x 的值，用于控制 hScrollBar 对象的显示位置。
			*hScrollBar.y=100;//设置 hScrollBar 对象的属性 y 的值，用于控制 hScrollBar 对象的显示位置。
			*hScrollBar.changeHandler=new Handler(this,onChange);//设置 hScrollBar 的滚动变化处理器。
			*Laya.stage.addChild(hScrollBar);//将此 hScrollBar 对象添加到显示列表。
			*}
		*private function onChange(value:Number):void
		*{
			*trace("滚动条的位置： value="+value);
			*}
		*}
	*}
*@example
*Laya.init(640,800);//设置游戏画布宽高
*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
*var hScrollBar;
*var res=["resource/ui/hscroll.png","resource/ui/hscroll$bar.png","resource/ui/hscroll$down.png","resource/ui/hscroll$up.png"];
*Laya.loader.load(res,laya.utils.Handler.create(this,onLoadComplete));//加载资源。
*function onLoadComplete(){
	*console.log("资源加载完成！");
	*hScrollBar=new laya.ui.HScrollBar();//创建一个 HScrollBar 类的实例对象 hScrollBar 。
	*hScrollBar.skin="resource/ui/hscroll.png";//设置 hScrollBar 的皮肤。
	*hScrollBar.x=100;//设置 hScrollBar 对象的属性 x 的值，用于控制 hScrollBar 对象的显示位置。
	*hScrollBar.y=100;//设置 hScrollBar 对象的属性 y 的值，用于控制 hScrollBar 对象的显示位置。
	*hScrollBar.changeHandler=new laya.utils.Handler(this,onChange);//设置 hScrollBar 的滚动变化处理器。
	*Laya.stage.addChild(hScrollBar);//将此 hScrollBar 对象添加到显示列表。
	*}
*function onChange(value)
*{
	*console.log("滚动条的位置： value="+value);
	*}
*@example
*import HScrollBar=laya.ui.HScrollBar;
*import Handler=laya.utils.Handler;
*class HScrollBar_Example {
	*private hScrollBar:HScrollBar;
	*constructor(){
		*Laya.init(640,800);//设置游戏画布宽高。
		*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
		*Laya.loader.load(["resource/ui/hscroll.png","resource/ui/hscroll$bar.png","resource/ui/hscroll$down.png","resource/ui/hscroll$up.png"],Handler.create(this,this.onLoadComplete));//加载资源。
		*}
	*private onLoadComplete():void {
		*this.hScrollBar=new HScrollBar();//创建一个 HScrollBar 类的实例对象 hScrollBar 。
		*this.hScrollBar.skin="resource/ui/hscroll.png";//设置 hScrollBar 的皮肤。
		*this.hScrollBar.x=100;//设置 hScrollBar 对象的属性 x 的值，用于控制 hScrollBar 对象的显示位置。
		*this.hScrollBar.y=100;//设置 hScrollBar 对象的属性 y 的值，用于控制 hScrollBar 对象的显示位置。
		*this.hScrollBar.changeHandler=new Handler(this,this.onChange);//设置 hScrollBar 的滚动变化处理器。
		*Laya.stage.addChild(this.hScrollBar);//将此 hScrollBar 对象添加到显示列表。
		*}
	*private onChange(value:number):void {
		*console.log("滚动条的位置： value="+value);
		*}
	*}
*/
//class laya.ui.HScrollBar extends laya.ui.ScrollBar
var HScrollBar=(function(_super){
	function HScrollBar(){
		HScrollBar.__super.call(this);;
	}

	__class(HScrollBar,'laya.ui.HScrollBar',_super);
	var __proto=HScrollBar.prototype;
	/**@inheritDoc */
	__proto.initialize=function(){
		_super.prototype.initialize.call(this);
		this.slider.isVertical=false;
	}

	return HScrollBar;
})(ScrollBar)


/**
*使用 <code>HSlider</code> 控件，用户可以通过在滑块轨道的终点之间移动滑块来选择值。
*<p> <code>HSlider</code> 控件采用水平方向。滑块轨道从左向右扩展，而标签位于轨道的顶部或底部。</p>
*
*@example <caption>以下示例代码，创建了一个 <code>HSlider</code> 实例。</caption>
*package
*{
	*import laya.ui.HSlider;
	*import laya.utils.Handler;
	*public class HSlider_Example
	*{
		*private var hSlider:HSlider;
		*public function HSlider_Example()
		*{
			*Laya.init(640,800);//设置游戏画布宽高。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load(["resource/ui/hslider.png","resource/ui/hslider$bar.png"],Handler.create(this,onLoadComplete));//加载资源。
			*}
		*private function onLoadComplete():void
		*{
			*hSlider=new HSlider();//创建一个 HSlider 类的实例对象 hSlider 。
			*hSlider.skin="resource/ui/hslider.png";//设置 hSlider 的皮肤。
			*hSlider.min=0;//设置 hSlider 最低位置值。
			*hSlider.max=10;//设置 hSlider 最高位置值。
			*hSlider.value=2;//设置 hSlider 当前位置值。
			*hSlider.tick=1;//设置 hSlider 刻度值。
			*hSlider.x=100;//设置 hSlider 对象的属性 x 的值，用于控制 hSlider 对象的显示位置。
			*hSlider.y=100;//设置 hSlider 对象的属性 y 的值，用于控制 hSlider 对象的显示位置。
			*hSlider.changeHandler=new Handler(this,onChange);//设置 hSlider 位置变化处理器。
			*Laya.stage.addChild(hSlider);//把 hSlider 添加到显示列表。
			*}
		*private function onChange(value:Number):void
		*{
			*trace("滑块的位置： value="+value);
			*}
		*}
	*}
*@example
*Laya.init(640,800,"canvas");//设置游戏画布宽高、渲染模式
*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
*var hSlider;
*var res=["resource/ui/hslider.png","resource/ui/hslider$bar.png"];
*Laya.loader.load(res,laya.utils.Handler.create(this,onLoadComplete));
*function onLoadComplete(){
	*console.log("资源加载完成！");
	*hSlider=new laya.ui.HSlider();//创建一个 HSlider 类的实例对象 hSlider 。
	*hSlider.skin="resource/ui/hslider.png";//设置 hSlider 的皮肤。
	*hSlider.min=0;//设置 hSlider 最低位置值。
	*hSlider.max=10;//设置 hSlider 最高位置值。
	*hSlider.value=2;//设置 hSlider 当前位置值。
	*hSlider.tick=1;//设置 hSlider 刻度值。
	*hSlider.x=100;//设置 hSlider 对象的属性 x 的值，用于控制 hSlider 对象的显示位置。
	*hSlider.y=100;//设置 hSlider 对象的属性 y 的值，用于控制 hSlider 对象的显示位置。
	*hSlider.changeHandler=new laya.utils.Handler(this,onChange);//设置 hSlider 位置变化处理器。
	*Laya.stage.addChild(hSlider);//把 hSlider 添加到显示列表。
	*}
*function onChange(value)
*{
	*console.log("滑块的位置： value="+value);
	*}
*@example
*import Handler=laya.utils.Handler;
*import HSlider=laya.ui.HSlider;
*class HSlider_Example {
	*private hSlider:HSlider;
	*constructor(){
		*Laya.init(640,800);//设置游戏画布宽高。
		*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
		*Laya.loader.load(["resource/ui/hslider.png","resource/ui/hslider$bar.png"],Handler.create(this,this.onLoadComplete));//加载资源。
		*}
	*private onLoadComplete():void {
		*this.hSlider=new HSlider();//创建一个 HSlider 类的实例对象 hSlider 。
		*this.hSlider.skin="resource/ui/hslider.png";//设置 hSlider 的皮肤。
		*this.hSlider.min=0;//设置 hSlider 最低位置值。
		*this.hSlider.max=10;//设置 hSlider 最高位置值。
		*this.hSlider.value=2;//设置 hSlider 当前位置值。
		*this.hSlider.tick=1;//设置 hSlider 刻度值。
		*this.hSlider.x=100;//设置 hSlider 对象的属性 x 的值，用于控制 hSlider 对象的显示位置。
		*this.hSlider.y=100;//设置 hSlider 对象的属性 y 的值，用于控制 hSlider 对象的显示位置。
		*this.hSlider.changeHandler=new Handler(this,this.onChange);//设置 hSlider 位置变化处理器。
		*Laya.stage.addChild(this.hSlider);//把 hSlider 添加到显示列表。
		*}
	*private onChange(value:number):void {
		*console.log("滑块的位置： value="+value);
		*}
	*}
*
*@see laya.ui.Slider
*/
//class laya.ui.HSlider extends laya.ui.Slider
var HSlider=(function(_super){
	/**
	*创建一个 <code>HSlider</code> 类实例。
	*@param skin 皮肤。
	*/
	function HSlider(skin){
		HSlider.__super.call(this,skin);
		this.isVertical=false;
	}

	__class(HSlider,'laya.ui.HSlider',_super);
	return HSlider;
})(Slider)


/**
*
*使用 <code>VScrollBar</code> （垂直 <code>ScrollBar</code> ）控件，可以在因数据太多而不能在显示区域完全显示时控制显示的数据部分。
*
*@example <caption>以下示例代码，创建了一个 <code>VScrollBar</code> 实例。</caption>
*package
*{
	*import laya.ui.vScrollBar;
	*import laya.ui.VScrollBar;
	*import laya.utils.Handler;
	*public class VScrollBar_Example
	*{
		*private var vScrollBar:VScrollBar;
		*public function VScrollBar_Example()
		*{
			*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load(["resource/ui/vscroll.png","resource/ui/vscroll$bar.png","resource/ui/vscroll$down.png","resource/ui/vscroll$up.png"],Handler.create(this,onLoadComplete));
			*}
		*private function onLoadComplete():void
		*{
			*vScrollBar=new VScrollBar();//创建一个 vScrollBar 类的实例对象 hScrollBar 。
			*vScrollBar.skin="resource/ui/vscroll.png";//设置 vScrollBar 的皮肤。
			*vScrollBar.x=100;//设置 vScrollBar 对象的属性 x 的值，用于控制 vScrollBar 对象的显示位置。
			*vScrollBar.y=100;//设置 vScrollBar 对象的属性 y 的值，用于控制 vScrollBar 对象的显示位置。
			*vScrollBar.changeHandler=new Handler(this,onChange);//设置 vScrollBar 的滚动变化处理器。
			*Laya.stage.addChild(vScrollBar);//将此 vScrollBar 对象添加到显示列表。
			*}
		*private function onChange(value:Number):void
		*{
			*trace("滚动条的位置： value="+value);
			*}
		*}
	*}
*@example
*Laya.init(640,800);//设置游戏画布宽高
*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
*var vScrollBar;
*var res=["resource/ui/vscroll.png","resource/ui/vscroll$bar.png","resource/ui/vscroll$down.png","resource/ui/vscroll$up.png"];
*Laya.loader.load(res,laya.utils.Handler.create(this,onLoadComplete));//加载资源。
*function onLoadComplete(){
	*vScrollBar=new laya.ui.VScrollBar();//创建一个 vScrollBar 类的实例对象 hScrollBar 。
	*vScrollBar.skin="resource/ui/vscroll.png";//设置 vScrollBar 的皮肤。
	*vScrollBar.x=100;//设置 vScrollBar 对象的属性 x 的值，用于控制 vScrollBar 对象的显示位置。
	*vScrollBar.y=100;//设置 vScrollBar 对象的属性 y 的值，用于控制 vScrollBar 对象的显示位置。
	*vScrollBar.changeHandler=new laya.utils.Handler(this,onChange);//设置 vScrollBar 的滚动变化处理器。
	*Laya.stage.addChild(vScrollBar);//将此 vScrollBar 对象添加到显示列表。
	*}
*function onChange(value){
	*console.log("滚动条的位置： value="+value);
	*}
*@example
*import VScrollBar=laya.ui.VScrollBar;
*import Handler=laya.utils.Handler;
*class VScrollBar_Example {
	*private vScrollBar:VScrollBar;
	*constructor(){
		*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
		*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
		*Laya.loader.load(["resource/ui/vscroll.png","resource/ui/vscroll$bar.png","resource/ui/vscroll$down.png","resource/ui/vscroll$up.png"],Handler.create(this,this.onLoadComplete));
		*}
	*private onLoadComplete():void {
		*this.vScrollBar=new VScrollBar();//创建一个 vScrollBar 类的实例对象 hScrollBar 。
		*this.vScrollBar.skin="resource/ui/vscroll.png";//设置 vScrollBar 的皮肤。
		*this.vScrollBar.x=100;//设置 vScrollBar 对象的属性 x 的值，用于控制 vScrollBar 对象的显示位置。
		*this.vScrollBar.y=100;//设置 vScrollBar 对象的属性 y 的值，用于控制 vScrollBar 对象的显示位置。
		*this.vScrollBar.changeHandler=new Handler(this,this.onChange);//设置 vScrollBar 的滚动变化处理器。
		*Laya.stage.addChild(this.vScrollBar);//将此 vScrollBar 对象添加到显示列表。
		*}
	*private onChange(value:number):void {
		*console.log("滚动条的位置： value="+value);
		*}
	*}
*/
//class laya.ui.VScrollBar extends laya.ui.ScrollBar
var VScrollBar=(function(_super){
	function VScrollBar(){
		VScrollBar.__super.call(this);;
	}

	__class(VScrollBar,'laya.ui.VScrollBar',_super);
	return VScrollBar;
})(ScrollBar)


/**
*使用 <code>VSlider</code> 控件，用户可以通过在滑块轨道的终点之间移动滑块来选择值。
*<p> <code>VSlider</code> 控件采用垂直方向。滑块轨道从下往上扩展，而标签位于轨道的左右两侧。</p>
*
*@example <caption>以下示例代码，创建了一个 <code>VSlider</code> 实例。</caption>
*package
*{
	*import laya.ui.HSlider;
	*import laya.ui.VSlider;
	*import laya.utils.Handler;
	*public class VSlider_Example
	*{
		*private var vSlider:VSlider;
		*public function VSlider_Example()
		*{
			*Laya.init(640,800);//设置游戏画布宽高。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load(["resource/ui/vslider.png","resource/ui/vslider$bar.png"],Handler.create(this,onLoadComplete));//加载资源。
			*}
		*private function onLoadComplete():void
		*{
			*vSlider=new VSlider();//创建一个 VSlider 类的实例对象 vSlider 。
			*vSlider.skin="resource/ui/vslider.png";//设置 vSlider 的皮肤。
			*vSlider.min=0;//设置 vSlider 最低位置值。
			*vSlider.max=10;//设置 vSlider 最高位置值。
			*vSlider.value=2;//设置 vSlider 当前位置值。
			*vSlider.tick=1;//设置 vSlider 刻度值。
			*vSlider.x=100;//设置 vSlider 对象的属性 x 的值，用于控制 vSlider 对象的显示位置。
			*vSlider.y=100;//设置 vSlider 对象的属性 y 的值，用于控制 vSlider 对象的显示位置。
			*vSlider.changeHandler=new Handler(this,onChange);//设置 vSlider 位置变化处理器。
			*Laya.stage.addChild(vSlider);//把 vSlider 添加到显示列表。
			*}
		*private function onChange(value:Number):void
		*{
			*trace("滑块的位置： value="+value);
			*}
		*}
	*}
*@example
*Laya.init(640,800);//设置游戏画布宽高
*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
*var vSlider;
*Laya.loader.load(["resource/ui/vslider.png","resource/ui/vslider$bar.png"],laya.utils.Handler.create(this,onLoadComplete));//加载资源。
*function onLoadComplete(){
	*vSlider=new laya.ui.VSlider();//创建一个 VSlider 类的实例对象 vSlider 。
	*vSlider.skin="resource/ui/vslider.png";//设置 vSlider 的皮肤。
	*vSlider.min=0;//设置 vSlider 最低位置值。
	*vSlider.max=10;//设置 vSlider 最高位置值。
	*vSlider.value=2;//设置 vSlider 当前位置值。
	*vSlider.tick=1;//设置 vSlider 刻度值。
	*vSlider.x=100;//设置 vSlider 对象的属性 x 的值，用于控制 vSlider 对象的显示位置。
	*vSlider.y=100;//设置 vSlider 对象的属性 y 的值，用于控制 vSlider 对象的显示位置。
	*vSlider.changeHandler=new laya.utils.Handler(this,onChange);//设置 vSlider 位置变化处理器。
	*Laya.stage.addChild(vSlider);//把 vSlider 添加到显示列表。
	*}
*function onChange(value){
	*console.log("滑块的位置： value="+value);
	*}
*@example
*import HSlider=laya.ui.HSlider;
*import VSlider=laya.ui.VSlider;
*import Handler=laya.utils.Handler;
*class VSlider_Example {
	*private vSlider:VSlider;
	*constructor(){
		*Laya.init(640,800);//设置游戏画布宽高。
		*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
		*Laya.loader.load(["resource/ui/vslider.png","resource/ui/vslider$bar.png"],Handler.create(this,this.onLoadComplete));//加载资源。
		*}
	*private onLoadComplete():void {
		*this.vSlider=new VSlider();//创建一个 VSlider 类的实例对象 vSlider 。
		*this.vSlider.skin="resource/ui/vslider.png";//设置 vSlider 的皮肤。
		*this.vSlider.min=0;//设置 vSlider 最低位置值。
		*this.vSlider.max=10;//设置 vSlider 最高位置值。
		*this.vSlider.value=2;//设置 vSlider 当前位置值。
		*this.vSlider.tick=1;//设置 vSlider 刻度值。
		*this.vSlider.x=100;//设置 vSlider 对象的属性 x 的值，用于控制 vSlider 对象的显示位置。
		*this.vSlider.y=100;//设置 vSlider 对象的属性 y 的值，用于控制 vSlider 对象的显示位置。
		*this.vSlider.changeHandler=new Handler(this,this.onChange);//设置 vSlider 位置变化处理器。
		*Laya.stage.addChild(this.vSlider);//把 vSlider 添加到显示列表。
		*}
	*private onChange(value:number):void {
		*console.log("滑块的位置： value="+value);
		*}
	*}
*@see laya.ui.Slider
*/
//class laya.ui.VSlider extends laya.ui.Slider
var VSlider=(function(_super){
	function VSlider(){
		VSlider.__super.call(this);;
	}

	__class(VSlider,'laya.ui.VSlider',_super);
	return VSlider;
})(Slider)


/**
*<code>TextInput</code> 类用于创建显示对象以显示和输入文本。
*
*@example <caption>以下示例代码，创建了一个 <code>TextInput</code> 实例。</caption>
*package
*{
	*import laya.display.Stage;
	*import laya.ui.TextInput;
	*import laya.utils.Handler;
	*public class TextInput_Example
	*{
		*public function TextInput_Example()
		*{
			*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load(["resource/ui/input.png"],Handler.create(this,onLoadComplete));//加载资源。
			*}
		*private function onLoadComplete():void
		*{
			*var textInput:TextInput=new TextInput("这是一个TextInput实例。");//创建一个 TextInput 类的实例对象 textInput 。
			*textInput.skin="resource/ui/input.png";//设置 textInput 的皮肤。
			*textInput.sizeGrid="4,4,4,4";//设置 textInput 的网格信息。
			*textInput.color="#008fff";//设置 textInput 的文本颜色。
			*textInput.font="Arial";//设置 textInput 的文本字体。
			*textInput.bold=true;//设置 textInput 的文本显示为粗体。
			*textInput.fontSize=30;//设置 textInput 的字体大小。
			*textInput.wordWrap=true;//设置 textInput 的文本自动换行。
			*textInput.x=100;//设置 textInput 对象的属性 x 的值，用于控制 textInput 对象的显示位置。
			*textInput.y=100;//设置 textInput 对象的属性 y 的值，用于控制 textInput 对象的显示位置。
			*textInput.width=300;//设置 textInput 的宽度。
			*textInput.height=200;//设置 textInput 的高度。
			*Laya.stage.addChild(textInput);//将 textInput 添加到显示列表。
			*}
		*}
	*}
*@example
*Laya.init(640,800);//设置游戏画布宽高
*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
*Laya.loader.load(["resource/ui/input.png"],laya.utils.Handler.create(this,onLoadComplete));//加载资源。
*function onLoadComplete(){
	*var textInput=new laya.ui.TextInput("这是一个TextInput实例。");//创建一个 TextInput 类的实例对象 textInput 。
	*textInput.skin="resource/ui/input.png";//设置 textInput 的皮肤。
	*textInput.sizeGrid="4,4,4,4";//设置 textInput 的网格信息。
	*textInput.color="#008fff";//设置 textInput 的文本颜色。
	*textInput.font="Arial";//设置 textInput 的文本字体。
	*textInput.bold=true;//设置 textInput 的文本显示为粗体。
	*textInput.fontSize=30;//设置 textInput 的字体大小。
	*textInput.wordWrap=true;//设置 textInput 的文本自动换行。
	*textInput.x=100;//设置 textInput 对象的属性 x 的值，用于控制 textInput 对象的显示位置。
	*textInput.y=100;//设置 textInput 对象的属性 y 的值，用于控制 textInput 对象的显示位置。
	*textInput.width=300;//设置 textInput 的宽度。
	*textInput.height=200;//设置 textInput 的高度。
	*Laya.stage.addChild(textInput);//将 textInput 添加到显示列表。
	*}
*@example
*import Stage=laya.display.Stage;
*import TextInput=laya.ui.TextInput;
*import Handler=laya.utils.Handler;
*class TextInput_Example {
	*constructor(){
		*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
		*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
		*Laya.loader.load(["resource/ui/input.png"],Handler.create(this,this.onLoadComplete));//加载资源。
		*}
	*private onLoadComplete():void {
		*var textInput:TextInput=new TextInput("这是一个TextInput实例。");//创建一个 TextInput 类的实例对象 textInput 。
		*textInput.skin="resource/ui/input.png";//设置 textInput 的皮肤。
		*textInput.sizeGrid="4,4,4,4";//设置 textInput 的网格信息。
		*textInput.color="#008fff";//设置 textInput 的文本颜色。
		*textInput.font="Arial";//设置 textInput 的文本字体。
		*textInput.bold=true;//设置 textInput 的文本显示为粗体。
		*textInput.fontSize=30;//设置 textInput 的字体大小。
		*textInput.wordWrap=true;//设置 textInput 的文本自动换行。
		*textInput.x=100;//设置 textInput 对象的属性 x 的值，用于控制 textInput 对象的显示位置。
		*textInput.y=100;//设置 textInput 对象的属性 y 的值，用于控制 textInput 对象的显示位置。
		*textInput.width=300;//设置 textInput 的宽度。
		*textInput.height=200;//设置 textInput 的高度。
		*Laya.stage.addChild(textInput);//将 textInput 添加到显示列表。
		*}
	*}
*/
//class laya.ui.TextInput extends laya.ui.Label
var TextInput=(function(_super){
	function TextInput(text){
		/**@private */
		this._bg=null;
		/**@private */
		this._skin=null;
		TextInput.__super.call(this);
		(text===void 0)&& (text="");
		this.text=text;
		this.skin=this.skin;
	}

	__class(TextInput,'laya.ui.TextInput',_super);
	var __proto=TextInput.prototype;
	/**@inheritDoc */
	__proto.preinitialize=function(){
		this.mouseEnabled=true;
	}

	/**@inheritDoc */
	__proto.destroy=function(destroyChild){
		(destroyChild===void 0)&& (destroyChild=true);
		_super.prototype.destroy.call(this,destroyChild);
		this._bg && this._bg.destroy();
		this._bg=null;
	}

	/**@inheritDoc */
	__proto.createChildren=function(){
		this.addChild(this._tf=new Input());
		this._tf.padding=Styles.inputLabelPadding;
		this._tf.on("input",this,this._onInput);
		this._tf.on("enter",this,this._onEnter);
		this._tf.on("blur",this,this._onBlur);
		this._tf.on("focus",this,this._onFocus);
	}

	/**
	*@private
	*/
	__proto._onFocus=function(){
		this.event("focus",this);
	}

	/**
	*@private
	*/
	__proto._onBlur=function(){
		this.event("blur",this);
	}

	/**
	*@private
	*/
	__proto._onInput=function(){
		this.event("input",this);
	}

	/**
	*@private
	*/
	__proto._onEnter=function(){
		this.event("enter",this);
	}

	/**@inheritDoc */
	__proto.initialize=function(){
		this.width=128;
		this.height=22;
	}

	/**选中输入框内的文本。*/
	__proto.select=function(){
		(this._tf).select();
	}

	__proto.setSelection=function(startIndex,endIndex){
		(this._tf).setSelection(startIndex,endIndex);
	}

	/**
	*当前文本内容字符串。
	*@see laya.display.Text.text
	*/
	__getset(0,__proto,'text',_super.prototype._$get_text,function(value){
		if (this._tf.text !=value){
			value=value+"";
			this._tf.text=value;
			this.event("change");
		}
	});

	/**
	*表示此对象包含的文本背景 <code>AutoBitmap</code> 组件实例。
	*/
	__getset(0,__proto,'bg',function(){
		return this._bg;
		},function(value){
		this.graphics=this._bg=value;
	});

	/**
	*设置原生input输入框的y坐标偏移。
	*/
	__getset(0,__proto,'inputElementYAdjuster',function(){
		return (this._tf).inputElementYAdjuster;
		},function(value){
		(this._tf).inputElementYAdjuster=value;
	});

	/**
	*<p>指示当前是否是文本域。</p>
	*值为true表示当前是文本域，否则不是文本域。
	*/
	__getset(0,__proto,'multiline',function(){
		return (this._tf).multiline;
		},function(value){
		(this._tf).multiline=value;
	});

	/**
	*@copy laya.ui.Image#skin
	*/
	__getset(0,__proto,'skin',function(){
		return this._skin;
		},function(value){
		if (this._skin !=value){
			this._skin=value;
			this._bg || (this.graphics=this._bg=new AutoBitmap());
			this._bg.source=Loader.getRes(this._skin);
			this._width && (this._bg.width=this._width);
			this._height && (this._bg.height=this._height);
		}
	});

	/**
	*<p>当前实例的背景图（ <code>AutoBitmap</code> ）实例的有效缩放网格数据。</p>
	*<p>数据格式："上边距,右边距,下边距,左边距,是否重复填充(值为0：不重复填充，1：重复填充)"，以逗号分隔。
	*<ul><li>例如："4,4,4,4,1"</li></ul></p>
	*@see laya.ui.AutoBitmap.sizeGrid
	*/
	__getset(0,__proto,'sizeGrid',function(){
		return this._bg && this._bg.sizeGrid ? this._bg.sizeGrid.join(","):null;
		},function(value){
		this._bg || (this.graphics=this._bg=new AutoBitmap());
		this._bg.sizeGrid=UIUtils.fillArray(Styles.defaultSizeGrid,value,Number);
	});

	/**
	*设置原生input输入框的x坐标偏移。
	*/
	__getset(0,__proto,'inputElementXAdjuster',function(){
		return (this._tf).inputElementXAdjuster;
		},function(value){
		(this._tf).inputElementXAdjuster=value;
	});

	/**@inheritDoc */
	__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
		Laya.superSet(Label,this,'width',value);
		this._bg && (this._bg.width=value);
	});

	/**@inheritDoc */
	__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
		Laya.superSet(Label,this,'height',value);
		this._bg && (this._bg.height=value);
	});

	/**
	*设置可编辑状态。
	*/
	__getset(0,__proto,'editable',function(){
		return (this._tf).editable;
		},function(value){
		(this._tf).editable=value;
	});

	/**限制输入的字符。*/
	__getset(0,__proto,'restrict',function(){
		return (this._tf).restrict;
		},function(pattern){
		(this._tf).restrict=pattern;
	});

	/**
	*@copy laya.display.Input#prompt
	*/
	__getset(0,__proto,'prompt',function(){
		return (this._tf).prompt;
		},function(value){
		(this._tf).prompt=value;
	});

	/**
	*@copy laya.display.Input#promptColor
	*/
	__getset(0,__proto,'promptColor',function(){
		return (this._tf).promptColor;
		},function(value){
		(this._tf).promptColor=value;
	});

	/**
	*@copy laya.display.Input#maxChars
	*/
	__getset(0,__proto,'maxChars',function(){
		return (this._tf).maxChars;
		},function(value){
		(this._tf).maxChars=value;
	});

	/**
	*@copy laya.display.Input#focus
	*/
	__getset(0,__proto,'focus',function(){
		return (this._tf).focus;
		},function(value){
		(this._tf).focus=value;
	});

	/**
	*@copy laya.display.Input#type
	*/
	__getset(0,__proto,'type',function(){
		return (this._tf).type;
		},function(value){
		(this._tf).type=value;
	});

	/**
	*@copy laya.display.Input#asPassword
	*/
	__getset(0,__proto,'asPassword',function(){
		return (this._tf).asPassword;
		},function(value){
		(this._tf).asPassword=value;
	});

	return TextInput;
})(Label)


//class laya.webgl.resource.WebGLImage extends laya.resource.HTMLImage
var WebGLImage=(function(_super){
	function WebGLImage(data,def,format,mipmap){
		/**@private */
		this._format=0;
		/**@private */
		this._mipmap=false;
		/***是否创建私有Source,值为false时不根据src创建私有WebGLTexture,同时销毁时也只清空source=null,不调用WebGL.mainContext.deleteTexture类似函数，调用资源激活前有效*/
		this._allowMerageInAtlas=false;
		/**是否允许加入大图合集*/
		this._enableMerageInAtlas=false;
		/**是否使用重复模式纹理寻址*/
		this.repeat=false;
		/**@private */
		this._image=null;
		/**缩小过滤器*/
		this.minFifter=0;
		/**放大过滤器*/
		this.magFifter=0;
		(format===void 0)&& (format=0x1908);
		(mipmap===void 0)&& (mipmap=true);
		WebGLImage.__super.call(this,data,def);
		this._format=format;
		this._mipmap=mipmap;
		this.repeat=false;
		this.minFifter=-1;
		this.magFifter=-1;
		if ((typeof data=='string')){
			this._url=data;
			this._src=data;
			this._image=new Browser.window.Image();
			if (def){
				def.onload && (this.onload=def.onload);
				def.onerror && (this.onerror=def.onerror);
				def.onCreate && def.onCreate(this);
			}
			this._image.crossOrigin=(data && (data.indexOf("data:")==0))? null :"";
			(data)&& (this._image.src=data);
			}else if ((data instanceof ArrayBuffer)){
			this._src=def;
			this._url=this._src;
			var readData=new Byte(data);
			var magicNumber=readData.readUTFBytes(4);
			var version=readData.readUTFBytes(2);
			var dataType=readData.getInt16();
			readData.endian="bigEndian";
			this._w=readData.getInt16();
			this._h=readData.getInt16();
			var originalWidth=readData.getInt16();
			var originalHeight=readData.getInt16();
			this._image=new Uint8Array(data,readData.pos);
			this._format=WebGL.compressEtc1.COMPRESSED_RGB_ETC1_WEBGL;
			(AtlasResourceManager.enabled)&& (this._w < AtlasResourceManager.atlasLimitWidth && this._h < AtlasResourceManager.atlasLimitHeight)? this._allowMerageInAtlas=true :this._allowMerageInAtlas=false;
			}else {
			this._src=def;
			this._url=this._src;
			this._image=data["source"] || data;
			this.onresize();
		}
		this._$5__enableMerageInAtlas=true;
	}

	__class(WebGLImage,'laya.webgl.resource.WebGLImage',_super);
	var __proto=WebGLImage.prototype;
	Laya.imps(__proto,{"laya.webgl.resource.IMergeAtlasBitmap":true})
	__proto._init_=function(src,def){}
	__proto._createWebGlTexture=function(){
		if (!this._image){
			throw "create GLTextur err:no data:"+this._image;
		};
		var gl=WebGL.mainContext;
		var glTex=this._source=gl.createTexture();
		var preTarget=WebGLContext.curBindTexTarget;
		var preTexture=WebGLContext.curBindTexValue;
		WebGLContext.bindTexture(gl,0x0DE1,glTex);
		gl.pixelStorei(0x9241,true);
		switch (this._format){
			case 0x1908:
				gl.texImage2D(0x0DE1,0,this._format,0x1908,0x1401,this._image);
				break ;
			case WebGL.compressEtc1.COMPRESSED_RGB_ETC1_WEBGL:
				gl.compressedTexImage2D(0x0DE1,0,this._format,this._w,this._h,0,this._image);
				break ;
			}
		gl.pixelStorei(0x9241,false);
		var minFifter=this.minFifter;
		var magFifter=this.magFifter;
		var repeat=this.repeat ? 0x2901 :0x812F;
		var isPot=Arith.isPOT(this._w,this._h);
		if (isPot){
			if (this.mipmap)
				(minFifter!==-1)|| (minFifter=0x2703);
			else
			(minFifter!==-1)|| (minFifter=0x2601);
			(magFifter!==-1)|| (magFifter=0x2601);
			gl.texParameteri(0x0DE1,0x2801,minFifter);
			gl.texParameteri(0x0DE1,0x2800,magFifter);
			gl.texParameteri(0x0DE1,0x2802,repeat);
			gl.texParameteri(0x0DE1,0x2803,repeat);
			this.mipmap && gl.generateMipmap(0x0DE1);
			}else {
			(minFifter!==-1)|| (minFifter=0x2601);
			(magFifter!==-1)|| (magFifter=0x2601);
			gl.texParameteri(0x0DE1,0x2801,minFifter);
			gl.texParameteri(0x0DE1,0x2800,magFifter);
			gl.texParameteri(0x0DE1,0x2802,0x812F);
			gl.texParameteri(0x0DE1,0x2803,0x812F);
		}
		(preTarget && preTexture)&& (WebGLContext.bindTexture(gl,preTarget,preTexture));
		this._image.onload=null;
		this._image=null;
		if (isPot && this.mipmap)
			this.memorySize=this._w *this._h *4 *(1+1 / 3);
		else
		this.memorySize=this._w *this._h *4;
		this._recreateLock=false;
	}

	/***重新创建资源，如果异步创建中被强制释放再创建，则需等待释放完成后再重新加载创建。*/
	__proto.recreateResource=function(){
		var _$this=this;
		if (this._src==null || this._src==="")
			return;
		this._needReleaseAgain=false;
		if (!this._image){
			this._recreateLock=true;
			var _this=this;
			this._image=new Browser.window.Image();
			this._image.crossOrigin=this._src.indexOf("data:")==0 ? null :"";
			this._image.onload=function (){
				if (_this._needReleaseAgain){
					_this._needReleaseAgain=false;
					_this._image.onload=null;
					_this._image=null;
					return;
				}
				(!(_this._allowMerageInAtlas && _this._enableMerageInAtlas))? (_this._createWebGlTexture()):(_$this.memorySize=0,_$this._recreateLock=false);
				_this.completeCreate();
			};
			this._image.src=this._src;
			}else {
			if (this._recreateLock){
				return;
			}
			(!(this._allowMerageInAtlas && this._$5__enableMerageInAtlas))? (this._createWebGlTexture()):(this.memorySize=0,this._recreateLock=false);
			this.completeCreate();
		}
	}

	/***销毁资源*/
	__proto.disposeResource=function(){
		if (this._recreateLock){
			this._needReleaseAgain=true;
		}
		if (this._source){
			WebGL.mainContext.deleteTexture(this._source);
			this._source=null;
			this._image=null;
			this.memorySize=0;
		}
	}

	/***调整尺寸*/
	__proto.onresize=function(){
		this._w=this._image.width;
		this._h=this._image.height;
		(AtlasResourceManager.enabled)&& (this._w < AtlasResourceManager.atlasLimitWidth && this._h < AtlasResourceManager.atlasLimitHeight)? this._allowMerageInAtlas=true :this._allowMerageInAtlas=false;
	}

	__proto.clearAtlasSource=function(){
		this._image=null;
	}

	/**
	*获取纹理格式。
	*/
	__getset(0,__proto,'format',function(){
		return this._format;
	});

	/**
	*是否创建私有Source,通常禁止修改
	*@param value 是否创建
	*/
	/**
	*是否创建私有Source
	*@return 是否创建
	*/
	__getset(0,__proto,'enableMerageInAtlas',function(){
		return this._$5__enableMerageInAtlas;
		},function(value){
		this._$5__enableMerageInAtlas=value;
	});

	/**
	*获取是否具有mipmap。
	*/
	__getset(0,__proto,'mipmap',function(){
		return this._mipmap;
	});

	/**
	*是否创建私有Source
	*@return 是否创建
	*/
	__getset(0,__proto,'allowMerageInAtlas',function(){
		return this._allowMerageInAtlas;
	});

	__getset(0,__proto,'atlasSource',function(){
		return this._image;
	});

	/***
	*设置onload函数
	*@param value onload函数
	*/
	__getset(0,__proto,'onload',null,function(value){
		var _$this=this;
		this._onload=value;
		this._image && (this._image.onload=this._onload !=null ? (function(){
			_$this.onresize();
			_$this._onload();
		}):null);
	});

	/***
	*设置onerror函数
	*@param value onerror函数
	*/
	__getset(0,__proto,'onerror',null,function(value){
		var _$this=this;
		this._onerror=value;
		this._image && (this._image.onerror=this._onerror !=null ? (function(){
			_$this._onerror()
		}):null);
	});

	return WebGLImage;
})(HTMLImage)


/**
*可弹跳动作体
*@author guowc
*
*/
//class game.Body.JumpAct extends game.Body.DropAct
var JumpAct=(function(_super){
	function JumpAct(){
		this.gayNum=0;
		this.maxNum=1;
		//跳跃速度
		this.velocity=0;
		this.velocityd=-15;
		this.watervelocity=-9;
		this.airvelocity=-9;
		//加速度
		this.gravity=0.5;
		this.max=2;
		JumpAct.__super.call(this);
	}

	__class(JumpAct,'game.Body.JumpAct',_super);
	var __proto=JumpAct.prototype;
	__proto.step=function(){
		if (this._pause==false){
			this.isInWater();
			if(!this.isJump)
				this.dropCheck();
			this.control();
			if (this.isDrop){
				this.dropFrameHandler();
				}else{
				this.jump();
			}
			if(this.isRender){
				if(this._rect.x !=this.oldRect.x || this._rect.y !=this.oldRect.y)
					this.updateXY();
				this.isRender=false;
			}
			if(this.touchGround){
				this._groundPt.x=this._pt.x;
				this._groundPt.y=this._pt.y;
			}
		}
	}

	__proto.control=function(){}
	__proto.orderJump=function(high){
		(high===void 0)&& (high=-14);
		this.isJump=true;
		this.touchGround=false;
		if(this.isWater)
			this.velocity=this.watervelocity;
		else{
			this.velocity=high;
		}
		this.isDrop=false;
		this.g=1;
	}

	//跳跃
	__proto.jump=function(){
		if (this.isJump){
			this.velocity+=this.gravity;
			if(this.isWater && this.velocity>this.waterspeedy)
				this.velocity=this.waterspeedy;
			this._rect.y+=this.velocity;
			if(this.velocity>-1){
				this.isJump=false;
				this.isDrop=true;
			}
			this.isRender=true;
		}
	}

	//空中检测
	__proto.dropCheck=function(){
		_super.prototype.dropCheck.call(this);
		if(this.isDrop){
			if(this.isJump){
				this.isDrop=false;
			}
		}
	}

	return JumpAct;
})(DropAct)


//class game.role.ai.Enemy109 extends game.role.ai.Enemy108
var Enemy109=(function(_super){
	function Enemy109(){
		this.tx=0;
		this.ty=0;
		this.rect=new Rectangle(0,0,0,0);
		Enemy109.__super.call(this);
	}

	__class(Enemy109,'game.role.ai.Enemy109',_super);
	var __proto=Enemy109.prototype;
	__proto.setData=function(val){
		_super.prototype.setData.call(this,val);
		this.rect.x=val.startX;
		this.rect.y=val.startY;
		this.rect.width=this.rw;
		this.rect.height=this.rh;
	}

	__proto.step=function(){
		if(this._pause){
			return;
		}
		if(this.rect.height>10){
			if(this._pt.y <=this.rect.y){
				this.ty=this.baseRoleData.speed;
				}else if(this._pt.y >=this.rect.y+this.rect.height){
				this.ty=-this.baseRoleData.speed;
			}
		}
		if(this.rect.width>10){
			if(this._pt.x <=this.rect.x){
				this.tx=this.baseRoleData.speed;
				}else if(this._pt.x >=this.rect.x+this.rect.width){
				this.tx=-this.baseRoleData.speed;
			}
		}
		if(this.tx!=0 || this.ty!=0){
			this.move(this._pt.x+this.tx,this._pt.y+this.ty);
		}
		game.Body.BaseAct.prototype.step.call(this);
	}

	return Enemy109;
})(Enemy108)


/**
*弹簧
*@author guowc
*
*/
//class game.role.ai.Enemy119 extends game.role.ai.Enemy108
var Enemy119=(function(_super){
	function Enemy119(){
		this.dx=0;
		this.dy=0;
		Enemy119.__super.call(this);
		this.frameDelay=60;
	}

	__class(Enemy119,'game.role.ai.Enemy119',_super);
	var __proto=Enemy119.prototype;
	__proto.setData=function(val){
		_super.prototype.setData.call(this,val);
		this.dx=val.startX*MapData.rboxW;
		this.dy=val.startY*MapData.rboxH;
		MapData.mapData[this.dy][this.dx]=1260;
		MapData.mapData[this.dy][this.dx+1]=1260;
		MapData.mapData[this.dy+1][this.dx]=1260;
		MapData.mapData[this.dy+1][this.dx+1]=1260;
	}

	__proto.playSpring=function(){
		if(this.viewRect.contains(this._pt.x,this._pt.y)){
			GlobalAPI.soundMgr.playSound("springsound");
			this.aniPlay(false);
		}
	}

	__proto.checkxy=function(x,y){
		if(this.dy==y && this.dx==x){
			this.playSpring();
			return true;
		}
		return false;
	}

	__proto.setWH=function(){
		_super.prototype.setWH.call(this);
		this.role.stop();
	}

	__proto.play=function(val){
		_super.prototype.play.call(this,val);
		if(this.role)
			this.role.gotoAndStop(this.role.count-1);
	}

	__proto.loaded=function(){
		game.Body.SkinAct.prototype.loaded.call(this);
		if(this.role){
			this.role.stop();
		}
	}

	return Enemy119;
})(Enemy108)


/**
*板块掉落
*@author guowc
*
*/
//class game.role.ai.Enemy201 extends game.role.ai.Enemy108
var Enemy201=(function(_super){
	function Enemy201(){
		this.clearover=false;
		this.idx=0;
		this.tim=0;
		this.isclear=false;
		this.dx=0;
		this.dy=0;
		Enemy201.__super.call(this);
	}

	__class(Enemy201,'game.role.ai.Enemy201',_super);
	var __proto=Enemy201.prototype;
	__proto.step=function(){
		if(this._pause)return;
		game.Body.BaseAct.prototype.step.call(this);
		if(this.clearover){
			if(Browser.now()-this.tim>5000){
				this.visible=true;
				this.clearover=false;
				this.aniPlay(false);
				this.role.stop();
				MapData.mapData[this.dy][this.dx]=MapData.jumpWallClearSort;
				MapData.mapData[this.dy][this.dx+1]=MapData.jumpWallClearSort;
				MapData.mapData[this.dy][this.dx+2]=MapData.jumpWallClearSort;
			}
			}else if(this.isclear){
			this._$6_idx++;
			if(this._$6_idx==50){
				this.aniPlay(false);
				}else if(this._$6_idx>60){
				this.isclear=false;
				MapData.mapData[this.dy][this.dx]=0;
				MapData.mapData[this.dy][this.dx+1]=0;
				MapData.mapData[this.dy][this.dx+2]=0;
				this.tim=Browser.now();
				this.over(null);
			}
		}
	}

	__proto.setData=function(val){
		_super.prototype.setData.call(this,val);
		this.dx=val.startX*MapData.rboxW;
		this.dy=val.startY*MapData.rboxH;
		MapData.mapData[this.dy][this.dx]=MapData.jumpWallClearSort;
		MapData.mapData[this.dy][this.dx+1]=MapData.jumpWallClearSort;
		MapData.mapData[this.dy][this.dx+2]=MapData.jumpWallClearSort;
	}

	__proto.checkxy=function(x,y){
		if(this.isclear)return false;
		if(this.dy==y && this.dx==x){
			this._$6_idx=0;
			this.isclear=true;
			return true;
		}
		return false;
	}

	__proto.over=function(i){
		GlobalAPI.soundMgr.playSound("wooddropsound");
		this.clearover=true;
		this._$6_idx=0;
		this.visible=false;
	}

	//GlobalAPI.sceneRoleMgr.removeEnemy(baseRoleData.id);
	__proto.play=function(val){
		_super.prototype.play.call(this,val);
		if(this.isclear){
			if(this.role)
				this.aniPlay(false);
			}else{
			if(this.role)
				this.role.stop();
		}
	}

	__proto.loaded=function(){
		game.Body.SkinAct.prototype.loaded.call(this);
		if(this.role){
			this.aniPlay();
			this.role.stop();
		}
	}

	__proto.dispose=function(){
		this.visible=true;
		game.Body.SkinAct.prototype.dispose.call(this);
	}

	return Enemy201;
})(Enemy108)


/**
*移动链条
*@author guowc
*
*/
//class game.role.ai.Enemy202 extends game.role.ai.Enemy108
var Enemy202=(function(_super){
	function Enemy202(){
		/*public function checkxy(x:int,y:int):Boolean{
		if(dy==y && dx==x){
			return true;
		}
		return false;
	}*/

	this.dx=0;
	this.dy=0;
	Enemy202.__super.call(this);
	this.frameDelay=2;
}


__class(Enemy202,'game.role.ai.Enemy202',_super);
var __proto=Enemy202.prototype;
__proto.setData=function(val){
	var type=0;
	this.dx=val.startX*MapData.rboxW;
	this.dy=val.startY*MapData.rboxH;
	if(val.dir==1){
		type=MapData.moveSortR;
		}else{
		val.startX+=MapData.boxW*4;
		type=MapData.moveSortL;
	}

	_super.prototype.setData.call(this,val);
	MapData.mapData[this.dy][this.dx]=type;
	MapData.mapData[this.dy][this.dx+1]=type;
	MapData.mapData[this.dy][this.dx+2]=type;
	MapData.mapData[this.dy][this.dx+3]=type;
}


__proto.setWH=function(){
	_super.prototype.setWH.call(this);
	this.role.stop();
}


return Enemy202;
})(Enemy108)


//class game.role.ai.Enemy422 extends game.role.ai.Enemy108
var Enemy422=(function(_super){
	function Enemy422(){
		this.tim=0;
		Enemy422.__super.call(this);
	}

	__class(Enemy422,'game.role.ai.Enemy422',_super);
	var __proto=Enemy422.prototype;
	__proto.step=function(){
		if(this._pause)return;
		game.Body.BaseAct.prototype.step.call(this);
		if(Browser.now()-this.tim>this.baseRoleData.score){
			this.role.nextFrame(true);
			this.tim=Browser.now();
		}
		this.stop();
	}

	__proto.loaded=function(){
		this.tim=Browser.now()-Math.random()*this.baseRoleData.score>>0;
		game.Body.SkinAct.prototype.loaded.call(this);
	}

	__proto.play=function(val){
		_super.prototype.play.call(this,val);
		this.role.nextFrame(true);
	}

	return Enemy422;
})(Enemy108)


/**
*炸弹箱
*@author guowc
*
*/
//class game.role.ai.Enemy412 extends game.role.ai.Enemy401
var Enemy412=(function(_super){
	function Enemy412(){
		this.dx=0;
		this.dy=0;
		Enemy412.__super.call(this);
		this.pt=new Point;
		this.showHPBar(true);
	}

	__class(Enemy412,'game.role.ai.Enemy412',_super);
	var __proto=Enemy412.prototype;
	__proto.setWH=function(){
		_super.prototype.setWH.call(this);
		if(this.hpbar){
			this.hpbar.x=this.bodyRect.width-this.hpbar.width>>1;
		}
	}

	__proto.setData=function(val){
		_super.prototype.setData.call(this,val);
		this.dx=val.startX*MapData.rboxW;
		this.dy=val.startY*MapData.rboxH;
		MapData.mapData[this.dy][this.dx]=1000;
		MapData.mapData[this.dy][this.dx+1]=1000;
		MapData.mapData[this.dy][this.dx+2]=1000;
		MapData.mapData[this.dy+1][this.dx]=1000;
		MapData.mapData[this.dy+1][this.dx+1]=1000;
		MapData.mapData[this.dy+1][this.dx+2]=1000;
		MapData.mapData[this.dy+2][this.dx]=1000;
		MapData.mapData[this.dy+2][this.dx+1]=1000;
		MapData.mapData[this.dy+2][this.dx+2]=1000;
	}

	__proto.aoebom=function(){
		if(MapData.isJumpWall(this.dx,this.dy+3)){
			GlobalAPI.scrollMap.clearPicTile(this.dx,this.dy+3);
		}
		if(MapData.isJumpWall(this.dx+1,this.dy+3)){
			GlobalAPI.scrollMap.clearPicTile(this.dx+1,this.dy+3);
		}
		if(MapData.isJumpWall(this.dx+2,this.dy+3)){
			GlobalAPI.scrollMap.clearPicTile(this.dx+2,this.dy+3);
		}
		MapData.rect.x=this.pt.x-250;
		MapData.rect.y=this.pt.y-450;
		MapData.rect.width=500;
		MapData.rect.height=500;
		GlobalAPI.hitMgr.aoeBoom(this.baseRoleData.maxhp,this.pt,this,MapData.rect);
		ShakeEffect.start(3,4,3,6)
	}

	__proto.die=function(dir){
		if(this.isDie)return;
		this.hpbar.removeSelf();
		this.isDie=true;
		var mc=GlobalAPI.miniAniEffect.start(null,this._pt.x+this.bodyRect.width*0.5,this._pt.y+this.bodyRect.height+this.bodygay,"boom7",true,50,1.5);
		GlobalAPI.soundMgr.playSound("bomsound");
		MapData.mapData[this.dy][this.dx]=0;
		MapData.mapData[this.dy][this.dx+1]=0;
		MapData.mapData[this.dy][this.dx+2]=0;
		MapData.mapData[this.dy+1][this.dx]=0;
		MapData.mapData[this.dy+1][this.dx+1]=0;
		MapData.mapData[this.dy+1][this.dx+2]=0;
		MapData.mapData[this.dy+2][this.dx]=0;
		MapData.mapData[this.dy+2][this.dx+1]=0;
		MapData.mapData[this.dy+2][this.dx+2]=0;
		this.pt.x=this._pt.x+50;
		this.pt.y=this._pt.y+50;
		this.dispose();
		this.aoebom();
	}

	return Enemy412;
})(Enemy401)


/**
*机关
*/
//class game.role.ai.Enemy421 extends game.role.ai.Enemy401
var Enemy421=(function(_super){
	function Enemy421(){
		this.clearover=false;
		this.tim=0;
		Enemy421.__super.call(this);
	}

	__class(Enemy421,'game.role.ai.Enemy421',_super);
	var __proto=Enemy421.prototype;
	__proto.step=function(){
		if(this._pause){
			this.playover(null);
			return;
		}
		game.Body.BaseAct.prototype.step.call(this);
		if(this.clearover){
			if(Browser.now()-this.tim>this.baseRoleData.score){
				this.clearover=false;
				this.aniPlay();
			}
		}
		this.stop();
	}

	__proto.aniPlay=function(){
		this.checkHit=true;
		this.role.play(0,false);
	}

	__proto.loaded=function(){
		game.Body.SkinAct.prototype.loaded.call(this);
		if(this.role){
			this.role.on("complete",this,this.playover);
			this.aniPlay();
		}
	}

	__proto.playover=function(evt){
		this.checkHit=false;
		this.clearover=true;
		this.tim=Browser.now();
		if(this.role){
			this.role.gotoAndStop(0);
		}
	}

	__proto.dispose=function(){
		this.clearover=false;
		if(this.role){
			this.role.off("complete",this,this.playover);
		}
		_super.prototype.dispose.call(this);
	}

	return Enemy421;
})(Enemy401)


/**
*动画
*@author guowc
*
*/
//class mylaya.common.skin.AniMc extends mylaya.common.skin.RoleSkin
var AniMc=(function(_super){
	function AniMc(){
		this._play=true;
		this._name=null;
		this._start=null;
		this._position=null;
		this._loop=false;
		AniMc.__super.call(this);
	}

	__class(AniMc,'mylaya.common.skin.AniMc',_super);
	var __proto=AniMc.prototype;
	__proto.setPlay=function(start,loop,name){
		(start===void 0)&& (start=0);
		(loop===void 0)&& (loop=true);
		(name===void 0)&& (name="");
		this._play=true;
		this._name=name;
		this._start=start;
		this._$6__loop=loop;
		this.play(start,loop,name);
	}

	__proto.setStop=function(position,name){
		(position===void 0)&& (position=0);
		(name===void 0)&& (name="");
		this._play=false;
		this._name=name;
		this._position=position;
		if(this._name){
			this._setFramesFromCache(this._name);
		}
		this.gotoAndStop(position);
	}

	/**
	*皮肤数据源
	*/
	__proto.setResource=function(resourceId){
		var _$this=this;
		this.clear();
		this.loadAnimation(resourceId,Handler.create(this,loadani,[resourceId]));
		function loadani (url){
			if(_$this._resourceId==url){
				if(_$this._play){
					_$this.play(_$this._start,_$this._loop,_$this._name);
					}else{
					if(_$this._name){
						_$this._setFramesFromCache(_$this._name);
					}
					_$this.gotoAndStop(_$this._position);
				}
				_$this.event("roleload",_$this);
			}
		}
	}

	__proto.updateSkin=function(status,directType,ismirror){
		(ismirror===void 0)&& (ismirror=true);
	}

	return AniMc;
})(RoleSkin)


//class ui.AdViewUI extends laya.ui.View
var AdViewUI=(function(_super){
	function AdViewUI(){
		this.okbtn=null;
		this.closebtn=null;
		this.txt=null;
		AdViewUI.__super.call(this);
	}

	__class(AdViewUI,'ui.AdViewUI',_super);
	var __proto=AdViewUI.prototype;
	__proto.createChildren=function(){
		laya.ui.Component.prototype.createChildren.call(this);
		this.createView(AdViewUI.uiView);
	}

	AdViewUI.uiView={"type":"View","props":{"width":400,"height":250},"child":[{"type":"Image","props":{"y":0,"x":0,"width":400,"skin":"comp/frame.png","sizeGrid":"51,48,55,39","height":250}},{"type":"Button","props":{"y":171,"x":60,"width":100,"var":"okbtn","skin":"comp/btn2.png","sizeGrid":"10,22,17,21","labelSize":20,"labelPadding":"-2","labelColors":"#ffffff","label":"确定","height":50}},{"type":"Button","props":{"y":171,"x":238,"width":100,"var":"closebtn","skin":"comp/btn2.png","sizeGrid":"10,22,17,21","labelSize":20,"labelPadding":"-2","labelColors":"#ffffff","label":"取消","height":50}},{"type":"Label","props":{"y":54,"x":49,"wordWrap":true,"width":310,"var":"txt","text":"观看广告获得观看广告获得观看广告获得观看广告获得","styleSkin":"comp/label.png","padding":"2","leading":8,"height":106,"fontSize":22,"color":"#ffffff"}}]};
	return AdViewUI;
})(View)


//class ui.AliveVIewUI extends laya.ui.View
var AliveVIewUI=(function(_super){
	function AliveVIewUI(){
		this.closebtn=null;
		this.btn=null;
		this.tip=null;
		this.usegunbtn=null;
		this.adicon=null;
		this.timetxt=null;
		this.adtxt=null;
		AliveVIewUI.__super.call(this);
	}

	__class(AliveVIewUI,'ui.AliveVIewUI',_super);
	var __proto=AliveVIewUI.prototype;
	__proto.createChildren=function(){
		laya.ui.Component.prototype.createChildren.call(this);
		this.createView(AliveVIewUI.uiView);
	}

	AliveVIewUI.uiView={"type":"View","props":{"width":600,"height":400},"child":[{"type":"Image","props":{"y":0,"x":0,"width":600,"skin":"comp/frame.png","sizeGrid":"51,48,55,39","height":400}},{"type":"Button","props":{"y":2,"x":564,"var":"closebtn","skin":"comp/btn_close.png"}},{"type":"Button","props":{"y":289,"x":139,"width":294,"var":"btn","skin":"comp/btn2.png","sizeGrid":"10,22,17,21","rotation":0,"labelSize":25,"labelPadding":"-2","labelColors":"#ffffff","labelBold":false,"label":"需要获得6星解锁","height":80}},{"type":"Image","props":{"y":286,"x":398,"var":"tip","skin":"comp/tip.png"}},{"type":"CheckBox","props":{"y":225,"x":416,"width":135,"var":"usegunbtn","skin":"comp/checkbox.png","sizeGrid":"4,5,6,4","selected":true,"labelSize":12,"labelPadding":"0,0,0,2","labelColors":"#ffffff,#00ff00,#ffff00","label":"获得新武器直接切换","height":16}},{"type":"Image","props":{"y":279,"x":137,"width":67,"var":"adicon","skin":"othericon/advideo.png","mouseEnabled":false,"height":44}},{"type":"Label","props":{"y":342,"x":242,"width":87,"var":"timetxt","text":"00:00:00","styleSkin":"comp/label.png","height":20,"fontSize":16,"color":"#ffffff","bold":true,"align":"center"}},{"type":"Label","props":{"y":57,"x":75,"wordWrap":true,"width":451,"text":"绝地求生模式里子弹用完枪会丢掉，新的枪可以从消灭的僵尸中获得，此模式下可以获得大量的金币和钻石。","styleSkin":"comp/label.png","leading":10,"height":111,"fontSize":25,"color":"#fbfbfb"}},{"type":"Label","props":{"y":225,"x":58,"width":281,"text":"提示：掉落枪的等级和装备库一致","styleSkin":"comp/label.png","height":18,"fontSize":15,"color":"#04ebff"}},{"type":"Label","props":{"y":297,"x":187,"width":57,"var":"adtxt","text":"减2小时","styleSkin":"comp/label.png","height":14,"fontSize":12,"color":"#ffffff","bold":true,"bgColor":"#010101"}},{"type":"Label","props":{"y":162,"x":80,"width":281,"text":"(未解锁的武器可在此模式下提前试用体验)","styleSkin":"comp/label.png","height":18,"fontSize":15,"color":"#04ff40"}}]};
	return AliveVIewUI;
})(View)


//class ui.awardview.AwardViewUI extends laya.ui.View
var AwardViewUI=(function(_super){
	function AwardViewUI(){
		this.closebtn=null;
		this.awardbtn=null;
		this.item0=null;
		this.item1=null;
		this.item2=null;
		this.item3=null;
		this.item8=null;
		this.item7=null;
		this.item6=null;
		this.item5=null;
		this.item9=null;
		this.item4=null;
		this.txt0=null;
		this.txt2=null;
		this.txt3=null;
		this.txt5=null;
		this.txt7=null;
		this.txt9=null;
		this.txt8=null;
		this.txt6=null;
		this.txt4=null;
		this.txt1=null;
		this.adimg=null;
		this.timetxt=null;
		this.tip=null;
		AwardViewUI.__super.call(this);
	}

	__class(AwardViewUI,'ui.awardview.AwardViewUI',_super);
	var __proto=AwardViewUI.prototype;
	__proto.createChildren=function(){
		View.regComponent("ui.awardview.AwardItemUI",AwardItemUI);
		laya.ui.Component.prototype.createChildren.call(this);
		this.createView(AwardViewUI.uiView);
	}

	AwardViewUI.uiView={"type":"View","props":{"width":716,"height":450},"child":[{"type":"Image","props":{"y":0,"x":0,"width":716,"skin":"comp/frame.png","sizeGrid":"51,36,52,37","height":450},"child":[{"type":"Image","props":{"y":32,"x":9,"width":698,"skin":"othericon/girlbg.jpg","height":409}}]},{"type":"Button","props":{"y":2,"x":679,"var":"closebtn","skin":"comp/btn_close.png"}},{"type":"Button","props":{"y":191,"x":278,"width":150,"var":"awardbtn","skin":"comp/btn2.png","sizeGrid":"10,22,17,21","rotation":0,"labelSize":25,"labelPadding":"-6","labelFont":"Microsoft YaHei","labelColors":"#ffffff","labelBold":false,"label":"抽奖","height":80}},{"type":"AwardItem","props":{"y":50,"x":56,"var":"item0","runtime":"ui.awardview.AwardItemUI"}},{"type":"AwardItem","props":{"y":50,"x":222,"var":"item1","runtime":"ui.awardview.AwardItemUI"}},{"type":"AwardItem","props":{"y":50,"x":388,"var":"item2","runtime":"ui.awardview.AwardItemUI"}},{"type":"AwardItem","props":{"y":50,"x":554,"var":"item3","runtime":"ui.awardview.AwardItemUI"}},{"type":"AwardItem","props":{"y":331,"x":56,"var":"item8","runtime":"ui.awardview.AwardItemUI"}},{"type":"AwardItem","props":{"y":331,"x":222,"var":"item7","runtime":"ui.awardview.AwardItemUI"}},{"type":"AwardItem","props":{"y":331,"x":388,"var":"item6","runtime":"ui.awardview.AwardItemUI"}},{"type":"AwardItem","props":{"y":331,"x":554,"var":"item5","runtime":"ui.awardview.AwardItemUI"}},{"type":"AwardItem","props":{"y":191,"x":56,"var":"item9","runtime":"ui.awardview.AwardItemUI"}},{"type":"AwardItem","props":{"y":191,"x":554,"var":"item4","runtime":"ui.awardview.AwardItemUI"}},{"type":"Image","props":{"y":342,"x":413,"skin":"skillskin/102.png"}},{"type":"Image","props":{"y":349,"x":77,"skin":"skillskin/105.png"}},{"type":"Image","props":{"y":205,"x":582,"skin":"skillskin/106.png"}},{"type":"Image","props":{"y":57,"x":252,"skin":"skillskin/107.png"}},{"type":"Label","props":{"y":101,"x":77,"width":57,"var":"txt0","text":"x600","styleSkin":"comp/label.png","height":20,"fontSize":16,"color":"#ffffff","align":"center"}},{"type":"Label","props":{"y":101,"x":413,"width":53,"var":"txt2","text":"x1800","styleSkin":"comp/label.png","height":20,"fontSize":16,"color":"#ffffff","align":"center"}},{"type":"Label","props":{"y":101,"x":574,"width":55,"var":"txt3","text":"x3000","styleSkin":"comp/label.png","height":20,"fontSize":16,"color":"#ffffff","align":"center"}},{"type":"Label","props":{"y":381,"x":570,"width":70,"var":"txt5","text":"x12500","styleSkin":"comp/label.png","height":20,"fontSize":16,"color":"#ffffff","align":"center"}},{"type":"Label","props":{"y":381,"x":251,"width":46,"var":"txt7","text":"x15","styleSkin":"comp/label.png","height":20,"fontSize":16,"color":"#ffffff","align":"center"}},{"type":"Label","props":{"y":242,"x":82,"width":46,"var":"txt9","text":"x50","styleSkin":"comp/label.png","height":20,"fontSize":16,"color":"#ffffff","align":"center"}},{"type":"Label","props":{"y":381,"x":119,"width":27,"var":"txt8","text":"x1","styleSkin":"comp/label.png","height":20,"fontSize":16,"color":"#ffffff"}},{"type":"Label","props":{"y":381,"x":452,"width":27,"var":"txt6","text":"x1","styleSkin":"comp/label.png","height":20,"fontSize":16,"color":"#ffffff"}},{"type":"Label","props":{"y":244,"x":619,"width":27,"var":"txt4","text":"x1","styleSkin":"comp/label.png","height":20,"fontSize":16,"color":"#ffffff"}},{"type":"Label","props":{"y":103,"x":286,"width":27,"var":"txt1","text":"x1","styleSkin":"comp/label.png","height":20,"fontSize":16,"color":"#ffffff"}},{"type":"Image","props":{"y":63,"x":590,"skin":"icon/foodicon/5000/101.png"}},{"type":"Image","props":{"y":76,"x":581,"skin":"icon/foodicon/5000/101.png"}},{"type":"Image","props":{"y":343,"x":591,"skin":"icon/foodicon/5000/101.png"}},{"type":"Image","props":{"y":354,"x":611,"skin":"icon/foodicon/5000/101.png"}},{"type":"Image","props":{"y":355,"x":575,"skin":"icon/foodicon/5000/101.png"}},{"type":"Image","props":{"y":76,"x":600,"skin":"icon/foodicon/5000/101.png"}},{"type":"Image","props":{"y":73,"x":428,"skin":"icon/foodicon/5000/101.png"}},{"type":"Image","props":{"y":218,"x":97,"skin":"icon/foodicon/5000/102.png"}},{"type":"Image","props":{"y":359,"x":592,"skin":"icon/foodicon/5000/101.png"}},{"type":"Image","props":{"y":352,"x":256,"skin":"icon/foodicon/5000/102.png"}},{"type":"Image","props":{"y":73,"x":95,"skin":"icon/foodicon/5000/101.png"}},{"type":"Image","props":{"y":219,"x":77,"skin":"icon/foodicon/5000/102.png"}},{"type":"Image","props":{"y":208,"x":87,"skin":"icon/foodicon/5000/102.png"}},{"type":"Image","props":{"y":341,"x":576,"skin":"icon/foodicon/5000/101.png"}},{"type":"Image","props":{"y":343,"x":607,"skin":"icon/foodicon/5000/101.png"}},{"type":"Image","props":{"y":351,"x":592,"skin":"icon/foodicon/5000/101.png"}},{"type":"Image","props":{"y":183,"x":276,"width":50,"var":"adimg","skin":"othericon/advideo.png","mouseEnabled":false,"height":36}},{"type":"Label","props":{"y":243,"x":310,"width":87,"var":"timetxt","text":"00:00:00","styleSkin":"comp/label.png","height":20,"fontSize":16,"color":"#ffffff","bold":true,"align":"center"}},{"type":"Image","props":{"y":197,"x":390,"var":"tip","skin":"comp/tip.png"}}]};
	return AwardViewUI;
})(View)


//class ui.BoxgemViewUI extends laya.ui.View
var BoxgemViewUI=(function(_super){
	function BoxgemViewUI(){
		this.okbtn=null;
		this.gemicon=null;
		this.numtxt=null;
		this.adimg=null;
		this.closebtn=null;
		this.btn3=null;
		this.goldicon=null;
		BoxgemViewUI.__super.call(this);
	}

	__class(BoxgemViewUI,'ui.BoxgemViewUI',_super);
	var __proto=BoxgemViewUI.prototype;
	__proto.createChildren=function(){
		laya.ui.Component.prototype.createChildren.call(this);
		this.createView(BoxgemViewUI.uiView);
	}

	BoxgemViewUI.uiView={"type":"View","props":{"width":400,"height":250},"child":[{"type":"Image","props":{"y":0,"x":0,"width":400,"skin":"comp/frame.png","sizeGrid":"51,48,55,39","height":250}},{"type":"Button","props":{"y":176,"x":38,"width":171,"var":"okbtn","skin":"comp/btn2.png","sizeGrid":"10,22,17,21","labelSize":20,"labelPadding":"-2","labelColors":"#ffffff","label":"免费获得","height":53}},{"type":"Image","props":{"y":98,"x":152,"width":46,"var":"gemicon","skin":"icon/foodicon/5000/102.png","height":34}},{"type":"Label","props":{"y":104,"x":197,"width":69,"var":"numtxt","text":"X5","styleSkin":"comp/label.png","height":20,"fontSize":20,"color":"#fdfdfd","align":"left"}},{"type":"Image","props":{"y":166,"x":38,"width":49,"var":"adimg","skin":"othericon/advideo.png","mouseEnabled":false,"height":36}},{"type":"Button","props":{"y":175,"x":257,"width":102,"var":"closebtn","skin":"comp/btn2.png","sizeGrid":"10,22,17,21","labelSize":20,"labelPadding":"-2","labelColors":"#ffffff","label":"放弃","height":53}},{"type":"Label","props":{"y":57,"x":55,"width":280,"text":"宝箱额外奖励","styleSkin":"comp/label.png","height":20,"fontSize":20,"color":"#ffffff","align":"left"}},{"type":"Button","props":{"y":175,"x":105,"width":188,"var":"btn3","skin":"comp/btn2.png","sizeGrid":"8,16,14,17","rotation":0,"labelSize":16,"labelPadding":"0","labelColors":"#f8f6f6","labelBold":true,"label":"已领取奖励","height":53}},{"type":"Image","props":{"y":94,"x":157,"width":35,"var":"goldicon","skin":"miniani/miniani/gold0002.png","height":38}}]};
	return BoxgemViewUI;
})(View)


//class ui.ChooseBtnUI extends laya.ui.View
var ChooseBtnUI=(function(_super){
	function ChooseBtnUI(){
		this.btn=null;
		this.lockicon=null;
		this.tipicon=null;
		ChooseBtnUI.__super.call(this);
	}

	__class(ChooseBtnUI,'ui.ChooseBtnUI',_super);
	var __proto=ChooseBtnUI.prototype;
	__proto.createChildren=function(){
		laya.ui.Component.prototype.createChildren.call(this);
		this.createView(ChooseBtnUI.uiView);
	}

	ChooseBtnUI.uiView={"type":"View","props":{"width":250,"height":60},"child":[{"type":"Button","props":{"y":0,"x":0,"width":250,"var":"btn","stateNum":3,"skin":"comp/btn2.png","sizeGrid":"10,22,17,21","rotation":0,"labelSize":25,"labelPadding":"-2,50","labelColors":"#f8f6f6","label":"info","height":60}},{"type":"Image","props":{"y":11,"x":17,"var":"lockicon","skin":"othericon/lockimg.png"}},{"type":"Image","props":{"y":13,"x":16,"var":"tipicon","skin":"comp/tip.png"}}]};
	return ChooseBtnUI;
})(View)


//class ui.ChooseViewUI extends laya.ui.View
var ChooseViewUI=(function(_super){
	function ChooseViewUI(){
		this.closebtn=null;
		ChooseViewUI.__super.call(this);
	}

	__class(ChooseViewUI,'ui.ChooseViewUI',_super);
	var __proto=ChooseViewUI.prototype;
	__proto.createChildren=function(){
		laya.ui.Component.prototype.createChildren.call(this);
		this.createView(ChooseViewUI.uiView);
	}

	ChooseViewUI.uiView={"type":"View","props":{"width":330,"height":386},"child":[{"type":"Image","props":{"y":0,"x":0,"width":330,"skin":"comp/frame.png","sizeGrid":"51,48,55,39","height":386}},{"type":"Button","props":{"y":1,"x":293,"var":"closebtn","skin":"comp/btn_close.png"}}]};
	return ChooseViewUI;
})(View)


//class ui.ClipBarUI extends laya.ui.View
var ClipBarUI=(function(_super){
	function ClipBarUI(){
		this.txtbg=null;
		this.gunimgbg1=null;
		this.gunimgbg=null;
		this.txt=null;
		this.icon=null;
		this.numtxt=null;
		ClipBarUI.__super.call(this);
	}

	__class(ClipBarUI,'ui.ClipBarUI',_super);
	var __proto=ClipBarUI.prototype;
	__proto.createChildren=function(){
		laya.ui.Component.prototype.createChildren.call(this);
		this.createView(ClipBarUI.uiView);
	}

	ClipBarUI.uiView={"type":"View","props":{"width":140,"height":70},"child":[{"type":"Image","props":{"y":45,"x":2,"width":137,"var":"txtbg","skin":"comp/bg1.png","sizeGrid":"9,11,9,11","height":21}},{"type":"Image","props":{"y":3,"x":3,"width":64,"var":"gunimgbg1","skin":"othericon/border.png","sizeGrid":"24,24,21,21","height":64}},{"type":"Image","props":{"y":0,"x":0,"width":70,"var":"gunimgbg","skin":"othericon/mybox.png","sizeGrid":"29,29,30,30","height":70}},{"type":"Label","props":{"y":47,"x":72,"width":64,"var":"txt","text":"121|121","styleSkin":"comp/label.png","height":17,"fontSize":14,"font":"Arial","color":"#f1efef","bold":true,"align":"right"}},{"type":"Image","props":{"y":46,"x":43,"width":22,"var":"icon","skin":"othericon/chg.png","height":18}},{"type":"Label","props":{"y":6,"x":7,"width":55,"var":"numtxt","text":"11/11","styleSkin":"comp/label.png","height":13,"fontSize":12,"color":"#5ee3d3"}}]};
	return ClipBarUI;
})(View)


//class ui.ControlViewUI extends laya.ui.View
var ControlViewUI=(function(_super){
	function ControlViewUI(){
		this.movebtn=null;
		this.jumpbtn=null;
		this.firebtn=null;
		this.leftbtn=null;
		this.rightbtn=null;
		ControlViewUI.__super.call(this);
	}

	__class(ControlViewUI,'ui.ControlViewUI',_super);
	var __proto=ControlViewUI.prototype;
	__proto.createChildren=function(){
		laya.ui.Component.prototype.createChildren.call(this);
		this.createView(ControlViewUI.uiView);
	}

	ControlViewUI.uiView={"type":"View","props":{"width":960,"height":130},"child":[{"type":"Image","props":{"y":13,"x":141,"width":220,"var":"movebtn","skin":"comp/cirlbg.png","pivotY":110,"pivotX":110,"height":220}},{"type":"Button","props":{"y":-155,"x":843,"width":110,"var":"jumpbtn","stateNum":2,"skin":"othericon/upbtn.png","height":110}},{"type":"Button","props":{"y":-34,"x":806,"width":163,"var":"firebtn","stateNum":2,"skin":"othericon/firebtn.png","height":163}},{"type":"Button","props":{"y":-5,"x":10,"width":128,"var":"leftbtn","stateNum":2,"skin":"othericon/leftbtn.png","height":128}},{"type":"Button","props":{"y":-5,"x":273,"width":128,"var":"rightbtn","stateNum":2,"skin":"othericon/leftbtn.png","scaleX":-1,"height":128}}]};
	return ControlViewUI;
})(View)


//class ui.equipview.BtnsItemUI extends laya.ui.View
var BtnsItemUI=(function(_super){
	function BtnsItemUI(){
		this.equipbtn=null;
		this.uplevbtn=null;
		this.goldimg=null;
		this.gemimg=null;
		this.tipicon=null;
		BtnsItemUI.__super.call(this);
	}

	__class(BtnsItemUI,'ui.equipview.BtnsItemUI',_super);
	var __proto=BtnsItemUI.prototype;
	__proto.createChildren=function(){
		laya.ui.Component.prototype.createChildren.call(this);
		this.createView(BtnsItemUI.uiView);
	}

	BtnsItemUI.uiView={"type":"View","props":{"width":230,"height":70},"child":[{"type":"Button","props":{"y":33,"x":138,"width":90,"var":"equipbtn","skin":"comp/btn2.png","sizeGrid":"10,22,17,21","rotation":0,"labelSize":16,"labelPadding":"0","labelColors":"#f8f6f6","labelBold":false,"label":"装备","height":35}},{"type":"Button","props":{"y":33,"x":5,"width":124,"var":"uplevbtn","skin":"comp/btn2.png","sizeGrid":"10,22,17,21","rotation":0,"labelSize":16,"labelPadding":"0","labelColors":"#f8f6f6","labelBold":false,"label":"升级","height":35}},{"type":"Image","props":{"y":2,"x":6,"var":"goldimg","skin":"icon/foodicon/5000/101.png"}},{"type":"Image","props":{"y":4,"x":0,"var":"gemimg","skin":"icon/foodicon/5000/102.png"}},{"type":"Image","props":{"y":38,"x":19,"width":22,"var":"tipicon","skin":"comp/tip.png","mouseEnabled":false,"height":22}}]};
	return BtnsItemUI;
})(View)


//class ui.equipview.ChooseHeroItemUI extends laya.ui.View
var ChooseHeroItemUI=(function(_super){
	function ChooseHeroItemUI(){
		this.border=null;
		this.addicon=null;
		this.killicon=null;
		this.p1=null;
		this.p2=null;
		ChooseHeroItemUI.__super.call(this);
	}

	__class(ChooseHeroItemUI,'ui.equipview.ChooseHeroItemUI',_super);
	var __proto=ChooseHeroItemUI.prototype;
	__proto.createChildren=function(){
		laya.ui.Component.prototype.createChildren.call(this);
		this.createView(ChooseHeroItemUI.uiView);
	}

	ChooseHeroItemUI.uiView={"type":"View","props":{"width":150,"height":100},"child":[{"type":"Image","props":{"y":0,"x":0,"width":150,"skin":"othericon/mybox.png","sizeGrid":"30,29,30,24","height":100}},{"type":"Image","props":{"y":1,"x":1,"width":148,"var":"border","skin":"othericon/border.png","sizeGrid":"27,25,22,24","height":98}},{"type":"Image","props":{"y":70,"x":117,"var":"addicon","skin":"othericon/addicon.png"}},{"type":"Image","props":{"y":74,"x":121,"var":"killicon","skin":"othericon/killicon.png"}},{"type":"Image","props":{"y":10,"x":104,"var":"p1","skin":"othericon/playericon1.png"}},{"type":"Image","props":{"y":10,"x":104,"var":"p2","skin":"othericon/playericon2.png"}}]};
	return ChooseHeroItemUI;
})(View)


//class ui.equipview.ChooseHeroViewUI extends laya.ui.View
var ChooseHeroViewUI=(function(_super){
	function ChooseHeroViewUI(){
		this.okbtn=null;
		this.cancelbtn=null;
		ChooseHeroViewUI.__super.call(this);
	}

	__class(ChooseHeroViewUI,'ui.equipview.ChooseHeroViewUI',_super);
	var __proto=ChooseHeroViewUI.prototype;
	__proto.createChildren=function(){
		laya.ui.Component.prototype.createChildren.call(this);
		this.createView(ChooseHeroViewUI.uiView);
	}

	ChooseHeroViewUI.uiView={"type":"View","props":{"width":390,"height":200},"child":[{"type":"Image","props":{"y":0,"x":0,"width":390,"skin":"comp/frame.png","sizeGrid":"51,36,52,37","height":200}},{"type":"Label","props":{"y":8,"x":160,"width":69,"text":"选定角色","styleSkin":"comp/label.png","height":20,"fontSize":16,"color":"#ffffff"}},{"type":"Button","props":{"y":150,"x":37,"width":150,"var":"okbtn","skin":"comp/btn2.png","sizeGrid":"10,22,17,21","rotation":0,"labelSize":16,"labelPadding":"0","labelColors":"#f8f6f6","labelBold":false,"label":"确定","height":35}},{"type":"Button","props":{"y":150,"x":206,"width":150,"var":"cancelbtn","skin":"comp/btn2.png","sizeGrid":"10,22,17,21","rotation":0,"labelSize":16,"labelPadding":"0","labelColors":"#f8f6f6","labelBold":false,"label":"取消","height":35}}]};
	return ChooseHeroViewUI;
})(View)


//class ui.equipview.EquipViewUI extends laya.ui.View
var EquipViewUI=(function(_super){
	function EquipViewUI(){
		this.closebtn=null;
		this.tab=null;
		this.floor=null;
		this.herotip=null;
		this.weapontip=null;
		this.mounttip=null;
		this.skilltip=null;
		EquipViewUI.__super.call(this);
	}

	__class(EquipViewUI,'ui.equipview.EquipViewUI',_super);
	var __proto=EquipViewUI.prototype;
	__proto.createChildren=function(){
		laya.ui.Component.prototype.createChildren.call(this);
		this.createView(EquipViewUI.uiView);
	}

	EquipViewUI.uiView={"type":"View","props":{"width":716,"height":370},"child":[{"type":"Image","props":{"y":0,"x":0,"width":716,"skin":"comp/frame.png","sizeGrid":"51,36,52,37","height":370}},{"type":"Button","props":{"y":2,"x":679,"var":"closebtn","skin":"comp/btn_close.png"}},{"type":"Tab","props":{"y":32,"x":8,"width":401,"var":"tab","skin":"comp/tab1.png","labels":"英雄,武器,坐骑,技能/道具","labelStrokeColor":"#080808","labelSize":20,"labelColors":"#003366,#d3d3d3,#003366","labelBold":true,"height":26,"direction":"horizontal"}},{"type":"Image","props":{"y":252,"x":99,"width":171,"var":"floor","skin":"othericon/floor.png","pivotY":12,"pivotX":85,"height":60}},{"type":"Image","props":{"y":28,"x":78,"width":20,"var":"herotip","skin":"comp/tip.png","mouseEnabled":false,"height":20}},{"type":"Image","props":{"y":28,"x":174,"width":20,"var":"weapontip","skin":"comp/tip.png","mouseEnabled":false,"height":20}},{"type":"Image","props":{"y":28,"x":274,"width":20,"var":"mounttip","skin":"comp/tip.png","mouseEnabled":false,"height":20}},{"type":"Image","props":{"y":28,"x":372,"width":20,"var":"skilltip","skin":"comp/tip.png","mouseEnabled":false,"height":20}}]};
	return EquipViewUI;
})(View)


//class ui.equipview.HeroItemUI extends laya.ui.View
var HeroItemUI=(function(_super){
	function HeroItemUI(){
		this.border=null;
		this.equippedtxt=null;
		this.p1=null;
		this.p2=null;
		this.lockimg=null;
		HeroItemUI.__super.call(this);
	}

	__class(HeroItemUI,'ui.equipview.HeroItemUI',_super);
	var __proto=HeroItemUI.prototype;
	__proto.createChildren=function(){
		laya.ui.Component.prototype.createChildren.call(this);
		this.createView(HeroItemUI.uiView);
	}

	HeroItemUI.uiView={"type":"View","props":{"width":213,"height":98},"child":[{"type":"Image","props":{"y":0,"x":0,"width":200,"skin":"othericon/mybox.png","sizeGrid":"30,29,30,24","height":100}},{"type":"Image","props":{"y":1,"x":1,"width":198,"var":"border","skin":"othericon/border.png","sizeGrid":"27,25,22,24","height":98}},{"type":"Image","props":{"y":66,"x":178,"width":39,"var":"equippedtxt","skin":"othericon/selected.png","rotation":-40,"pivotY":11,"pivotX":29,"height":22}},{"type":"Image","props":{"y":10,"x":150,"var":"p1","skin":"othericon/playericon1.png"}},{"type":"Image","props":{"y":10,"x":150,"var":"p2","skin":"othericon/playericon2.png"}},{"type":"Image","props":{"y":48,"x":154,"var":"lockimg","skin":"othericon/lockimg.png"}}]};
	return HeroItemUI;
})(View)


//class ui.equipview.HeroTabUI extends laya.ui.View
var HeroTabUI=(function(_super){
	function HeroTabUI(){
		this.listbg=null;
		this.doublebtn=null;
		HeroTabUI.__super.call(this);
	}

	__class(HeroTabUI,'ui.equipview.HeroTabUI',_super);
	var __proto=HeroTabUI.prototype;
	__proto.createChildren=function(){
		laya.ui.Component.prototype.createChildren.call(this);
		this.createView(HeroTabUI.uiView);
	}

	HeroTabUI.uiView={"type":"View","props":{"width":700,"height":304},"child":[{"type":"Image","props":{"y":0,"x":0,"width":485,"skin":"comp/bg0.png","sizeGrid":"8,8,10,9","height":304}},{"type":"Image","props":{"y":0,"x":485,"width":216,"var":"listbg","skin":"comp/bg0.png","sizeGrid":"8,8,10,9","height":304}},{"type":"Button","props":{"y":257,"x":16,"width":150,"var":"doublebtn","skin":"comp/btn2.png","sizeGrid":"10,22,17,21","rotation":0,"labelSize":16,"labelPadding":"0","labelColors":"#f8f6f6","labelBold":false,"label":"单人模式","height":35}}]};
	return HeroTabUI;
})(View)


//class ui.equipview.HeroTabDataUI extends laya.ui.View
var HeroTabDataUI=(function(_super){
	function HeroTabDataUI(){
		this.hptxt=null;
		this.levtxt=null;
		this.exptxt=null;
		this.misstxt=null;
		this.typetxt=null;
		this.nexthp=null;
		this.nextmiss=null;
		this.nextlevtxt=null;
		this.bufftxt=null;
		HeroTabDataUI.__super.call(this);
	}

	__class(HeroTabDataUI,'ui.equipview.HeroTabDataUI',_super);
	var __proto=HeroTabDataUI.prototype;
	__proto.createChildren=function(){
		laya.ui.Component.prototype.createChildren.call(this);
		this.createView(HeroTabDataUI.uiView);
	}

	HeroTabDataUI.uiView={"type":"View","props":{"width":380,"height":210},"child":[{"type":"Label","props":{"y":64,"x":11,"width":69,"text":"生命","styleSkin":"comp/label.png","height":20,"fontSize":16,"color":"#ffffff","align":"right"}},{"type":"Label","props":{"y":90,"x":11,"width":69,"text":"经验","styleSkin":"comp/label.png","height":20,"fontSize":16,"color":"#ffffff","align":"right"}},{"type":"Label","props":{"y":117,"x":11,"width":69,"text":"闪避","styleSkin":"comp/label.png","height":20,"fontSize":16,"color":"#ffffff","align":"right"}},{"type":"Label","props":{"y":36,"x":11,"width":69,"text":"等级","styleSkin":"comp/label.png","height":20,"fontSize":16,"color":"#ffff00","align":"right"}},{"type":"Label","props":{"y":64,"x":200,"width":46,"var":"hptxt","text":"50","styleSkin":"comp/label.png","height":16,"fontSize":14,"color":"#ffffff"}},{"type":"Label","props":{"y":36,"x":97,"width":69,"var":"levtxt","text":"1","styleSkin":"comp/label.png","height":20,"fontSize":16,"color":"#ffff00"}},{"type":"Label","props":{"y":90,"x":200,"width":46,"var":"exptxt","text":"50","styleSkin":"comp/label.png","height":16,"fontSize":14,"color":"#ffffff"}},{"type":"Label","props":{"y":117,"x":200,"width":46,"var":"misstxt","text":"50","styleSkin":"comp/label.png","height":16,"fontSize":14,"color":"#ffffff"}},{"type":"Label","props":{"y":6,"x":31,"width":162,"var":"typetxt","styleSkin":"comp/label.png","height":20,"fontSize":18,"color":"#57f1f8"}},{"type":"Label","props":{"y":64,"x":257,"width":46,"var":"nexthp","styleSkin":"comp/label.png","height":16,"fontSize":14,"color":"#00ff00"}},{"type":"Label","props":{"y":117,"x":257,"width":46,"var":"nextmiss","styleSkin":"comp/label.png","height":16,"fontSize":14,"color":"#00ff00"}},{"type":"Label","props":{"y":36,"x":246,"width":64,"var":"nextlevtxt","text":"下一级","styleSkin":"comp/label.png","height":20,"fontSize":16,"color":"#ffff00"}},{"type":"Label","props":{"y":145,"x":57,"width":240,"var":"bufftxt","text":"info","styleSkin":"comp/label.png","leading":3,"height":54,"fontSize":14,"color":"#66f4e3"}},{"type":"Label","props":{"y":145,"x":20,"width":32,"text":"技能：","styleSkin":"comp/label.png","leading":2,"height":25,"fontSize":14,"color":"#66f4e3"}}]};
	return HeroTabDataUI;
})(View)


//class ui.equipview.MountItemUI extends laya.ui.View
var MountItemUI=(function(_super){
	function MountItemUI(){
		this.border=null;
		this.equippedtxt=null;
		this.lockimg=null;
		MountItemUI.__super.call(this);
	}

	__class(MountItemUI,'ui.equipview.MountItemUI',_super);
	var __proto=MountItemUI.prototype;
	__proto.createChildren=function(){
		laya.ui.Component.prototype.createChildren.call(this);
		this.createView(MountItemUI.uiView);
	}

	MountItemUI.uiView={"type":"View","props":{"width":213,"height":98},"child":[{"type":"Image","props":{"y":0,"x":0,"width":200,"skin":"othericon/mybox.png","sizeGrid":"30,29,30,24","height":100}},{"type":"Image","props":{"y":1,"x":1,"width":198,"var":"border","skin":"othericon/border.png","sizeGrid":"27,25,22,24","height":98}},{"type":"Image","props":{"y":68,"x":168,"width":58,"var":"equippedtxt","skin":"othericon/fighted.png","rotation":-40,"pivotY":11,"pivotX":29,"height":24}},{"type":"Image","props":{"y":49,"x":154,"var":"lockimg","skin":"othericon/lockimg.png"}}]};
	return MountItemUI;
})(View)


//class ui.equipview.MountTabUI extends laya.ui.View
var MountTabUI=(function(_super){
	function MountTabUI(){
		this.listbg=null;
		MountTabUI.__super.call(this);
	}

	__class(MountTabUI,'ui.equipview.MountTabUI',_super);
	var __proto=MountTabUI.prototype;
	__proto.createChildren=function(){
		laya.ui.Component.prototype.createChildren.call(this);
		this.createView(MountTabUI.uiView);
	}

	MountTabUI.uiView={"type":"View","props":{"width":704,"height":304},"child":[{"type":"Image","props":{"y":0,"x":0,"width":485,"skin":"comp/bg0.png","sizeGrid":"8,8,10,9","height":304}},{"type":"Image","props":{"y":0,"x":485,"width":216,"var":"listbg","skin":"comp/bg0.png","sizeGrid":"8,8,10,9","height":304}}]};
	return MountTabUI;
})(View)


//class ui.equipview.MountTabDataUI extends laya.ui.View
var MountTabDataUI=(function(_super){
	function MountTabDataUI(){
		this.hptxt=null;
		this.levtxt=null;
		this.cliptxt=null;
		this.speedtxt=null;
		this.nexthp=null;
		this.nextclip=null;
		this.nextlevtxt=null;
		this.typetxt=null;
		MountTabDataUI.__super.call(this);
	}

	__class(MountTabDataUI,'ui.equipview.MountTabDataUI',_super);
	var __proto=MountTabDataUI.prototype;
	__proto.createChildren=function(){
		laya.ui.Component.prototype.createChildren.call(this);
		this.createView(MountTabDataUI.uiView);
	}

	MountTabDataUI.uiView={"type":"View","props":{"width":380,"height":170},"child":[{"type":"Label","props":{"y":64,"x":11,"width":69,"text":"生命","styleSkin":"comp/label.png","height":20,"fontSize":16,"color":"#ffffff","align":"right"}},{"type":"Label","props":{"y":90,"x":11,"width":69,"text":"子弹","styleSkin":"comp/label.png","height":20,"fontSize":16,"color":"#ffffff","align":"right"}},{"type":"Label","props":{"y":117,"x":11,"width":69,"text":"移动速度","styleSkin":"comp/label.png","height":20,"fontSize":16,"color":"#ffffff","align":"right"}},{"type":"Label","props":{"y":36,"x":11,"width":69,"text":"等级","styleSkin":"comp/label.png","height":20,"fontSize":16,"color":"#ffff00","align":"right"}},{"type":"Label","props":{"y":64,"x":206,"width":46,"var":"hptxt","text":"50","styleSkin":"comp/label.png","height":16,"fontSize":14,"color":"#ffffff"}},{"type":"Label","props":{"y":36,"x":97,"width":69,"var":"levtxt","text":"等级","styleSkin":"comp/label.png","height":20,"fontSize":16,"color":"#ffff00"}},{"type":"Label","props":{"y":90,"x":206,"width":46,"var":"cliptxt","text":"50","styleSkin":"comp/label.png","height":16,"fontSize":14,"color":"#ffffff"}},{"type":"Label","props":{"y":117,"x":206,"width":46,"var":"speedtxt","text":"50","styleSkin":"comp/label.png","height":16,"fontSize":14,"color":"#ffffff"}},{"type":"Label","props":{"y":64,"x":257,"width":46,"var":"nexthp","styleSkin":"comp/label.png","height":16,"fontSize":14,"color":"#00ff00"}},{"type":"Label","props":{"y":90,"x":257,"width":46,"var":"nextclip","styleSkin":"comp/label.png","height":16,"fontSize":14,"color":"#00ff00"}},{"type":"Label","props":{"y":117,"x":257,"width":46,"styleSkin":"comp/label.png","height":16,"fontSize":14,"color":"#00ff00"}},{"type":"Label","props":{"y":36,"x":246,"width":64,"var":"nextlevtxt","text":"下一级","styleSkin":"comp/label.png","height":20,"fontSize":16,"color":"#ffff00"}},{"type":"Label","props":{"y":6,"x":31,"width":162,"var":"typetxt","text":"名称","styleSkin":"comp/label.png","height":20,"fontSize":18,"color":"#57f1f8"}}]};
	return MountTabDataUI;
})(View)


//class ui.ShopBoxUI extends laya.ui.View
var ShopBoxUI=(function(_super){
	function ShopBoxUI(){
		this.equipbtn=null;
		this.btn=null;
		this.image=null;
		this.gemicon=null;
		this.nametxt=null;
		this.infotxt=null;
		this.gemtxt=null;
		this.numtxt=null;
		this.tipicon=null;
		this.goldicon=null;
		ShopBoxUI.__super.call(this);
	}

	__class(ShopBoxUI,'ui.ShopBoxUI',_super);
	var __proto=ShopBoxUI.prototype;
	__proto.createChildren=function(){
		laya.ui.Component.prototype.createChildren.call(this);
		this.createView(ShopBoxUI.uiView);
	}

	ShopBoxUI.uiView={"type":"View","props":{"width":200,"height":280},"child":[{"type":"Image","props":{"y":0,"x":0,"width":200,"skin":"comp/bg0.png","sizeGrid":"8,8,10,9","height":280}},{"type":"Button","props":{"y":198,"x":38,"width":130,"var":"equipbtn","skin":"comp/btn2.png","sizeGrid":"10,22,17,21","labelSize":18,"labelPadding":"-1","labelColors":"#ffffff","label":"equip","height":31}},{"type":"Button","props":{"y":233,"x":38,"width":130,"var":"btn","skin":"comp/btn2.png","sizeGrid":"10,22,17,21","labelSize":18,"labelPadding":"0,33","labelColors":"#ffffff","label":"购买","height":34}},{"type":"Image","props":{"y":33,"x":56,"width":88,"var":"image","skin":"othericon/box.png","sizeGrid":"27,25,22,24","height":80}},{"type":"Image","props":{"y":238,"x":86,"width":31,"var":"gemicon","skin":"icon/foodicon/5000/102.png","height":23}},{"type":"Label","props":{"y":8,"x":7,"width":185,"var":"nametxt","text":"name","styleSkin":"comp/label.png","height":20,"fontSize":16,"font":"Arial","color":"#fdfdfd","align":"center"}},{"type":"Label","props":{"y":120,"x":7,"wordWrap":true,"width":185,"var":"infotxt","text":"info","styleSkin":"comp/label.png","leading":5,"height":70,"fontSize":16,"font":"Arial","color":"#fdfbfb","align":"center"}},{"type":"Label","props":{"y":240,"x":114,"width":46,"var":"gemtxt","text":"1000","styleSkin":"comp/label.png","height":19,"fontSize":16,"font":"Arial","color":"#f4eeee","bold":true,"align":"left"}},{"type":"Label","props":{"y":90,"x":100,"width":38,"var":"numtxt","valign":"middle","text":"LV.11","styleSkin":"comp/label.png","strokeColor":"#0b0b0b","stroke":3,"height":19,"fontSize":13,"font":"Arial","color":"#fdfbfb","bold":true,"align":"right"}},{"type":"Image","props":{"y":234,"x":34,"width":20,"var":"tipicon","skin":"comp/tip.png","mouseEnabled":false,"height":20}},{"type":"Image","props":{"y":236,"x":90,"var":"goldicon","skin":"icon/foodicon/5000/101.png"}}]};
	return ShopBoxUI;
})(View)


//class ui.equipview.SkillItemUI extends laya.ui.View
var SkillItemUI=(function(_super){
	function SkillItemUI(){
		this.border=null;
		this.addicon=null;
		this.killicon=null;
		SkillItemUI.__super.call(this);
	}

	__class(SkillItemUI,'ui.equipview.SkillItemUI',_super);
	var __proto=SkillItemUI.prototype;
	__proto.createChildren=function(){
		laya.ui.Component.prototype.createChildren.call(this);
		this.createView(SkillItemUI.uiView);
	}

	SkillItemUI.uiView={"type":"View","props":{"width":100,"height":80},"child":[{"type":"Image","props":{"y":1,"x":1,"width":98,"var":"border","skin":"othericon/border.png","sizeGrid":"27,25,22,24","height":78}},{"type":"Image","props":{"y":52,"x":71,"var":"addicon","skin":"othericon/addicon.png"}},{"type":"Image","props":{"y":56,"x":75,"var":"killicon","skin":"othericon/killicon.png"}}]};
	return SkillItemUI;
})(View)


//class ui.equipview.SkillTabUI extends laya.ui.View
var SkillTabUI=(function(_super){
	function SkillTabUI(){
		SkillTabUI.__super.call(this);;
	}

	__class(SkillTabUI,'ui.equipview.SkillTabUI',_super);
	var __proto=SkillTabUI.prototype;
	__proto.createChildren=function(){
		laya.ui.Component.prototype.createChildren.call(this);
		this.createView(SkillTabUI.uiView);
	}

	SkillTabUI.uiView={"type":"View","props":{"width":700,"height":304},"child":[{"type":"Image","props":{"y":0,"x":0,"width":700,"skin":"comp/bg0.png","sizeGrid":"8,8,10,9","height":304}}]};
	return SkillTabUI;
})(View)


//class ui.equipview.SkillViewUI extends laya.ui.View
var SkillViewUI=(function(_super){
	function SkillViewUI(){
		this.okbtn=null;
		this.cancelbtn=null;
		SkillViewUI.__super.call(this);
	}

	__class(SkillViewUI,'ui.equipview.SkillViewUI',_super);
	var __proto=SkillViewUI.prototype;
	__proto.createChildren=function(){
		laya.ui.Component.prototype.createChildren.call(this);
		this.createView(SkillViewUI.uiView);
	}

	SkillViewUI.uiView={"type":"View","props":{"width":360,"height":230},"child":[{"type":"Image","props":{"y":0,"x":0,"width":360,"skin":"comp/frame.png","sizeGrid":"51,36,52,37","height":230}},{"type":"Label","props":{"y":9,"x":119,"width":117,"text":"装备 技能 / 道具","styleSkin":"comp/label.png","height":20,"fontSize":16,"color":"#ffffff"}},{"type":"Label","props":{"y":50,"x":82,"width":195,"text":"选择一格装备你的技能/道具","styleSkin":"comp/label.png","height":20,"fontSize":16,"color":"#ffffff"}},{"type":"Button","props":{"y":179,"x":21,"width":150,"var":"okbtn","skin":"comp/btn2.png","sizeGrid":"10,22,17,21","rotation":0,"labelSize":16,"labelPadding":"0","labelColors":"#f8f6f6","labelBold":false,"label":"确定","height":35}},{"type":"Button","props":{"y":179,"x":190,"width":150,"var":"cancelbtn","skin":"comp/btn2.png","sizeGrid":"10,22,17,21","rotation":0,"labelSize":16,"labelPadding":"0","labelColors":"#f8f6f6","labelBold":false,"label":"取消","height":35}}]};
	return SkillViewUI;
})(View)


//class ui.equipview.WeaponEquipItemUI extends laya.ui.View
var WeaponEquipItemUI=(function(_super){
	function WeaponEquipItemUI(){
		this.border=null;
		this.lockimg=null;
		this.addicon=null;
		this.killicon=null;
		WeaponEquipItemUI.__super.call(this);
	}

	__class(WeaponEquipItemUI,'ui.equipview.WeaponEquipItemUI',_super);
	var __proto=WeaponEquipItemUI.prototype;
	__proto.createChildren=function(){
		laya.ui.Component.prototype.createChildren.call(this);
		this.createView(WeaponEquipItemUI.uiView);
	}

	WeaponEquipItemUI.uiView={"type":"View","props":{"width":100,"height":80},"child":[{"type":"Image","props":{"y":0,"x":0,"width":100,"skin":"othericon/mybox.png","sizeGrid":"30,29,30,24","height":80}},{"type":"Image","props":{"y":1,"x":1,"width":98,"var":"border","skin":"othericon/border.png","sizeGrid":"27,25,22,24","height":78}},{"type":"Image","props":{"y":5,"x":4,"width":91,"var":"lockimg","skin":"othericon/lockicon.png","height":72}},{"type":"Image","props":{"y":52,"x":71,"var":"addicon","skin":"othericon/addicon.png"}},{"type":"Image","props":{"y":56,"x":75,"var":"killicon","skin":"othericon/killicon.png"}}]};
	return WeaponEquipItemUI;
})(View)


//class ui.equipview.WeaponEquipViewUI extends laya.ui.View
var WeaponEquipViewUI=(function(_super){
	function WeaponEquipViewUI(){
		this.okbtn=null;
		this.cancelbtn=null;
		WeaponEquipViewUI.__super.call(this);
	}

	__class(WeaponEquipViewUI,'ui.equipview.WeaponEquipViewUI',_super);
	var __proto=WeaponEquipViewUI.prototype;
	__proto.createChildren=function(){
		laya.ui.Component.prototype.createChildren.call(this);
		this.createView(WeaponEquipViewUI.uiView);
	}

	WeaponEquipViewUI.uiView={"type":"View","props":{"width":570,"height":230},"child":[{"type":"Image","props":{"y":0,"x":0,"width":570,"skin":"comp/frame.png","sizeGrid":"51,36,52,37","height":230}},{"type":"Label","props":{"y":8,"x":244,"width":69,"text":"装备武器","styleSkin":"comp/label.png","height":20,"fontSize":16,"color":"#ffffff"}},{"type":"Label","props":{"y":50,"x":198,"width":149,"text":"选择一格装备你的枪","styleSkin":"comp/label.png","height":20,"fontSize":16,"color":"#ffffff"}},{"type":"Button","props":{"y":179,"x":123,"width":150,"var":"okbtn","skin":"comp/btn2.png","sizeGrid":"10,22,17,21","rotation":0,"labelSize":16,"labelPadding":"0","labelColors":"#f8f6f6","labelBold":false,"label":"确定","height":35}},{"type":"Button","props":{"y":179,"x":292,"width":150,"var":"cancelbtn","skin":"comp/btn2.png","sizeGrid":"10,22,17,21","rotation":0,"labelSize":16,"labelPadding":"0","labelColors":"#f8f6f6","labelBold":false,"label":"取消","height":35}}]};
	return WeaponEquipViewUI;
})(View)


//class ui.equipview.WeaponItemUI extends laya.ui.View
var WeaponItemUI=(function(_super){
	function WeaponItemUI(){
		this.bg=null;
		this.border=null;
		this.equippedtxt=null;
		this.lockimg=null;
		WeaponItemUI.__super.call(this);
	}

	__class(WeaponItemUI,'ui.equipview.WeaponItemUI',_super);
	var __proto=WeaponItemUI.prototype;
	__proto.createChildren=function(){
		laya.ui.Component.prototype.createChildren.call(this);
		this.createView(WeaponItemUI.uiView);
	}

	WeaponItemUI.uiView={"type":"View","props":{"width":213,"height":100},"child":[{"type":"Image","props":{"y":0,"x":0,"width":200,"var":"bg","skin":"othericon/mybox.png","sizeGrid":"30,29,30,24","height":100}},{"type":"Image","props":{"y":1,"x":1,"width":198,"var":"border","skin":"othericon/border.png","sizeGrid":"27,25,22,24","height":98}},{"type":"Image","props":{"y":68,"x":168,"width":58,"var":"equippedtxt","skin":"othericon/equipped.png","rotation":-40,"pivotY":11,"pivotX":29,"height":24}},{"type":"Image","props":{"y":48,"x":154,"var":"lockimg","skin":"othericon/lockimg.png"}}]};
	return WeaponItemUI;
})(View)


//class ui.equipview.WeaponTabUI extends laya.ui.View
var WeaponTabUI=(function(_super){
	function WeaponTabUI(){
		this.listbg=null;
		WeaponTabUI.__super.call(this);
	}

	__class(WeaponTabUI,'ui.equipview.WeaponTabUI',_super);
	var __proto=WeaponTabUI.prototype;
	__proto.createChildren=function(){
		laya.ui.Component.prototype.createChildren.call(this);
		this.createView(WeaponTabUI.uiView);
	}

	WeaponTabUI.uiView={"type":"View","props":{"width":700,"height":304},"child":[{"type":"Image","props":{"y":0,"x":0,"width":485,"skin":"comp/bg0.png","sizeGrid":"8,8,10,9","height":304}},{"type":"Image","props":{"y":0,"x":485,"width":216,"var":"listbg","skin":"comp/bg0.png","sizeGrid":"8,8,10,9","height":304}}]};
	return WeaponTabUI;
})(View)


//class ui.equipview.WeaponTabDataUI extends laya.ui.View
var WeaponTabDataUI=(function(_super){
	function WeaponTabDataUI(){
		this.damagetxt=null;
		this.levtxt=null;
		this.cliptxt=null;
		this.speedtxt=null;
		this.crittxt=null;
		this.nextdamage=null;
		this.nextclip=null;
		this.nextcrit=null;
		this.nextlevtxt=null;
		this.typetxt=null;
		WeaponTabDataUI.__super.call(this);
	}

	__class(WeaponTabDataUI,'ui.equipview.WeaponTabDataUI',_super);
	var __proto=WeaponTabDataUI.prototype;
	__proto.createChildren=function(){
		laya.ui.Component.prototype.createChildren.call(this);
		this.createView(WeaponTabDataUI.uiView);
	}

	WeaponTabDataUI.uiView={"type":"View","props":{"width":380,"height":170},"child":[{"type":"Label","props":{"y":64,"x":11,"width":69,"text":"杀伤力","styleSkin":"comp/label.png","height":20,"fontSize":16,"color":"#ffffff","align":"right"}},{"type":"Label","props":{"y":90,"x":11,"width":69,"text":"子弹","styleSkin":"comp/label.png","height":20,"fontSize":16,"color":"#ffffff","align":"right"}},{"type":"Label","props":{"y":117,"x":11,"width":69,"text":"射击速度","styleSkin":"comp/label.png","height":20,"fontSize":16,"color":"#ffffff","align":"right"}},{"type":"Label","props":{"y":36,"x":11,"width":69,"text":"等级","styleSkin":"comp/label.png","height":20,"fontSize":16,"color":"#ffff00","align":"right"}},{"type":"Label","props":{"y":64,"x":206,"width":46,"var":"damagetxt","text":"50","styleSkin":"comp/label.png","height":16,"fontSize":14,"color":"#ffffff"}},{"type":"Label","props":{"y":36,"x":97,"width":69,"var":"levtxt","text":"等级","styleSkin":"comp/label.png","height":20,"fontSize":16,"color":"#ffff00"}},{"type":"Label","props":{"y":143,"x":10,"width":69,"text":"暴击","styleSkin":"comp/label.png","height":20,"fontSize":16,"color":"#ffffff","align":"right"}},{"type":"Label","props":{"y":90,"x":206,"width":46,"var":"cliptxt","text":"50","styleSkin":"comp/label.png","height":16,"fontSize":14,"color":"#ffffff"}},{"type":"Label","props":{"y":117,"x":206,"width":46,"var":"speedtxt","text":"50","styleSkin":"comp/label.png","height":16,"fontSize":14,"color":"#ffffff"}},{"type":"Label","props":{"y":143,"x":206,"width":46,"var":"crittxt","text":"50","styleSkin":"comp/label.png","height":16,"fontSize":14,"color":"#ffffff"}},{"type":"Label","props":{"y":64,"x":257,"width":46,"var":"nextdamage","styleSkin":"comp/label.png","height":16,"fontSize":14,"color":"#00ff00"}},{"type":"Label","props":{"y":90,"x":257,"width":46,"var":"nextclip","styleSkin":"comp/label.png","height":16,"fontSize":14,"color":"#00ff00"}},{"type":"Label","props":{"y":143,"x":257,"width":46,"var":"nextcrit","styleSkin":"comp/label.png","height":16,"fontSize":14,"color":"#00ff00"}},{"type":"Label","props":{"y":36,"x":246,"width":64,"var":"nextlevtxt","text":"下一级","styleSkin":"comp/label.png","height":20,"fontSize":16,"color":"#ffff00"}},{"type":"Label","props":{"y":6,"x":31,"width":162,"var":"typetxt","text":"名称","styleSkin":"comp/label.png","height":20,"fontSize":18,"color":"#57f1f8"}}]};
	return WeaponTabDataUI;
})(View)


//class ui.FailLevelViewUI extends laya.ui.View
var FailLevelViewUI=(function(_super){
	function FailLevelViewUI(){
		this.nextbtn=null;
		this.equipbtn=null;
		this.goldimg=null;
		this.gemimg=null;
		this.timetxt=null;
		this.killimg=null;
		FailLevelViewUI.__super.call(this);
	}

	__class(FailLevelViewUI,'ui.FailLevelViewUI',_super);
	var __proto=FailLevelViewUI.prototype;
	__proto.createChildren=function(){
		laya.ui.Component.prototype.createChildren.call(this);
		this.createView(FailLevelViewUI.uiView);
	}

	FailLevelViewUI.uiView={"type":"View","props":{"width":420,"height":360},"child":[{"type":"Image","props":{"y":0,"x":0,"width":420,"skin":"comp/frame.png","sizeGrid":"51,46,50,43","height":360}},{"type":"Button","props":{"y":256,"x":250,"width":100,"var":"nextbtn","skin":"comp/btn2.png","sizeGrid":"8,15,14,22","rotation":0,"labelSize":20,"labelPadding":"-2","labelFont":"Microsoft YaHei","labelColors":"#f8f6f6","height":90}},{"type":"Button","props":{"y":256,"x":74,"width":112,"var":"equipbtn","skin":"comp/btn2.png","sizeGrid":"10,22,17,21","rotation":0,"labelSize":28,"labelPadding":"-5","labelFont":"Microsoft YaHei","labelColors":"#f8f6f6","label":"提升\\n装备","height":90}},{"type":"Image","props":{"y":272,"x":284,"skin":"othericon/playicon.png","mouseEnabled":false}},{"type":"Image","props":{"y":124,"x":88,"width":28,"skin":"othericon/clock.png","pivotY":14,"pivotX":15,"height":28}},{"type":"Image","props":{"y":186,"x":74,"var":"goldimg","skin":"icon/foodicon/5000/101.png"}},{"type":"Image","props":{"y":221,"x":68,"var":"gemimg","skin":"icon/foodicon/5000/102.png"}},{"type":"Label","props":{"y":114,"x":109,"width":184,"var":"timetxt","text":"00 : 00 : 00","styleSkin":"comp/label.png","height":26,"fontSize":20,"color":"#fbfbfb"}},{"type":"Label","props":{"y":4,"x":5,"width":411,"text":"任务失败","styleSkin":"comp/label.png","height":26,"fontSize":20,"color":"#ffffff","align":"center"}},{"type":"Image","props":{"y":147,"x":70,"width":28,"var":"killimg","skin":"othericon/bonus1.png","height":28}}]};
	return FailLevelViewUI;
})(View)


//class ui.guidesUI extends laya.ui.View
var guidesUI=(function(_super){
	function guidesUI(){
		this.g5301=null;
		this.one5301=null;
		this.two5301=null;
		this.g5302=null;
		this.one5302=null;
		this.two5302=null;
		this.g5303=null;
		this.one5303=null;
		this.two5303=null;
		this.g5304=null;
		this.two5304=null;
		this.one5304=null;
		guidesUI.__super.call(this);
	}

	__class(guidesUI,'ui.guidesUI',_super);
	var __proto=guidesUI.prototype;
	__proto.createChildren=function(){
		laya.ui.Component.prototype.createChildren.call(this);
		this.createView(guidesUI.uiView);
	}

	guidesUI.uiView={"type":"View","props":{"width":640,"height":480},"child":[{"type":"Box","props":{"y":0,"x":6,"var":"g5301"},"child":[{"type":"Box","props":{"var":"one5301"},"child":[{"type":"Image","props":{"y":0,"x":0,"skin":"comp/key.png"}},{"type":"Image","props":{"y":1,"x":52,"skin":"comp/key.png"}},{"type":"Label","props":{"y":5,"x":10,"text":"A","styleSkin":"comp/label.png","fontSize":20,"font":"Arial","color":"#0f0d0d","bold":true}},{"type":"Label","props":{"y":6,"x":62,"text":"D","styleSkin":"comp/label.png","fontSize":20,"font":"Arial","color":"#0f0d0d","bold":true}},{"type":"Label","props":{"y":38,"x":5,"text":"左右移动","styleSkin":"comp/label.png","fontSize":20,"font":"Microsoft YaHei","color":"#f1efef","bold":true}}]},{"type":"Box","props":{"y":0,"x":0,"var":"two5301"},"child":[{"type":"Image","props":{"y":0,"x":77,"skin":"comp/key.png"}},{"type":"Image","props":{"y":1,"x":143,"skin":"comp/key.png"}},{"type":"Label","props":{"y":5,"x":0,"text":"玩家一:","styleSkin":"comp/label.png","fontSize":20,"font":"Microsoft YaHei","color":"#f1efef","bold":true}},{"type":"Image","props":{"y":42,"x":77,"skin":"comp/key.png"}},{"type":"Image","props":{"y":43,"x":143,"skin":"comp/key.png"}},{"type":"Label","props":{"y":47,"x":87,"text":"A","styleSkin":"comp/label.png","fontSize":20,"font":"Arial","color":"#0f0d0d","bold":true}},{"type":"Label","props":{"y":48,"x":153,"text":"D","styleSkin":"comp/label.png","fontSize":20,"font":"Arial","color":"#0f0d0d","bold":true}},{"type":"Label","props":{"y":46,"x":0,"text":"玩家二:","styleSkin":"comp/label.png","fontSize":20,"font":"Microsoft YaHei","color":"#f1efef","bold":true}},{"type":"Label","props":{"y":4,"x":115,"text":"左","styleSkin":"comp/label.png","fontSize":20,"font":"Microsoft YaHei","color":"#f1efef","bold":true}},{"type":"Label","props":{"y":4,"x":183,"text":"右","styleSkin":"comp/label.png","fontSize":20,"font":"Microsoft YaHei","color":"#f1efef","bold":true}},{"type":"Label","props":{"y":47,"x":116,"text":"左","styleSkin":"comp/label.png","fontSize":20,"font":"Microsoft YaHei","color":"#f1efef","bold":true}},{"type":"Label","props":{"y":47,"x":184,"text":"右","styleSkin":"comp/label.png","fontSize":20,"font":"Microsoft YaHei","color":"#f1efef","bold":true}},{"type":"Image","props":{"y":18,"x":91,"width":22,"skin":"othericon/arrow.png","rotation":90,"pivotY":13,"pivotX":13,"height":22}},{"type":"Image","props":{"y":15,"x":162,"width":22,"skin":"othericon/arrow.png","rotation":-90,"pivotY":13,"pivotX":13,"height":22}}]}]},{"type":"Box","props":{"y":93,"x":4,"var":"g5302"},"child":[{"type":"Box","props":{"var":"one5302"},"child":[{"type":"Image","props":{"y":0,"x":0,"skin":"comp/key.png"}},{"type":"Label","props":{"y":5,"x":8,"text":"W","styleSkin":"comp/label.png","fontSize":20,"font":"Arial","color":"#0f0d0d","bold":true}},{"type":"Label","props":{"y":5,"x":45,"text":"跳跃","styleSkin":"comp/label.png","fontSize":20,"font":"Microsoft YaHei","color":"#f1efef","bold":true}}]},{"type":"Box","props":{"y":0,"x":0,"var":"two5302"},"child":[{"type":"Image","props":{"y":0,"x":70,"skin":"comp/key.png"}},{"type":"Label","props":{"y":5,"x":112,"text":"跳跃","styleSkin":"comp/label.png","fontSize":20,"font":"Microsoft YaHei","color":"#f1efef","bold":true}},{"type":"Image","props":{"y":41,"x":69,"skin":"comp/key.png"}},{"type":"Label","props":{"y":47,"x":76,"text":"W","styleSkin":"comp/label.png","fontSize":20,"font":"Arial","color":"#0f0d0d","bold":true}},{"type":"Label","props":{"y":46,"x":111,"text":"跳跃","styleSkin":"comp/label.png","fontSize":20,"font":"Microsoft YaHei","color":"#f1efef","bold":true}},{"type":"Label","props":{"y":5,"x":0,"text":"玩家一:","styleSkin":"comp/label.png","fontSize":20,"font":"Microsoft YaHei","color":"#f1efef","bold":true}},{"type":"Label","props":{"y":46,"x":0,"text":"玩家二:","styleSkin":"comp/label.png","fontSize":20,"font":"Microsoft YaHei","color":"#f1efef","bold":true}},{"type":"Image","props":{"y":13,"x":85,"width":22,"skin":"othericon/arrow.png","rotation":-180,"pivotY":13,"pivotX":13,"height":22}}]}]},{"type":"Box","props":{"y":202,"x":2,"var":"g5303"},"child":[{"type":"Box","props":{"y":6,"x":5,"width":145,"var":"one5303","height":45},"child":[{"type":"Label","props":{"y":7,"x":60,"text":"发射子弹","styleSkin":"comp/label.png","fontSize":20,"font":"Microsoft YaHei","color":"#f1efef","bold":true}},{"type":"Image","props":{"y":0,"x":0,"skin":"othericon/mouseskin.png"}}]},{"type":"Box","props":{"y":10,"x":3,"var":"two5303"},"child":[{"type":"Label","props":{"text":"玩家一:","styleSkin":"comp/label.png","fontSize":20,"font":"Microsoft YaHei","color":"#f1efef","bold":true}},{"type":"Label","props":{"y":41,"text":"玩家二:","styleSkin":"comp/label.png","fontSize":20,"font":"Microsoft YaHei","color":"#f1efef","bold":true}},{"type":"Label","props":{"y":1,"x":133,"text":"发射子弹","styleSkin":"comp/label.png","fontSize":20,"font":"Microsoft YaHei","color":"#f1efef","bold":true}},{"type":"Label","props":{"y":45,"x":111,"text":"发射子弹","styleSkin":"comp/label.png","fontSize":20,"font":"Microsoft YaHei","color":"#f1efef","bold":true}},{"type":"Image","props":{"y":42,"x":70,"skin":"comp/key.png"}},{"type":"Label","props":{"y":47,"x":81,"text":"J","styleSkin":"comp/label.png","fontSize":20,"font":"Arial","color":"#0f0d0d","bold":true}},{"type":"Image","props":{"y":-3,"x":76,"skin":"othericon/mouseskin.png"}}]}]},{"type":"Box","props":{"y":313,"x":8,"var":"g5304"},"child":[{"type":"Box","props":{"var":"two5304"},"child":[{"type":"Label","props":{"y":5,"x":0,"text":"玩家一:","styleSkin":"comp/label.png","fontSize":20,"font":"Microsoft YaHei","color":"#f1efef","bold":true}},{"type":"Label","props":{"y":46,"x":0,"text":"玩家二:","styleSkin":"comp/label.png","fontSize":20,"font":"Microsoft YaHei","color":"#f1efef","bold":true}},{"type":"Box","props":{"y":45,"x":70},"child":[{"type":"Image","props":{"y":0,"x":0,"skin":"comp/key.png"}},{"type":"Label","props":{"y":5,"x":8,"text":"Q","styleSkin":"comp/label.png","fontSize":20,"font":"Arial","color":"#0f0d0d","bold":true}},{"type":"Image","props":{"y":0,"x":41,"skin":"comp/key.png"}},{"type":"Label","props":{"y":5,"x":51,"text":"E","styleSkin":"comp/label.png","fontSize":20,"font":"Arial","color":"#0f0d0d","bold":true}},{"type":"Label","props":{"y":5,"x":86,"text":"切换武器","styleSkin":"comp/label.png","fontSize":20,"font":"Microsoft YaHei","color":"#f1efef","bold":true}}]},{"type":"Box","props":{"y":3,"x":69},"child":[{"type":"Image","props":{"y":0,"x":0,"skin":"comp/key.png"}},{"type":"Label","props":{"y":5,"x":11,"text":"0","styleSkin":"comp/label.png","fontSize":20,"font":"Arial","color":"#0f0d0d","bold":true}},{"type":"Label","props":{"y":2,"x":40,"text":"或 鼠标滚轮 切换武器","styleSkin":"comp/label.png","fontSize":20,"font":"Microsoft YaHei","color":"#f1efef","bold":true}}]}]},{"type":"Box","props":{"var":"one5304"},"child":[{"type":"Image","props":{"y":0,"x":0,"skin":"comp/key.png"}},{"type":"Label","props":{"y":5,"x":8,"text":"Q","styleSkin":"comp/label.png","fontSize":20,"font":"Arial","color":"#0f0d0d","bold":true}},{"type":"Image","props":{"y":0,"x":41,"skin":"comp/key.png"}},{"type":"Label","props":{"y":5,"x":51,"text":"E","styleSkin":"comp/label.png","fontSize":20,"font":"Arial","color":"#0f0d0d","bold":true}},{"type":"Label","props":{"y":5,"x":86,"text":"或 鼠标滚轮 切换武器","styleSkin":"comp/label.png","fontSize":20,"font":"Microsoft YaHei","color":"#f1efef","bold":true}}]}]}]};
	return guidesUI;
})(View)


//class ui.GunItemUI extends laya.ui.View
var GunItemUI=(function(_super){
	function GunItemUI(){
		GunItemUI.__super.call(this);;
	}

	__class(GunItemUI,'ui.GunItemUI',_super);
	var __proto=GunItemUI.prototype;
	__proto.createChildren=function(){
		laya.ui.Component.prototype.createChildren.call(this);
		this.createView(GunItemUI.uiView);
	}

	GunItemUI.uiView={"type":"View","props":{"width":130,"height":72},"child":[{"type":"Image","props":{"y":0,"x":0,"width":130,"skin":"othericon/box.png","sizeGrid":"27,25,22,24","height":72}}]};
	return GunItemUI;
})(View)


//class ui.HelpViewUI extends laya.ui.View
var HelpViewUI=(function(_super){
	function HelpViewUI(){
		this.closebtn=null;
		HelpViewUI.__super.call(this);
	}

	__class(HelpViewUI,'ui.HelpViewUI',_super);
	var __proto=HelpViewUI.prototype;
	__proto.createChildren=function(){
		laya.ui.Component.prototype.createChildren.call(this);
		this.createView(HelpViewUI.uiView);
	}

	HelpViewUI.uiView={"type":"View","props":{"width":800,"height":500},"child":[
	{"type":"Image","props":{"y":0,"x":0,"width":800,"skin":"comp/frame.png","sizeGrid":"51,36,52,37","height":500}},
	{"type":"Box","props":{"y":90,"x":44},"child":[]},
	{"type":"Box","props":{"y":90,"x":163},"child":[]},
		{"type":"Box","props":{"y":341,"x":539},"child":[]},
			{"type":"Button","props":{"y":3,"x":763,"var":"closebtn","skin":"comp/btn_close.png"}},
			{"type":"Label","props":{"y":5,"x":300,"width":190,"text":"游戏帮助","styleSkin":"comp/label.png","height":26,"fontSize":16,"font":"Microsoft YaHei","color":"#f1efef","bold":true,"align":"center"}},
			
			{"type":"Box","props":{"y":90,"x":237},"child":[]},
			{"type":"Box","props":{"y":92,"x":479},"child":[]},
			{"type":"Label","props":{"y":100,"x":0,"width":800,"text":"[根据屏幕按键操作]\n保证自己安全的情况下尽可能的多杀敌人\n用捡到的金币买装备提升自己","styleSkin":"comp/label.png",
			"fontSize":40,"align":"center","font":"Microsoft YaHei","color":"#ffff00","bold":true,"leading":40}}]};

			
	return HelpViewUI;
})(View)


//class ui.LevelViewUI extends laya.ui.View
var LevelViewUI=(function(_super){
	function LevelViewUI(){
		this.backbtn=null;
		this.shopbtn=null;
		this.prevbtn=null;
		this.nextbtn=null;
		this.awardbtn=null;
		this.signbtn=null;
		this.taskbtn=null;
		this.equiptip=null;
		this.signtip=null;
		this.tasktip=null;
		this.awardtip=null;
		this.alivebtn=null;
		this.alivetip=null;
		this.doublebtn=null;
		this.systembtn=null;
		this.rankbtn=null;
		this.ranktimetxt=null;
		this.mgamebtn=null;
		this.sharebtn=null;
		LevelViewUI.__super.call(this);
	}

	__class(LevelViewUI,'ui.LevelViewUI',_super);
	var __proto=LevelViewUI.prototype;
	__proto.createChildren=function(){
		laya.ui.Component.prototype.createChildren.call(this);
		this.createView(LevelViewUI.uiView);
	}

	LevelViewUI.uiView={"type":"View","props":{"width":800,"height":500},"child":[{"type":"Image","props":{"y":426,"x":12,"var":"backbtn","skin":"comp/back.png"}},{"type":"Button","props":{"y":10,"x":668,"width":120,"var":"shopbtn","skin":"comp/btn2.png","sizeGrid":"10,22,17,21","labelSize":25,"labelPadding":"-2","labelColors":"#ffffff","label":"装备","height":70}},{"type":"Button","props":{"y":436,"x":225,"width":72,"var":"prevbtn","skin":"comp/btn2.png","sizeGrid":"10,22,17,21","labelSize":12,"labelColors":"#ffffff","height":30}},{"type":"Button","props":{"y":436,"x":370,"width":72,"var":"nextbtn","skin":"comp/btn2.png","sizeGrid":"10,22,17,21","labelSize":12,"labelColors":"#ffffff","height":30}},{"type":"Button","props":{"y":91,"x":668,"width":120,"var":"awardbtn","skin":"comp/btn2.png","sizeGrid":"10,22,17,21","labelSize":25,"labelPadding":"-2","labelColors":"#ffffff","label":"抽奖","height":70}},{"type":"Button","props":{"y":172,"x":669,"width":120,"var":"signbtn","skin":"comp/btn2.png","sizeGrid":"10,22,17,21","labelSize":25,"labelPadding":"-2","labelColors":"#ffffff","label":"签到","height":70}},{"type":"Button","props":{"y":253,"x":669,"width":120,"var":"taskbtn","skin":"comp/btn2.png","sizeGrid":"10,22,17,21","labelSize":25,"labelPadding":"-2","labelColors":"#ffffff","label":"任务","height":70}},{"type":"Image","props":{"y":8,"x":758,"var":"equiptip","skin":"comp/tip.png"}},{"type":"Image","props":{"y":171,"x":758,"var":"signtip","skin":"comp/tip.png"}},{"type":"Image","props":{"y":252,"x":758,"var":"tasktip","skin":"comp/tip.png"}},{"type":"Image","props":{"y":88,"x":758,"var":"awardtip","skin":"comp/tip.png"}},{"type":"Button","props":{"y":338,"x":669,"width":120,"var":"alivebtn","skin":"comp/btn2.png","sizeGrid":"10,22,17,21","labelSize":20,"labelPadding":"-2","labelColors":"#ffffff","label":"绝地求生","height":70}},{"type":"Image","props":{"y":335,"x":758,"var":"alivetip","skin":"comp/tip.png"}},{"type":"Button","props":{"y":3,"x":4,"width":142,"var":"doublebtn","skin":"comp/btn2.png","sizeGrid":"10,22,17,21","labelSize":15,"labelPadding":"-2","labelColors":"#ffffff","label":"当前：单人模式","height":35}},{"type":"Button","props":{"y":4,"x":616,"width":46,"var":"systembtn","stateNum":2,"skin":"othericon/button_system.png","height":43}},{"type":"Button","props":{"y":3,"x":490,"width":120,"var":"rankbtn","skin":"comp/btn2.png","sizeGrid":"10,22,17,21","labelSize":15,"labelPadding":"-6","labelColors":"#ffffff","label":"排行榜","height":45}},{"type":"Label","props":{"y":28,"x":507,"width":88,"var":"ranktimetxt","text":"00:00:00","styleSkin":"comp/label.png","height":14,"fontSize":12,"color":"#ffff00","align":"center"}},{"type":"Image","props":{"y":411,"x":733,"width":53,"var":"mgamebtn","skin":"othericon/mgame.png","height":48}},{"type":"Image","props":{"y":442,"x":400,"width":16,"skin":"othericon/playicon.png","height":17}},{"type":"Image","props":{"y":442,"x":268,"width":16,"skin":"othericon/playicon.png","scaleX":-1,"height":17}},{"type":"Image","props":{"y":418,"x":677,"width":36,"var":"sharebtn","skin":"othericon/share.png","height":36}}]};
	return LevelViewUI;
})(View)


//class ui.MoneyBarUI extends laya.ui.View
var MoneyBarUI=(function(_super){
	function MoneyBarUI(){
		this.goldbg=null;
		this.gembg=null;
		MoneyBarUI.__super.call(this);
	}

	__class(MoneyBarUI,'ui.MoneyBarUI',_super);
	var __proto=MoneyBarUI.prototype;
	__proto.createChildren=function(){
		laya.ui.Component.prototype.createChildren.call(this);
		this.createView(MoneyBarUI.uiView);
	}

	MoneyBarUI.uiView={"type":"View","props":{"width":300,"height":30},"child":[{"type":"Image","props":{"y":2,"x":6,"skin":"icon/foodicon/5000/101.png"}},{"type":"Image","props":{"y":5,"x":32,"width":105,"var":"goldbg","skin":"comp/bg1.png","sizeGrid":"5,7,7,6","height":21}},{"type":"Image","props":{"y":2,"x":149,"skin":"icon/foodicon/5000/102.png"}},{"type":"Image","props":{"y":5,"x":182,"width":105,"var":"gembg","skin":"comp/bg1.png","sizeGrid":"5,7,7,6","height":21}}]};
	return MoneyBarUI;
})(View)


//class ui.NeedStarViewUI extends laya.ui.View
var NeedStarViewUI=(function(_super){
	function NeedStarViewUI(){
		this.okbtn=null;
		NeedStarViewUI.__super.call(this);
	}

	__class(NeedStarViewUI,'ui.NeedStarViewUI',_super);
	var __proto=NeedStarViewUI.prototype;
	__proto.createChildren=function(){
		laya.ui.Component.prototype.createChildren.call(this);
		this.createView(NeedStarViewUI.uiView);
	}

	NeedStarViewUI.uiView={"type":"View","props":{"width":280,"height":260},"child":[{"type":"Image","props":{"y":0,"x":0,"width":280,"skin":"comp/frame.png","sizeGrid":"51,48,55,39","height":260}},{"type":"Button","props":{"y":195,"x":46,"width":191,"var":"okbtn","stateNum":3,"skin":"comp/btn2.png","sizeGrid":"10,22,17,21","rotation":0,"labelSize":20,"labelPadding":"-2","labelColors":"#f8f6f6","label":"确定","height":48}},{"type":"Label","props":{"y":67,"x":34,"width":213,"text":"星数不够无法进入","styleSkin":"comp/label.png","height":26,"fontSize":25,"color":"#f1efef","bold":true}}]};
	return NeedStarViewUI;
})(View)


//class ui.PassLevelViewUI extends laya.ui.View
var PassLevelViewUI=(function(_super){
	function PassLevelViewUI(){
		this.adbtn=null;
		this.nextbtn=null;
		this.againbtn=null;
		this.levelbtn=null;
		this.killimg=null;
		this.goldimg=null;
		this.gemimg=null;
		this.timetxt=null;
		PassLevelViewUI.__super.call(this);
	}

	__class(PassLevelViewUI,'ui.PassLevelViewUI',_super);
	var __proto=PassLevelViewUI.prototype;
	__proto.createChildren=function(){
		laya.ui.Component.prototype.createChildren.call(this);
		this.createView(PassLevelViewUI.uiView);
	}

	PassLevelViewUI.uiView={"type":"View","props":{"width":420,"height":410},"child":[{"type":"Image","props":{"y":0,"x":0,"width":420,"skin":"comp/frame.png","sizeGrid":"51,46,50,43","height":410}},{"type":"Button","props":{"y":251,"x":50,"width":313,"var":"adbtn","skin":"comp/btn2.png","sizeGrid":"10,22,17,21","rotation":0,"labelSize":16,"labelPadding":"0","labelColors":"#f8f6f6","labelBold":false,"label":"免费获得双倍奖励","height":48}},{"type":"Button","props":{"y":305,"x":293,"width":100,"var":"nextbtn","skin":"comp/btn2.png","sizeGrid":"8,15,14,22","rotation":0,"labelSize":20,"labelPadding":"-2","labelFont":"Microsoft YaHei","labelColors":"#f8f6f6","height":90}},{"type":"Button","props":{"y":305,"x":161,"width":100,"var":"againbtn","skin":"comp/btn2.png","sizeGrid":"8,15,14,22","rotation":0,"labelSize":20,"labelPadding":"-2","labelFont":"Microsoft YaHei","labelColors":"#f8f6f6","height":90}},{"type":"Button","props":{"y":305,"x":29,"width":100,"var":"levelbtn","skin":"comp/btn2.png","sizeGrid":"10,22,17,21","rotation":0,"labelSize":20,"labelPadding":"-2","labelFont":"Microsoft YaHei","labelColors":"#f8f6f6","height":90}},{"type":"Image","props":{"y":320,"x":185,"skin":"othericon/againicon.png","mouseEnabled":false}},{"type":"Image","props":{"y":320,"x":47,"skin":"othericon/honeicon.png","mouseEnabled":false}},{"type":"Image","props":{"y":321,"x":327,"skin":"othericon/playicon.png","mouseEnabled":false}},{"type":"Image","props":{"y":250,"x":52,"width":50,"skin":"othericon/advideo.png","mouseEnabled":false,"height":36}},{"type":"Image","props":{"y":124,"x":88,"width":28,"skin":"othericon/clock.png","pivotY":14,"pivotX":15,"height":28}},{"type":"Image","props":{"y":147,"x":71,"width":28,"var":"killimg","skin":"othericon/bonus1.png","height":28}},{"type":"Image","props":{"y":183,"x":74,"var":"goldimg","skin":"icon/foodicon/5000/101.png"}},{"type":"Image","props":{"y":218,"x":68,"var":"gemimg","skin":"icon/foodicon/5000/102.png"}},{"type":"Label","props":{"y":114,"x":109,"width":184,"var":"timetxt","text":"00 : 00 : 00","styleSkin":"comp/label.png","height":26,"fontSize":20,"color":"#fbfbfb"}},{"type":"Label","props":{"y":5,"x":4,"width":413,"text":"恭喜过关","styleSkin":"comp/label.png","height":26,"fontSize":20,"color":"#ffffff","align":"center"}}]};
	return PassLevelViewUI;
})(View)


//class ui.PauseViewUI extends laya.ui.View
var PauseViewUI=(function(_super){
	function PauseViewUI(){
		this.gobtn=null;
		this.soundbtn=null;
		this.musicbtn=null;
		this.againbtn=null;
		this.outbtn=null;
		this.soundno=null;
		this.musicno=null;
		this.tipbox=null;
		PauseViewUI.__super.call(this);
	}

	__class(PauseViewUI,'ui.PauseViewUI',_super);
	var __proto=PauseViewUI.prototype;
	__proto.createChildren=function(){
		laya.ui.Component.prototype.createChildren.call(this);
		this.createView(PauseViewUI.uiView);
	}

	PauseViewUI.uiView={"type":"View","props":{"width":380,"height":235},"child":[{"type":"Image","props":{"y":0,"x":0,"width":380,"skin":"comp/frame.png","sizeGrid":"51,36,52,37","height":235}},{"type":"Button","props":{"y":60,"x":260,"width":100,"var":"gobtn","skin":"comp/btn2.png","sizeGrid":"10,22,17,21","rotation":0,"labelSize":20,"labelPadding":"-2","labelFont":"Microsoft YaHei","labelColors":"#f8f6f6","height":90}},{"type":"Button","props":{"y":166,"x":75,"width":41,"var":"soundbtn","toggle":true,"stateNum":1,"skin":"comp/soundicon.png","rotation":0,"labelPadding":"0","labelColors":"#000000","height":35}},{"type":"Button","props":{"y":166,"x":153,"width":39,"var":"musicbtn","toggle":true,"stateNum":1,"skin":"comp/musicicon.png","rotation":0,"labelPadding":"0","labelColors":"#000000","height":36}},{"type":"Button","props":{"y":60,"x":143,"width":100,"var":"againbtn","skin":"comp/btn2.png","sizeGrid":"10,22,17,21","rotation":0,"labelSize":20,"labelPadding":"-2","labelFont":"Microsoft YaHei","labelColors":"#f8f6f6","height":90}},{"type":"Button","props":{"y":60,"x":26,"width":100,"var":"outbtn","skin":"comp/btn2.png","sizeGrid":"10,22,17,21","rotation":0,"labelSize":20,"labelPadding":"-2","labelFont":"Microsoft YaHei","labelColors":"#f8f6f6","height":90}},{"type":"Image","props":{"y":183,"x":91,"width":23,"var":"soundno","skin":"comp/no.png","height":23}},{"type":"Image","props":{"y":182,"x":173,"width":23,"var":"musicno","skin":"comp/no.png","height":23}},{"type":"Image","props":{"y":75,"x":167,"skin":"othericon/againicon.png","mouseEnabled":false}},{"type":"Image","props":{"y":75,"x":44,"skin":"othericon/honeicon.png","mouseEnabled":false}},{"type":"Image","props":{"y":76,"x":294,"skin":"othericon/playicon.png","mouseEnabled":false}},{"type":"CheckBox","props":{"y":180,"x":235,"width":100,"var":"tipbox","skin":"comp/checkbox.png","sizeGrid":"4,5,6,4","labelSize":12,"labelPadding":"0,0,0,2","labelColors":"#ffffff,#00ff00,#ffff00","label":"射击目标提示","height":16}}]};
	return PauseViewUI;
})(View)


//class ui.RankViewUI extends laya.ui.View
var RankViewUI=(function(_super){
	function RankViewUI(){
		this.closebtn=null;
		this.box0=null;
		this.txt=null;
		this.timetxt=null;
		this.box1=null;
		this.box2=null;
		this.box3=null;
		this.rankbtn=null;
		this.tiptxt=null;
		this.loginbtn=null;
		RankViewUI.__super.call(this);
	}

	__class(RankViewUI,'ui.RankViewUI',_super);
	var __proto=RankViewUI.prototype;
	__proto.createChildren=function(){
		View.regComponent("ui.RankItemUI",RankItemUI);
		laya.ui.Component.prototype.createChildren.call(this);
		this.createView(RankViewUI.uiView);
	}

	RankViewUI.uiView={"type":"View","props":{"width":700,"height":400},"child":[{"type":"Image","props":{"y":0,"x":0,"width":700,"skin":"comp/frame.png","sizeGrid":"51,36,52,37","height":400}},{"type":"Button","props":{"y":3,"x":663,"var":"closebtn","skin":"comp/btn_close.png"}},{"type":"RankItem","props":{"y":78,"x":22,"var":"box0","runtime":"ui.RankItemUI"}},{"type":"Label","props":{"y":44,"x":17,"width":154,"var":"txt","text":"每日排行  剩余时间","styleSkin":"comp/label.png","height":22,"fontSize":18,"color":"#ffffff","align":"right"}},{"type":"Label","props":{"y":44,"x":174,"width":82,"var":"timetxt","text":"00:00:00","styleSkin":"comp/label.png","height":22,"fontSize":18,"color":"#ffffff"}},{"type":"RankItem","props":{"y":130,"x":22,"var":"box1","runtime":"ui.RankItemUI"}},{"type":"RankItem","props":{"y":182,"x":22,"var":"box2","runtime":"ui.RankItemUI"}},{"type":"RankItem","props":{"y":234,"x":22,"var":"box3","runtime":"ui.RankItemUI"}},{"type":"Image","props":{"y":284,"x":22,"width":661,"skin":"comp/bg0.png","sizeGrid":"7,9,10,8","height":98}},{"type":"Label","props":{"y":299,"x":33,"width":80,"text":"01 - 10名","styleSkin":"comp/label.png","height":22,"fontSize":18,"color":"#ffffff"}},{"type":"Label","props":{"y":299,"x":287,"width":82,"text":"11 -  20名","styleSkin":"comp/label.png","height":22,"fontSize":18,"color":"#ffffff"}},{"type":"Label","props":{"y":299,"x":526,"width":82,"text":"21 -  30名","styleSkin":"comp/label.png","height":22,"fontSize":18,"color":"#ffffff"}},{"type":"Label","props":{"y":347,"x":33,"width":82,"text":"31 -  40名","styleSkin":"comp/label.png","height":22,"fontSize":18,"color":"#ffffff"}},{"type":"Label","props":{"y":348,"x":287,"width":82,"text":"41 -  50名","styleSkin":"comp/label.png","height":22,"fontSize":18,"color":"#ffffff"}},{"type":"Image","props":{"y":298,"x":111,"skin":"icon/foodicon/5000/102.png"}},{"type":"Image","props":{"y":346,"x":111,"skin":"icon/foodicon/5000/102.png"}},{"type":"Image","props":{"y":298,"x":604,"skin":"icon/foodicon/5000/102.png"}},{"type":"Image","props":{"y":346,"x":365,"skin":"icon/foodicon/5000/102.png"}},{"type":"Image","props":{"y":298,"x":365,"skin":"icon/foodicon/5000/102.png"}},{"type":"Label","props":{"y":303,"x":136,"width":35,"text":"x50","styleSkin":"comp/label.png","height":20,"fontSize":16,"color":"#fffaf9","bold":true,"align":"center"}},{"type":"Label","props":{"y":303,"x":389,"width":35,"text":"x30","styleSkin":"comp/label.png","height":20,"fontSize":16,"color":"#fffaf9","bold":true,"align":"center"}},{"type":"Label","props":{"y":349,"x":135,"width":35,"text":"x12","styleSkin":"comp/label.png","height":20,"fontSize":16,"color":"#fffaf9","bold":true,"align":"center"}},{"type":"Label","props":{"y":303,"x":629,"width":35,"text":"x20","styleSkin":"comp/label.png","height":20,"fontSize":16,"color":"#ffffff","bold":true,"align":"center"}},{"type":"Label","props":{"y":349,"x":390,"width":35,"text":"x6","styleSkin":"comp/label.png","height":20,"fontSize":16,"color":"#fffaf9","bold":true,"align":"center"}},{"type":"Button","props":{"y":38,"x":529,"width":148,"var":"rankbtn","skin":"comp/btn2.png","sizeGrid":"8,15,14,22","rotation":0,"labelSize":16,"labelPadding":"0","labelColors":"#f8f6f6","labelBold":false,"label":"详细排行","height":35}},{"type":"Label","props":{"y":346,"x":489,"width":167,"text":"每日20 : 30结算奖劢","styleSkin":"comp/label.png","height":22,"fontSize":18,"font":"Microsoft YaHei","color":"#ffff00"}},{"type":"Label","props":{"y":43,"x":290,"width":145,"var":"tiptxt","text":"需要登录加入排行","styleSkin":"comp/label.png","height":22,"fontSize":18,"font":"Microsoft YaHei","color":"#ffff00","align":"right"}},{"type":"Button","props":{"y":37,"x":437,"width":72,"var":"loginbtn","skin":"comp/btn2.png","sizeGrid":"8,15,14,22","rotation":0,"labelSize":16,"labelPadding":"0","labelColors":"#f8f6f6","labelBold":false,"label":"登录","height":35}}]};
	return RankViewUI;
})(View)


//class ui.ReviveViewUI extends laya.ui.View
var ReviveViewUI=(function(_super){
	function ReviveViewUI(){
		this.revivebtn=null;
		this.outbtn=null;
		this.againbtn=null;
		this.adicon=null;
		ReviveViewUI.__super.call(this);
	}

	__class(ReviveViewUI,'ui.ReviveViewUI',_super);
	var __proto=ReviveViewUI.prototype;
	__proto.createChildren=function(){
		laya.ui.Component.prototype.createChildren.call(this);
		this.createView(ReviveViewUI.uiView);
	}

	ReviveViewUI.uiView={"type":"View","props":{"width":280,"height":260},"child":[{"type":"Image","props":{"y":0,"x":0,"width":280,"skin":"comp/frame.png","sizeGrid":"51,48,55,39","height":260}},{"type":"Button","props":{"y":58,"x":40,"width":191,"var":"revivebtn","stateNum":3,"skin":"comp/btn2.png","sizeGrid":"10,22,17,21","rotation":0,"labelSize":20,"labelPadding":"-2","labelColors":"#f8f6f6","label":"免费复活","height":63}},{"type":"Button","props":{"y":145,"x":155,"width":100,"var":"outbtn","skin":"comp/btn2.png","sizeGrid":"10,22,17,21","rotation":0,"labelSize":20,"labelPadding":"-2","labelFont":"Microsoft YaHei","labelColors":"#f8f6f6","height":90}},{"type":"Button","props":{"y":145,"x":23,"width":100,"var":"againbtn","skin":"comp/btn2.png","sizeGrid":"10,22,17,21","rotation":0,"labelSize":20,"labelPadding":"-2","labelFont":"Microsoft YaHei","labelColors":"#f8f6f6","height":90}},{"type":"Image","props":{"y":159,"x":44,"skin":"othericon/againicon.png","mouseEnabled":false}},{"type":"Image","props":{"y":54,"x":38,"width":49,"var":"adicon","skin":"othericon/advideo.png","mouseEnabled":false,"height":36}},{"type":"Image","props":{"y":160,"x":188,"skin":"othericon/playicon.png","mouseEnabled":false}}]};
	return ReviveViewUI;
})(View)


//class ui.SaveViewUI extends laya.ui.View
var SaveViewUI=(function(_super){
	function SaveViewUI(){
		this.okbtn=null;
		this.infotxt=null;
		SaveViewUI.__super.call(this);
	}

	__class(SaveViewUI,'ui.SaveViewUI',_super);
	var __proto=SaveViewUI.prototype;
	__proto.createChildren=function(){
		laya.ui.Component.prototype.createChildren.call(this);
		this.createView(SaveViewUI.uiView);
	}

	SaveViewUI.uiView={"type":"View","props":{"width":400,"height":175},"child":[{"type":"Image","props":{"y":0,"x":0,"width":400,"skin":"comp/frame.png","sizeGrid":"51,36,52,37","height":175}},{"type":"Button","props":{"y":106,"x":104,"width":190,"var":"okbtn","skin":"comp/btn2.png","sizeGrid":"10,22,17,21","labelSize":15,"labelColors":"#ffffff","labelAlign":"center","label":"重新读档","height":43}},{"type":"Label","props":{"y":51,"x":24,"wordWrap":true,"width":346,"var":"infotxt","valign":"middle","text":"存档读取失败","styleSkin":"comp/label.png","height":31,"fontSize":22,"color":"#f1efef","align":"center"}}]};
	return SaveViewUI;
})(View)


//class ui.SignViewUI extends laya.ui.View
var SignViewUI=(function(_super){
	function SignViewUI(){
		this.closebtn=null;
		this.btn1=null;
		this.btn2=null;
		this.btn3=null;
		this.adimg=null;
		this.box0=null;
		this.box1=null;
		this.box2=null;
		this.box3=null;
		this.box4=null;
		this.box5=null;
		this.box6=null;
		SignViewUI.__super.call(this);
	}

	__class(SignViewUI,'ui.SignViewUI',_super);
	var __proto=SignViewUI.prototype;
	__proto.createChildren=function(){
		View.regComponent("ui.SignBoxUI",SignBoxUI);
		laya.ui.Component.prototype.createChildren.call(this);
		this.createView(SignViewUI.uiView);
	}

	SignViewUI.uiView={"type":"View","props":{"width":500,"height":320},"child":[{"type":"Image","props":{"y":1,"x":1,"width":500,"skin":"comp/frame.png","sizeGrid":"51,48,55,39","height":320},"child":[{"type":"Image","props":{"y":31,"x":8,"width":484,"skin":"othericon/girlbg.jpg","height":283}}]},{"type":"Button","props":{"y":5,"x":461,"var":"closebtn","skin":"comp/btn_close.png"}},{"type":"Button","props":{"y":254,"x":44,"width":170,"var":"btn1","skin":"comp/btn2.png","sizeGrid":"8,15,14,22","rotation":0,"labelSize":22,"labelPadding":"-1","labelColors":"#f8f6f6","label":"领取奖励","height":48}},{"type":"Button","props":{"y":254,"x":236,"width":227,"var":"btn2","skin":"comp/btn2.png","sizeGrid":"8,16,14,17","rotation":0,"labelSize":22,"labelPadding":"-1","labelColors":"#f8f6f6","label":"领取双倍奖励","height":48}},{"type":"Button","props":{"y":254,"x":165,"width":170,"var":"btn3","skin":"comp/btn2.png","sizeGrid":"8,16,14,17","rotation":0,"labelSize":22,"labelPadding":"-1","labelColors":"#f8f6f6","label":"已领取奖励","height":48}},{"type":"Image","props":{"y":248,"x":234,"width":49,"var":"adimg","skin":"othericon/advideo.png","mouseEnabled":false,"height":36}},{"type":"Label","props":{"y":6,"x":298,"width":149,"text":"连续签到","styleSkin":"comp/label.png","height":20,"fontSize":18,"font":"Microsoft YaHei","color":"#f4efef","align":"center"}},{"type":"SignBox","props":{"y":52,"x":28,"var":"box0","runtime":"ui.SignBoxUI"}},{"type":"SignBox","props":{"y":52,"x":145,"var":"box1","runtime":"ui.SignBoxUI"}},{"type":"SignBox","props":{"y":52,"x":261,"var":"box2","runtime":"ui.SignBoxUI"}},{"type":"SignBox","props":{"y":52,"x":378,"var":"box3","runtime":"ui.SignBoxUI"}},{"type":"SignBox","props":{"y":153,"x":86,"var":"box4","runtime":"ui.SignBoxUI"}},{"type":"SignBox","props":{"y":153,"x":202,"var":"box5","runtime":"ui.SignBoxUI"}},{"type":"SignBox","props":{"y":153,"x":319,"var":"box6","runtime":"ui.SignBoxUI"}}]};
	return SignViewUI;
})(View)


//class ui.StartViewUI extends laya.ui.View
var StartViewUI=(function(_super){
	function StartViewUI(){
		this.startbtn=null;
		this.helpbtn=null;
		this.systembtn=null;
		this.logo=null;
		StartViewUI.__super.call(this);
	}

	__class(StartViewUI,'ui.StartViewUI',_super);
	var __proto=StartViewUI.prototype;
	__proto.createChildren=function(){
		laya.ui.Component.prototype.createChildren.call(this);
		this.createView(StartViewUI.uiView);
	}

	StartViewUI.uiView={"type":"View","props":{"width":640,"height":480},"child":[
		{"type":"Button","props":{"y":206,"x":199,"width":250,"var":"startbtn","skin":"comp/btn2.png","sizeGrid":"10,22,17,21","labelSize":30,"labelPadding":"-2","labelColors":"#ffffff","labelAlign":"center","label":"开始游戏","height":70}},
		{"type":"Button","props":{"y":305,"x":199,"width":250,"var":"helpbtn","skin":"comp/btn2.png","sizeGrid":"10,22,17,21","labelSize":30,"labelPadding":"-2","labelColors":"#ffffff","labelAlign":"center","label":"游戏帮助","height":70}},
		{"type":"Image","props":{"y":8,"x":71,"skin":"othericon/title.png"}},
		{"type":"Button","props":{"y":68,"x":576,"width":65,"var":"systembtn","stateNum":2,"skin":"othericon/button_system.png","height":61}}
		// ,
		// {"type":"Image","props":{"y":419,"x":222,"var":"logo","skin":"othericon/zwsf.png"}}
		]};
	return StartViewUI;
})(View)


//class ui.SystemBarUI extends laya.ui.View
var SystemBarUI=(function(_super){
	function SystemBarUI(){
		this.gold=null;
		this.pause=null;
		SystemBarUI.__super.call(this);
	}

	__class(SystemBarUI,'ui.SystemBarUI',_super);
	var __proto=SystemBarUI.prototype;
	__proto.createChildren=function(){
		laya.ui.Component.prototype.createChildren.call(this);
		this.createView(SystemBarUI.uiView);
	}

	SystemBarUI.uiView={"type":"View","props":{"width":640,"height":480},"child":[{"type":"Image","props":{"y":2,"x":617,"var":"gold","skin":"miniani/miniani/gold0002.png","scaleY":0.6,"scaleX":0.6}},{"type":"Image","props":{"y":1,"x":2,"width":56,"var":"pause","skin":"othericon/pause.png","pivotY":0,"pivotX":0,"height":59}}]};
	return SystemBarUI;
})(View)


//class ui.SystemsetViewUI extends laya.ui.View
var SystemsetViewUI=(function(_super){
	function SystemsetViewUI(){
		this.soundbtn=null;
		this.musicbtn=null;
		this.soundno=null;
		this.musicno=null;
		this.resolution=null;
		this.okbtn=null;
		this.txt=null;
		SystemsetViewUI.__super.call(this);
	}

	__class(SystemsetViewUI,'ui.SystemsetViewUI',_super);
	var __proto=SystemsetViewUI.prototype;
	__proto.createChildren=function(){
		laya.ui.Component.prototype.createChildren.call(this);
		this.createView(SystemsetViewUI.uiView);
	}

	SystemsetViewUI.uiView={"type":"View","props":{"width":300,"height":220},"child":[{"type":"Image","props":{"y":0,"x":0,"width":300,"skin":"comp/frame.png","sizeGrid":"51,36,52,37","height":220}},{"type":"Button","props":{"y":55,"x":90,"width":41,"var":"soundbtn","toggle":true,"stateNum":1,"skin":"comp/soundicon.png","rotation":0,"labelPadding":"0","labelColors":"#000000","height":35}},{"type":"Button","props":{"y":55,"x":168,"width":39,"var":"musicbtn","toggle":true,"stateNum":1,"skin":"comp/musicicon.png","rotation":0,"labelPadding":"0","labelColors":"#000000","height":36}},{"type":"Image","props":{"y":72,"x":106,"width":23,"var":"soundno","skin":"comp/no.png","height":23}},{"type":"Image","props":{"y":71,"x":188,"width":23,"var":"musicno","skin":"comp/no.png","height":23}},{"type":"HSlider","props":{"y":140,"x":70,"width":166,"var":"resolution","skin":"comp/hslider.png","min":500,"max":600,"height":14}},{"type":"Label","props":{"y":116,"x":47,"width":32,"text":"视距","styleSkin":"comp/label.png","height":12,"color":"#ffffff","align":"right"}},{"type":"Button","props":{"y":167,"x":95,"width":113,"var":"okbtn","skin":"comp/btn2.png","sizeGrid":"10,22,17,21","labelSize":18,"labelPadding":"0","labelColors":"#ffffff","labelAlign":"center","label":"确定","height":30}},{"type":"Label","props":{"y":116,"x":81,"width":58,"var":"txt","text":"0","styleSkin":"comp/label.png","height":12,"color":"#ffffff"}}]};
	return SystemsetViewUI;
})(View)


//class ui.TaskViewUI extends laya.ui.View
var TaskViewUI=(function(_super){
	function TaskViewUI(){
		this.closebtn=null;
		this.box0=null;
		this.box1=null;
		this.box2=null;
		this.box3=null;
		this.box4=null;
		this.box5=null;
		TaskViewUI.__super.call(this);
	}

	__class(TaskViewUI,'ui.TaskViewUI',_super);
	var __proto=TaskViewUI.prototype;
	__proto.createChildren=function(){
		View.regComponent("ui.TaskBoxUI",TaskBoxUI);
		laya.ui.Component.prototype.createChildren.call(this);
		this.createView(TaskViewUI.uiView);
	}

	TaskViewUI.uiView={"type":"View","props":{"width":520,"height":410},"child":[{"type":"Image","props":{"y":1,"x":1,"width":520,"skin":"comp/frame.png","sizeGrid":"55,48,28,46","height":410}},{"type":"Button","props":{"y":5,"x":483,"var":"closebtn","skin":"comp/btn_close.png"}},{"type":"TaskBox","props":{"y":37,"x":23,"var":"box0","runtime":"ui.TaskBoxUI"}},{"type":"TaskBox","props":{"y":97,"x":23,"var":"box1","runtime":"ui.TaskBoxUI"}},{"type":"TaskBox","props":{"y":158,"x":23,"var":"box2","runtime":"ui.TaskBoxUI"}},{"type":"TaskBox","props":{"y":218,"x":23,"var":"box3","runtime":"ui.TaskBoxUI"}},{"type":"TaskBox","props":{"y":279,"x":23,"var":"box4","runtime":"ui.TaskBoxUI"}},{"type":"TaskBox","props":{"y":339,"x":23,"var":"box5","runtime":"ui.TaskBoxUI"}}]};
	return TaskViewUI;
})(View)


//class ui.UnlockViewUI extends laya.ui.View
var UnlockViewUI=(function(_super){
	function UnlockViewUI(){
		this.okbtn=null;
		this.closebtn=null;
		this.img=null;
		this.numtxt=null;
		this.infotxt=null;
		UnlockViewUI.__super.call(this);
	}

	__class(UnlockViewUI,'ui.UnlockViewUI',_super);
	var __proto=UnlockViewUI.prototype;
	__proto.createChildren=function(){
		laya.ui.Component.prototype.createChildren.call(this);
		this.createView(UnlockViewUI.uiView);
	}

	UnlockViewUI.uiView={"type":"View","props":{"width":400,"height":175},"child":[{"type":"Image","props":{"y":0,"x":0,"width":400,"skin":"comp/frame.png","sizeGrid":"51,36,52,37","height":175}},{"type":"Button","props":{"y":106,"x":104,"width":190,"var":"okbtn","skin":"comp/btn2.png","sizeGrid":"10,22,17,21","labelSize":15,"labelColors":"#ffffff","labelAlign":"center","height":43}},{"type":"Button","props":{"y":3,"x":364,"var":"closebtn","skin":"comp/btn_close.png"}},{"type":"Image","props":{"y":114,"x":188,"var":"img","skin":"icon/foodicon/5000/102.png"}},{"type":"Label","props":{"y":110,"x":158,"wordWrap":true,"width":35,"valign":"middle","text":"解锁","styleSkin":"comp/label.png","height":31,"fontSize":16,"color":"#f1efef","align":"left"}},{"type":"Label","props":{"y":111,"x":221,"wordWrap":true,"width":59,"var":"numtxt","valign":"middle","text":"200","styleSkin":"comp/label.png","height":31,"fontSize":16,"color":"#f1efef","align":"left"}},{"type":"Label","props":{"y":51,"x":24,"wordWrap":true,"width":346,"var":"infotxt","valign":"middle","text":"解锁新武器槽","styleSkin":"comp/label.png","height":31,"fontSize":22,"color":"#f1efef","align":"center"}}]};
	return UnlockViewUI;
})(View)


//class ui.LoadViewUI extends laya.ui.View
var LoadViewUI=(function(_super){
	function LoadViewUI(){
		this.nowbar=null;
		this.logo=null;
		this.allbar=null;
		this.link=null;
		LoadViewUI.__super.call(this);
	}

	__class(LoadViewUI,'ui.LoadViewUI',_super);
	var __proto=LoadViewUI.prototype;
	__proto.createChildren=function(){
		laya.ui.Component.prototype.createChildren.call(this);
		this.createView(LoadViewUI.uiView);
	}

	LoadViewUI.uiView={"type":"View","props":{"width":640,"height":480},
	"child":[{"type":"ProgressBar","props":{"y":-350,"x":45,"width":550,"var":"nowbar","skin":"comp/headbar.png","sizeGrid":"4,4,4,4","height":15}},
		{"type":"Image","props":{"y":100,"x":91,"skin":"othericon/title.png"}},
	{"type":"Label","props":{"y":405,"x":0,"width":640,"text":"正在读取本地数据中\n(不消耗流量)","align":"center","fontSize":25,"color":"#ffff00"}},
	{"type":"ProgressBar","props":{"y":-386,"x":44,"width":550,"var":"allbar","skin":"comp/headbar.png","sizeGrid":"4,4,4,4","height":15,"bold":true}},
	{"type":"Label","props":{"y":-411,"x":60,"width":143,"var":"link","underlineColor":"#f9f4f4","underline":true,"text":"",//"进度卡住，请刷新页面",
	"styleSkin":"comp/label.png","stroke":0,"height":12,"font":"Arial","color":"#fdfdfd","bold":true,"align":"left"}}]};
	return LoadViewUI;
})(View)


//class ui.awardview.AwardItemUI extends laya.ui.View
var AwardItemUI=(function(_super){
	function AwardItemUI(){
		this.border=null;
		AwardItemUI.__super.call(this);
	}

	__class(AwardItemUI,'ui.awardview.AwardItemUI',_super);
	var __proto=AwardItemUI.prototype;
	__proto.createChildren=function(){
		laya.ui.Component.prototype.createChildren.call(this);
		this.createView(AwardItemUI.uiView);
	}

	AwardItemUI.uiView={"type":"View","props":{"width":100,"height":80},"child":[{"type":"Image","props":{"y":1,"x":1,"width":98,"var":"border","skin":"othericon/border.png","sizeGrid":"27,25,22,24","height":78}}]};
	return AwardItemUI;
})(View)


//class ui.RankItemUI extends laya.ui.View
var RankItemUI=(function(_super){
	function RankItemUI(){
		this.nametxt=null;
		this.scoretxt=null;
		this.ranktxt=null;
		this.btn=null;
		this.img=null;
		RankItemUI.__super.call(this);
	}

	__class(RankItemUI,'ui.RankItemUI',_super);
	var __proto=RankItemUI.prototype;
	__proto.createChildren=function(){
		laya.ui.Component.prototype.createChildren.call(this);
		this.createView(RankItemUI.uiView);
	}

	RankItemUI.uiView={"type":"View","props":{"width":660,"height":38},"child":[{"type":"Image","props":{"y":0,"x":0,"width":280,"skin":"comp/bg0.png","sizeGrid":"7,9,10,8","height":38}},{"type":"Image","props":{"y":0,"x":279,"width":178,"skin":"comp/bg0.png","sizeGrid":"7,9,10,8","height":38}},{"type":"Label","props":{"y":7,"x":11,"width":265,"var":"nametxt","text":"战神榜","styleSkin":"comp/label.png","height":23,"fontSize":18,"font":"Microsoft YaHei","color":"#ffffff"}},{"type":"Label","props":{"y":7,"x":289,"width":159,"var":"scoretxt","text":"杀敌数","styleSkin":"comp/label.png","height":19,"fontSize":18,"font":"Microsoft YaHei","color":"#ffffff"}},{"type":"Image","props":{"y":0,"x":456,"width":204,"skin":"comp/bg0.png","sizeGrid":"7,9,10,8","height":38}},{"type":"Label","props":{"y":7,"x":467,"width":102,"var":"ranktxt","text":"排名","styleSkin":"comp/label.png","height":19,"fontSize":18,"font":"Microsoft YaHei","color":"#ffffff"}},{"type":"Button","props":{"y":2,"x":575,"width":79,"var":"btn","skin":"comp/btn2.png","sizeGrid":"8,15,14,22","rotation":0,"labelSize":16,"labelPadding":"0","labelColors":"#f8f6f6","labelBold":false,"label":"领取","height":35}},{"type":"Image","props":{"y":24,"x":617,"width":27,"var":"img","skin":"othericon/txt2.png","pivotY":20,"pivotX":19,"height":27}}]};
	return RankItemUI;
})(View)


//class ui.SignBoxUI extends laya.ui.View
var SignBoxUI=(function(_super){
	function SignBoxUI(){
		this.gem=null;
		this.daytxt=null;
		this.gemtxt=null;
		this.txt=null;
		this.gold=null;
		SignBoxUI.__super.call(this);
	}

	__class(SignBoxUI,'ui.SignBoxUI',_super);
	var __proto=SignBoxUI.prototype;
	__proto.createChildren=function(){
		laya.ui.Component.prototype.createChildren.call(this);
		this.createView(SignBoxUI.uiView);
	}

	SignBoxUI.uiView={"type":"View","props":{"width":100,"height":90},"child":[{"type":"Image","props":{"y":0,"x":0,"width":100,"skin":"comp/key.png","sizeGrid":"12,15,17,12","height":90}},{"type":"Image","props":{"y":32,"x":33,"var":"gem","skin":"icon/foodicon/5000/102.png"}},{"type":"Label","props":{"y":10,"x":3,"width":95,"var":"daytxt","text":"第一天","styleSkin":"comp/label.png","height":20,"fontSize":16,"font":"Arial","color":"#f3120e","bold":true,"align":"center"}},{"type":"Label","props":{"y":61,"x":3,"width":95,"var":"gemtxt","text":"X100","styleSkin":"comp/label.png","height":20,"fontSize":16,"font":"Arial","color":"#f004f9","align":"center"}},{"type":"Image","props":{"y":72,"x":82,"width":28,"var":"txt","skin":"othericon/txt2.png","rotation":0,"pivotY":14,"pivotX":12,"height":28}},{"type":"Image","props":{"y":30,"x":39,"var":"gold","skin":"icon/foodicon/5000/101.png"}}]};
	return SignBoxUI;
})(View)


//class ui.SkillBoxUI extends laya.ui.View
var SkillBoxUI=(function(_super){
	function SkillBoxUI(){
		this.topicon=null;
		this.toptxt=null;
		this.downtxt=null;
		SkillBoxUI.__super.call(this);
	}

	__class(SkillBoxUI,'ui.SkillBoxUI',_super);
	var __proto=SkillBoxUI.prototype;
	__proto.createChildren=function(){
		laya.ui.Component.prototype.createChildren.call(this);
		this.createView(SkillBoxUI.uiView);
	}

	SkillBoxUI.uiView={"type":"View","props":{"width":70,"height":70},"child":[{"type":"Image","props":{"y":0,"x":0,"width":70,"var":"topicon","skin":"othericon/mybox1.png","sizeGrid":"31,27,29,27","height":70}},{"type":"Label","props":{"y":6,"x":9,"width":50,"var":"toptxt","text":"1","styleSkin":"comp/label.png","strokeColor":"#030303","stroke":3,"height":20,"fontSize":16,"color":"#ffffff"}},{"type":"Label","props":{"y":46,"x":41,"width":21,"var":"downtxt","valign":"middle","text":"12","styleSkin":"comp/label.png","strokeColor":"#000000","stroke":3,"height":17,"fontSize":15,"color":"#fdfdfd","align":"right"}}]};
	return SkillBoxUI;
})(View)


//class ui.TaskBoxUI extends laya.ui.View
var TaskBoxUI=(function(_super){
	function TaskBoxUI(){
		this.perbar=null;
		this.infotxt=null;
		this.txt=null;
		this.pertxt=null;
		this.img=null;
		this.btn=null;
		this.gem=null;
		this.gold=null;
		TaskBoxUI.__super.call(this);
	}

	__class(TaskBoxUI,'ui.TaskBoxUI',_super);
	var __proto=TaskBoxUI.prototype;
	__proto.createChildren=function(){
		laya.ui.Component.prototype.createChildren.call(this);
		this.createView(TaskBoxUI.uiView);
	}

	TaskBoxUI.uiView={"type":"View","props":{"width":480,"height":60},"child":[{"type":"Image","props":{"y":0,"x":0,"width":480,"skin":"comp/bg0.png","sizeGrid":"7,9,10,8","height":60}},{"type":"Image","props":{"y":0,"x":0,"width":480,"skin":"comp/key.png","sizeGrid":"19,20,22,20","height":60}},{"type":"ProgressBar","props":{"y":31,"x":23,"width":291,"var":"perbar","skin":"comp/progress.png","sizeGrid":"4,4,4,4","height":15}},{"type":"Label","props":{"y":9,"x":25,"width":275,"var":"infotxt","text":"info","styleSkin":"comp/label.png","height":20,"fontSize":16,"color":"#343403","bold":true,"align":"left"}},{"type":"Label","props":{"y":36,"x":320,"width":44,"var":"txt","text":"x200","styleSkin":"comp/label.png","height":20,"fontSize":16,"color":"#ec4a2c","bold":true,"align":"center"}},{"type":"Label","props":{"y":30,"x":25,"width":288,"var":"pertxt","text":"1/5","styleSkin":"comp/label.png","height":15,"fontSize":14,"color":"#f9f9f9","bold":true,"align":"center"}},{"type":"Image","props":{"y":30,"x":419,"width":39,"var":"img","skin":"othericon/txt2.png","pivotY":20,"pivotX":19,"height":38}},{"type":"Button","props":{"y":13,"x":379,"width":79,"var":"btn","skin":"comp/btn2.png","sizeGrid":"8,15,14,22","rotation":0,"labelSize":16,"labelPadding":"0","labelColors":"#f8f6f6","labelBold":false,"label":"领取","height":35}},{"type":"Image","props":{"y":10,"x":324,"var":"gem","skin":"icon/foodicon/5000/102.png"}},{"type":"Image","props":{"y":9,"x":330,"var":"gold","skin":"icon/foodicon/5000/101.png"}}]};
	return TaskBoxUI;
})(View)


/**
*<code>HBox</code> 是一个水平布局容器类。
*/
//class laya.ui.HBox extends laya.ui.LayoutBox
var HBox=(function(_super){
	function HBox(){
		HBox.__super.call(this);;
	}

	__class(HBox,'laya.ui.HBox',_super);
	var __proto=HBox.prototype;
	/**@inheritDoc */
	__proto.sortItem=function(items){
		if (items)items.sort(function(a,b){return a.x-b.x;});
	}

	/**@inheritDoc */
	__proto.changeItems=function(){
		this._itemChanged=false;
		var items=[];
		var maxHeight=0;
		for (var i=0,n=this.numChildren;i < n;i++){
			var item=this.getChildAt(i);
			if (item&&item.layoutEnabled){
				items.push(item);
				maxHeight=this._height?this._height:Math.max(maxHeight,item.height *item.scaleY);
			}
		}
		this.sortItem(items);
		var left=0;
		for (i=0,n=items.length;i < n;i++){
			item=items[i];
			item.x=left;
			left+=item.width *item.scaleX+this._space;
			if (this._align=="top"){
				item.y=0;
				}else if (this._align=="middle"){
				item.y=(maxHeight-item.height *item.scaleY)*0.5;
				}else if (this._align=="bottom"){
				item.y=maxHeight-item.height *item.scaleY;
			}
		}
		this.changeSize();
	}

	__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
		if (this._height !=value){
			Laya.superSet(LayoutBox,this,'height',value);
			this.callLater(this.changeItems);
		}
	});

	HBox.NONE="none";
	HBox.TOP="top";
	HBox.MIDDLE="middle";
	HBox.BOTTOM="bottom";
	return HBox;
})(LayoutBox)


/**
*<code>VBox</code> 是一个垂直布局容器类。
*/
//class laya.ui.VBox extends laya.ui.LayoutBox
var VBox=(function(_super){
	function VBox(){
		VBox.__super.call(this);;
	}

	__class(VBox,'laya.ui.VBox',_super);
	var __proto=VBox.prototype;
	/**@inheritDoc */
	__proto.changeItems=function(){
		this._itemChanged=false;
		var items=[];
		var maxWidth=0;
		for (var i=0,n=this.numChildren;i < n;i++){
			var item=this.getChildAt(i);
			if (item&&item.layoutEnabled){
				items.push(item);
				maxWidth=this._width?this._width:Math.max(maxWidth,item.width *item.scaleX);
			}
		}
		this.sortItem(items);
		var top=0;
		for (i=0,n=items.length;i < n;i++){
			item=items[i];
			item.y=top;
			top+=item.height *item.scaleY+this._space;
			if (this._align=="left"){
				item.x=0;
				}else if (this._align=="center"){
				item.x=(maxWidth-item.width *item.scaleX)*0.5;
				}else if (this._align=="right"){
				item.x=maxWidth-item.width *item.scaleX;
			}
		}
		this.changeSize();
	}

	__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
		if (this._width !=value){
			Laya.superSet(LayoutBox,this,'width',value);
			this.callLater(this.changeItems);
		}
	});

	VBox.NONE="none";
	VBox.LEFT="left";
	VBox.CENTER="center";
	VBox.RIGHT="right";
	return VBox;
})(LayoutBox)


/**
*<code>RadioGroup</code> 控件定义一组 <code>Radio</code> 控件，这些控件相互排斥；
*因此，用户每次只能选择一个 <code>Radio</code> 控件。
*
*@example <caption>以下示例代码，创建了一个 <code>RadioGroup</code> 实例。</caption>
*package
*{
	*import laya.ui.Radio;
	*import laya.ui.RadioGroup;
	*import laya.utils.Handler;
	*public class RadioGroup_Example
	*{
		*public function RadioGroup_Example()
		*{
			*Laya.init(640,800);//设置游戏画布宽高。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load(["resource/ui/radio.png"],Handler.create(this,onLoadComplete));//加载资源。
			*}
		*private function onLoadComplete():void
		*{
			*var radioGroup:RadioGroup=new RadioGroup();//创建一个 RadioGroup 类的实例对象 radioGroup 。
			*radioGroup.pos(100,100);//设置 radioGroup 的位置信息。
			*radioGroup.labels="item0,item1,item2";//设置 radioGroup 的标签集。
			*radioGroup.skin="resource/ui/radio.png";//设置 radioGroup 的皮肤。
			*radioGroup.space=10;//设置 radioGroup 的项间隔距离。
			*radioGroup.selectHandler=new Handler(this,onSelect);//设置 radioGroup 的选择项发生改变时执行的处理器。
			*Laya.stage.addChild(radioGroup);//将 radioGroup 添加到显示列表。
			*}
		*private function onSelect(index:int):void
		*{
			*trace("当前选择的单选按钮索引: index= ",index);
			*}
		*}
	*}
*@example
*Laya.init(640,800);//设置游戏画布宽高、渲染模式
*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
*Laya.loader.load(["resource/ui/radio.png"],laya.utils.Handler.create(this,onLoadComplete));
*function onLoadComplete(){
	*var radioGroup=new laya.ui.RadioGroup();//创建一个 RadioGroup 类的实例对象 radioGroup 。
	*radioGroup.pos(100,100);//设置 radioGroup 的位置信息。
	*radioGroup.labels="item0,item1,item2";//设置 radioGroup 的标签集。
	*radioGroup.skin="resource/ui/radio.png";//设置 radioGroup 的皮肤。
	*radioGroup.space=10;//设置 radioGroup 的项间隔距离。
	*radioGroup.selectHandler=new laya.utils.Handler(this,onSelect);//设置 radioGroup 的选择项发生改变时执行的处理器。
	*Laya.stage.addChild(radioGroup);//将 radioGroup 添加到显示列表。
	*}
*function onSelect(index){
	*console.log("当前选择的单选按钮索引: index= ",index);
	*}
*@example
*import Radio=laya.ui.Radio;
*import RadioGroup=laya.ui.RadioGroup;
*import Handler=laya.utils.Handler;
*class RadioGroup_Example {
	*constructor(){
		*Laya.init(640,800);//设置游戏画布宽高。
		*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
		*Laya.loader.load(["resource/ui/radio.png"],Handler.create(this,this.onLoadComplete));//加载资源。
		*}
	*private onLoadComplete():void {
		*var radioGroup:RadioGroup=new RadioGroup();//创建一个 RadioGroup 类的实例对象 radioGroup 。
		*radioGroup.pos(100,100);//设置 radioGroup 的位置信息。
		*radioGroup.labels="item0,item1,item2";//设置 radioGroup 的标签集。
		*radioGroup.skin="resource/ui/radio.png";//设置 radioGroup 的皮肤。
		*radioGroup.space=10;//设置 radioGroup 的项间隔距离。
		*radioGroup.selectHandler=new Handler(this,this.onSelect);//设置 radioGroup 的选择项发生改变时执行的处理器。
		*Laya.stage.addChild(radioGroup);//将 radioGroup 添加到显示列表。
		*}
	*private onSelect(index:number):void {
		*console.log("当前选择的单选按钮索引: index= ",index);
		*}
	*}
*/
//class laya.ui.RadioGroup extends laya.ui.UIGroup
var RadioGroup=(function(_super){
	function RadioGroup(){
		RadioGroup.__super.call(this);;
	}

	__class(RadioGroup,'laya.ui.RadioGroup',_super);
	var __proto=RadioGroup.prototype;
	/**@inheritDoc */
	__proto.createItem=function(skin,label){
		return new Radio(skin,label);
	}

	return RadioGroup;
})(UIGroup)


/**
*<code>Tab</code> 组件用来定义选项卡按钮组。 *
*@internal <p>属性：<code>selectedIndex</code> 的默认值为-1。</p>
*
*@example <caption>以下示例代码，创建了一个 <code>Tab</code> 实例。</caption>
*package
*{
	*import laya.ui.Tab;
	*import laya.utils.Handler;
	*public class Tab_Example
	*{
		*public function Tab_Example()
		*{
			*Laya.init(640,800);//设置游戏画布宽高。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load(["resource/ui/tab.png"],Handler.create(this,onLoadComplete));//加载资源。
			*}
		*private function onLoadComplete():void
		*{
			*var tab:Tab=new Tab();//创建一个 Tab 类的实例对象 tab 。
			*tab.skin="resource/ui/tab.png";//设置 tab 的皮肤。
			*tab.labels="item0,item1,item2";//设置 tab 的标签集。
			*tab.x=100;//设置 tab 对象的属性 x 的值，用于控制 tab 对象的显示位置。
			*tab.y=100;//设置 tab 对象的属性 y 的值，用于控制 tab 对象的显示位置。
			*tab.selectHandler=new Handler(this,onSelect);//设置 tab 的选择项发生改变时执行的处理器。
			*Laya.stage.addChild(tab);//将 tab 添到显示列表。
			*}
		*private function onSelect(index:int):void
		*{
			*trace("当前选择的表情页索引: index= ",index);
			*}
		*}
	*}
*@example
*Laya.init(640,800);//设置游戏画布宽高
*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
*Laya.loader.load(["resource/ui/tab.png"],laya.utils.Handler.create(this,onLoadComplete));
*function onLoadComplete(){
	*var tab=new laya.ui.Tab();//创建一个 Tab 类的实例对象 tab 。
	*tab.skin="resource/ui/tab.png";//设置 tab 的皮肤。
	*tab.labels="item0,item1,item2";//设置 tab 的标签集。
	*tab.x=100;//设置 tab 对象的属性 x 的值，用于控制 tab 对象的显示位置。
	*tab.y=100;//设置 tab 对象的属性 y 的值，用于控制 tab 对象的显示位置。
	*tab.selectHandler=new laya.utils.Handler(this,onSelect);//设置 tab 的选择项发生改变时执行的处理器。
	*Laya.stage.addChild(tab);//将 tab 添到显示列表。
	*}
*function onSelect(index){
	*console.log("当前选择的标签页索引: index= ",index);
	*}
*@example
*import Tab=laya.ui.Tab;
*import Handler=laya.utils.Handler;
*class Tab_Example {
	*constructor(){
		*Laya.init(640,800);//设置游戏画布宽高。
		*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
		*Laya.loader.load(["resource/ui/tab.png"],Handler.create(this,this.onLoadComplete));//加载资源。
		*}
	*private onLoadComplete():void {
		*var tab:Tab=new Tab();//创建一个 Tab 类的实例对象 tab 。
		*tab.skin="resource/ui/tab.png";//设置 tab 的皮肤。
		*tab.labels="item0,item1,item2";//设置 tab 的标签集。
		*tab.x=100;//设置 tab 对象的属性 x 的值，用于控制 tab 对象的显示位置。
		*tab.y=100;//设置 tab 对象的属性 y 的值，用于控制 tab 对象的显示位置。
		*tab.selectHandler=new Handler(this,this.onSelect);//设置 tab 的选择项发生改变时执行的处理器。
		*Laya.stage.addChild(tab);//将 tab 添到显示列表。
		*}
	*private onSelect(index:number):void {
		*console.log("当前选择的表情页索引: index= ",index);
		*}
	*}
*/
//class laya.ui.Tab extends laya.ui.UIGroup
var Tab=(function(_super){
	function Tab(){
		Tab.__super.call(this);;
	}

	__class(Tab,'laya.ui.Tab',_super);
	var __proto=Tab.prototype;
	/**
	*@private
	*@inheritDoc
	*/
	__proto.createItem=function(skin,label){
		return new Button(skin,label);
	}

	return Tab;
})(UIGroup)


/**
*<code>TextArea</code> 类用于创建显示对象以显示和输入文本。
*@example <caption>以下示例代码，创建了一个 <code>TextArea</code> 实例。</caption>
*package
*{
	*import laya.ui.TextArea;
	*import laya.utils.Handler;
	*public class TextArea_Example
	*{
		*public function TextArea_Example()
		*{
			*Laya.init(640,800);//设置游戏画布宽高。
			*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
			*Laya.loader.load(["resource/ui/input.png"],Handler.create(this,onLoadComplete));//加载资源。
			*}
		*private function onLoadComplete():void
		*{
			*var textArea:TextArea=new TextArea("这个一个TextArea实例。");//创建一个 TextArea 类的实例对象 textArea 。
			*textArea.skin="resource/ui/input.png";//设置 textArea 的皮肤。
			*textArea.sizeGrid="4,4,4,4";//设置 textArea 的网格信息。
			*textArea.color="#008fff";//设置 textArea 的文本颜色。
			*textArea.font="Arial";//设置 textArea 的字体。
			*textArea.bold=true;//设置 textArea 的文本显示为粗体。
			*textArea.fontSize=20;//设置 textArea 的文本字体大小。
			*textArea.wordWrap=true;//设置 textArea 的文本自动换行。
			*textArea.x=100;//设置 textArea 对象的属性 x 的值，用于控制 textArea 对象的显示位置。
			*textArea.y=100;//设置 textArea 对象的属性 y 的值，用于控制 textArea 对象的显示位置。
			*textArea.width=300;//设置 textArea 的宽度。
			*textArea.height=200;//设置 textArea 的高度。
			*Laya.stage.addChild(textArea);//将 textArea 添加到显示列表。
			*}
		*}
	*}
*@example
*Laya.init(640,800);//设置游戏画布宽高、渲染模式
*Laya.stage.bgColor="#efefef";//设置画布的背景颜色
*Laya.loader.load(["resource/ui/input.png"],laya.utils.Handler.create(this,onLoadComplete));//加载资源。
*function onLoadComplete(){
	*var textArea=new laya.ui.TextArea("这个一个TextArea实例。");//创建一个 TextArea 类的实例对象 textArea 。
	*textArea.skin="resource/ui/input.png";//设置 textArea 的皮肤。
	*textArea.sizeGrid="4,4,4,4";//设置 textArea 的网格信息。
	*textArea.color="#008fff";//设置 textArea 的文本颜色。
	*textArea.font="Arial";//设置 textArea 的字体。
	*textArea.bold=true;//设置 textArea 的文本显示为粗体。
	*textArea.fontSize=20;//设置 textArea 的文本字体大小。
	*textArea.wordWrap=true;//设置 textArea 的文本自动换行。
	*textArea.x=100;//设置 textArea 对象的属性 x 的值，用于控制 textArea 对象的显示位置。
	*textArea.y=100;//设置 textArea 对象的属性 y 的值，用于控制 textArea 对象的显示位置。
	*textArea.width=300;//设置 textArea 的宽度。
	*textArea.height=200;//设置 textArea 的高度。
	*Laya.stage.addChild(textArea);//将 textArea 添加到显示列表。
	*}
*@example
*import TextArea=laya.ui.TextArea;
*import Handler=laya.utils.Handler;
*class TextArea_Example {
	*constructor(){
		*Laya.init(640,800);//设置游戏画布宽高、渲染模式。
		*Laya.stage.bgColor="#efefef";//设置画布的背景颜色。
		*Laya.loader.load(["resource/ui/input.png"],Handler.create(this,this.onLoadComplete));//加载资源。
		*}
	*private onLoadComplete():void {
		*var textArea:TextArea=new TextArea("这个一个TextArea实例。");//创建一个 TextArea 类的实例对象 textArea 。
		*textArea.skin="resource/ui/input.png";//设置 textArea 的皮肤。
		*textArea.sizeGrid="4,4,4,4";//设置 textArea 的网格信息。
		*textArea.color="#008fff";//设置 textArea 的文本颜色。
		*textArea.font="Arial";//设置 textArea 的字体。
		*textArea.bold=true;//设置 textArea 的文本显示为粗体。
		*textArea.fontSize=20;//设置 textArea 的文本字体大小。
		*textArea.wordWrap=true;//设置 textArea 的文本自动换行。
		*textArea.x=100;//设置 textArea 对象的属性 x 的值，用于控制 textArea 对象的显示位置。
		*textArea.y=100;//设置 textArea 对象的属性 y 的值，用于控制 textArea 对象的显示位置。
		*textArea.width=300;//设置 textArea 的宽度。
		*textArea.height=200;//设置 textArea 的高度。
		*Laya.stage.addChild(textArea);//将 textArea 添加到显示列表。
		*}
	*}
*/
//class laya.ui.TextArea extends laya.ui.TextInput
var TextArea=(function(_super){
	function TextArea(text){
		/**@private */
		this._vScrollBar=null;
		/**@private */
		this._hScrollBar=null;
		(text===void 0)&& (text="");
		TextArea.__super.call(this,text);
	}

	__class(TextArea,'laya.ui.TextArea',_super);
	var __proto=TextArea.prototype;
	__proto.destroy=function(destroyChild){
		(destroyChild===void 0)&& (destroyChild=true);
		_super.prototype.destroy.call(this,destroyChild);
		this._vScrollBar && this._vScrollBar.destroy();
		this._hScrollBar && this._hScrollBar.destroy();
		this._vScrollBar=null;
		this._hScrollBar=null;
	}

	__proto.initialize=function(){
		this.width=180;
		this.height=150;
		this._tf.wordWrap=true;
		this.multiline=true;
	}

	__proto.onVBarChanged=function(e){
		if (this._tf.scrollY !=this._vScrollBar.value){
			this._tf.scrollY=this._vScrollBar.value;
		}
	}

	__proto.onHBarChanged=function(e){
		if (this._tf.scrollX !=this._hScrollBar.value){
			this._tf.scrollX=this._hScrollBar.value;
		}
	}

	__proto.changeScroll=function(){
		var vShow=this._vScrollBar && this._tf.maxScrollY > 0;
		var hShow=this._hScrollBar && this._tf.maxScrollX > 0;
		var showWidth=vShow ? this._width-this._vScrollBar.width :this._width;
		var showHeight=hShow ? this._height-this._hScrollBar.height :this._height;
		var padding=this._tf.padding || Styles.labelPadding;
		this._tf.width=showWidth;
		this._tf.height=showHeight;
		if (this._vScrollBar){
			this._vScrollBar.x=this._width-this._vScrollBar.width-padding[2];
			this._vScrollBar.y=padding[1];
			this._vScrollBar.height=this._height-(hShow ? this._hScrollBar.height :0)-padding[1]-padding[3];
			this._vScrollBar.scrollSize=1;
			this._vScrollBar.thumbPercent=showHeight / Math.max(this._tf.textHeight,showHeight);
			this._vScrollBar.setScroll(1,this._tf.maxScrollY,this._tf.scrollY);
			this._vScrollBar.visible=vShow;
		}
		if (this._hScrollBar){
			this._hScrollBar.x=padding[0];
			this._hScrollBar.y=this._height-this._hScrollBar.height-padding[3];
			this._hScrollBar.width=this._width-(vShow ? this._vScrollBar.width :0)-padding[0]-padding[2];
			this._hScrollBar.scrollSize=Math.max(showWidth *0.033,1);
			this._hScrollBar.thumbPercent=showWidth / Math.max(this._tf.textWidth,showWidth);
			this._hScrollBar.setScroll(0,this.maxScrollX,this.scrollX);
			this._hScrollBar.visible=hShow;
		}
	}

	/**滚动到某个位置*/
	__proto.scrollTo=function(y){
		this.commitMeasure();
		this._tf.scrollY=y;
	}

	/**垂直滚动值*/
	__getset(0,__proto,'scrollY',function(){
		return this._tf.scrollY;
	});

	__getset(0,__proto,'width',_super.prototype._$get_width,function(value){
		Laya.superSet(TextInput,this,'width',value);
		this.callLater(this.changeScroll);
	});

	/**水平滚动条实体*/
	__getset(0,__proto,'hScrollBar',function(){
		return this._hScrollBar;
	});

	__getset(0,__proto,'height',_super.prototype._$get_height,function(value){
		Laya.superSet(TextInput,this,'height',value);
		this.callLater(this.changeScroll);
	});

	/**水平滚动最大值*/
	__getset(0,__proto,'maxScrollX',function(){
		return this._tf.maxScrollX;
	});

	/**垂直滚动条皮肤*/
	__getset(0,__proto,'vScrollBarSkin',function(){
		return this._vScrollBar ? this._vScrollBar.skin :null;
		},function(value){
		if (this._vScrollBar==null){
			this.addChild(this._vScrollBar=new VScrollBar());
			this._vScrollBar.on("change",this,this.onVBarChanged);
			this._vScrollBar.target=this._tf;
			this.callLater(this.changeScroll);
		}
		this._vScrollBar.skin=value;
	});

	/**水平滚动条皮肤*/
	__getset(0,__proto,'hScrollBarSkin',function(){
		return this._hScrollBar ? this._hScrollBar.skin :null;
		},function(value){
		if (this._hScrollBar==null){
			this.addChild(this._hScrollBar=new HScrollBar());
			this._hScrollBar.on("change",this,this.onHBarChanged);
			this._hScrollBar.mouseWheelEnable=false;
			this._hScrollBar.target=this._tf;
			this.callLater(this.changeScroll);
		}
		this._hScrollBar.skin=value;
	});

	/**垂直滚动条实体*/
	__getset(0,__proto,'vScrollBar',function(){
		return this._vScrollBar;
	});

	/**垂直滚动最大值*/
	__getset(0,__proto,'maxScrollY',function(){
		return this._tf.maxScrollY;
	});

	/**水平滚动值*/
	__getset(0,__proto,'scrollX',function(){
		return this._tf.scrollX;
	});

	return TextArea;
})(TextInput)


/**
*带跳碰撞体
*@author guowc
*
*/
//class game.Body.HitJumpAct extends game.Body.JumpAct
var HitJumpAct=(function(_super){
	function HitJumpAct(){
		HitJumpAct.__super.call(this);
	}

	__class(HitJumpAct,'game.Body.HitJumpAct',_super);
	var __proto=HitJumpAct.prototype;
	__proto.setWH=function(){
		game.Body.SkinAct.prototype.setWH.call(this);
		var hei=this.bodyRect.height;
		this.hits=[
		new Point(-this.bodyWid,5),
		new Point(-this.bodyWid,hei*0.25),
		new Point(-this.bodyWid,hei>>1),
		new Point(-this.bodyWid,hei-hei*0.25),
		new Point(-this.bodyWid,hei-5),
		new Point(this.bodyWid,5),
		new Point(this.bodyWid,hei*0.25),
		new Point(this.bodyWid,hei>>1),
		new Point(this.bodyWid,hei-hei*0.25),
		new Point(this.bodyWid,hei-5)];
	}

	//跳跃
	__proto.jump=function(){
		if (this.isJump){
			if(this.velocity<0){
				this.velocity+=this.gravity;
				this._rect.y+=this.velocity;
				if(this.isJump){
					if(this.bodyWid==0){
						this.jumpson(0);
						}else{
						this.jumpson(-this.bodyWid);
						if(this.isJump){
							if(this.isJump){
								this.jumpson(this.bodyWid);
							}
						}
					}
				}
				}else{
				this.isJump=false;
				this.isDrop=true;
			}
			this.isRender=true;
		}
	}

	__proto.jumpson=function(val){
		var dx=this._rect.x+val>>0;
		if(MapData.isJumpWall(dx,this._rect.y))
			return;
		var type=MapData.getType(dx,this._rect.y);
		if(type>0){
			var yy=this._rect.y-this._rect.y%MapData.boxH>>0;
			this._rect.y=yy+MapData.boxH+1;
			this.isJump=false;
			this.velocity=0;
			this.isDrop=true;
		}
	}

	__proto.checklr=function(){
		game.Body.BaseAct.prototype.checklr.call(this);
	}

	__proto.checklrson=function(dx,dy){
		game.Body.BaseAct.prototype.checklrson.call(this,dx,dy);
	}

	return HitJumpAct;
})(JumpAct)


//class game.role.Food extends mylaya.common.skin.AniMc
var Food=(function(_super){
	function Food(){
		this.caneat=false;
		this.isDrop=true;
		this.isGold=true;
		this.move=false;
		this.foodVO=null;
		this.m=null;
		this.ispause=true;
		this.top=null;
		this.guide=null;
		this.hitRect=null;
		Food.__super.call(this);
		this.pt=new Point;
		this.pt1=new Point;
		this.top=GlobalAPI.moveViewPort.getLayerContainer(5);
	}

	__class(Food,'game.role.Food',_super);
	var __proto=Food.prototype;
	__proto.add=function(val){
		this.ispause=false;
		if(this.foodVO.skin==400){
			}else{
			if(this.caneat==false && this.foodVO.skin!=300){
				this.top.addChild(this);
				this.play();
				}else{
				if(this.move==false)
					this.play();
				val.addChild(this);
			}
		}
	}

	__proto.pause=function(){
		this.ispause=true;
		if(this.parent){
			this.parent.removeChild(this);
		}
		this.stop();
	}

	__proto.dispose=function(){
		this.pause();
		if(this.guide){
			this.guide.removeSelf();
			this.guide=null;
		}
		this.isDrop=true;
		this.isGold=true;
		this.move=false;
		this.hitRect=null;
		if(this.m)this.m.dispose();
		this.m=null;
		mylaya.common.skin.RoleSkin.prototype.dispose.call(this);
		this.foodVO=null;
		this.texture=null;
		GlobalAPI.poolMgr.disposeFood(this);
	}

	__proto.chgGold=function(){
		if(this.foodVO){
			this.isGold=true;
			this.foodVO.skin=Food.randomSkin;
			var obj=MapData.foodData[MapData.foodSortId+(Food.randomSkin-100)];
			if(obj){
				this.foodVO.score=obj.score;
				this.foodVO.gold=obj.gold;
			}
			this.setData(this.foodVO,true);
		}
	}

	__proto.setData=function(vo,chgGold){
		(chgGold===void 0)&& (chgGold=false);
		this.foodVO=vo;
		this.caneat=this.foodVO.score>0;
		if(GlobalAPI.ispackge && this.foodVO.type==5208){
			this.over();
			return;
		}
		switch(this.foodVO.skin){
			case 300:
				this.guide=Guides.getInstance().getGuide("g"+vo.type);
				this.guide.x=-this.guide.getBounds().width>>1;
				this.guide.y=0;
				if(GlobalAPI.isPC==false){
					if(vo.type==5301 || vo.type==5302 || vo.type==5303 || vo.type==5304){
						this.over();
						return;
					}
				}
				if(vo.type==5301 || vo.type==5302 || vo.type==5303 || vo.type==5304){
					Guides.getInstance().getGuide("one"+vo.type).visible=!GlobalAPI.heroproxy.getDouble();
					Guides.getInstance().getGuide("two"+vo.type).visible=GlobalAPI.heroproxy.getDouble();
				}
				this.addChild(this.guide);
				break ;
			case 101:
			case 107:
			case 806:
			case 106:
			case 105:
			case 110:
			case 111:
				this.isGold=false;
				this.isDrop=false;
				this.interval=120;
				this.on("roleload",this,this.loadskin,[this.foodVO.skin.toString()]);
				this.loadResource(PathMgr.path_miniani+"miniani.json",PathMgr.path_miniani+"miniani"+".ani");
				break ;
			default :
				if(this.foodVO.look){
					this.texture=this.foodVO.look;
				}else{}
				break ;
			}
		if(!chgGold){
			this.x=this.foodVO.startX;
			this.y=this.foodVO.startY;
		}
	}

	__proto.loadskin=function(name,val){
		this.off("roleload",this,this.loadskin);
		val.play(0,true,name);
		this.hitRect=this.getBounds();
		this.hitRect.x=this.foodVO.startX;
		this.hitRect.y=this.foodVO.startY;
	}

	__proto.setCurrentFrame=function(frameIndex,isStop){
		(isStop===void 0)&& (isStop=true);
		this.index=frameIndex;
		if(isStop){
			this.stop();
		}
	}

	__proto.getData=function(){
		return this.foodVO;
	}

	__proto.moveTo=function(pt,ox,oy){
		(ox===void 0)&& (ox=0);
		(oy===void 0)&& (oy=0);
		this.move=true;
		this.setCurrentFrame(1);
		this.m=MoveToThing.add(this,pt,new Handler(this,this.over),15);
		this.m.offsetXY(ox,oy);
	}

	__proto.over=function(){
		if(this.foodVO){
			GlobalAPI.sceneRoleMgr.removeFood(this.foodVO.id);
		}
	}

	__proto.drop=function(){
		if(this.move)return;
		this.isDrop=true;
		var skin=0;
		switch(this.foodVO.skin){
			default :
				skin=101;
				break ;
			}
		GlobalAPI.propMgr.addProp(skin,this.foodVO.startX+MapData.boxW2,this.foodVO.startY+MapData.boxH-5,0,0,false);
		this.foodVO.gold=this.foodVO.score=0;
		this.over();
	}

	__proto.getHitRect=function(){
		if(!this.hitRect){
			this.hitRect=this.getBounds();
			this.hitRect.x=this.foodVO.startX;
			this.hitRect.y=this.foodVO.startY;
		}
		if(this.m){
			this.hitRect.x=this.x;
			this.hitRect.y=this.y;
		}
		return this.hitRect;
	}

	Food.random=function(){
		Food.randomSkin=Food.randomSkins[int(Math.random()*Food.randomSkins.length)];
	}

	Food.randomSkin=102;
	Food.goldSkin101=101;
	Food.goldSkin102=102;
	__static(Food,
	['randomSkins',function(){return this.randomSkins=[Food.goldSkin101,Food.goldSkin102];}
	]);
	return Food;
})(AniMc)


//class game.view.AdView extends ui.AdViewUI
var AdView=(function(_super){
	function AdView(){
		this.adstr=null;
		this.gemgold=0;
		this._handler=null;
		this._win=null;
		AdView.__super.call(this);
		if(AdView.instance)return;
		AdView.instance=this;
		this.cacheAs="bitmap";
		this.closebtn.on("click",this,this.closeM);
		this.okbtn.on("click",this,this.startM);
	}

	__class(AdView,'game.view.AdView',_super);
	var __proto=AdView.prototype;
	__proto.startM=function(){
		this.closeM();
		GlobalAPI.playAd(this._handler);
		this._handler=null;
	}

	__proto.showadtip=function(str,handler,win){
		if(GlobalAPI.ispackge){
			GlobalAPI.playAd(handler);
			return;
		}
		this.txt.text=str;
		this._handler=handler;
		this._win=win;
		this.show(true);
	}

	__proto.closeM=function(){
		if(this._win){
			GlobalAPI.root.addChild(this._win);
			this._win=null;
		}
		this.show(false);
	}

	__proto.show=function(val){
		if(val){
			GlobalAPI.showBg(true);
			GlobalAPI.root.addChild(this);
			GlobalAPI.showAni(this,true);
			}else{
			this.removeSelf();
		}
	}

	AdView.getInstance=function(){
		if(!AdView.instance)new AdView;
		return AdView.instance;
	}

	AdView.instance=null;
	return AdView;
})(AdViewUI)


//class game.view.AliveView extends ui.AliveVIewUI
var AliveView=(function(_super){
	function AliveView(){
		AliveView.__super.call(this);
		if(AliveView.instance)return;
		AliveView.instance=this;
		this.cacheAs="bitmap";
		this.closebtn.on("click",this,this.show,[false]);
		this.btn.on("click",this,this.onClick);
	}

	__class(AliveView,'game.view.AliveView',_super);
	var __proto=AliveView.prototype;
	__proto.onClick=function(){
		if(GlobalAPI.heroproxy.alivetime-Browser.now()>0){
			if(GlobalAPI.adtime>0){
				AdView.getInstance().showadtip("观看广告可减少 4 小时",Handler.create(this,this.adhandler),this);
			}
			}else{
			GlobalAPI.heroproxy.alivetime=Browser.now()+GlobalAPI.heroproxy.aliveCD;
			GlobalAPI.levelMgr.setlevel(1,Math.random()*GlobalAPI.levelMgr.alivelevels>>0,1,0);
			GlobalAPI.tryweaponNowuse=GlobalAPI.aliveWeaponNowuse=this.usegunbtn.selected;
			this.show(false,false);
			LevelView.getInstance().show(false);
			SaveDataMgr.save(false);
		}
	}

	__proto.adhandler=function(obj){
		if(obj==10001){
			if(GlobalAPI.isPC){
				QuickMoveTip.show("缩减了 2 小时");
				GlobalAPI.heroproxy.alivetime-=7200000;
				}else{
				QuickMoveTip.show("缩减了 4 小时");
				GlobalAPI.heroproxy.alivetime-=7200000*2;
			}
			this.timeM();
		}
	}

	__proto.timeM=function(){
		if(GlobalAPI.levelMgr.getStars()<5){
			this.btn.label="需要获得5星解锁";
			this.timetxt.text="";
			this.btn.disabled=true;
			this.adicon.visible=this.adtxt.visible=false;
			return false;
		}
		this.btn.disabled=false;
		this.btn.label="进入冒险";
		var t=(GlobalAPI.heroproxy.alivetime-Browser.now())*0.001>>0;
		if(t<=0){
			this.adicon.visible=this.adtxt.visible=false;
			this.tip.visible=true;
			Laya.stage.timer.clear(this,this.timeM);
			this.timetxt.text="";
			return true;
			}else{
			this.adicon.visible=this.adtxt.visible=GlobalAPI.adtime>0;
		}
		this.timetxt.text=DateUtil.getTimeString(t,100);
		return false;
	}

	__proto.show=function(val,hasAni){
		(hasAni===void 0)&& (hasAni=true);
		GlobalAPI.showBg(val);
		if(val){
			GlobalAPI.root.addChild(this);
			GlobalAPI.showAni(this,val);
			if(this.timeM()==false){
				Laya.stage.timerLoop(1000,this,this.timeM);
				this.tip.visible=false;
			}
			this.usegunbtn.selected=GlobalAPI.aliveWeaponNowuse;
			}else{
			Laya.stage.timer.clear(this,this.timeM);
			GlobalAPI.soundMgr.playbtn();
			if(hasAni){
				GlobalAPI.showAni(this,val);
				}else{
				this.removeSelf();
			}
		}
	}

	AliveView.getInstance=function(){
		if(!AliveView.instance)AliveView.instance=new AliveView;
		return AliveView.instance;
	}

	AliveView.instance=null;
	return AliveView;
})(AliveVIewUI)


//class game.view.awardview.AwardView extends ui.awardview.AwardViewUI
var AwardView=(function(_super){
	function AwardView(){
		this.awards=null;
		this.nowrandom=null;
		this.randoms=
		[0,0,0,0,0,
		1,1,1,1,1,1,
		2,2,2,2,2,
		3,3,3,
		4,4,4,4,4,
		5,5,
		6,6,6,6,6,6,6,6,6,6,
		7,7,
		8,8,8,
		9];
		this.skins=null;
		this.infos=null;
		this.moveIdx=0;
		this.rect=null;
		this.moveToIdx=0;
		this.cirlNum=0;
		this.timeid=0;
		this.delay=0;
		this.needad=false;
		AwardView.__super.call(this);
		if(AwardView.instance)return;
		AwardView.instance=this;
		this.cacheAs="bitmap";
		this.newRandomaward();
		this.infos=["金币x","兴奋剂x","金币x","金币x","磁铁x",
		"金币x","弹药包x","钻石x","加血包x","钻石x"];
		this.awards=[600,1,1500,3000,1,8000,1,-15,1,-50];
		this.setItemData(this.awards);
		this.closebtn.on("click",this,this.closeM);
		this.awardbtn.on("click",this,this.startM);
	}

	__class(AwardView,'game.view.awardview.AwardView',_super);
	var __proto=AwardView.prototype;
	__proto.setItemData=function(itemList){
		this.moveIdx=0;
		this.cirlNum=itemList.length;
		var num=NaN;
		var val=NaN;
		for (num=0;num<this.cirlNum;num++){
			val=this.awards[num];
			val=val<0 ?-val :val;
			this["txt"+num].text="x"+val;
		}
		if(!this.rect){
			this.rect=new Sprite;
			this.rect.graphics.drawRect(0,0,98,78,null,"#ffff00",3);
		}
		this.addChild(this.rect);
		this.reset();
	}

	/**
	*设定最终的移动位置
	*@param idx item列表索引
	*
	*/
	__proto.setMoveIdx=function(idx){
		this.moveIdx=0;
		this.moveToIdx=this.cirlNum+idx;
		this.delay=2;
		this.timeid=this.delay;
		GlobalAPI.heartMgr.add(this,this.moveM);
		this.closebtn.disabled=true;
		this.awardbtn.disabled=true;
	}

	__proto.moveM=function(){
		if(this.timeid>1){
			this.timeid--;
			return;
			}else{
			this.timeid=this.delay;
		}
		GlobalAPI.soundMgr.playSound("patsound");
		this.moveIdx++;
		if(this.moveIdx>this.moveToIdx){
			this.delay+=2;
		};
		var realBox=this["item"+(this.moveIdx%this.cirlNum)];
		this.rect.x=realBox.x;
		this.rect.y=realBox.y;
		if(this.moveIdx==this.moveToIdx+this.cirlNum){
			this.closebtn.disabled=false;
			this.awardbtn.disabled=false;
			GlobalAPI.heartMgr.remove(this,this.moveM);
			var idx=this.moveToIdx-this.cirlNum;
			var proxy=GlobalAPI.heroproxy;
			var num=this.awards[idx];
			if(GlobalAPI.isPC==false){
				num=num*2;
			};
			var val=num;
			val=val<0 ?-val :val;
			QuickMoveTip.show("恭喜您获得: "+this.infos[idx]+val);
			switch(idx){
				case 0:
				case 2:
				case 3:
				case 5:
				case 7:
				case 9:
					proxy.addMoney(num,false);
					GlobalAPI.moneyBar.fly(num);
					break ;
				case 1:
					proxy.addProp(3,num);
					break ;
				case 4:
					proxy.addProp(5,num);
					break ;
				case 6:
					proxy.addProp(2,num);
					break ;
				case 8:
					proxy.addProp(4,num);
					break ;
				default :
					console.log("no award",idx);
					break ;
				}
			GlobalAPI.heroproxy.awardtime=Browser.now()+GlobalAPI.heroproxy.awardCD;
			SaveDataMgr.save(false);
			SaveDataMgr.onlinesave(true);
			Laya.stage.timerLoop(1000,this,this.timeM);
			this.timeM();
		}
	}

	__proto.timeM=function(){
		var t=(GlobalAPI.heroproxy.awardtime-Browser.now())*0.001>>0;
		if(t>0){
			this.tip.visible=false;
			this.awardbtn.disabled=true;
			this.timetxt.text=DateUtil.getTimeString(t,100);
			return false;
		}
		this.timetxt.text="";
		this.awardbtn.disabled=false;
		Laya.stage.timer.clear(this,this.timeM);
		this.tip.visible=GlobalAPI.adtime>0;
		if(GlobalAPI.adtime<1){
			return false;
		}
		return true;
	}

	__proto.show=function(val,ad){
		(ad===void 0)&& (ad=false);
		this.reset();
		GlobalAPI.moneyBar.update();
		GlobalAPI.showBg(val);
		if(val){
			this.adimg.visible=this.needad=ad;
			GlobalAPI.moneyBar.show(true,this);
			GlobalAPI.root.addChild(this);
			if(this.timeM()==false){
				Laya.stage.timerLoop(1000,this,this.timeM);
			}
			}else{
			Laya.stage.timer.clear(this,this.timeM);
			SaveDataMgr.onlinesave();
		}
		GlobalAPI.showAni(this,val);
	}

	__proto.reset=function(){
		this.rect.x=this["item0"].x;
		this.rect.y=this["item0"].y;
	}

	__proto.newRandomaward=function(){
		if(!this.nowrandom){
			this.nowrandom=this.randoms.concat();
		}
	}

	__proto.startM=function(){
		if(this.needad){
			AdView.getInstance().showadtip("观看广告抽奖，可获得双倍奖励",Handler.create(this,this.adhandler),this);
			}else{
			this.run();
		}
	}

	__proto.run=function(){
		this.tip.visible=false;
		var random=0;
		random=Math.random()*(this.nowrandom.length)>>0;
		this.setMoveIdx(this.nowrandom[random]);
		this.nowrandom.splice(random,1);
		if(this.nowrandom.length<1){
			this.nowrandom=this.randoms.concat();
		}
		GlobalAPI.taskVO.awardNum++;
	}

	__proto.adhandler=function(obj){
		if(obj!=10000){
			this.mouseEnabled=true;
		}
		if(obj==10001){
			this.run();
		}
	}

	__proto.closeM=function(){
		GlobalAPI.soundMgr.playbtn();
		this.show(false);
	}

	AwardView.getInstance=function(){
		if(!AwardView.instance)new AwardView;
		return AwardView.instance;
	}

	AwardView.instance=null;
	return AwardView;
})(AwardViewUI)


//class game.view.BoxgemView extends ui.BoxgemViewUI
var BoxgemView=(function(_super){
	function BoxgemView(){
		this.gemgold=0;
		this._handler=null;
		BoxgemView.__super.call(this);
		if(BoxgemView.instance)return;
		BoxgemView.instance=this;
		this.closebtn.on("click",this,this.show,[false]);
		this.btn3.on("click",this,this.show,[false]);
		this.okbtn.on("click",this,this.startM);
	}

	__class(BoxgemView,'game.view.BoxgemView',_super);
	var __proto=BoxgemView.prototype;
	__proto.startM=function(){
		AdView.getInstance().showadtip("观看广告获得额外奖励，可获得 2 倍额外奖励",Handler.create(this,this.adhandler),this);
	}

	__proto.adhandler=function(obj){
		if(obj==10001){
			this.adimg.visible=this.closebtn.visible=this.okbtn.visible=false;
			this.btn3.visible=true;
			if(GlobalAPI.isPC==false){
				this.gemgold=this.gemgold*2;
			}
			GlobalAPI.heroproxy.addMoney(this.gemgold,false);
			GlobalAPI.moneyBar.fly(this.gemgold);
		}
	}

	__proto.show=function(val,handler){
		GlobalAPI.moneyBar.update();
		GlobalAPI.showBg(val);
		if(val){
			this.adimg.visible=this.closebtn.visible=this.okbtn.visible=true;
			this.btn3.visible=false;
			GlobalAPI.moneyBar.show(true,this);
			GlobalAPI.root.addChild(this);
			GlobalAPI.showAni(this,val);
			if(Math.random()*10>5){
				this.gemgold=-5;
				this.numtxt.text="X5";
				this.gemicon.visible=true;
				this.goldicon.visible=false;
				}else{
				this.gemgold=Math.random()*1500+1000>>0;
				this.numtxt.text="X"+this.gemgold;
				this.gemicon.visible=false;
				this.goldicon.visible=true;
			}
			}else{
			if(this._handler){
				this._handler.run();
			}
			this.removeSelf();
		}
		this._handler=handler;
		GlobalAPI.pause(val);
	}

	BoxgemView.getInstance=function(){
		if(!BoxgemView.instance)new BoxgemView;
		return BoxgemView.instance;
	}

	BoxgemView.instance=null;
	return BoxgemView;
})(BoxgemViewUI)


//class game.view.ChooseBtn extends ui.ChooseBtnUI
var ChooseBtn=(function(_super){
	function ChooseBtn(){
		this.starlist=null;
		this.needstarlist=null;
		ChooseBtn.__super.call(this);
		this.starlist=new Starlist;
		this.starlist.pos(110,18);
		this.starlist.setStarImg(1,4,"comp/star.png","comp/starbg.png",1);
		this.addChild(this.starlist);
		this.needstarlist=new Starlist;
		this.needstarlist.pos(110,18);
		this.needstarlist.setStarTxt(0,0);
		this.addChild(this.needstarlist);
	}

	__class(ChooseBtn,'game.view.ChooseBtn',_super);
	var __proto=ChooseBtn.prototype;
	__proto.setStar=function(val,all){
		(all===void 0)&& (all=4);
		this.starlist.setStarImg(val,all,"comp/star.png","comp/starbg.png",1);
	}

	__proto.setNeedStar=function(val,all){
		this.needstarlist.setStarTxt(val,all);
	}

	__proto.setLock=function(val){
		this.needstarlist.visible=this.lockicon.visible=val;
		this.starlist.visible=!val;
	}

	return ChooseBtn;
})(ChooseBtnUI)


//class game.view.ChooseView extends ui.ChooseViewUI
var ChooseView=(function(_super){
	function ChooseView(){
		this.btnlist=null;
		this._sort=NaN;
		this._level=NaN;
		ChooseView.__super.call(this);
		if(ChooseView.instance)return;
		ChooseView.instance=this;
		this.cacheAs="bitmap";
		this.closebtn.on("click",this,this.show,[false]);
		this.btnlist=[new ChooseBtn,new ChooseBtn,new ChooseBtn,new ChooseBtn];
		var btnname=["初级","普通","困难","精英"];
		var i=0;
		var btn;
		for(var $each_btn in this.btnlist){
			btn=this.btnlist[$each_btn];
			btn.pos(41,48+(btn.height+25)*i,true);
			btn.btn.label=btnname[i];
			i++;
			btn.setStar(i);
			btn.tipicon.visible=false;
			btn.btn.on("click",this,this.onClick,[btn]);
			this.addChild(btn);
		}
	}

	__class(ChooseView,'game.view.ChooseView',_super);
	var __proto=ChooseView.prototype;
	__proto.setlevel=function(sort,level){
		GlobalAPI.soundMgr.playbtn();
		this._sort=sort;
		this._level=level;
		var star=0;
		var hasStar=GlobalAPI.levelMgr.getStars();
		var num=SaveDataMgr.stars[this._sort+"-"+this._level]>>0;
		var btn;
		for(var $each_btn in this.btnlist){
			btn=this.btnlist[$each_btn];
			btn.setNeedStar(hasStar,GlobalAPI.levelMgr.getneedstar(level,star));
			btn.setLock(!GlobalAPI.levelMgr.canlevel(level,star));
			btn.tipicon.visible=GlobalAPI.levelMgr.canlevel(level,star)&& star>=num
			star++;
		}
		this.show(true);
	}

	__proto.onClick=function(btn){
		MapData.levelLev=this.btnlist.indexOf(btn)+1;
		MapData.mapLevel=this._level;
		if(GlobalAPI.levelMgr.canlevel(this._level,MapData.levelLev-1,true)==false){
			return;
		}
		GlobalAPI.tryweaponNowuse=true;
		GlobalAPI.levelMgr.setlevel(this._sort,this._level,MapData.levelLev,this._level);
		this.show(false,false);
		LevelView.getInstance().show(false);
	}

	__proto.show=function(val,ani){
		(ani===void 0)&& (ani=true);
		GlobalAPI.showBg(val);
		if(val){
			GlobalAPI.root.addChild(this);
			GlobalAPI.showAni(this,val);
			}else{
			GlobalAPI.soundMgr.playbtn();
			if(ani){
				GlobalAPI.showAni(this,val);
				}else{
				this.removeSelf();
			}
		}
	}

	ChooseView.getInstance=function(){
		if(!ChooseView.instance)ChooseView.instance=new ChooseView;
		return ChooseView.instance;
	}

	ChooseView.instance=null;
	return ChooseView;
})(ChooseViewUI)


/**
*弹夹
*@author guowc
*
*/
//class game.view.ClipBar extends ui.ClipBarUI
var ClipBar=(function(_super){
	function ClipBar(){
		this.gunimg=null;
		this.str=null;
		this.gunMask=null;
		this.isRight=false;
		ClipBar.__super.call(this);
		this.txt.stroke=1;
		this.txt.strokeColor="#0";
		this.gunMask=new Sprite;
		this.gunMask.graphics.drawRect(0,0,60,60,"#000000");
		this.gunimg=GlobalAPI.weaponAni.start("weaponbar");
		this.gunimg.mask=this.gunMask;
		this.addChild(this.gunimg);
		this.gunimg.x=10;
		this.gunimg.y=2;
		this.gunimg.pivot(30,30);
		this.addChild(this.numtxt);
		this.addChild(this.icon);
		if(GlobalAPI.isPC==false){
			this.on("click",this,this.chgweapon);
			this.txt.y=4;
			this.txtbg.y=2;
		}
	}

	__class(ClipBar,'game.view.ClipBar',_super);
	var __proto=ClipBar.prototype;
	__proto.chgweapon=function(){
		GlobalAPI.weaponMgr.chgWeaponIdx(true);
	}

	__proto.setRight=function(val){
		this.isRight=val;
		if(val){
			this.gunimgbg.x=this.width-this.gunimgbg.width;
			this.txt.x=this.gunimgbg.x-this.txt.width-2;
			this.txt.align="right";
			}else{
			this.gunimgbg.x=3;
			this.txt.x=this.gunimgbg.x+this.gunimgbg.width+2;
			this.txt.align="left";
		}
		this.numtxt.x=this.gunimgbg.x+6;
		this.icon.x=this.gunimgbg.x+40;
		this.gunimgbg1.x=this.gunimgbg.x+3;
		this.gunimg.x=this.gunimgbg.x+10+30;
		this.gunimg.y=this.gunimgbg.y+2+30;
	}

	__proto.setGunSkin=function(frame){
		this.gunimg.gotoAndStop(frame);
		this.gunimg.scale(0.1,0.1,true);
		Tween.to(this.gunimg,{scaleX:1,scaleY:1,ease:Ease.backOut},300);
	}

	__proto.setGunInfo=function(gunid,gunlen){
		this.numtxt.text=(gunid+1)+"/"+gunlen;
	}

	__proto.setTxt=function(clip,allclip){
		if(allclip<0){
			this.str="MAX";
			}else{
			this.str=allclip.toString();
		}
		this.txt.text=clip+" | "+this.str;
	}

	return ClipBar;
})(ClipBarUI)


/**
*控制界面
*@author guowc
*
*/
//class game.view.ControlView extends ui.ControlViewUI
var ControlView=(function(_super){
	function ControlView(){
		this._show=false;
		this.movesp=null;
		this.ismove=false;
		this.ismoveout=false;
		this._root=null;
		this.downs=null;
		this.mousept=new Point;
		this.movept=new Point;
		ControlView.__super.call(this);
		this.downs=[];
		this.movesp=new Sprite;
		this.movesp.hitArea=new Rectangle;
		this.hitArea=new Rectangle;
		this.addChild(this.leftbtn);
		this.addChild(this.rightbtn);
		this.addChild(this.jumpbtn);
		this.addChild(this.movesp);
		this.movebtn.removeSelf();
		this.leftbtn.mouseEnabled=this.rightbtn.mouseEnabled=false;
	}

	__class(ControlView,'game.view.ControlView',_super);
	var __proto=ControlView.prototype;
	__proto.setContainer=function(val){
		this._root=val;
		this._root.addChild(this);
		this.update();
		this.movesp.on("mouseover",this,this.rollover);
		this.addbtn(this.movesp);
		this.addbtn(this.jumpbtn);
		this.addbtn(this.firebtn);
	}

	__proto.addbtn=function(btn){
		btn.on("mousedown",this,this.rollover);
		btn.on("mouseout",this,this.rollout);
		btn.on("mouseup",this,this.rollout);
	}

	__proto.update=function(){
		if(!this._root || !this._show)return;
		this.movept.x=this.movebtn.x;
		this.movept.y=this.movebtn.y;
		this.y=MapData.stageH-150;
		this.jumpbtn.x=MapData.stageW-this.jumpbtn.width-45;
		this.firebtn.x=MapData.stageW-this.firebtn.width-20;
		this.size(MapData.stageW,MapData.stageH);
		this.movesp.hitArea.width=MapData.stageW>>1;
		this.movesp.hitArea.height=MapData.stageH;
		this.hitArea.y=this.movesp.hitArea.y=-this.y;
		this.hitArea.x=this.movesp.hitArea.x=this.x;
		this.hitArea.width=MapData.stageW;
		this.hitArea.height=MapData.stageH;
	}

	__proto.step=function(){
		if(this.ismove && this.ismoveout==false){
			this.mousept.x=this.mouseX;
			this.mousept.y=this.mouseY;
			if(this.movesp.hitArea.contains(this.mousept.x,this.mousept.y)){
				if(this.mousept.x-this.movept.x>0){
					this.downs[20]=true;
					this.downs[10]=false;
					this.leftbtn.selected=false;
					this.rightbtn.selected=true;
					}else{
					this.downs[10]=true;
					this.downs[20]=false;
					this.leftbtn.selected=true;
					this.rightbtn.selected=false;
				}
			}
		}
	}

	//moveicon.rotation=Math.atan2(mousept.y-movept.y,mousept.x-movept.x)/Math.PI*180;
	__proto.rollover=function(evt){
		switch(evt.target){
			case this.movesp:
				if("mousedown"){
					this.ismove=true;
					this.ismoveout=false;
					}else if("mouseover"){
					this.ismoveout=false;
				}
				break ;
			case this.jumpbtn:
				this.downs[30]=true;
				break ;
			case this.firebtn:
				this.downs[40]=true;
				break ;
			}
	}

	__proto.rollout=function(evt){
		switch(evt.currentTarget){
			case this.movesp:
				if(evt.type=="mouseup"){
					this.ismove=false;
					}else{
					this.ismoveout=true;
				}
				this.downs[10]=false;
				this.downs[20]=false;
				this.leftbtn.selected=this.rightbtn.selected=false;
				break ;
			case this.jumpbtn:
				this.downs[30]=false;
				break ;
			case this.firebtn:
				this.downs[40]=false;
				break ;
			}
	}

	__proto.isDown=function(val){
		return this.downs[val];
	}

	__proto.show=function(val){
		this._show=val;
		if(this._root){
			if(this._show){
				this.visible=true;
				GlobalAPI.heartMgr.add(this,this.step);
				this.update();
				}else{
				this.visible=false;
				GlobalAPI.heartMgr.remove(this,this.step);
			}
		}
	}

	ControlView.getInstance=function(){
		if(!ControlView.instance)
			ControlView.instance=new ControlView;
		return ControlView.instance;
	}

	ControlView.LEFT=10;
	ControlView.RIGHT=20;
	ControlView.JUMP=30;
	ControlView.FIRE=40;
	ControlView.instance=null;
	return ControlView;
})(ControlViewUI)


//class game.view.equipview.BtnsItem extends ui.equipview.BtnsItemUI
var BtnsItem=(function(_super){
	function BtnsItem(){
		this.gemnum=null;
		BtnsItem.__super.call(this);
		this.x=242;
		this.y=225;
		this.gemnum=new NumberEffect;
		this.gemnum.setAsset("num_n",PathMgr.path_miniani+"number.json",PathMgr.path_miniani+"number"+".ani",
		SkinMgr.numNrect,5);
		this.addChild(this.gemnum);
		this.gemnum.x=this.gemimg.x+this.gemimg.width+2;
		this.gemnum.y=this.gemimg.y;
		this.tipicon.visible=false;
	}

	__class(BtnsItem,'game.view.equipview.BtnsItem',_super);
	var __proto=BtnsItem.prototype;
	__proto.showtype=function(showtxt,isgold){
		if(showtxt){
			this.goldimg.visible=isgold;
			this.gemimg.visible=!isgold;
			this.gemnum.visible=true;
			}else{
			this.tipicon.visible=this.goldimg.visible=this.gemimg.visible=this.gemnum.visible=false;
		}
	}

	__proto.setNum=function(val){
		if(val==0){
			this.uplevbtn.visible=false;
			}else{
			this.uplevbtn.visible=true;
			val=val<0 ?-val :val;
			this.gemnum.setNum(val+"");
		}
	}

	return BtnsItem;
})(BtnsItemUI)


//class game.view.equipview.ChooseHeroItem extends ui.equipview.ChooseHeroItemUI
var ChooseHeroItem=(function(_super){
	function ChooseHeroItem(idx){
		this.id=0;
		this._oldid=0;
		//已装配的角色
		this._nowid=0;
		//要装配的角色
		this.heroSkins=null;
		ChooseHeroItem.__super.call(this);
		this.p1.visible=idx==0;
		this.p2.visible=idx!=0;
		this.heroSkins=ImgAniEffect.getInstance().start(this,90,50,"hero",false);
		this.addChild(this.heroSkins);
		this.heroSkins.pos(72,55);
		this.on("click",this,this.clickM);
	}

	__class(ChooseHeroItem,'game.view.equipview.ChooseHeroItem',_super);
	var __proto=ChooseHeroItem.prototype;
	__proto.setHeroId=function(oldid,nowid){
		this._oldid=oldid;
		this._nowid=nowid;
		this.id=this._oldid;
		this.restore();
		if(this._oldid==-1){
			this.heroSkins.visible=false;
			}else{
			this.heroSkins.visible=true;
			this.heroSkins.gotoAndStop(this.id);
		}
	}

	__proto.clickM=function(){
		if(this._oldid==-2){
			return;
		}
		GlobalAPI.soundMgr.playbtn();
		if(this.id==this._nowid){
			this.id=this._oldid;
			}else{
			ChooseHeroView.getInstance().restore();
			if(this.id==this._oldid){
				this.id=this._nowid;
				}else{
				this.id=this._oldid;
			}
		}
		this.heroSkins.visible=this.id>-1;
		this.heroSkins.gotoAndStop(this.id);
		if(this.id==this._nowid){
			this.addicon.visible=false;
			this.killicon.visible=true;
			}else{
			this.restore();
		}
	}

	__proto.restore=function(){
		this.addicon.visible=true;
		this.killicon.visible=false;
	}

	__proto.getHeroId=function(){
		return this.id;
	}

	return ChooseHeroItem;
})(ChooseHeroItemUI)


//class game.view.equipview.ChooseHeroView extends ui.equipview.ChooseHeroViewUI
var ChooseHeroView=(function(_super){
	function ChooseHeroView(){
		this._roleid=0;
		this.heros=null;
		this.items=null;
		this._show=false;
		ChooseHeroView.__super.call(this);
		if(ChooseHeroView.instance)return;
		ChooseHeroView.instance=this;
		this.cancelbtn.on("click",this,this.btnM);
		this.okbtn.on("click",this,this.btnM);
		var item;
		this.items=[];
		for(var i=0;i<2;i++){
			item=new ChooseHeroItem(i);
			item.pos(40+i*(item.width+10),40);
			item.setHeroId(-1,-1);
			this.items.push(item);
			this.addChild(item);
		}
	}

	__class(ChooseHeroView,'game.view.equipview.ChooseHeroView',_super);
	var __proto=ChooseHeroView.prototype;
	__proto.btnM=function(evt){
		GlobalAPI.soundMgr.playbtn();
		if(evt.target==this.okbtn){
			var item;
			for(var i=0;i<this.heros.length;i++){
				item=this.items[i];
				this.heros[i]=item.getHeroId();
				if(i==0){
					GlobalAPI.heroproxy.setHeroSelect(0,item.getHeroId());
					}else{
					GlobalAPI.heroproxy.setHeroSelect(1,item.getHeroId());
				}
			}
			EquipView.getInstance().heroTab.updateAll();
		}
		SaveDataMgr.save(false);
		this.show(false);
	}

	__proto.reset=function(){
		var item;
		for(var i=0;i<2;i++){
			item=this.items[i];
			item.setHeroId(-1,-1);
		}
	}

	__proto.restore=function(){
		var item;
		for(var i=0;i<this.heros.length;i++){
			item=this.items[i];
			item.setHeroId(this.heros[i],this._roleid);
		}
	}

	__proto.setRoleid=function(id){
		this.reset();
		this._roleid=id;
		this.heros=[GlobalAPI.heroproxy.getBaseRoleVO().id,GlobalAPI.heroproxy.getBaseRoleVO1().id];
		this.restore();
	}

	__proto.show=function(val){
		this._show=val;
		if(this._show){
			GlobalAPI.showBg(true);
			GlobalAPI.root.addChild(this);
			}else{
			GlobalAPI.root.addChild(EquipView.getInstance());
			this.reset();
		}
		GlobalAPI.showAni(this,val);
	}

	ChooseHeroView.getInstance=function(){
		if(!ChooseHeroView.instance)ChooseHeroView.instance=new ChooseHeroView;
		return ChooseHeroView.instance;
	}

	ChooseHeroView.instance=null;
	return ChooseHeroView;
})(ChooseHeroViewUI)


//class game.view.equipview.EquipView extends ui.equipview.EquipViewUI
var EquipView=(function(_super){
	function EquipView(){
		this.roleid=0;
		this.heroTab=null;
		this.weaponTab=null;
		this.mountTab=null;
		this.skillTab=null;
		this._show=false;
		this.tablist=null;
		this.nowtab=null;
		this.arrowtip=null;
		this.heroDemo=null;
		EquipView.__super.call(this);
		if(EquipView.instance)return;
		EquipView.instance=this;
		this.cacheAs="bitmap";
		this.closebtn.on("click",this,this.closeM);
		this.heroDemo=new HeroDemo;
		this.addChild(this.heroDemo);
		this.heroDemo.show(this,0);
		this.heroDemo.showRole("S_");
		this.heroDemo.setPt(this.floor.x,this.floor.y);
		this.heroTab=new HeroTab;
		this.heroTab.pos(8,this.tab.y+this.tab.height);
		this.weaponTab=new WeaponTab;
		this.weaponTab.pos(8,this.tab.y+this.tab.height);
		this.mountTab=new MountTab;
		this.mountTab.pos(8,this.tab.y+this.tab.height);
		this.skillTab=new SkillTab;
		this.skillTab.pos(8,this.tab.y+this.tab.height);
		this.tablist=[this.heroTab,this.weaponTab,this.mountTab,this.skillTab];
		this.tab.selectHandler=new Handler(this,this.onSelect);
		this.arrowtip=GlobalAPI.miniAniEffect.start(this,0,0,"arrowtip",false);
		this.arrowtip.stop();
		this.arrowtip.visible=false;
		this.addChild(this.arrowtip);
	}

	__class(EquipView,'game.view.equipview.EquipView',_super);
	var __proto=EquipView.prototype;
	__proto.onSelect=function(index){
		if(GlobalAPI.heroproxy.getHeroLev(this.roleid)<1){
			this.setRoleid(GlobalAPI.heroproxy.getBaseRoleVO().id);
		}
		if(this.nowtab){
			this.nowtab.removeSelf();
		}
		this.nowtab=this.tablist[index];
		this.addChild(this.nowtab);
		DepthManager.bringToTop(this.floor);
		DepthManager.bringToTop(this.heroDemo);
		GlobalAPI.soundMgr.playbtn();
		this.update();
		this.floor.visible=this.heroDemo.visible=index!=3;
		switch(index){
			case 0:
				this.heroTab.setSelected(this.roleid);
				this.herotip.visible=false;
				break ;
			case 1:
				this.weaponTab.setSelected(GlobalAPI.heroproxy.getWeaponSelectOne(this.roleid));
				this.weapontip.visible=false;
				MapData.tryweapon=0;
				break ;
			case 2:
				this.mountTab.setSelected(GlobalAPI.heroproxy.getMountSelect(this.roleid));
				this.mounttip.visible=false;
				break ;
			case 3:
				game.view.equipview.EquipView.getInstance().showArrowTip(false);
				this.skillTab.update();
				this.skilltip.visible=false;
				break ;
			}
	}

	__proto.update=function(){
		this.heroTab.setSelected(this.roleid);
		this.weaponTab.setSelected(GlobalAPI.heroproxy.getWeaponSelectOne(this.roleid));
		this.mountTab.update(GlobalAPI.heroproxy.getMountSelect(this.roleid));
	}

	__proto.closeM=function(){
		this.show(false);
	}

	__proto.updateRole=function(){
		this.roleid=GlobalAPI.heroproxy.getBaseRoleVO().id;
		this.heroDemo.show(this,this.roleid);
	}

	__proto.setRoleid=function(val){
		this.roleid=val;
	}

	__proto.getRoleid=function(){
		return this.roleid;
	}

	__proto.updateTip=function(again){
		(again===void 0)&& (again=true);
		this.herotip.visible=!this.herotip.visible && again ? false :GlobalAPI.tipMgr.herotabtip()>-1;
		this.weapontip.visible=!this.weapontip.visible && again ? false :GlobalAPI.tipMgr.weapontabtip()>-1;
		this.mounttip.visible=!this.mounttip.visible && again ? false :GlobalAPI.tipMgr.mounttabtip()>-1;
		this.skilltip.visible=!this.skilltip.visible && again ? false :GlobalAPI.tipMgr.skilltabtip()>-1;
	}

	__proto.showArrowTip=function(val,x,y,scalex){
		(x===void 0)&& (x=415);
		(y===void 0)&& (y=330);
		(scalex===void 0)&& (scalex=1);
		this.arrowtip.visible=val;
		if(val){
			this.arrowtip.scaleX=scalex;
			this.arrowtip.play();
			this.arrowtip.pos(x,y,true);
			DepthManager.bringToTop(this.arrowtip);
			}else{
			this.arrowtip.stop();
		}
	}

	__proto.show=function(val,idx){
		(idx===void 0)&& (idx=0);
		this._show=val;
		GlobalAPI.showBg(this._show);
		if(this._show){
			LevelView.getInstance().showtip(LevelView.TIP_EQUIP,false);
			this.updateTip(false);
			this.updateRole();
			this.tab.selectedIndex=idx;
			GlobalAPI.root.addChild(this);
			GlobalAPI.moneyBar.show(true,this);
			}else{
			MapData.tryweapon=0;
			this.heroDemo.pause();
			this.tab.selectedIndex=-1;
		}
		GlobalAPI.showAni(this,this._show);
	}

	EquipView.getInstance=function(){
		if(!EquipView.instance)EquipView.instance=new EquipView;
		return EquipView.instance;
	}

	EquipView.instance=null;
	return EquipView;
})(EquipViewUI)


//class game.view.equipview.HeroItem extends ui.equipview.HeroItemUI
var HeroItem=(function(_super){
	function HeroItem(){
		this.mygray=false;
		this.skins=null;
		HeroItem.__super.call(this);
		this.skins=ImgAniEffect.getInstance().start(this,90,50,"hero",false);
		this.skins.setStop(0,"hero");
		this.addChild(this.skins);
	}

	__class(HeroItem,'game.view.equipview.HeroItem',_super);
	var __proto=HeroItem.prototype;
	__proto.setImg=function(idx,isSelect,isEquip,isp1){
		this.border.visible=isSelect;
		this.skins.gotoAndStop(idx);
		this.equippedtxt.visible=isEquip;
		var value=GlobalAPI.heroproxy.herolev[idx]<1;
		if (value!==this.mygray){
			this.mygray=value;
			UIUtils.gray(this.skins,value);
		}
		this.lockimg.visible=this.mygray;
		this.p1.visible=this.p2.visible=false;
		if(isEquip){
			if(isp1){
				this.p1.visible=true;
				}else{
				this.p2.visible=true;
			}
		}
	}

	return HeroItem;
})(HeroItemUI)


//class game.view.equipview.HeroTab extends ui.equipview.HeroTabUI
var HeroTab=(function(_super){
	function HeroTab(){
		this.btnsItem=null;
		this.herodata=null;
		this.list=null;
		HeroTab.__super.call(this);
		this.bornlist();
		this.btnsItem=new BtnsItem;
		this.addChild(this.btnsItem);
		this.herodata=new HeroTabDataView;
		this.herodata.pos(170,20,true);
		this.addChild(this.herodata);
		this.btnsItem.equipbtn.on("click",this,this.equipM);
		this.btnsItem.uplevbtn.on("click",this,this.uplevM);
		if(GlobalAPI.isPC){
			this.doublebtn.on("click",this,this.doubleM);
		}
		this.doublebtn.visible=GlobalAPI.isPC;
	}

	__class(HeroTab,'game.view.equipview.HeroTab',_super);
	var __proto=HeroTab.prototype;
	__proto.doubleM=function(){
		GlobalAPI.soundMgr.playbtn();
		if(GlobalAPI.heroproxy.getDouble()){
			this.doublebtn.label=StringInfo.getString("当前：单人模式");
			GlobalAPI.heroproxy.setDouble(false);
			}else{
			this.doublebtn.label=StringInfo.getString("当前：双人模式");
			GlobalAPI.heroproxy.setDouble(true);
			if(GlobalAPI.heroproxy.getBaseRoleVO().id==GlobalAPI.heroproxy.getBaseRoleVO1().id){
				var i=0;
				while(true){
					if(GlobalAPI.heroproxy.getBaseRoleVO().id!=i){
						GlobalAPI.heroproxy.setHeroSelect(1,i);
						break ;
					}
					i++;
				}
			}
		}
		LevelView.getInstance().updateDoublebtn();
		this.updateAll();
	}

	__proto.equipM=function(){
		GlobalAPI.soundMgr.playbtn();
		if(GlobalAPI.heroproxy.getDouble()){
			ChooseHeroView.getInstance().setRoleid(this.list.selectedIndex);
			ChooseHeroView.getInstance().show(true);
			}else{
			if(this.btnsItem.equipbtn.label==StringInfo.getString("选择")){
				GlobalAPI.heroproxy.setHeroSelect(0,this.list.selectedIndex);
				EquipView.getInstance().setRoleid(this.list.selectedIndex);
				SaveDataMgr.save(false);
			}
			this.update(this.list.selectedIndex);
		}
	}

	__proto.uplevM=function(){
		var lev=GlobalAPI.heroproxy.getHeroLev(this.list.selectedIndex);
		var gold=GlobalAPI.heroinfo.uplevGold(lev,this.list.selectedIndex);
		if(GlobalAPI.heroproxy.useMoney(gold)){
			GlobalAPI.heroproxy.setHeroLev(this.list.selectedIndex,lev+1);
			this.update(this.list.selectedIndex);
			EquipView.getInstance().updateTip();
			SaveDataMgr.save(false);
			GlobalAPI.soundMgr.playSound("uplevelsound");
			}else{
			GlobalAPI.soundMgr.playbtn();
		}
	}

	__proto.setSelected=function(idx){
		if(EquipView.getInstance().tab.selectedIndex==0 && MapData.tryweapon<1 && EquipView.getInstance().herotip.visible){
			var num=GlobalAPI.tipMgr.herotabtip();
			if(num>-1){
				idx=num;
			}
		}
		idx=idx<0 ? 0 :idx;
		this.list.selectedIndex=idx;
		this.list.scrollTo(idx-1);
		this.update(idx);
	}

	__proto.update=function(idx){
		this.herodata.setData(idx);
		if(GlobalAPI.heroproxy.getDouble()){
			this.doublebtn.label=StringInfo.getString("当前：双人模式");
			}else{
			this.doublebtn.label=StringInfo.getString("当前：单人模式");
		};
		var roleid=GlobalAPI.heroproxy.getBaseRoleVO().id;
		EquipView.getInstance().setRoleid(idx);
		EquipView.getInstance().heroDemo.choose(idx);
		EquipView.getInstance().heroDemo.updateWeaponPt(GlobalAPI.heroproxy.getWeaponSelectOne(idx));
		EquipView.getInstance().heroDemo.setMountIdx(GlobalAPI.heroproxy.getMountSelect(idx));
		if(idx==roleid || (GlobalAPI.heroproxy.getDouble()&& idx==GlobalAPI.heroproxy.getBaseRoleVO1().id)){
			this.btnsItem.equipbtn.label=StringInfo.getString("已选中");
			this.btnsItem.equipbtn.disabled=true;
			}else{
			this.btnsItem.equipbtn.label=StringInfo.getString("选择");
			this.btnsItem.equipbtn.disabled=false;
		}
		this.list.refresh();
		if(idx<0)return;
		var level=GlobalAPI.heroproxy.getHeroLev(idx);
		var gold=GlobalAPI.heroinfo.uplevGold(level,idx);
		var obj=GlobalAPI.heroinfo.roleInfo[idx];
		if(obj.maxlev==level){
			this.btnsItem.showtype(false,false);
			this.btnsItem.uplevbtn.label=StringInfo.getString("满级");
			this.btnsItem.uplevbtn.disabled=true;
			this.btnsItem.equipbtn.visible=true;
			}else{
			this.btnsItem.uplevbtn.disabled=false;
			if(gold<0){
				this.btnsItem.showtype(true,false);
				}else{
				this.btnsItem.showtype(true,true);
			}
			if(level==0){
				this.btnsItem.setNum(gold);
				this.btnsItem.uplevbtn.label=StringInfo.getString("解锁");
				this.btnsItem.equipbtn.visible=false;
				}else{
				this.btnsItem.showtype(false,false);
				this.btnsItem.setNum(0);
				this.btnsItem.uplevbtn.label=StringInfo.getString("升级");
				this.btnsItem.equipbtn.visible=true;
			}
		}
		if(level==0 && GlobalAPI.heroproxy.canBuy(gold)){
			EquipView.getInstance().showArrowTip(true);
			}else{
			EquipView.getInstance().showArrowTip(false);
		}
	}

	__proto.updateAll=function(){
		this.update(this.list.selectedIndex);
	}

	__proto.bornlist=function(){
		this.list=new List();
		this.list.x=this.listbg.x+2;
		this.list.y=2;
		this.list.itemRender=HeroItem;
		this.list.repeatX=1;
		this.list.repeatY=3;
		this.list.vScrollBarSkin="comp/vscroll.png";
		this.list.selectEnable=true;
		this.list.selectHandler=new Handler(this,this.onSelect);
		this.list.renderHandler=new Handler(this,this.updateItem);
		this.addChild(this.list);
		var data=[];
		for (var i=0;i < GlobalAPI.heroinfo.heroNum;i++){
			data.push(i);
		}
		this.list.array=data;
		this.addChild(this.list);
	}

	__proto.updateItem=function(cell,index){
		var roleid=GlobalAPI.heroproxy.getBaseRoleVO().id;
		var isEquip=false;
		if(GlobalAPI.heroproxy.getDouble()){
			var roleid2=GlobalAPI.heroproxy.getBaseRoleVO1().id;
			isEquip=roleid==cell.dataSource || roleid2==cell.dataSource;
			}else{
			isEquip=roleid==cell.dataSource;
		};
		var isp1=false;
		if(isEquip){
			isp1=roleid==cell.dataSource;
		}
		if(this.list.selectedIndex==index){
			cell.setImg(cell.dataSource,true,isEquip,isp1);
			}else{
			cell.setImg(cell.dataSource,false,isEquip,isp1);
		}
	}

	__proto.onSelect=function(index){
		GlobalAPI.soundMgr.playSound("chgweaponsound");
		this.update(index);
	}

	return HeroTab;
})(HeroTabUI)


//class game.view.equipview.HeroTabDataView extends ui.equipview.HeroTabDataUI
var HeroTabDataView=(function(_super){
	function HeroTabDataView(){
		this._hp=0;
		this._miss=0;
		this.hpbar=null;
		this.expbar=null;
		this.missbar=null;
		HeroTabDataView.__super.call(this);
		this.hpbar=new MyProgressBar("comp/headbar.png");
		this.expbar=new MyProgressBar("comp/expbar.png");
		this.missbar=new MyProgressBar("comp/headbar.png");
		this.missbar.sizeGrid=this.expbar.sizeGrid=this.hpbar.sizeGrid="4,4,4,4";
		this.hpbar.size(112,20);
		this.expbar.size(112,20);
		this.missbar.size(112,20);
		this.hpbar.x=this.expbar.x=this.missbar.x=this.levtxt.x-10;
		this.hpbar.y=this.hptxt.y;
		this.expbar.y=this.exptxt.y;
		this.missbar.y=this.misstxt.y;
		this.addChild(this.hpbar);
		this.addChild(this.expbar);
		this.addChild(this.missbar);
		this.exptxt.text=this.hptxt.text=this.misstxt.text="";
		this.mouseEnabled=false;
	}

	__class(HeroTabDataView,'game.view.equipview.HeroTabDataView',_super);
	var __proto=HeroTabDataView.prototype;
	__proto.setData=function(id){
		var level=GlobalAPI.heroproxy.getHeroLev(id);
		GlobalAPI.buffVO.reset();
		this.bufftxt.text=GlobalAPI.heroinfo.setBuff(id,GlobalAPI.buffVO);
		var mountid=GlobalAPI.heroproxy.getMountSelect(id);
		GlobalAPI.buffVO.hp+=GlobalAPI.mountinfo.getHp(mountid,GlobalAPI.heroproxy.getMountLev(mountid))*0.01;
		var hexp=GlobalAPI.heroproxy.getExp(id);
		var obj=GlobalAPI.heroinfo.getLevAndExp(hexp);
		var vo=GlobalAPI.heroinfo.getRoleVO(id);
		this.expbar.setData(0,obj.texp,true,true);
		if(obj.lev>=vo.maxlev){
			obj.lev=vo.maxlev;
			this.expbar.setData(1,1,true,true);
			this.exptxt.text=this.expbar.txt.text="MAX";
			}else{
			this.expbar.setData(obj.exp,obj.texp,true);
			this.exptxt.text=obj.exp.toString();
		}
		this.levtxt.text=obj.lev.toString();
		this._hp=GlobalAPI.heroinfo.getHP(obj.lev,id);
		this._hp=this._hp+GlobalAPI.buffVO.hp*this._hp>>0;
		this._miss=GlobalAPI.heroinfo.getMiss(obj.lev,id);
		this.hptxt.text=this._hp.toString();
		this.hpbar.setData(0,this._hp,true,true);
		this.missbar.setData(0,this._miss,true,true);
		this.hpbar.setData(this._hp,this._hp,true);
		this.misstxt.text=this._miss.toString()+"%";
		this.missbar.setData(this._miss,100,true);
		if(level>0 && obj.lev<vo.maxlev){
			this.nextlevtxt.visible=this.nexthp.visible=this.nextmiss.visible=true;
			this.nextlev(id,obj.lev);
			}else{
			this.nextlevtxt.visible=this.nexthp.visible=this.nextmiss.visible=false;
		}
	}

	__proto.nextlev=function(id,level){
		level=level+1;
		var hp=GlobalAPI.heroinfo.getHP(level,id);
		hp=hp+GlobalAPI.buffVO.hp*hp>>0;
		hp=hp-this._hp;
		var miss=GlobalAPI.heroinfo.getMiss(level,id)-this._miss;
		this.nexthp.text="+"+hp;
		this.nextmiss.text="+"+miss+"%";
		this.nexthp.visible=hp>0;
		this.nextmiss.visible=miss>0;
	}

	return HeroTabDataView;
})(HeroTabDataUI)


//class game.view.equipview.MountItem extends ui.equipview.MountItemUI
var MountItem=(function(_super){
	function MountItem(){
		this.mygray=false;
		this.mountSkins=null;
		MountItem.__super.call(this);
		this.mountSkins=ImgAniEffect.getInstance().start(this,90,50,"mount",false);
		this.mountSkins.setStop(0,"mount");
		this.addChild(this.mountSkins);
	}

	__class(MountItem,'game.view.equipview.MountItem',_super);
	var __proto=MountItem.prototype;
	__proto.setImg=function(idx,isSelect,isEquip){
		this.border.visible=isSelect;
		this.mountSkins.gotoAndStop(idx);
		this.equippedtxt.visible=isEquip;
		var value=GlobalAPI.heroproxy.mountlev[idx]<1;
		this.lockimg.visible=value;
		if (value!==this.mygray){
			this.mygray=value;
			UIUtils.gray(this.mountSkins,value);
		}
	}

	return MountItem;
})(MountItemUI)


//class game.view.equipview.MountTab extends ui.equipview.MountTabUI
var MountTab=(function(_super){
	function MountTab(){
		this.btnsItem=null;
		this.list=null;
		this.mountdata=null;
		MountTab.__super.call(this);
		this.bornlist();
		this.btnsItem=new BtnsItem;
		this.addChild(this.btnsItem);
		this.btnsItem.equipbtn.on("click",this,this.equipM);
		this.btnsItem.uplevbtn.on("click",this,this.uplevM);
		this.mountdata=new MountTabDataView;
		this.mountdata.pos(170,20,true);
		this.addChild(this.mountdata);
	}

	__class(MountTab,'game.view.equipview.MountTab',_super);
	var __proto=MountTab.prototype;
	__proto.equipM=function(){
		var roleid=EquipView.getInstance().getRoleid();
		if(this.btnsItem.equipbtn.label==StringInfo.getString("出战")){
			GlobalAPI.heroproxy.setMountSelect(roleid,this.list.selectedIndex);
			}else{
			this.btnsItem.equipbtn.label=StringInfo.getString("出战");
			GlobalAPI.heroproxy.setMountSelect(roleid,-1);
		}
		GlobalAPI.soundMgr.playbtn();
		SaveDataMgr.save(false);
		this.update(this.list.selectedIndex);
	}

	__proto.uplevM=function(){
		var lev=GlobalAPI.heroproxy.getMountLev(this.list.selectedIndex);
		var gold=GlobalAPI.mountinfo.uplevGold(lev,this.list.selectedIndex);
		if(GlobalAPI.heroproxy.useMoney(gold)){
			GlobalAPI.heroproxy.setMountLev(this.list.selectedIndex,lev+1);
			this.update(this.list.selectedIndex);
			EquipView.getInstance().heroDemo.updateLev();
			EquipView.getInstance().updateTip();
			SaveDataMgr.save(false);
			GlobalAPI.soundMgr.playSound("uplevelsound");
			}else{
			GlobalAPI.soundMgr.playbtn();
		}
	}

	__proto.reset=function(){}
	__proto.setSelected=function(idx){
		if(EquipView.getInstance().mounttip.visible){
			var num=GlobalAPI.tipMgr.mounttabtip();
			if(num>-1){
				idx=num;
			}
		}
		idx=idx<0 ? 0 :idx;
		this.list.selectedIndex=idx;
		this.update(idx);
	}

	__proto.update=function(idx){
		EquipView.getInstance().heroDemo.setMountIdx(idx);
		var roleid=EquipView.getInstance().getRoleid();
		var mountid=GlobalAPI.heroproxy.getMountSelect(roleid);
		if(idx==mountid && idx>-1){
			this.btnsItem.equipbtn.label=StringInfo.getString("已出战");
			}else{
			this.btnsItem.equipbtn.label=StringInfo.getString("出战");
		}
		this.list.refresh();
		if(idx<0)return;
		var level=GlobalAPI.heroproxy.getMountLev(idx);
		var obj=GlobalAPI.mountinfo.mountInfo[idx];
		this.mountdata.setData(idx,level);
		var gold=GlobalAPI.mountinfo.uplevGold(level,idx);
		if(obj.maxlev==level){
			this.btnsItem.showtype(false,false);
			this.btnsItem.uplevbtn.label=StringInfo.getString("满级");
			this.btnsItem.uplevbtn.disabled=true;
			this.btnsItem.equipbtn.visible=true;
			}else{
			this.btnsItem.uplevbtn.disabled=false;
			if(gold<0){
				this.btnsItem.showtype(true,false);
				}else{
				this.btnsItem.showtype(true,true);
			}
			this.btnsItem.setNum(gold);
			if(level==0){
				this.btnsItem.uplevbtn.label=StringInfo.getString("解锁");
				this.btnsItem.equipbtn.visible=false;
				}else{
				this.btnsItem.uplevbtn.label=StringInfo.getString("升级");
				this.btnsItem.equipbtn.visible=true;
			}
		}
		EquipView.getInstance().showArrowTip(false);
		if(level<obj.maxlev && GlobalAPI.heroproxy.canBuy(gold)){
			this.btnsItem.tipicon.visible=true;
			if(level==0){
				EquipView.getInstance().showArrowTip(true);
			}
			}else{
			this.btnsItem.tipicon.visible=false;
		}
	}

	__proto.bornlist=function(){
		this.list=new List();
		this.list.x=this.listbg.x+2;
		this.list.y=2;
		this.list.itemRender=MountItem;
		this.list.repeatX=1;
		this.list.repeatY=3;
		this.list.vScrollBarSkin="comp/vscroll.png";
		this.list.selectEnable=true;
		this.list.selectHandler=new Handler(this,this.onSelect);
		this.list.renderHandler=new Handler(this,this.updateItem);
		this.addChild(this.list);
		var data=[];
		for (var i=0;i < GlobalAPI.mountinfo.mountnum;++i){
			data.push(i);
		}
		this.list.array=data;
		this.addChild(this.list);
	}

	__proto.updateItem=function(cell,index){
		var roleid=EquipView.getInstance().getRoleid();
		var mountid=GlobalAPI.heroproxy.getMountSelect(roleid);
		var isEquip=mountid==cell.dataSource && mountid>-1;
		if(this.list.selectedIndex==index){
			cell.setImg(cell.dataSource,true,isEquip);
			}else{
			cell.setImg(cell.dataSource,false,isEquip);
		}
	}

	__proto.onSelect=function(index){
		GlobalAPI.soundMgr.playSound("chgweaponsound");
		this.update(index);
	}

	return MountTab;
})(MountTabUI)


//class game.view.equipview.MountTabDataView extends ui.equipview.MountTabDataUI
var MountTabDataView=(function(_super){
	function MountTabDataView(){
		this._hp=NaN;
		this._clip=NaN;
		this.clipbar=null;
		this.speedbar=null;
		this.hpbar=null;
		MountTabDataView.__super.call(this);
		this.clipbar=new MyProgressBar("comp/headbar.png");
		this.speedbar=new MyProgressBar("comp/headbar.png");
		this.hpbar=new MyProgressBar("comp/headbar.png");
		this.hpbar.sizeGrid=this.speedbar.sizeGrid=this.clipbar.sizeGrid="4,4,4,4";
		this.clipbar.size(120,15);
		this.speedbar.size(120,15);
		this.hpbar.size(120,15);
		this.clipbar.x=this.speedbar.x=this.hpbar.x=this.levtxt.x-10;
		this.clipbar.y=this.cliptxt.y+2;
		this.speedbar.y=this.speedtxt.y+2;
		this.hpbar.y=this.nexthp.y+2;
		this.addChild(this.clipbar);
		this.addChild(this.speedbar);
		this.addChild(this.hpbar);
		this.mouseEnabled=false;
	}

	__class(MountTabDataView,'game.view.equipview.MountTabDataView',_super);
	var __proto=MountTabDataView.prototype;
	__proto.setData=function(idx,level){
		var obj=GlobalAPI.mountinfo.mountInfo[idx];
		this.speedtxt.text="+20%";
		this.speedbar.setData(2,10);
		this.levtxt.text=level==0 ? "1" :level.toString();
		this._clip=GlobalAPI.mountinfo.getClip(idx,level);
		this.cliptxt.text="+"+this._clip.toString()+"%";
		this.clipbar.setData(this._clip,100);
		this._hp=GlobalAPI.mountinfo.getHp(idx,level);
		this.hptxt.text="+"+this._hp.toString()+"%";
		this.hpbar.setData(this._hp,100);
		if(level>0 && level<obj.maxlev){
			this.nextlevtxt.visible=this.nextclip.visible=this.nexthp.visible=true;
			this.nextlev(idx,level);
			}else{
			this.nextlevtxt.visible=this.nextclip.visible=this.nexthp.visible=false;
		}
	}

	__proto.nextlev=function(idx,level){
		level=level+1;
		var obj=GlobalAPI.mountinfo.mountInfo[idx];
		var hp=GlobalAPI.mountinfo.getHp(idx,level)-this._hp;
		var clip=GlobalAPI.mountinfo.getClip(idx,level)-this._clip;
		this.nextclip.text="+"+clip+"%";
		this.nexthp.text="+"+hp+"%";
		this.nextclip.visible=clip>0;
		this.nexthp.visible=hp>0;
	}

	return MountTabDataView;
})(MountTabDataUI)


//class game.view.equipview.ShopBoxItem extends ui.ShopBoxUI
var ShopBoxItem=(function(_super){
	function ShopBoxItem(){
		this._img=null;
		this._id=0;
		this._handler=null;
		ShopBoxItem.__super.call(this);
		this.on("click",this,this.onClick);
		this._img=new Image();;
		this.addChild(this._img);
		DepthManager.bringToTop(this.numtxt);
		this.tipicon.visible=false;
	}

	__class(ShopBoxItem,'game.view.equipview.ShopBoxItem',_super);
	var __proto=ShopBoxItem.prototype;
	__proto.onClick=function(evt){
		if(evt.target==this.btn){
			this._handler.runWith([this._id,0]);
			}else if(evt.target==this.equipbtn){
			this._handler.runWith([this._id,1]);
		}
	}

	__proto.setData=function(id,handler){
		this._id=id;
		this._handler=handler;
		this._img.skin=GlobalAPI.skillinfo.getSkillImgPath(id);
		this._img.x=this.image.x+(this.image.width-this._img.width>>1);
		this._img.y=this.image.y+(this.image.height-this._img.height>>1);
		this.nametxt.text=GlobalAPI.skillinfo.getSkillName(id);
	}

	return ShopBoxItem;
})(ShopBoxUI)


//class game.view.equipview.SkillItem extends ui.equipview.SkillItemUI
var SkillItem=(function(_super){
	function SkillItem(){
		this.id=0;
		this._oldid=0;
		//已装配的技能
		this._nowid=0;
		//要装配的技能
		this.skillimg=null;
		SkillItem.__super.call(this);
		this.skillimg=new Image();
		this.addChildAt(this.skillimg,1);
		this.on("click",this,this.clickM);
	}

	__class(SkillItem,'game.view.equipview.SkillItem',_super);
	var __proto=SkillItem.prototype;
	__proto.setSkillId=function(oldid,nowid){
		this._oldid=oldid;
		this._nowid=nowid;
		this.id=this._oldid;
		if(this._oldid==-2){
			this.skillimg.visible=false;
			this.addicon.visible=this.killicon.visible=false;
			}else if(this._oldid==-1){
			this.skillimg.visible=false;
			this.restore();
			}else{
			this.skillimg.visible=true;
			this.skillimg.skin=GlobalAPI.skillinfo.getSkillImgPath(this.id);
			this.skillimg.x=this.border.width-this.skillimg.width>>1;
			this.skillimg.y=this.border.height-this.skillimg.height>>1;
			this.restore();
		}
	}

	__proto.clickM=function(){
		GlobalAPI.soundMgr.playbtn();
		if(this._oldid==-2){
			return;
		}
		if(this.id==this._nowid){
			this.id=this._oldid;
			}else{
			SkillView.getInstance().restore();
			if(this.id==this._oldid){
				this.id=this._nowid;
				}else{
				this.id=this._oldid;
			}
		}
		this.skillimg.visible=this.id>-1;
		this.skillimg.skin=GlobalAPI.skillinfo.getSkillImgPath(this.id);
		this.skillimg.x=this.border.width-this.skillimg.width>>1;
		this.skillimg.y=this.border.height-this.skillimg.height>>1;
		if(this.id==this._nowid){
			this.addicon.visible=false;
			this.killicon.visible=true;
			}else{
			this.restore();
		}
	}

	__proto.restore=function(){
		this.addicon.visible=true;
		this.killicon.visible=false;
	}

	__proto.getSkillId=function(){
		return this.id;
	}

	return SkillItem;
})(SkillItemUI)


//class game.view.equipview.SkillTab extends ui.equipview.SkillTabUI
var SkillTab=(function(_super){
	function SkillTab(){
		this.itemHandler=null;
		this.skillInfo=null;
		this.list=null;
		SkillTab.__super.call(this);
		this.skillInfo=GlobalAPI.skillinfo;
		this.bornlist();
	}

	__class(SkillTab,'game.view.equipview.SkillTab',_super);
	var __proto=SkillTab.prototype;
	__proto.bornlist=function(){
		this.list=new List();
		this.list.x=2;
		this.list.y=6;
		this.list.itemRender=ShopBoxItem;
		this.list.hScrollBarSkin="comp/hscroll.png";
		this.list.selectEnable=false;
		this.itemHandler=new Handler(this,this.itemchg);
		this.list.renderHandler=new Handler(this,this.updateItem);
		this.addChild(this.list);
		var data=[];
		for (var i=0;i < this.skillInfo.skillLen;++i){
			data.push(i);
		}
		this.list.array=data;
		this.addChild(this.list);
		this.list.width=695;
		this.list.height=297;
	}

	__proto.itemchg=function(id,type){
		if(type==0){
			this.onClick(id);
			}else{
			this.onEquip(id);
		}
	}

	__proto.updateItem=function(box,id){
		box.setData(box.dataSource,this.itemHandler);
		var lev=GlobalAPI.heroproxy.getSkillLev(id);
		box.infotxt.text=GlobalAPI.skillinfo.getSkillInfo(id);
		if(this.skillInfo.getType(id)==200){
			box.btn.label=StringInfo.getString("购买");
			box.numtxt.text="x"+lev;
			box.equipbtn.disabled=false;
			box.tipicon.visible=false;
			}else{
			box.btn.label=lev==0 ? StringInfo.getString("解锁"):StringInfo.getString("升级");
			box.numtxt.text="Lv."+lev;
			box.equipbtn.disabled=lev==0;
		}
		if(this.skillInfo.getType(id)==100 && lev>=GlobalAPI.skillinfo.skillMaxLev){
			box.numtxt.text="Lv."+lev;
			box.btn.label=StringInfo.getString("满级");
			box.btn.labelPadding="";
			box.tipicon.visible=box.gemicon.visible=box.goldicon.visible=box.gemtxt.visible=false;
			box.btn.disabled=true;
			}else{
			box.btn.disabled=false;
			var gold=GlobalAPI.skillinfo.uplevGold(lev,id);
			box.tipicon.visible=this.skillInfo.getType(id)==100 && GlobalAPI.heroproxy.canBuy(gold);
			box.gemicon.visible=gold<0;
			box.goldicon.visible=gold>0;
			gold=gold<0 ?-gold :gold;
			box.gemtxt.text=gold.toString();
			box.gemtxt.visible=true;
		}
		if(GlobalAPI.heroproxy.hasSkillSelect(id)){
			box.equipbtn.label=StringInfo.getString("已装备");
			}else{
			box.equipbtn.label=StringInfo.getString("装备");
		}
	}

	__proto.update=function(){
		this.list.refresh();
	}

	__proto.onClick=function(id){
		var lev=GlobalAPI.heroproxy.getSkillLev(id);
		if(GlobalAPI.heroproxy.useMoney(GlobalAPI.skillinfo.uplevGold(lev,id))){
			lev+=1;
			GlobalAPI.heroproxy.setSkillLev(id,lev);
			GlobalAPI.heroproxy.updateskill();
			EquipView.getInstance().updateTip();
			SaveDataMgr.save(false);
			this.update();
			GlobalAPI.soundMgr.playSound("uplevelsound");
			}else{
			GlobalAPI.soundMgr.playbtn();
		}
	}

	__proto.onEquip=function(id){
		GlobalAPI.soundMgr.playbtn();
		if(GlobalAPI.heroproxy.hasSkillSelect(id)==false){
			SkillView.getInstance().show(true,id);
			}else{
			GlobalAPI.heroproxy.killSkillSelect(id);
			this.update();
		}
	}

	return SkillTab;
})(SkillTabUI)


//class game.view.equipview.SkillView extends ui.equipview.SkillViewUI
var SkillView=(function(_super){
	function SkillView(){
		this.skills=null;
		this.items=null;
		this.skillid=0;
		this._show=false;
		SkillView.__super.call(this);
		if(SkillView.instance)return;
		SkillView.instance=this;
		this.items=[];
		var item;
		for(var i=0;i<3;i++){
			item=new SkillItem();
			item.pos(20+i*(item.width+6),86);
			item.setSkillId(-1,-1);
			this.items.push(item);
			this.addChild(item);
		}
		this.cancelbtn.on("click",this,this.btnM);
		this.okbtn.on("click",this,this.btnM);
	}

	__class(SkillView,'game.view.equipview.SkillView',_super);
	var __proto=SkillView.prototype;
	__proto.btnM=function(evt){
		GlobalAPI.soundMgr.playbtn();
		if(evt.target==this.okbtn){
			var item;
			for(var i=0;i<this.skills.length;i++){
				item=this.items[i];
				this.skills[i]=item.getSkillId();
				GlobalAPI.heroproxy.setSkillSelect(i,item.getSkillId());
			}
			EquipView.getInstance().skillTab.update();
		}
		this.show(false,0);
	}

	__proto.show=function(val,id){
		this._show=val;
		if(this._show){
			this.reset();
			this.skillid=id;
			this.skills=[GlobalAPI.heroproxy.getSkillSelect(0),GlobalAPI.heroproxy.getSkillSelect(1),GlobalAPI.heroproxy.getSkillSelect(2)];
			this.restore();
			GlobalAPI.showBg(true);
			GlobalAPI.root.addChild(this);
			}else{
			this.reset();
			GlobalAPI.root.addChild(EquipView.getInstance());
		}
		GlobalAPI.showAni(this,val);
	}

	__proto.reset=function(){
		var item;
		for(var i=0;i<2;i++){
			item=this.items[i];
			item.setSkillId(-1,-1);
		}
	}

	__proto.restore=function(){
		var item;
		for(var i=0;i<this.skills.length;i++){
			item=this.items[i];
			item.setSkillId(this.skills[i],this.skillid);
		}
	}

	SkillView.getInstance=function(){
		if(!SkillView.instance)SkillView.instance=new SkillView;
		return SkillView.instance;
	}

	SkillView.instance=null;
	return SkillView;
})(SkillViewUI)


//class game.view.equipview.WeaponEquipItem extends ui.equipview.WeaponEquipItemUI
var WeaponEquipItem=(function(_super){
	function WeaponEquipItem(){
		this.id=0;
		this._oldid=0;
		//已装配的枪
		this._nowid=0;
		//要装配的枪
		this.weaponSkins=null;
		WeaponEquipItem.__super.call(this);
		this.weaponSkins=GlobalAPI.weaponAni.start("lookweapon");
		this.addChild(this.weaponSkins);
		DepthManager.bringToTop(this.killicon);
		DepthManager.bringToTop(this.addicon);
		this.weaponSkins.pos(40,40);
		this.on("click",this,this.clickM);
	}

	__class(WeaponEquipItem,'game.view.equipview.WeaponEquipItem',_super);
	var __proto=WeaponEquipItem.prototype;
	/**
	*
	*@param oldid 已装配的枪
	*@param nowid 要装配的枪
	*
	*/
	__proto.setWeaponId=function(oldid,nowid){
		this._oldid=oldid;
		this._nowid=nowid;
		this.id=this._oldid;
		if(this._oldid==-2){
			this.lockimg.visible=true;
			this.weaponSkins.visible=false;
			this.addicon.visible=this.killicon.visible=false;
			}else if(this._oldid==-1){
			this.lockimg.visible=false;
			this.weaponSkins.visible=false;
			this.restore();
			}else{
			this.lockimg.visible=false;
			this.weaponSkins.visible=true;
			this.weaponSkins.gotoAndStop(GlobalAPI.weaponinfo.getSkin(this.id));
			this.restore();
		}
	}

	__proto.clickM=function(){
		GlobalAPI.soundMgr.playbtn();
		if(this._oldid==-2){
			UnlockView.getInstance().show(true);
			return;
		}
		if(this.id==this._nowid){
			this.id=this._oldid;
			}else{
			WeaponEquipView.getInstance().restore();
			if(this.id==this._oldid){
				this.id=this._nowid;
				}else{
				this.id=this._oldid;
			}
		}
		this.weaponSkins.visible=this.id>-1;
		this.weaponSkins.gotoAndStop(GlobalAPI.weaponinfo.getSkin(this.id));
		if(this.id==this._nowid){
			this.addicon.visible=false;
			this.killicon.visible=true;
			}else{
			this.restore();
		}
	}

	__proto.restore=function(){
		this.addicon.visible=true;
		this.killicon.visible=false;
	}

	__proto.getWeaponId=function(){
		return this.id;
	}

	return WeaponEquipItem;
})(WeaponEquipItemUI)


//class game.view.equipview.WeaponEquipView extends ui.equipview.WeaponEquipViewUI
var WeaponEquipView=(function(_super){
	function WeaponEquipView(){
		this.items=null;
		this._roleid=0;
		this._weaponid=0;
		this.weapons=null;
		this._show=false;
		WeaponEquipView.__super.call(this);
		if(WeaponEquipView.instance)return;
		WeaponEquipView.instance=this;
		this.cancelbtn.on("click",this,this.btnM);
		this.okbtn.on("click",this,this.btnM);
		var item;
		this.items=[];
		for(var i=0;i<5;i++){
			item=new WeaponEquipItem;
			item.pos(20+i*(item.width+6),86);
			item.setWeaponId(-1,-1);
			this.items.push(item);
			this.addChild(item);
		}
	}

	__class(WeaponEquipView,'game.view.equipview.WeaponEquipView',_super);
	var __proto=WeaponEquipView.prototype;
	__proto.reset=function(){
		var item;
		for(var i=0;i<5;i++){
			item=this.items[i];
			item.setWeaponId(-1,-1);
		}
	}

	__proto.btnM=function(evt){
		if(evt.target==this.okbtn){
			var item;
			for(var i=0;i<5;i++){
				item=this.items[i];
				this.weapons[i]=item.getWeaponId();
			}
			EquipView.getInstance().weaponTab.updatelist();
		}
		GlobalAPI.soundMgr.playbtn();
		SaveDataMgr.save(false);
		this.show(false);
	}

	/**
	*
	*@param id 角色id
	*@param weaponid 要装备的武器id
	*
	*/
	__proto.setRoleid=function(id,weaponid){
		this.reset();
		this._roleid=id;
		this._weaponid=weaponid;
		this.weapons=GlobalAPI.heroproxy.getWeaponSelect(id);
		this.restore();
	}

	__proto.restore=function(){
		var item;
		for(var i=0;i<this.weapons.length;i++){
			item=this.items[i];
			item.setWeaponId(this.weapons[i],this._weaponid);
		}
	}

	__proto.show=function(val){
		this._show=val;
		if(this._show){
			GlobalAPI.showBg(true);
			GlobalAPI.root.addChild(this);
			}else{
			this.reset();
			GlobalAPI.root.addChild(EquipView.getInstance());
		}
		GlobalAPI.showAni(this,val);
	}

	WeaponEquipView.getInstance=function(){
		if(!WeaponEquipView.instance)WeaponEquipView.instance=new WeaponEquipView;
		return WeaponEquipView.instance;
	}

	WeaponEquipView.instance=null;
	return WeaponEquipView;
})(WeaponEquipViewUI)


//class game.view.equipview.WeaponItem extends ui.equipview.WeaponItemUI
var WeaponItem=(function(_super){
	function WeaponItem(){
		this.numeffect=null;
		this.mygray=false;
		this.weaponSkins=null;
		WeaponItem.__super.call(this);
		this.weaponSkins=GlobalAPI.weaponAni.start("lookweapon");
		this.weaponSkins.pos(90,50);
		this.addChild(this.weaponSkins);
		this.addChild(this.lockimg);
		this.addChild(this.equippedtxt);
		this.numeffect=new NumberEffect;
		this.numeffect.setAsset("num_e",PathMgr.path_miniani+"number.json",PathMgr.path_miniani+"number"+".ani",
		SkinMgr.numErect,2);
		this.addChild(this.numeffect);
		this.numeffect.pos(5,5);
	}

	__class(WeaponItem,'game.view.equipview.WeaponItem',_super);
	var __proto=WeaponItem.prototype;
	__proto.setImg=function(vo,isSelect,idx){
		this.numeffect.setNum(idx.toString());
		this.border.visible=isSelect;
		var id=GlobalAPI.weaponinfo.getSkin(vo.weaponid);
		this.weaponSkins.gotoAndStop(id);
		this.equippedtxt.visible=vo.isEquip;
		var value=vo.lev<1;
		this.lockimg.visible=value;
		if (value!==this.mygray){
			this.mygray=value;
			UIUtils.gray(this.weaponSkins,value);
		}
	}

	return WeaponItem;
})(WeaponItemUI)


//class game.view.equipview.WeaponTab extends ui.equipview.WeaponTabUI
var WeaponTab=(function(_super){
	function WeaponTab(){
		this.weaponequipview=null;
		this.listdata=null;
		this.btnsItem=null;
		this.list=null;
		this.weapondata=null;
		WeaponTab.__super.call(this);
		this.weaponequipview=WeaponEquipView.getInstance();
		this.bornlist();
		this.btnsItem=new BtnsItem;
		this.addChild(this.btnsItem);
		this.btnsItem.equipbtn.on("click",this,this.equipM);
		this.btnsItem.uplevbtn.on("click",this,this.uplevM);
		this.weapondata=new WeaponTabDataView;
		this.weapondata.pos(170,20,true);
		this.addChild(this.weapondata);
	}

	__class(WeaponTab,'game.view.equipview.WeaponTab',_super);
	var __proto=WeaponTab.prototype;
	__proto.equipM=function(){
		GlobalAPI.soundMgr.playbtn();
		var roleid=EquipView.getInstance().getRoleid();
		var weapons=GlobalAPI.heroproxy.getWeaponSelect(roleid);
		if(this.btnsItem.equipbtn.label==StringInfo.getString("装备")){
			this.weaponequipview.setRoleid(EquipView.getInstance().getRoleid(),this.list.selectedIndex);
			this.weaponequipview.show(true);
			}else{
			this.btnsItem.equipbtn.label=StringInfo.getString("装备");
			GlobalAPI.heroproxy.killWeaponSelect(roleid,this.list.selectedIndex);
			this.updatelist();
			SaveDataMgr.save(false);
		}
	}

	__proto.uplevM=function(){
		var lev=GlobalAPI.heroproxy.getWeaponLev(this.list.selectedIndex);
		var gold=GlobalAPI.weaponinfo.uplevGold(lev,this.list.selectedIndex);
		if(GlobalAPI.heroproxy.useMoney(gold)){
			GlobalAPI.heroproxy.setWeaponLev(this.list.selectedIndex,lev+1);
			this.updatelist();
			EquipView.getInstance().heroDemo.updateLev();
			EquipView.getInstance().updateTip();
			SaveDataMgr.save(false);
			GlobalAPI.soundMgr.playSound("uplevelsound");
			}else{
			GlobalAPI.soundMgr.playbtn();
		}
	}

	__proto.setSelected=function(idx){
		if(EquipView.getInstance().tab.selectedIndex==1 && EquipView.getInstance().weapontip.visible){
			var num=GlobalAPI.tipMgr.weapontabtip();
			if(num>-1){
				idx=num;
			}
		}
		if(MapData.tryweapon>0 && GlobalAPI.heroproxy.getWeaponLev(MapData.tryweapon)<1){
			idx=MapData.tryweapon;
		}
		this.list.selectedIndex=idx;
		this.list.scrollTo(idx-1);
		this.updatelist();
	}

	__proto.update=function(){
		var weaponidx=this.list.selectedIndex;
		var roleid=EquipView.getInstance().getRoleid();
		var weapons=GlobalAPI.heroproxy.getWeaponSelect(roleid);
		if(weapons.indexOf(weaponidx)>-1){
			this.btnsItem.equipbtn.label=StringInfo.getString("已装备");
			this.btnsItem.equipbtn.disabled=GlobalAPI.heroproxy.getWeaonSelectNum(roleid)<2;
			}else{
			this.btnsItem.equipbtn.label=StringInfo.getString("装备");
			this.btnsItem.equipbtn.disabled=false;
		}
		EquipView.getInstance().heroDemo.updateWeaponPt(weaponidx);
		var obj=GlobalAPI.weaponinfo.weaponInfo[weaponidx];
		var level=GlobalAPI.heroproxy.getWeaponLev(weaponidx);
		this.weapondata.setData(weaponidx,level,roleid);
		var gold=GlobalAPI.weaponinfo.uplevGold(level,weaponidx);
		if(obj.maxlev==level){
			this.btnsItem.showtype(false,false);
			this.btnsItem.uplevbtn.label=StringInfo.getString("满级");
			this.btnsItem.uplevbtn.disabled=true;
			this.btnsItem.equipbtn.visible=true;
			}else{
			this.btnsItem.uplevbtn.disabled=false;
			if(gold<0){
				this.btnsItem.showtype(true,false);
				}else{
				this.btnsItem.showtype(true,true);
			}
			this.btnsItem.setNum(gold);
			if(level==0){
				this.btnsItem.uplevbtn.label=StringInfo.getString("解锁");
				this.btnsItem.equipbtn.visible=false;
				}else{
				this.btnsItem.uplevbtn.label=StringInfo.getString("升级");
				this.btnsItem.equipbtn.visible=true;
			}
		}
		EquipView.getInstance().showArrowTip(false);
		if(level<obj.maxlev && GlobalAPI.heroproxy.canBuy(gold)){
			this.btnsItem.tipicon.visible=true;
			if(level==0){
				EquipView.getInstance().showArrowTip(true);
			}
			}else{
			this.btnsItem.tipicon.visible=false;
		}
	}

	__proto.updatelist=function(){
		var roleid=EquipView.getInstance().getRoleid();
		var weapons=GlobalAPI.heroproxy.getWeaponSelect(roleid);
		var listVO;
		for (var i=0;i < GlobalAPI.weaponinfo.weaponnum;++i){
			listVO=this.listdata[i];
			if(!listVO){
				listVO=new WeaponListVO;
				listVO.weaponid=i;
				this.listdata[i]=listVO;
			}
			listVO.lev=GlobalAPI.heroproxy.getWeaponLev(i);
			listVO.isEquip=weapons.indexOf(i)>-1;
		}
		this.list.array=this.listdata;
		this.update();
	}

	__proto.bornlist=function(){
		this.listdata=[];
		this.list=new List();
		this.list.x=this.listbg.x+2;
		this.list.y=2;
		this.list.itemRender=WeaponItem;
		this.list.repeatX=1;
		this.list.repeatY=3;
		this.list.vScrollBarSkin="comp/vscroll.png";
		this.list.selectEnable=true;
		this.list.selectHandler=new Handler(this,this.onSelect);
		this.list.renderHandler=new Handler(this,this.updateItem);
		this.addChild(this.list);
		this.addChild(this.list);
	}

	__proto.updateItem=function(cell,index){
		if(this.list.selectedIndex==index){
			cell.setImg(cell.dataSource,true,index+1);
			}else{
			cell.setImg(cell.dataSource,false,index+1);
		}
	}

	__proto.onSelect=function(index){
		GlobalAPI.soundMgr.playSound("chgweaponsound");
		this.update();
	}

	return WeaponTab;
})(WeaponTabUI)


//class game.view.equipview.WeaponTabDataView extends ui.equipview.WeaponTabDataUI
var WeaponTabDataView=(function(_super){
	function WeaponTabDataView(){
		this._damage=NaN;
		this._clip=NaN;
		this._crit=NaN;
		this._speed=NaN;
		this.clipbar=null;
		this.damagebar=null;
		this.speedbar=null;
		this.critbar=null;
		WeaponTabDataView.__super.call(this);
		this.clipbar=new MyProgressBar("comp/headbar.png");
		this.damagebar=new MyProgressBar("comp/headbar.png");
		this.speedbar=new MyProgressBar("comp/headbar.png");
		this.critbar=new MyProgressBar("comp/headbar.png");
		this.critbar.sizeGrid=this.speedbar.sizeGrid=this.damagebar.sizeGrid=this.clipbar.sizeGrid="4,4,4,4";
		this.clipbar.size(120,15);
		this.damagebar.size(120,15);
		this.speedbar.size(120,15);
		this.critbar.size(120,15);
		this.clipbar.x=this.damagebar.x=this.speedbar.x=this.critbar.x=this.levtxt.x-10;
		this.clipbar.y=this.cliptxt.y;
		this.damagebar.y=this.damagetxt.y+2;
		this.speedbar.y=this.speedtxt.y+2;
		this.critbar.y=this.crittxt.y+2;
		this.addChild(this.clipbar);
		this.addChild(this.damagebar);
		this.addChild(this.speedbar);
		this.addChild(this.critbar);
		this.mouseEnabled=false;
	}

	__class(WeaponTabDataView,'game.view.equipview.WeaponTabDataView',_super);
	var __proto=WeaponTabDataView.prototype;
	__proto.setData=function(weaponidx,level,roleid){
		GlobalAPI.buffVO.reset();
		GlobalAPI.heroinfo.setBuff(roleid,GlobalAPI.buffVO);
		var mountid=GlobalAPI.heroproxy.getMountSelect(roleid);
		GlobalAPI.buffVO.clip+=GlobalAPI.mountinfo.getClip(mountid,GlobalAPI.heroproxy.getMountLev(mountid));
		var obj=GlobalAPI.weaponinfo.weaponInfo[weaponidx];
		var gay=obj.gay+1;
		this._speed=MapData.frameRate/gay;
		var num=this._speed+"";
		var ar=num.split(".");
		if(ar.length>1 && ar[1].length>1){
			num=this._speed.toFixed(1);
		}
		this._speed=this._speed*10>>0;
		this.speedtxt.text=num+" /sec";
		this.speedbar.setData(this._speed,300);
		this.levtxt.text=level==0 ? "1" :level.toString();
		this.typetxt.text=GlobalAPI.weaponinfo.getTypeInfo(weaponidx);
		this._damage=GlobalAPI.weaponinfo.getDamage(weaponidx,level,GlobalAPI.buffVO)*obj.firenum;
		this.damagetxt.text=this._damage.toString();
		this._clip=GlobalAPI.weaponinfo.getallclip(weaponidx,level,GlobalAPI.buffVO);
		if(this._clip<0){
			this.cliptxt.text="MAX";
			this.clipbar.setData(600,600);
			}else{
			this.cliptxt.text=this._clip.toString();
			this.clipbar.setData(this._clip,600);
		}
		this._crit=GlobalAPI.weaponinfo.getCrit(weaponidx,level,GlobalAPI.buffVO);
		this.crittxt.text=this._crit.toString()+"%";
		this.critbar.setData(this._crit,100);
		if(level>0 && level<obj.maxlev){
			this.nextlevtxt.visible=this.nextdamage.visible=this.nextclip.visible=this.nextcrit.visible=true;
			this.nextlev(weaponidx,level);
			}else{
			this.nextlevtxt.visible=this.nextdamage.visible=this.nextclip.visible=this.nextcrit.visible=false;
		}
		this._damage=this._damage>7000 ? 7000 :this._damage;
		this.damagebar.setData(this._damage,7000);
	}

	__proto.nextlev=function(weaponidx,level){
		level=level+1;
		var obj=GlobalAPI.weaponinfo.weaponInfo[weaponidx];
		var damage=GlobalAPI.weaponinfo.getDamage(weaponidx,level,GlobalAPI.buffVO)*obj.firenum-this._damage;
		var clip=GlobalAPI.weaponinfo.getallclip(weaponidx,level,GlobalAPI.buffVO)-this._clip;
		var crit=GlobalAPI.weaponinfo.getCrit(weaponidx,level,GlobalAPI.buffVO)-this._crit;
		this.nextdamage.text="+"+damage;
		this.nextclip.text="+"+clip;
		this.nextcrit.text="+"+crit+"%";
		this.nextclip.visible=clip>0;
		this.nextcrit.visible=crit>0;
	}

	return WeaponTabDataView;
})(WeaponTabDataUI)


//class game.view.FailLevelView extends ui.FailLevelViewUI
var FailLevelView=(function(_super){
	function FailLevelView(){
		this._show=false;
		this.killne=null;
		this.goldne=null;
		this.gemne=null;
		this.addgold=null;
		this.addgemne=null;
		this.starlist=null;
		FailLevelView.__super.call(this);
		if(FailLevelView.instance)return;
		FailLevelView.instance=this;
		this.cacheAs="bitmap";
		this.killne=new NumberEffect;
		this.killne.setAsset("num_n",PathMgr.path_miniani+"number.json",PathMgr.path_miniani+"number"+".ani",
		SkinMgr.numNrect,5);
		this.killne.x=this.killimg.x+this.killimg.width+6;
		this.killne.y=this.killimg.y+2;
		this.goldne=new NumberEffect;
		this.goldne.setAsset("num_n",PathMgr.path_miniani+"number.json",PathMgr.path_miniani+"number"+".ani",
		SkinMgr.numNrect,5);
		this.goldne.x=this.goldimg.x+this.goldimg.width+6;
		this.goldne.y=this.goldimg.y+2;
		this.gemne=new NumberEffect;
		this.gemne.setAsset("num_n",PathMgr.path_miniani+"number.json",PathMgr.path_miniani+"number"+".ani",
		SkinMgr.numNrect,5);
		this.gemne.x=this.goldne.x;
		this.gemne.y=this.gemimg.y+2;
		this.addgold=new NumberEffect;
		this.addgold.setAsset("num_l",PathMgr.path_miniani+"number.json",PathMgr.path_miniani+"number"+".ani",
		SkinMgr.numNrect,5);
		this.addgold.y=this.goldimg.y;
		this.addgemne=new NumberEffect;
		this.addgemne.setAsset("num_l",PathMgr.path_miniani+"number.json",PathMgr.path_miniani+"number"+".ani",
		SkinMgr.numNrect,5);
		this.addgemne.y=this.gemimg.y;
		this.on("click",this,this.onClick);
		this.starlist=new Starlist;
		this.starlist.setStarImg(0,4,"comp/bigstar.png","comp/bigstarbg.png",5);
		this.starlist.x=50;
		this.starlist.y=30;
		UIUtils.gray(this.starlist);
		this.addChild(this.starlist);
		this.addChild(this.killne);
		this.addChild(this.goldne);
		this.addChild(this.gemne);
		this.addChild(this.addgold);
		this.addChild(this.addgemne);
	}

	__class(FailLevelView,'game.view.FailLevelView',_super);
	var __proto=FailLevelView.prototype;
	__proto.onClick=function(evt){
		if((evt.target instanceof laya.ui.Button )){
			GlobalAPI.soundMgr.playbtn();
		}
		switch(evt.target){
			case this.nextbtn:
				this.show(false);
				GlobalAPI.levelMgr.outLevelM();
				break ;
			case this.equipbtn:
				this.show(false);
				GlobalAPI.levelMgr.outLevelM();
				EquipView.getInstance().show(true,1);
				break ;
			}
	}

	__proto.updatesize=function(){
		if(this._show){
			this.x=MapData.stageW>>1;
			this.y=MapData.stageH>>1;
		}
	}

	__proto.show=function(val){
		this._show=val;
		if(val){
			GlobalAPI.setMouse("auto");
			GlobalAPI.showBg(true);
			this.addgold.visible=this.addgemne.visible=false;
			GlobalAPI.root.addChild(this);
			GlobalAPI.heartMgr.pause();
			GlobalAPI.systembar.mouseEnabled=false;
			this.starlist.setStarImg(MapData.levelLev,4,"comp/bigstar.png","comp/bigstarbg.png",5,false);
			this.killne.setNum(GlobalAPI.levVO.killEnemys+"");
			this.goldne.setNum(GlobalAPI.levVO.levelgold+"");
			this.gemne.setNum(GlobalAPI.levVO.levelgem+"");
			this.timetxt.text=DateUtil.getTimeString((Browser.now()-GlobalAPI.levVO.passtime)*0.001>>0,200);
			GlobalAPI.showAni(this);
			}else{
			this.removeSelf();
			GlobalAPI.heartMgr.play();
			GlobalAPI.systembar.mouseEnabled=true;
			GlobalAPI.showBg(false);
			GlobalAPI.showAni(this,false);
		}
	}

	FailLevelView.getInstance=function(){
		if(!FailLevelView.instance)new FailLevelView;
		return FailLevelView.instance;
	}

	FailLevelView.instance=null;
	return FailLevelView;
})(FailLevelViewUI)


/**
*引导
*@author guowc
*
*/
//class game.view.Guides extends ui.guidesUI
var Guides=(function(_super){
	function Guides(){
		Guides.__super.call(this);
		if(Guides.instance)return;
		Guides.instance=this;
	}

	__class(Guides,'game.view.Guides',_super);
	var __proto=Guides.prototype;
	__proto.reset=function(){
		this.g5301.removeSelf();
	}

	__proto.getGuide=function(type){
		return this[type];
	}

	Guides.getInstance=function(){
		if(!Guides.instance)new Guides;
		return Guides.instance;
	}

	Guides.instance=null;
	return Guides;
})(guidesUI)


//class game.view.GunItem extends ui.GunItemUI
var GunItem=(function(_super){
	function GunItem(){
		this.weaponSkins=null;
		GunItem.__super.call(this);
		this.weaponSkins=GlobalAPI.weaponAni.start("lookweapon");
		this.addChild(this.weaponSkins);
		this.weaponSkins.pos(this.width>>1,this.height>>1);
		this.on("click",this,this.clickM);
	}

	__class(GunItem,'game.view.GunItem',_super);
	var __proto=GunItem.prototype;
	__proto.setWeaponid=function(id){
		this.weaponSkins.gotoAndStop(id);
	}

	__proto.clickM=function(){}
	return GunItem;
})(GunItemUI)


//class game.view.HelpView extends ui.HelpViewUI
var HelpView=(function(_super){
	function HelpView(){
		HelpView.__super.call(this);
		if(HelpView.instance)return;
		HelpView.instance=this;
		this.cacheAs="bitmap";
		this.closebtn.on("click",this,this.onclick);
	}

	__class(HelpView,'game.view.HelpView',_super);
	var __proto=HelpView.prototype;
	__proto.onclick=function(evt){
		GlobalAPI.soundMgr.playbtn();
		this.show(false);
	}

	__proto.show=function(val){
		GlobalAPI.showBg(val);
		if(val){
			GlobalAPI.root.addChild(this);
		}
		GlobalAPI.showAni(this,val);
	}

	HelpView.getInstance=function(){
		if(!HelpView.instance)new HelpView;
		return HelpView.instance;
	}

	HelpView.instance=null;
	return HelpView;
})(HelpViewUI)


/**
*关卡界面
*@author guowc
*
*/
//class game.view.LevelView extends ui.LevelViewUI
var LevelView=(function(_super){
	function LevelView(){
		this.pagenum=12;
		this.allpage=0;
		this.nowpage=1;
		this._count=0;
		this.autopage=true;
		this.tips=null;
		this._show=false;
		this._sort=0;
		this.levels=null;
		this.starlist=null;
		this.pagene=null;
		LevelView.__super.call(this);
		if(LevelView.instance)return;
		LevelView.instance=this;
		this.cacheAs="bitmap";
		this.levels=[];
		this.backbtn.on("click",this,this.backM);
		this.shopbtn.on("click",this,this.equipM);
		this.awardbtn.on("click",this,this.awardM);
		this.signbtn.on("click",this,this.signM);
		this.taskbtn.on("click",this,this.taskM);
		this.alivebtn.on("click",this,this.aliveM);
		this.rankbtn.on("click",this,this.rankM);
		this.prevbtn.on("click",this,this.clickM);
		this.nextbtn.on("click",this,this.clickM);
		this.systembtn.on("click",this,this.sysClick);
		this.mgamebtn.on("click",this,this.mgameClick);
		this.sharebtn.on("click",this,this.shareClick);
		this.on("click",this,this.onClick);
		this.pagene=new NumberEffect;
		this.pagene.setAsset("num_e",PathMgr.path_miniani+"number.json",PathMgr.path_miniani+"number"+".ani",
		SkinMgr.numErect,4);
		this.pagene.x=this.prevbtn.x+this.prevbtn.width+20;
		this.pagene.y=this.prevbtn.y+5;
		this.starlist=new Starlist;
		this.starlist.x=this.doublebtn.x+this.doublebtn.width+5;
		this.starlist.y=this.doublebtn.y+2;
		this.tips=[this.tasktip,this.signtip,this.equiptip,this.awardtip,this.alivetip];
		this.addChild(this.starlist);
		this.addChild(this.pagene);
		if(GlobalAPI.isPC){
			this.doublebtn.on("click",this,this.doubleM);
		}
		this.doublebtn.visible=GlobalAPI.isPC;
		if(GlobalAPI.ispackge){
			this.rankbtn.removeSelf();
			this.ranktimetxt.removeSelf();
		}
	}

	__class(LevelView,'game.view.LevelView',_super);
	var __proto=LevelView.prototype;
	__proto.shareClick=function(){
		Browser.window.h5api.share();
	}

	__proto.mgameClick=function(){
		Browser.window.h5api.showRecommend();
	}

	__proto.sysClick=function(){
		GlobalAPI.soundMgr.playbtn();
		SystemsetView.getInstance().show(true);
	}

	__proto.doubleM=function(){
		GlobalAPI.soundMgr.playbtn();
		if(GlobalAPI.heroproxy.getDouble()){
			GlobalAPI.heroproxy.setDouble(false);
			}else{
			GlobalAPI.heroproxy.setDouble(true);
			if(GlobalAPI.heroproxy.getBaseRoleVO().id==GlobalAPI.heroproxy.getBaseRoleVO1().id){
				var i=0;
				while(true){
					if(GlobalAPI.heroproxy.getBaseRoleVO().id!=i){
						GlobalAPI.heroproxy.setHeroSelect(1,i);
						break ;
					}
					i++;
				}
			}
		}
		this.updateDoublebtn();
	}

	__proto.updateDoublebtn=function(){
		if(GlobalAPI.heroproxy.getDouble()){
			this.doublebtn.label=StringInfo.getString("当前：双人模式");
			}else{
			this.doublebtn.label=StringInfo.getString("当前：单人模式");
		}
	}

	__proto.updateTitle=function(){
		if(this.nowpage==1){
			this.prevbtn.disabled=true;
			this.nextbtn.disabled=false;
			}else if(this.nowpage==this.allpage){
			this.nextbtn.disabled=true;
			this.prevbtn.disabled=false;
			}else{
			this.prevbtn.disabled=this.nextbtn.disabled=false;
		}
	}

	__proto.clickM=function(evt){
		GlobalAPI.soundMgr.playbtn();
		var btn=evt.target;
		if(btn==this.prevbtn){
			this.nowpage--;
			this.nowpage=Math.max(1,this.nowpage);
			}else{
			this.nowpage++;
			this.nowpage=Math.min(this.allpage,this.nowpage);
		}
		this.setData(PageVO.getPageDatanum(this.nowpage,this._count,this.pagenum));
		this.updateLevel();
	}

	__proto.setPage=function(count){
		this._count=count;
		this.allpage=PageVO.getAllPage(this._count,this.pagenum);
		this.setData(PageVO.getPageDatanum(this.nowpage,this._count,this.pagenum));
	}

	__proto.setData=function(num){
		var i=0;
		var btn;
		var $each_btn;
		for($each_btn in this.levels){
			btn=this.levels[$each_btn];
			btn.removeSelf();
		}
		for(i=0;i<num;i++){
			btn=this.levels[i];
			if(!btn){
				btn=new LevelBtn;
				this.addChild(btn);
				this.levels.push(btn);
				btn.x=145*(i%4)+100;
				btn.y=110*(i/4>>0)+100;
			}
			if(!btn.parent){
				this.addChild(btn);
			}
			btn.setNum(this._sort,i+(this.nowpage-1)*this.pagenum);
		}
		this.pagene.setNum(this.nowpage+"/"+this.allpage);
		this.updateTitle();
	}

	__proto.updateLevel=function(){
		this.starlist.setStarTxt(SaveDataMgr.starnums>>0,GlobalAPI.levelMgr.allstars);
		var nowlevel=GlobalAPI.levelMgr.nowLev;
		var i=0;
		var len=this.levels.length;
		var btn;
		var t=(this.nowpage-1)*this.pagenum;
		var tip=false;
		var hasStar=GlobalAPI.levelMgr.getStars();
		for(i=0;i<len;i++){
			btn=this.levels[i];
			if(SaveDataMgr.stars[this._sort+"-"+(i+t)] !=undefined){
				var num=SaveDataMgr.stars[this._sort+"-"+(i+t)]>>0;
				btn.setStar(num);
				tip=num==0 && GlobalAPI.levelMgr.canlevel(0,0);
				btn.setLock(false,tip);
				}else{
				btn.setStar(0);
				btn.setLock(true,false);
			}
			btn.setboss((i+t+1)%5==0);
		}
		if(!tip){
			for(i=0;i<len;i++){
				btn=this.levels[i];
				if(SaveDataMgr.stars[this._sort+"-"+(i+t)] !=undefined){
					var star=0;
					var n=SaveDataMgr.stars[this._sort+"-"+(i+t)]>>0;
					while(star<4){
						if(GlobalAPI.levelMgr.canlevel(i+t,star)&& star>=n){
							tip=true;
							btn.setLock(false,tip);
							break ;
						}
						star++;
					}
				}
				if(tip)break ;
			}
		}
	}

	__proto.gotoNowPage=function(){
		if(this._sort==0){
			for(var i=0;i<this.allpage;i++){
				if(this.autopage){
					var bool=false;
					for(var t=0;t<this.pagenum;t++){
						if(this.pagenum+t<this._count &&
							SaveDataMgr.stars[this._sort+"-"+i*this.pagenum]!=undefined &&
						SaveDataMgr.stars[this._sort+"-"+(i*this.pagenum+t)]==undefined){
							bool=true;
							break ;
						}
					}
				}
				if((GlobalAPI.levelMgr.nowLev==i*this.pagenum-1 && SaveDataMgr.stars[this._sort+"-"+i*this.pagenum]==0)|| bool){
					this.nowpage=i+1;
					this.setData(PageVO.getPageDatanum(this.nowpage,this._count,this.pagenum));
					this.updateLevel();
				}
			}
			this.autopage=false;
		}
	}

	__proto.timeM=function(){
		var t=GlobalAPI.rankVO.getOvertime()>>0;
		this.ranktimetxt.text=DateUtil.getTimeString(t,100);
		if(t<1){
			Laya.stage.timer.clear(this,this.timeM);
			return true;
		}
		return false;
	}

	__proto.show=function(val){
		this._show=val;
		if(val){
			GlobalAPI.tilebg();
			GlobalAPI.systembar.show(false);
			GlobalAPI.root.addChild(this);
			this.updatesize();
			this.updatetip();
			this.gotoNowPage();
			if(GlobalAPI.ispackge==false && this.timeM()==false){
				Laya.stage.timerLoop(1000,this,this.timeM);
			}
			}else{
			Laya.stage.timer.clear(this,this.timeM);
			this.removeSelf();
		}
	}

	__proto.updatesize=function(){
		if(this._show){
			GlobalAPI.autoscale(this);
		}
	}

	__proto.onClick=function(evt){
		var btn=evt.target;
		if((btn instanceof game.view.LevelBtn )){
			ChooseView.getInstance().setlevel(btn.sort,btn.level);
		}
	}

	__proto.backM=function(evt){
		GlobalAPI.soundMgr.playbtn();
		this.show(false);
		StartView.getInstance().show(true);
	}

	__proto.equipM=function(evt){
		GlobalAPI.soundMgr.playbtn();
		EquipView.getInstance().show(true);
		this.showtip(LevelView.TIP_EQUIP,false);
	}

	__proto.awardM=function(){
		GlobalAPI.soundMgr.playbtn();
		AwardView.getInstance().show(true,true);
		this.showtip(LevelView.TIP_AWARD,false);
	}

	__proto.signM=function(){
		GlobalAPI.soundMgr.playbtn();
		SignView.getInstance().show(true);
		this.showtip(LevelView.TIP_SIGN,false);
	}

	__proto.taskM=function(){
		GlobalAPI.soundMgr.playbtn();
		TaskView.getInstance().show(true);
		this.showtip(LevelView.TIP_TASK,false);
	}

	__proto.aliveM=function(){
		GlobalAPI.soundMgr.playbtn();
		AliveView.getInstance().show(true);
		this.showtip(LevelView.TIP_ALIVE,false);
	}

	__proto.rankM=function(){
		GlobalAPI.soundMgr.playbtn();
		RankView.getInstance().show(true);
	}

	__proto.updatetip=function(){
		for(var i=0;i<this.tips.length;i++){
			this.showtip(i,true);
		}
	}

	__proto.showtip=function(type,val){
		if(val){
			switch(type){
				case 0:
					this.tasktip.visible=TaskView.getInstance().update();
					break ;
				case 1:
					this.signtip.visible=SignView.getInstance().update();
					break ;
				case 2:
					this.equiptip.visible=GlobalAPI.tipMgr.herotabtip()>-1 || GlobalAPI.tipMgr.weapontabtip()>-1||GlobalAPI.tipMgr.mounttabtip()>-1||GlobalAPI.tipMgr.skilltabtip()>-1;
					break ;
				case 3:
					this.awardtip.visible=AwardView.getInstance().timeM();
					break ;
				case 4:
					this.alivetip.visible=AliveView.getInstance().timeM();
					break ;
				}
			}else{
			this.tips[type].visible=false;
		}
	}

	LevelView.getInstance=function(){
		if(!LevelView.instance)
			new LevelView;
		return LevelView.instance;
	}

	LevelView.TIP_TASK=0;
	LevelView.TIP_SIGN=1;
	LevelView.TIP_EQUIP=2;
	LevelView.TIP_AWARD=3;
	LevelView.TIP_ALIVE=4;
	LevelView.instance=null;
	return LevelView;
})(LevelViewUI)


//class game.view.MoneyBar extends ui.MoneyBarUI
var MoneyBar=(function(_super){
	function MoneyBar(){
		this.pt=null;
		this.goldtxt=null;
		this.gemtxt=null;
		this.goldNumAni=null;
		this.gemNumAni=null;
		MoneyBar.__super.call(this);
		if(MoneyBar.instance)return;
		MoneyBar.instance=this;
		this.pt=new Point;
		this.gemtxt=new NumberEffect;
		this.gemtxt.setAsset("num_e",PathMgr.path_miniani+"number.json",PathMgr.path_miniani+"number"+".ani",
		SkinMgr.numErect,6);
		this.gemtxt.pos(this.gembg.x+6,this.gembg.y+2);
		this.goldtxt=new NumberEffect;
		this.goldtxt.setAsset("num_e",PathMgr.path_miniani+"number.json",PathMgr.path_miniani+"number"+".ani",
		SkinMgr.numErect,6);
		this.goldtxt.pos(this.goldbg.x+6,this.goldbg.y+2);
		this.addChild(this.gemtxt);
		this.addChild(this.goldtxt);
		this.pos(5,2);
		this.goldNumAni=new StepNumAni;
		this.gemNumAni=new StepNumAni;
	}

	__class(MoneyBar,'game.view.MoneyBar',_super);
	var __proto=MoneyBar.prototype;
	__proto.update=function(){
		this.updateGem();
		this.updateGold();
	}

	__proto.updateGem=function(addgem){
		(addgem===void 0)&& (addgem=0);
		this.gemtxt.setNumAni(GlobalAPI.heroproxy.getGemNum());
	}

	__proto.updateGold=function(addgold){
		(addgold===void 0)&& (addgold=0);
		this.goldtxt.setNumAni(GlobalAPI.heroproxy.getGoldNum());
	}

	__proto.show=function(val,contaier){
		if(val){
			contaier.addChild(this);
			this.update();
			}else{
			this.removeSelf();
		}
	}

	__proto.fly=function(addnum){
		var _$this=this;
		(addnum===void 0)&& (addnum=0);
		var id=NaN;
		if(addnum>0){
			id=5101;
			this.pt=this.getGoldPt();
			}else{
			id=5102;
			this.pt=this.getGemPt();
		}
		GlobalAPI.awardFlyMgr.addfly(GlobalAPI.root,id,MapData.stageW>>1,MapData.stageH>>1,this.pt.x,this.pt.y,
		Handler.create(this,over));
		function over (){
			_$this.update();
		}
	}

	__proto.getGoldPt=function(){
		this.pt.x=this._x+this.goldtxt.x;
		this.pt.y=this._y+this.goldtxt.y;
		return this.localToGlobal(this.pt);
	}

	__proto.getGemPt=function(){
		this.pt.x=this._x+this.gemtxt.x;
		this.pt.y=this._y+this.gemtxt.y;
		return this.localToGlobal(this.pt);
	}

	MoneyBar.getInstance=function(){
		if(!MoneyBar.instance)new MoneyBar;
		return MoneyBar.instance;
	}

	MoneyBar.instance=null;
	return MoneyBar;
})(MoneyBarUI)


//class game.view.NeedStarView extends ui.NeedStarViewUI
var NeedStarView=(function(_super){
	function NeedStarView(){
		this.starlist=null;
		NeedStarView.__super.call(this);
		if(NeedStarView.instance)return;
		NeedStarView.instance=this;
		this.okbtn.on("click",this,this.show,[false]);
		this.starlist=new Starlist;
		this.starlist.x=this.width-80>>1;
		this.starlist.y=130;
		this.addChild(this.starlist);
	}

	__class(NeedStarView,'game.view.NeedStarView',_super);
	var __proto=NeedStarView.prototype;
	__proto.setStar=function(has,all){
		this.starlist.setStarTxt(has,all);
	}

	__proto.show=function(val){
		GlobalAPI.soundMgr.playbtn();
		if(val){
			GlobalAPI.showBg(true);
			GlobalAPI.root.addChild(this);
			}else{
			GlobalAPI.root.addChild(ChooseView.getInstance());
		}
		GlobalAPI.showAni(this,val);
	}

	NeedStarView.getInstance=function(){
		if(!NeedStarView.instance)new NeedStarView;
		return NeedStarView.instance;
	}

	NeedStarView.instance=null;
	return NeedStarView;
})(NeedStarViewUI)


//class game.view.PassLevelView extends ui.PassLevelViewUI
var PassLevelView=(function(_super){
	function PassLevelView(){
		this._show=false;
		this.killne=null;
		this.goldne=null;
		this.gemne=null;
		this.addgold=null;
		this.addgemne=null;
		this.starlist=null;
		this.gunitem=null;
		PassLevelView.__super.call(this);
		if(PassLevelView.instance)return;
		PassLevelView.instance=this;
		this.cacheAs="bitmap";
		this.killne=new NumberEffect;
		this.killne.setAsset("num_n",PathMgr.path_miniani+"number.json",PathMgr.path_miniani+"number"+".ani",
		SkinMgr.numNrect,5);
		this.killne.x=this.killimg.x+this.killimg.width+6;
		this.killne.y=this.killimg.y+2;
		this.goldne=new NumberEffect;
		this.goldne.setAsset("num_n",PathMgr.path_miniani+"number.json",PathMgr.path_miniani+"number"+".ani",
		SkinMgr.numNrect,5);
		this.goldne.x=this.goldimg.x+this.goldimg.width+6;
		this.goldne.y=this.goldimg.y+2;
		this.gemne=new NumberEffect;
		this.gemne.setAsset("num_n",PathMgr.path_miniani+"number.json",PathMgr.path_miniani+"number"+".ani",
		SkinMgr.numNrect,5);
		this.gemne.x=this.goldne.x;
		this.gemne.y=this.gemimg.y+2;
		this.addgold=new NumberEffect;
		this.addgold.setAsset("num_l",PathMgr.path_miniani+"number.json",PathMgr.path_miniani+"number"+".ani",
		SkinMgr.numNrect,5);
		this.addgold.y=this.goldimg.y;
		this.addgemne=new NumberEffect;
		this.addgemne.setAsset("num_l",PathMgr.path_miniani+"number.json",PathMgr.path_miniani+"number"+".ani",
		SkinMgr.numNrect,5);
		this.addgemne.y=this.gemimg.y;
		this.on("click",this,this.onClick);
		this.starlist=new Starlist;
		this.starlist.setStarImg(0,4,"comp/bigstar.png","comp/bigstarbg.png",5);
		this.starlist.x=50;
		this.starlist.y=30;
		this.gunitem=new GunItem();
		this.gunitem.pos(270,143);
		this.addChild(this.starlist);
		this.addChild(this.killne);
		this.addChild(this.goldne);
		this.addChild(this.gemne);
		this.addChild(this.addgold);
		this.addChild(this.addgemne);
	}

	__class(PassLevelView,'game.view.PassLevelView',_super);
	var __proto=PassLevelView.prototype;
	__proto.onClick=function(evt){
		if((evt.target instanceof laya.ui.Button )){
			GlobalAPI.soundMgr.playbtn();
		}
		switch(evt.target){
			case this.againbtn:
				this.show(false);
				GlobalAPI.systembar.skillbar.reset();
				GlobalAPI.systembar.skilladdbar.reset();
				GlobalAPI.levelMgr.againLevelM();
				break ;
			case this.nextbtn:
			case this.levelbtn:
				this.show(false);
				GlobalAPI.levelMgr.outLevelM();
				break ;
			case this.adbtn:
				AdView.getInstance().showadtip("观看广告可获得 3 倍奖励",Handler.create(this,this.adhandler),this);
				break ;
			case this.gunitem:
				this.show(false);
				GlobalAPI.levelMgr.outLevelM();
				EquipView.getInstance().show(true,1);
				break ;
			}
	}

	__proto.adhandler=function(obj){
		if(obj==10001){
			this.adbtn.disabled=true;
			this.addgold.x=this.goldne.x+this.goldne.getBounds().width+2;
			this.addgemne.x=this.gemne.x+this.gemne.getBounds().width+2;
			this.addgold.visible=this.addgemne.visible=true;
			var lev=1;
			if(GlobalAPI.isPC==false){
				lev=2;
			}
			this.addgold.setNum("+"+GlobalAPI.levVO.levelgold*lev);
			this.addgemne.setNum("+"+GlobalAPI.levVO.levelgem*lev);
			GlobalAPI.heroproxy.addGoldNum(GlobalAPI.levVO.levelgold*lev);
			GlobalAPI.heroproxy.addGemNum(GlobalAPI.levVO.levelgem*lev);
			this.addgemne.scale(5,5,true);
			Tween.to(this.addgemne,{scaleX:1,scaleY:1,ease:Ease.backOut},800);
			this.addgold.scale(5,5,true);
			Tween.to(this.addgold,{scaleX:1,scaleY:1,ease:Ease.backOut},800);
			QuickMoveTip.show("额外获得"+GlobalAPI.levVO.levelgold*lev+"个金币 "+GlobalAPI.levVO.levelgem*lev+"颗钻石");
			SaveDataMgr.save(false);
		}
	}

	__proto.updatesize=function(){
		if(this._show){
			this.x=MapData.stageW>>1;
			this.y=MapData.stageH>>1;
		}
	}

	__proto.show=function(val){
		this._show=val;
		if(val){
			GlobalAPI.setMouse("auto");
			GlobalAPI.showBg(true);
			this.adbtn.disabled=false;
			this.addgold.visible=this.addgemne.visible=false;
			GlobalAPI.root.addChild(this);
			GlobalAPI.heartMgr.pause();
			GlobalAPI.systembar.mouseEnabled=false;
			this.starlist.setStarImg(MapData.levelLev,4,"comp/bigstar.png","comp/bigstarbg.png",5,true);
			this.killne.setNum(GlobalAPI.levVO.killEnemys+"");
			this.goldne.setNum(GlobalAPI.levVO.levelgold+"");
			this.gemne.setNum(GlobalAPI.levVO.levelgem+"");
			this.timetxt.text=DateUtil.getTimeString((Browser.now()-GlobalAPI.levVO.passtime)*0.001>>0,200);
			GlobalAPI.showAni(this);
			if(MapData.tryweapon>0){
				this.gunitem.setWeaponid(MapData.tryweapon);
				this.addChild(this.gunitem);
				}else{
				this.gunitem.removeSelf();
			}
			}else{
			this.removeSelf();
			GlobalAPI.heartMgr.play();
			GlobalAPI.systembar.mouseEnabled=true;
			GlobalAPI.showBg(false);
			GlobalAPI.showAni(this,false);
		}
	}

	PassLevelView.getInstance=function(){
		if(!PassLevelView.instance)new PassLevelView;
		return PassLevelView.instance;
	}

	PassLevelView.instance=null;
	return PassLevelView;
})(PassLevelViewUI)


//class game.view.PauseView extends ui.PauseViewUI
var PauseView=(function(_super){
	function PauseView(){
		this.starlist=null;
		this.time=NaN;
		this._show=false;
		this.numeffect=null;
		PauseView.__super.call(this);
		if(PauseView.instance)return;
		PauseView.instance=this;
		this.cacheAs="bitmap";
		this.on("click",this,this.onClick);
		this.musicno.visible=false;
		this.numeffect=new NumberEffect;
		this.numeffect.setAsset("num_d",PathMgr.path_miniani+"number.json",PathMgr.path_miniani+"number"+".ani",
		SkinMgr.numDrect,5);
		this.addChild(this.numeffect);
		this.starlist=new Starlist;
		this.starlist.setStarImg(1,4,"comp/star.png","comp/starbg.png",1);
		this.addChild(this.starlist);
		this.numeffect.pos(110,10);
		this.starlist.pos(168,8);
	}

	__class(PauseView,'game.view.PauseView',_super);
	var __proto=PauseView.prototype;
	__proto.onClick=function(evt){
		switch(evt.target){
			case this.gobtn:
				this.show(false);
				break ;
			case this.againbtn:
				this.show(false);
				GlobalAPI.levelMgr.againLevelM();
				break ;
			case this.outbtn:
				this.show(false,true);
				GlobalAPI.levelMgr.outLevelM();
				break ;
			case this.musicbtn:
				if(SoundMgr.musicLock){
					GlobalAPI.soundMgr.pauseMusic(false);
					this.musicno.visible=false;
					}else{
					GlobalAPI.soundMgr.pauseMusic(true);
					this.musicno.visible=true;
				}
				break ;
			case this.soundbtn:
				SoundMgr.soundLock=!SoundMgr.soundLock;
				this.soundno.visible=SoundMgr.soundLock;
				break ;
			case this.tipbox:
				GlobalAPI.shootTip=this.tipbox.selected;
				var hero;
				for(var $each_hero in GlobalAPI.heros){
					hero=GlobalAPI.heros[$each_hero];
					hero.updateShootTip();
				}
				break ;
			}
		if((evt.target instanceof laya.ui.Button )){
			GlobalAPI.soundMgr.playbtn();
		}
	}

	__proto.show=function(val,quick){
		(quick===void 0)&& (quick=false);
		this._show=val;
		if(val){
			this.time=Browser.now();
			this.numeffect.setNum((GlobalAPI.levelMgr.sort+1)+"-"+(GlobalAPI.levelMgr.nowLev+1));
			this.starlist.setStarImg(MapData.levelLev,4,"comp/star.png","comp/starbg.png",1);
			this.numeffect.visible=this.starlist.visible=GlobalAPI.levelMgr.sort==0;
			this.againbtn.disabled=GlobalAPI.levelMgr.sort==1;
			GlobalAPI.showBg(true);
			GlobalAPI.root.addChild(this);
			GlobalAPI.systembar.mouseEnabled=false;
			this.soundno.visible=SoundMgr.soundLock;
			this.musicno.visible=SoundMgr.musicLock;
			GlobalAPI.showAni(this);
			GlobalAPI.pause(true);
			this.tipbox.selected=GlobalAPI.shootTip;
			}else{
			GlobalAPI.systembar.skillbar.play();
			GlobalAPI.showBg(false);
			GlobalAPI.systembar.mouseEnabled=true;
			Laya.stage.focus=Laya.stage;
			if(quick){
				this.removeSelf();
				}else{
				GlobalAPI.showAni(this,false);
			}
			GlobalAPI.pause(false);
			GlobalAPI.levVO.passtime+=Browser.now()-this.time;
		}
	}

	__proto.updatesize=function(){
		if(this._show){
			this.x=MapData.stageW>>1;
			this.y=MapData.stageH>>1;
		}
	}

	PauseView.getInstance=function(){
		if(!PauseView.instance)new PauseView;
		return PauseView.instance;
	}

	PauseView.instance=null;
	return PauseView;
})(PauseViewUI)


//class game.view.RankView extends ui.RankViewUI
var RankView=(function(_super){
	function RankView(){
		this.colors=["#ff7000","#FFFF00","#FF99FF","#99FF00"];
		this.idx=0;
		this.boxs=null;
		RankView.__super.call(this);
		if(RankView.instance)return;
		RankView.instance=this;
		this.cacheAs="bitmap";
		this.boxs=[];
		var box;
		for(var i=0;i<GlobalAPI.rankVO.ranknum;i++){
			box=this["box"+i];
			this.boxs.push(box);
			box.nametxt.text=GlobalAPI.rankVO.getName(i);
			box.btn.on("click",this,this.boxClick);
		}
		this.on("click",this,this.onClick);
	}

	__class(RankView,'game.view.RankView',_super);
	var __proto=RankView.prototype;
	__proto.onClick=function(evt){
		if((evt.target instanceof laya.ui.Button )){
			GlobalAPI.soundMgr.playbtn();
		}
		switch(evt.target){
			case this.closebtn:
				this.show(false);
				break ;
			case this.rankbtn:
				GlobalAPI.rankVO.showRankList();
				break ;
			case this.loginbtn:
				if(GlobalAPI.ispackge==false){
					Browser.window.h5api.login(this.logincallback);
				}
				break ;
			}
	}

	__proto.logincallback=function(res){
		GlobalAPI.rankVO.onSubmitScore(Handler.create(this,this.update));
	}

	__proto.boxClick=function(evt){
		var box=evt.target.parent;
		this.idx=this.boxs.indexOf(box);
		if(evt.target==box.btn){
			this.getAward();
		}
	}

	__proto.getAward=function(){
		GlobalAPI.rankVO.getAward(this.idx,GlobalAPI.heroproxy.getRank());
		this.update();
	}

	__proto.update=function(){
		GlobalAPI.rankVO.save();
		var hasAward=false;
		GlobalAPI.rankVO.setRank(GlobalAPI.heroproxy.getRank());
		var box;
		var rank=GlobalAPI.heroproxy.getRank();
		if(rank.ok || GlobalAPI.rankVO.getOvertime()<1){
			this.rankbtn.visible=false;
			this.timetxt.visible=false;
			this.txt.text="排行PK结束";
			}else{
			this.rankbtn.visible=true;
			this.timetxt.visible=true;
			this.txt.text="每日排行  剩余时间";
		};
		var data=rank.data;
		var obj;
		for(var i=0;i<GlobalAPI.rankVO.ranknum;i++){
			box=this.boxs[i];
			obj=data[i];
			if(GlobalAPI.rankVO.getAwardGem(i)==0){
				box.btn.visible=box.img.visible=false;
				}else {
				if(obj.getaward){
					box.btn.visible=false;
					box.img.visible=true;
					}else{
					box.btn.visible=true;
					box.img.visible=false;
				}
			}
			box.nametxt.color=box.scoretxt.color=box.ranktxt.color=this.colors[i];
			if(i==3){
				box.scoretxt.text=GlobalAPI.rankVO.getScoreTxt(i)+DateUtil.getTimeString(obj.num,200);
				}else{
				box.scoretxt.text=GlobalAPI.rankVO.getScoreTxt(i)+obj.num;
			};
			var str="";
			if(obj.rank<1){
				box.ranktxt.text="排行：未上榜";
				}else{
				box.ranktxt.text="排行："+obj.rank;
			}
		}
		return hasAward;
	}

	__proto.timeM=function(){
		var t=GlobalAPI.rankVO.getOvertime()>>0;
		this.timetxt.text=DateUtil.getTimeString(t,100);
		if(t<1){
			Laya.stage.timer.clear(this,this.timeM);
			if(GlobalAPI.ispackge==false && Browser.window.h5api.isLogin()){
				GlobalAPI.rankVO.onSubmitScore(Handler.create(this,this.update));
				}else{
				this.update();
			}
			return true;
		}
		return false;
	}

	__proto.show=function(val){
		GlobalAPI.showBg(val);
		if(val){
			GlobalAPI.moneyBar.show(true,this);
			GlobalAPI.root.addChild(this);
			this.update();
			var bool=this.timeM();
			if(bool==false){
				Laya.stage.timerLoop(1000,this,this.timeM);
			}
			if(GlobalAPI.ispackge==false){
				this.loginbtn.visible=this.tiptxt.visible=!Browser.window.h5api.isLogin();
				if(bool==false && Browser.window.h5api.isLogin()){
					GlobalAPI.rankVO.onSubmitScore(Handler.create(this,this.update));
				}
			}
			}else{
			Laya.stage.timer.clear(this,this.timeM);
			GlobalAPI.soundMgr.playbtn();
			SaveDataMgr.onlinesave();
		}
		GlobalAPI.showAni(this,val);
	}

	RankView.getInstance=function(){
		if(!RankView.instance)new RankView;
		return RankView.instance;
	}

	RankView.instance=null;
	return RankView;
})(RankViewUI)


/**
*复活界面
*@author guowc
*
*/
//class game.view.ReviveView extends ui.ReviveViewUI
var ReviveView=(function(_super){
	function ReviveView(){
		this.time=NaN;
		this._show=false;
		ReviveView.__super.call(this);
		if(ReviveView.instance)return;
		ReviveView.instance=this;
		this.cacheAs="bitmap";
		this.on("click",this,this.onClick);
	}

	__class(ReviveView,'game.view.ReviveView',_super);
	var __proto=ReviveView.prototype;
	__proto.onClick=function(evt){
		if((evt.target instanceof laya.ui.Button )){
			GlobalAPI.soundMgr.playbtn();
		}
		switch(evt.target){
			case this.againbtn:
				this.show(false);
				GlobalAPI.levelMgr.againLevelM();
				break ;
			case this.revivebtn:
				AdView.getInstance().showadtip("观看广告可以复活",Handler.create(this,this.adhandler),this);
				break ;
			case this.outbtn:
				this.show(false);
				GlobalAPI.levelMgr.failLevel();
				break ;
			}
	}

	__proto.adhandler=function(obj){
		if(obj==10001){
			this.show(false);
			GlobalAPI.levelMgr.reviveM();
		}
	}

	__proto.updatesize=function(){
		if(this._show){
			this.x=MapData.stageW-this.width>>1;
			this.y=MapData.stageH-this.height>>1;
		}
	}

	__proto.show=function(val){
		this._show=val;
		if(val){
			this.time=Browser.now();
			GlobalAPI.showBg(true);
			this.revivebtn.disabled=false;
			GlobalAPI.root.addChild(this);
			GlobalAPI.heartMgr.pause();
			GlobalAPI.systembar.mouseEnabled=false;
			this.againbtn.disabled=GlobalAPI.levelMgr.sort==1;
			this.revivebtn.label=StringInfo.getString("免费复活");
			GlobalAPI.showAni(this);
			}else{
			this.parent.removeChild(this);
			GlobalAPI.heartMgr.play();
			GlobalAPI.systembar.mouseEnabled=true;
			GlobalAPI.showBg(false);
			GlobalAPI.levVO.passtime+=Browser.now()-this.time;
		}
	}

	ReviveView.getInstance=function(){
		if(!ReviveView.instance)new ReviveView;
		return ReviveView.instance;
	}

	ReviveView.instance=null;
	return ReviveView;
})(ReviveViewUI)


//class game.view.SaveView extends ui.SaveViewUI
var SaveView=(function(_super){
	function SaveView(){
		SaveView.__super.call(this);
		if(SaveView.instance)return;
		SaveView.instance=this;
		this.okbtn.on("click",this,this.onclick);
	}

	__class(SaveView,'game.view.SaveView',_super);
	var __proto=SaveView.prototype;
	__proto.onclick=function(evt){
		GlobalAPI.soundMgr.playbtn();
		if(this.okbtn.label=="重新存档"){
			SaveDataMgr.onlinesave(true);
			}else{
			SaveDataMgr.onlinedown();
		}
	}

	__proto.save=function(loading,info){
		(loading===void 0)&& (loading=true);
		(info===void 0)&& (info="正在存档...");
		this.infotxt.text=info;
		this.okbtn.visible=!loading;
		if(!loading){
			this.okbtn.label="重新存档";
		}
		this.show(true);
	}

	__proto.down=function(loading,info){
		(loading===void 0)&& (loading=true);
		(info===void 0)&& (info="正在读档...");
		this.infotxt.text=info;
		this.okbtn.visible=!loading;
		if(!loading){
			this.okbtn.label="重新读档";
		}
		this.show(true);
	}

	__proto.show=function(val){
		GlobalAPI.showBg(val);
		if(val){
			GlobalAPI.root.addChild(this);
		}
		GlobalAPI.showAni(this,val);
	}

	SaveView.getInstance=function(){
		if(!SaveView.instance)new SaveView;
		return SaveView.instance;
	}

	SaveView.instance=null;
	return SaveView;
})(SaveViewUI)


//class game.view.SignView extends ui.SignViewUI
var SignView=(function(_super){
	function SignView(){
		this.awards=null;
		this.time=0;
		SignView.__super.call(this);
		if(SignView.instance)return;
		SignView.instance=this;
		this.cacheAs="bitmap";
		this.time=3600*24*1000;
		var box;
		this.awards=[800,2000,-8,3500,-15,9000,-50];
		var num=NaN;
		for(var i=0;i<7;i++){
			box=this["box"+i];
			box.daytxt.text="第"+(i+1)+"天";
			num=this.awards[i];
			if(num<0){
				box.gem.visible=true;
				box.gold.visible=false;
				num=-num;
				}else{
				box.gem.visible=false;
				box.gold.visible=true;
			}
			box.gemtxt.text=num.toString();
			box.txt.visible=false;
		}
		this.on("click",this,this.onClick);
	}

	__class(SignView,'game.view.SignView',_super);
	var __proto=SignView.prototype;
	__proto.onClick=function(evt){
		if((evt.target instanceof laya.ui.Button )){
			GlobalAPI.soundMgr.playbtn();
		}
		switch(evt.target){
			case this.btn1:
				this.getAward(1);
				break ;
			case this.btn2:
				AdView.getInstance().showadtip("观看广告，可获得 3 倍奖励",Handler.create(this,this.adhandler),this);
				break ;
			case this.closebtn:
			case this.btn3:
				this.show(false);
				break ;
			}
	}

	__proto.getAward=function(val){
		var obj=GlobalAPI.heroproxy.getSignTime();
		var day=obj.day;
		var gem=this.awards[day]*val;
		GlobalAPI.heroproxy.addMoney(gem,false);
		day+=1;
		var box;
		for(var i=0;i<day;i++){
			box=this["box"+i];
			box.txt.visible=true;
		}
		if(day>6){
			day=0;
		}
		obj.day=day;
		obj.time=(Browser.now()-(new Date().getTimezoneOffset()*60000))/this.time>>0;
		GlobalAPI.heroproxy.setSignTime(obj);
		if(gem<0){
			QuickMoveTip.show("恭喜您获得："+-gem+"颗钻石");
			}else{
			QuickMoveTip.show("恭喜您获得："+gem+"个金币");
		}
		SaveDataMgr.save(false);
		SaveDataMgr.onlinesave(true);
		GlobalAPI.moneyBar.fly(gem);
		this.update();
	}

	__proto.adhandler=function(obj){
		if(obj==10001){
			if(GlobalAPI.isPC){
				this.getAward(2);
				}else{
				this.getAward(3);
			}
		}
	}

	__proto.update=function(){
		var tt=(Browser.now()-(new Date().getTimezoneOffset()*60000))/this.time>>0;
		var id=tt-GlobalAPI.heroproxy.getSignTime().time;
		var bool=true;
		this.btn1.visible=this.btn2.visible=this.adimg.visible=true;
		this.btn3.visible=false;
		if(GlobalAPI.adtime<1){
			this.btn2.visible=this.adimg.visible=false;
			this.btn1.x=this.btn3.x;
			}else{
			this.btn2.visible=this.adimg.visible=true;
			this.btn1.x=44;
		}
		if(id==1){
			}else if(id==0){
			this.btn1.visible=this.btn2.visible=this.adimg.visible=false;
			this.btn3.visible=true;
			bool=false;
			}else{
			GlobalAPI.heroproxy.getSignTime().day=0;
		};
		var day=GlobalAPI.heroproxy.getSignTime().day;
		if(day==0 && id==0){
			day=7;
		};
		var box;
		for(var i=0;i<day;i++){
			box=this["box"+i];
			box.txt.visible=true;
		}
		return bool;
	}

	__proto.show=function(val){
		if(val){
			GlobalAPI.showBg(true);
			GlobalAPI.root.addChild(this);
			GlobalAPI.moneyBar.show(true,this);
			this.update();
			}else{
			GlobalAPI.showBg(false);
		}
		GlobalAPI.showAni(this,val);
	}

	SignView.getInstance=function(){
		if(!SignView.instance)new SignView;
		return SignView.instance;
	}

	SignView.instance=null;
	return SignView;
})(SignViewUI)


//class game.view.StartView extends ui.StartViewUI
var StartView=(function(_super){
	function StartView(){
		this._show=false;
		StartView.__super.call(this);
		if(StartView.instance)return;
		StartView.instance=this;
		this.startbtn.on("click",this,this.onClick);
		this.helpbtn.on("click",this,this.onClick);
		this.systembtn.on("click",this,this.onClick);
		GlobalAPI.soundMgr.playMusic("bgsound");
		if(GlobalAPI.ispackge){
			this.logo.visible=false;
		}
	}

	__class(StartView,'game.view.StartView',_super);
	var __proto=StartView.prototype;
	//SoundManager.setMusicVolume(0.5);
	__proto.onClick=function(evt){
		GlobalAPI.soundMgr.playbtn();
		switch(evt.target){
			case this.startbtn:
				this.show(false);
				break ;
			case this.helpbtn:
				HelpView.getInstance().show(true);
				break ;
			case this.systembtn:
				SystemsetView.getInstance().show(true);
				break ;
			}
	}

	__proto.show=function(val){
		this._show=val;
		if(val){
			GlobalAPI.tilebg();
			this.updatesize();
			GlobalAPI.root.addChild(this);
			}else{
				 try {
						window["msg"]("gamestart"); 
      			 	 } catch (error) {
           			 		console.log(error)
       				 }
       			 try {
						window.webkit.messageHandlers["msg"].postMessage("gamestart");
       				 } catch(error) {
          			 	 console.log(error)
      				 }
			GlobalAPI.soundMgr.playMusic("bgsound");
			GlobalAPI.isStart=true;
			MoveView.getInstance().reset();
			this.parent.removeChild(this);
			LevelView.getInstance().setPage(LevelMgr.getInstance().getSortNum(0));
			LevelView.getInstance().updateLevel();
			LevelView.getInstance().show(true);
		}
	}

	__proto.updatesize=function(){
		if(this._show){
			GlobalAPI.autoscale(this);
		}
	}

	__proto.onClick1=function(){
		var htmlC=this.drawToCanvas(100,100,0,0);
		var _texture=new Texture(htmlC);
		var sp2=new Sprite();
		sp2.x=300;
		sp2.graphics.drawTexture(_texture,0,0,100,100);
		Laya.stage.addChild(sp2);
	}

	StartView.getInstance=function(){
		if(!StartView.instance)new StartView;
		return StartView.instance;
	}

	StartView.instance=null;
	return StartView;
})(StartViewUI)


/**
*系统栏
*@author guowc
*
*/
//class game.view.SystemBar extends ui.SystemBarUI
var SystemBar=(function(_super){
	function SystemBar(){
		this.clipbar=null;
		this._show=false;
		this.headbar=null;
		this.headbar1=null;
		this.bulletnum=null;
		this.goldnum=null;
		this.foodnum=null;
		this.skillbarscale=1.4;
		this.skillbar=null;
		this.skilladdbar=null;
		this.combotip=null;
		this.proxy=null;
		SystemBar.__super.call(this);
		if(SystemBar.instance)return;
		SystemBar.instance=this;
		this.cacheAs="bitmap";
		this.init();
	}

	__class(SystemBar,'game.view.SystemBar',_super);
	var __proto=SystemBar.prototype;
	__proto.init=function(){
		this.proxy=HeroProxy.getInstance();
		this.bulletnum=new NumberEffect;
		this.bulletnum.setAsset("num_e",PathMgr.path_miniani+"number.json",PathMgr.path_miniani+"number"+".ani",
		SkinMgr.numErect,6);
		this.addChild(this.bulletnum);
		this.goldnum=new NumberEffect;
		this.goldnum.setAsset("num_n",PathMgr.path_miniani+"number.json",PathMgr.path_miniani+"number"+".ani",
		SkinMgr.numNrect,5);
		this.addChild(this.goldnum);
		this.headbar=new HeadBar;
		this.headbar1=new HeadBar;
		this.headbar.x=this.pause.x+this.pause.width+5;
		this.headbar1.y=this.headbar.y=5;
		this.headbar1.x=282;
		this.addChild(this.headbar);
		this.addChild(this.headbar1);
		this.skillbar=new SkillBar;
		this.skillbar.x=250;
		this.addChild(this.skillbar);
		this.skilladdbar=new SkillAddBar;
		this.combotip=new ComboTip;
		this.combotip.y=160;
		this.addChild(this.combotip);
		this.clipbar=ClipBarAll.getInstance();
		this.addChild(this.clipbar);
		this.pause.on("click",this,this.pauseclick);
		if(GlobalAPI.isPC){
			Laya.stage.on("keydown",this,this.keydown);
			}else{
			GlobalAPI.keyboard=ControlView.getInstance();
			GlobalAPI.keyboard.setContainer(this);
			this.headbar.scale(1.2,1.2,true);
			this.skillbar.scale(this.skillbarscale,this.skillbarscale,true);
			this.skilladdbar.scale(this.skillbarscale,this.skillbarscale,true);
		}
		DepthManager.bringToTop(this.pause);
		DepthManager.bringToTop(this.skillbar);
		DepthManager.bringToTop(this.clipbar);
		this.hitArea=new Rectangle(0,0,MapData.stageW,MapData.stageH);
	}

	__proto.keydown=function(evt){
		if(!PauseView.getInstance().parent && this._show && evt.keyCode==27){
			PauseView.getInstance().show(true);
		}
	}

	__proto.onblur=function(evt){
		GlobalAPI.heartMgr.pause();
	}

	__proto.pauseclick=function(evt){
		GlobalAPI.soundMgr.playbtn();
		PauseView.getInstance().show(true);
	}

	__proto.show=function(val){
		this._show=val;
		if(val){
			GlobalAPI.setMouse("crosshair");
			this.skillbar.start();
			if(GlobalAPI.isPC==false){
				GlobalAPI.keyboard.show(true);
			}
			GlobalAPI.root.addChild(this);
			this.headbar.setHead(this.proxy.getBaseRoleVO().id);
			this.headbar1.setHead(this.proxy.getBaseRoleVO1().id);
			this.headbar1.visible=GlobalAPI.heroproxy.getDouble();
			this.updateGoldNum(true);
			this.headbar.y=this.headbar1.y=-60;
			Tween.to(this.headbar,{y:5,ease:Ease.backOut},800);
			Tween.to(this.headbar1,{y:5,ease:Ease.backOut},800);
			this.update();
			this.updatesize();
			}else{
			GlobalAPI.setMouse("auto");
			this.combotip.reset();
			this.skillbar.reset();
			this.skilladdbar.reset();
			if(GlobalAPI.isPC==false){
				GlobalAPI.keyboard.show(false);
			}
			GlobalAPI.root.removeChild(this);
		}
		TipArrow.getInstance().show(false,null);
	}

	__proto.update=function(){
		this.updatehp(true);
		this.updateExp(true);
		this.updateGoldNum();
	}

	__proto.updatesize=function(){
		if(this._show){
			this.combotip.x=MapData.stageW-100;
			this.bulletnum.x=MapData.stageW-30;
			this.bulletnum.y=5;
			this.gold.x=MapData.stageW-32;
			this.hitArea.width=MapData.stageW;
			this.hitArea.height=MapData.stageH;
			TipArrow.getInstance().setarrow(MapData.stageW-60,MapData.stageH*0.5-80);
			if(GlobalAPI.isPC){
				this.clipbar.y=MapData.stageH-80;
				this.skilladdbar.y=MapData.stageH-75;
				this.skillbar.y=MapData.stageH+this.skillbar.height;
				Tween.to(this.skillbar,{y:MapData.stageH-75,ease:Ease.backOut},800);
				this.skilladdbar.x=this.skillbar.x+72*this.skillbar.getSkillLen();
				}else{
				GlobalAPI.keyboard.update();
				this.clipbar.y=this.skilladdbar.y=this.skillbar.y=6;
				this.clipbar.setDouble(false);
				this.skillbar.x=MapData.stageW-50;
				this.skillbar.y=MapData.stageH-120;
				this.skilladdbar.x=330;
				this.gold.y=130;
			}
			this.goldnum.x=this.gold.x-80;
			this.goldnum.y=this.gold.y+2;
		}
	}

	__proto.updatehp=function(fast){
		(fast===void 0)&& (fast=false);
		this.headbar.setHp(GlobalAPI.heroproxy.getBaseRoleVO().hp,GlobalAPI.heroproxy.getBaseRoleVO().maxhp,fast);
		if(GlobalAPI.heroproxy.getDouble()){
			this.headbar1.setHp(GlobalAPI.heroproxy.getBaseRoleVO1().hp,GlobalAPI.heroproxy.getBaseRoleVO1().maxhp,fast);
		}
	}

	__proto.updateExpOne=function(roleid,exp,texp,ismax){
		(ismax===void 0)&& (ismax=false);
		if(this.proxy.getBaseRoleVO().skin==roleid){
			this.headbar.setExp(exp,texp,ismax);
			}else{
			this.headbar1.setExp(exp,texp,ismax);
		}
	}

	__proto.updateExp=function(fast){
		(fast===void 0)&& (fast=false);
		var obj;
		var vo=this.proxy.getBaseRoleVO();
		var exp=this.proxy.getExp(vo.id);
		if(exp>=this.proxy.getBaseRoleVO().maxexp){
			this.headbar.setExp(1,1,true,true);
			this.headbar.setLev(vo.maxlev);
			}else{
			obj=GlobalAPI.heroinfo.getLevAndExp(exp);
			this.headbar.setExp(obj.exp,obj.texp,false,false);
			this.headbar.setLev(obj.lev);
		}
		if(GlobalAPI.heroproxy.getDouble()){
			vo=this.proxy.getBaseRoleVO1();
			exp=this.proxy.getExp(vo.id);
			if(exp>=this.proxy.getBaseRoleVO1().maxexp){
				this.headbar1.setExp(1,1,true,true);
				this.headbar1.setLev(vo.maxlev);
				}else{
				obj=GlobalAPI.heroinfo.getLevAndExp(exp);
				this.headbar1.setExp(obj.exp,obj.texp,false,false);
				this.headbar1.setLev(obj.lev);
			}
		}
	}

	__proto.updateGoldNum=function(fast){
		(fast===void 0)&& (fast=false);
		this.goldnum.setNumAni(GlobalAPI.levVO.levelgold,fast,20,1);
	}

	SystemBar.getInstance=function(){
		if(!SystemBar.instance)
			new SystemBar;
		return SystemBar.instance;
	}

	SystemBar.instance=null;
	return SystemBar;
})(SystemBarUI)


//class game.view.SystemsetView extends ui.SystemsetViewUI
var SystemsetView=(function(_super){
	function SystemsetView(){
		this._stageh=NaN;
		SystemsetView.__super.call(this);
		if(SystemsetView.instance)return;
		SystemsetView.instance=this;
		this.cacheAs="bitmap";
		this.on("click",this,this.onClick);
		this.resolution.max=100;
		this.resolution.min=0;
		this.resolution.tick=1;
		this.resolution.changeHandler=new Handler(this,this.onChange)
	}

	__class(SystemsetView,'game.view.SystemsetView',_super);
	var __proto=SystemsetView.prototype;
	__proto.onClick=function(evt){
		switch(evt.target){
			case this.musicbtn:
				if(SoundMgr.musicLock){
					GlobalAPI.soundMgr.pauseMusic(false);
					this.musicno.visible=false;
					}else{
					GlobalAPI.soundMgr.pauseMusic(true);
					this.musicno.visible=true;
				}
				break ;
			case this.soundbtn:
				SoundMgr.soundLock=!SoundMgr.soundLock;
				this.soundno.visible=SoundMgr.soundLock;
				break ;
			case this.okbtn:
				this.show(false);
				this.ok();
				break ;
			}
		if((evt.target instanceof laya.ui.Button )){
			GlobalAPI.soundMgr.playbtn();
		}
	}

	__proto.ok=function(){
		if(MapData.stageH!=this._stageh){
			MapData.stageH=this._stageh;
			MapData.stageW=this._stageh*MapData.para+0.5>>0;
			this.stage.size(MapData.stageW,MapData.stageH);
			Main.onResize();
		}
	}

	__proto.onChange=function(value){
		this._stageh=MapData.baseStageH+value*2;
		this.txt.text=value+"%";
	}

	/*+"----"+Browser.width+"_"+Browser.height
	+"****"+Browser.pixelRatio;*/
	__proto.show=function(val){
		if(val){
			this.soundno.visible=SoundMgr.soundLock;
			this.musicno.visible=SoundMgr.musicLock;
			this._stageh=MapData.stageH;
			this.resolution.value=(this._stageh-MapData.baseStageH)/2;
			this.onChange(this.resolution.value);
			GlobalAPI.showAni(this);
			GlobalAPI.showBg(true);
			GlobalAPI.root.addChild(this);
			}else{
			GlobalAPI.showBg(false);
		}
		GlobalAPI.showAni(this,val);
	}

	SystemsetView.getInstance=function(){
		if(!SystemsetView.instance)new SystemsetView;
		return SystemsetView.instance;
	}

	SystemsetView.instance=null;
	return SystemsetView;
})(SystemsetViewUI)


//class game.view.TaskView extends ui.TaskViewUI
var TaskView=(function(_super){
	function TaskView(){
		this.idx=0;
		this.boxs=null;
		TaskView.__super.call(this);
		if(TaskView.instance)return;
		TaskView.instance=this;
		this.cacheAs="bitmap";
		this.boxs=[];
		var box;
		for(var i=0;i<GlobalAPI.taskVO.tasknum;i++){
			box=this["box"+i];
			this.boxs.push(box);
			box.txt.text="x100";
			box.btn.on("click",this,this.boxClick);
		}
		this.on("click",this,this.onClick);
	}

	__class(TaskView,'game.view.TaskView',_super);
	var __proto=TaskView.prototype;
	__proto.onClick=function(evt){
		if((evt.target instanceof laya.ui.Button )){
			GlobalAPI.soundMgr.playbtn();
		}
		switch(evt.target){
			case this.closebtn:
				this.show(false);
				break ;
			}
	}

	__proto.boxClick=function(evt){
		var box=evt.target.parent;
		this.idx=this.boxs.indexOf(box);
		if(evt.target==box.btn){
			if(box.btn.label=="观看"){
				AdView.getInstance().showadtip("观看广告，完成任务；可获得 10 颗钻石",Handler.create(this,this.adhandler,[box.btn]),this);
				}else{
				this.getAward(1);
			}
		}
	}

	__proto.adhandler=function(btn,obj){
		if(obj==10001){
			GlobalAPI.taskVO.watchad=1;
			GlobalAPI.taskVO.save();
			btn.label="领取";
			this.update();
		}
	}

	__proto.getAward=function(num){
		var task=GlobalAPI.heroproxy.getTask();
		var gem=GlobalAPI.taskVO.getAwardGem(task.task[this.idx].id)*num;
		GlobalAPI.taskVO.getAward(this.idx,GlobalAPI.heroproxy.getTask(),gem);
		this.update();
		GlobalAPI.moneyBar.fly(gem);
	}

	__proto.update=function(){
		GlobalAPI.taskVO.save();
		var hasAward=false;
		GlobalAPI.taskVO.setTask(GlobalAPI.heroproxy.getTask());
		var box;
		var task=GlobalAPI.heroproxy.getTask();
		var tasks=task.task;
		var obj;
		for(var i=0;i<GlobalAPI.taskVO.tasknum;i++){
			box=this.boxs[i];
			obj=tasks[i];
			box.infotxt.text=GlobalAPI.taskVO.getIdxInfo(i);
			var now=obj.now>obj.all ? obj.all :obj.now;
			box.pertxt.text=now+"/"+obj.all;
			box.perbar.value=now/obj.all;
			var award=GlobalAPI.taskVO.getAwardGem(obj.id);
			box.gold.visible=award>0;
			box.gem.visible=award<0;
			if(award>0){
				}else{
				award=-award;
			}
			box.txt.text="x"+award;
			box.img.visible=box.btn.visible=false;
			box.btn.visible=true;
			box.btn.disabled=true
			if(obj.getaward){
				box.img.visible=true;
				box.btn.visible=false;
				}else if(GlobalAPI.taskVO.getTaskFinish(i,task)){
				hasAward=true;
				box.btn.disabled=false;
			}
			if(i==5 && box.btn.disabled){
				box.btn.disabled=false;
				box.btn.label="观看";
			}
		}
		return hasAward;
	}

	__proto.show=function(val){
		if(val){
			GlobalAPI.showBg(true);
			GlobalAPI.moneyBar.show(true,this);
			GlobalAPI.root.addChild(this);
			this.update();
			}else{
			GlobalAPI.showBg(false);
			SaveDataMgr.onlinesave();
		}
		GlobalAPI.showAni(this,val);
	}

	TaskView.getInstance=function(){
		if(!TaskView.instance)new TaskView;
		return TaskView.instance;
	}

	TaskView.instance=null;
	return TaskView;
})(TaskViewUI)


//class game.view.UnlockView extends ui.UnlockViewUI
var UnlockView=(function(_super){
	function UnlockView(){
		UnlockView.__super.call(this);
		if(UnlockView.instance)return;
		UnlockView.instance=this;
		this.on("click",this,this.onClick);
	}

	__class(UnlockView,'game.view.UnlockView',_super);
	var __proto=UnlockView.prototype;
	__proto.onClick=function(evt){
		if((evt.target instanceof laya.ui.Button )){
			GlobalAPI.soundMgr.playbtn();
		}
		switch(evt.target){
			case this.closebtn:
				this.show(false);
				break ;
			case this.okbtn:
				if(GlobalAPI.heroproxy.useMoney(-200)){
					GlobalAPI.heroproxy.unlockweaponbox();
					WeaponEquipView.getInstance().restore();
					this.show(false);
					}else{
					QuickMoveTip.show(StringInfo.getString("钻石不足"));
				}
				break ;
			}
	}

	__proto.show=function(val){
		if(val){
			GlobalAPI.showBg(true);
			GlobalAPI.root.addChild(this);
			}else{
			GlobalAPI.root.addChild(WeaponEquipView.getInstance());
		}
		GlobalAPI.showAni(this,val);
	}

	UnlockView.getInstance=function(){
		if(!UnlockView.instance)new UnlockView;
		return UnlockView.instance;
	}

	UnlockView.instance=null;
	return UnlockView;
})(UnlockViewUI)


/**
*加载界面
*@author guowc
*
*/
//class LoadView extends ui.LoadViewUI
var LoadView=(function(_super){
	function LoadView(){
		this.nowid=0;
		this.totalNum=8;
		LoadView.__super.call(this);
		if(LoadView.instance)return;
		LoadView.instance=this;
		this.link.on("click",this,this.onclick);
		this.update();
	}

	__class(LoadView,'LoadView',_super);
	var __proto=LoadView.prototype;
	__proto.onclick=function(evt){
		Browser.window.location.reload();
	}

	__proto.update=function(){
		this.x=MapData.stageW-this.width>>1;
	}

	//graphics.drawRect(0,0,MapData.stageW,MapData.stageH,"#ff6600");
	__proto.totalPercent=function(per){
		this.allbar.value=per;
	}

	/*tloadui.width=wid;
	tltt.x=tloadui.x+wid;
	tperTxt.text=per+"%";*/
	__proto.loading=function(per){
		this.nowbar.value=per;
		if(per==1){
			this.nowid+=1;
		}
		this.totalPercent((per+this.nowid)/this.totalNum);
	}

	__proto.dispose=function(){
		this.link.offAll();
		if(this.parent)
			this.parent.removeChild(this);
	}

	LoadView.getInstance=function(){
		if(!LoadView.instance)
			new LoadView;
		return LoadView.instance;
	}

	LoadView.instance=null;
	return LoadView;
})(LoadViewUI)


/**
*角色
*@author guowc
*
*/
//class game.Body.Role extends game.Body.HitJumpAct
var Role=(function(_super){
	function Role(){
		this.bleveldis=16;
		this.isBlevel=false;
		this.dx=NaN;
		this.dy=NaN;
		this.ang=0;
		this.rotationAng=0;
		this.rotationAngAni=0;
		Role.__super.call(this);
	}

	__class(Role,'game.Body.Role',_super);
	var __proto=Role.prototype;
	//cacheAs="normal";
	__proto.move=function(dx,dy,dir){
		(dir===void 0)&& (dir=true);
		game.Body.SkinAct.prototype.move.call(this,dx,dy,dir);
		if(!this.touchGround){
			if(this.isMount){
				this.mount.updateSkin("J_",this._dir);
				this.showRole("M_");
				}else{
				if(this.isWater){
					this.showRole("W_");
					}else{
					if(this.isJump){
						this.showRole("J_");
						}else{
						if(this.inbevel==false && this.intypeY==0)
							this.showRole("D_");
					}
				}
			}
		}
	}

	__proto.jump=function(){
		_super.prototype.jump.call(this);
		if(this.isJump){
			if(this.isMount){
				this.mount.updateSkin("J_",this._dir);
				}else{
				if(this.isWater){
					this.showRole("W_");
					}else{
					this.showRole("J_");
				}
			}
		}
	}

	__proto.step=function(){
		if(this.isBlevel){
			this.blevelmove();
		}
		game.Body.JumpAct.prototype.step.call(this);
	}

	__proto.stop=function(){
		if(!this.isMount){
			if(!this.touchGround){
				if(this.isWater){
					this.showRole("W_");
					}else{
					if(this.isJump){
						this.showRole("J_");
						}else{
						this.showRole("D_");
					}
				}
				}else{
				this.showRole("S_");
			}
			}else{
			this.showRole("M_");
			if(!this.touchGround){
				this.mount.updateSkin("J_",this._dir);
				}else{
				this.mount.updateSkin("S_",this._dir);
			}
		}
	}

	__proto.blevelset=function(x,y){
		var hei=this._rect.y+this._rect.height>>0;
		var type=MapData.getType(x,hei);
		if(type > 0 && type<MapData.bevel){
			y=this.dropFramebevel(x,hei);
			}else{
			type=MapData.getType(x,hei+MapData.boxH2);
			if(type > 0 && type<MapData.bevel){
				y=this.dropFramebevel(x,hei+MapData.boxH2);
				}else{
				type=MapData.getType(x,hei-MapData.boxH2);
				if(type > 0 && type<MapData.bevel){
					y=this.dropFramebevel(x,hei-MapData.boxH2);
				}else{}
			}
		}
		return y;
	}

	__proto.blevelmove=function(){
		if(this.touchGround){
			var x0=this._rect.x-this.bleveldis>>0;
			var x1=this._rect.x+this.bleveldis>>0;
			var y0=0;
			var y1=0;
			y0=y1=this._rect.y+this._rect.height>>0;
			y0=this.blevelset(x0,y0);
			y1=this.blevelset(x1,y1);
			this.dy=y1-y0;
			this.dx=x1-x0;
			if(this.dx==0 && this.dy==0){
				this.rotationAng=0;
				}else{
				this.ang=Math.atan2(this.dy,this.dx);
				this.rotationAng=this.ang*180/Math.PI>>0;
			}
			}else{
			if(this.rotationAng<-5){
				this.rotationAng+=5;
				}else if(this.rotationAng>5){
				this.rotationAng-=5;
				}else{
				this.rotationAng=0;
			}
		}
		if(this.rotationAngAni!=this.rotationAng){
			if(this.rotationAngAni+6<this.rotationAng){
				this.rotationAngAni+=6;
				}else if(this.rotationAngAni-6>this.rotationAng){
				this.rotationAngAni-=6;
				}else{
				this.rotationAngAni=this.rotationAng;
			}
			this.rotation=this.rotationAngAni;
		}
	}

	return Role;
})(HitJumpAct)


/**
*基础兵
*@author guowc
*
*/
//class game.role.Enemy extends game.Body.Role
var Enemy=(function(_super){
	function Enemy(){
		this.isBoss=false;
		this.eyemc=null;
		this.isAttacklock=false;
		this.loseAttack=false;
		this.jumpTim=-13;
		this.firemc=null;
		this.dis=NaN;
		this.spt=null;
		this.sptd=null;
		this.time=0;
		this._think=0;
		this.shootpt=null;
		this.shootGroundpt=null;
		this.seachDis=168;
		//Y寻找距离
		this.minAttackDis=128;
		//最小攻击距离
		this.go=0;
		//受伤时间断
		this._attack=false;
		//攻击状态
		this._attacktime=0;
		this._attackGay=100;
		//攻击间隔
		this._hurt=0;
		//受伤状态
		this.vo=null;
		this.ex=0;
		this.ey=0;
		this.speed=0;
		this.startSpeed=0;
		this.tempSpeed=2;
		this.isJumpOver=false;
		this.isDropOver=true;
		this.maxw=0;
		this.tmpArray=null;
		this.isAttack=true;
		this.tmpt=new Point;
		Enemy.__super.call(this);
		this.areaNum=20;
		this.tmpArray=[];
		this.showHPBar(true);
		this.bodygay=22;
	}

	__class(Enemy,'game.role.Enemy',_super);
	var __proto=Enemy.prototype;
	__proto.step=function(){
		if(this._pause){
			return;
		}
		if(this.isDie && this.diemovespeed>0){
			this.diemove();
			}else{
			this.ai();
		}
		this.tmpt.x=this._rect.x+this.bodyWid;
		this.tmpt.y=this._rect.y+this._rect.height;
		var type=MapData.isHurt(this.tmpt.x,this.tmpt.y);
		if(type<1){
			this.tmpt.x=this._rect.x-this.bodyWid;
			type=MapData.isHurt(this.tmpt.x,this.tmpt.y);
			if(type<1){
				this.tmpt.y=this._rect.y;
				type=MapData.isHurt(this.tmpt.x,this.tmpt.y);
				if(type<1){
					this.tmpt.x=this._rect.x+this.bodyWid;
					type=MapData.isHurt(this.tmpt.x,this.tmpt.y);
				}
			}
		}
		if(type>MapData.hurtboxSort){
			if(this.hurt(2)){
				GlobalAPI.sceneRoleMgr.removeEnemy(this.baseRoleData.id,true,0,-2);
				GlobalAPI.sceneRoleMgr.addbloods(true,this._pt);
				}else if(Math.random()*5<1){
				GlobalAPI.sceneRoleMgr.addbloods(false,this._pt);
			}
		}
		_super.prototype.step.call(this);
	}

	__proto.move=function(dx,dy,dir){
		(dir===void 0)&& (dir=true);
		_super.prototype.move.call(this,dx,dy,dir);
	}

	__proto.diemove=function(){
		if(GlobalAPI.sceneRoleMgr.isDispose){
			this.dispose();
			return;
		}
		if(this.jumpTim<0){
			this.orderJump(this.jumpTim-this.diemovespeed*0.1);
			this.jumpTim=0;
			}else if(this.isWater || this.hitWallX || this.touchGround){
			this.dispose();
		}
		if(this.hitWallX){
			this.ex=-this.ex;
		}
		if(this.ex!=0){
			this.move(this._pt.x+this.ex,this.y);
		}
	}

	__proto.isAttackM=function(){
		return true;
	}

	__proto.startNewFire=function(id){
		if(this.fireing==0 && !this.firemc){
			this.firemc=GlobalAPI.miniAniEffect.start(this,0,0,"fire",false,30);
			this.firemc.setPlay(0,true,"fire");
			DepthManager.bringToBottom(this.firemc);
			UIUtils.addFilter(this.role,GlobalAPI.blackFilter);
			if(!this.eyemc){
				this.eyemc=ImgAniEffect.getInstance().start(this,0,0,"fire_eye",false);
				this.eyemc.gotoAndStop(this.baseRoleData.score);
				GlobalAPI.taskVO.fireZombie++;
			}
			this.addChild(this.eyemc);
		}
		this.showRole("R_");
		return game.Body.BaseAct.prototype.startNewFire.call(this,id);
	}

	__proto.ai=function(){
		if(GlobalAPI.nowdouble==false){
			this.shootpt=GlobalAPI.shootpt;
			this.shootGroundpt=GlobalAPI.shootGroundpt;
			}else{
			if(this.shootGroundpt==GlobalAPI.heroGroundPt){
				if(this._pt.distance(GlobalAPI.heroGroundPt.x,GlobalAPI.heroGroundPt.y)>200 &&
					this._pt.distance(GlobalAPI.heroGroundPt2.x,GlobalAPI.heroGroundPt2.y)<200){
					this.shootpt=GlobalAPI.heropt2;
					this.shootGroundpt=GlobalAPI.heroGroundPt2;
				}
				}else{
				if(this._pt.distance(GlobalAPI.heroGroundPt2.x,GlobalAPI.heroGroundPt2.y)>200 &&
					this._pt.distance(GlobalAPI.heroGroundPt.x,GlobalAPI.heroGroundPt.y)<200){
					this.shootpt=GlobalAPI.heropt;
					this.shootGroundpt=GlobalAPI.heroGroundPt;
				}
			}
		}
		if(this.go>0){
			this.go--;
		}
		if(this._attackGay<80){
			this._attackGay++;
			return;
		}
		if(this.fireing>0){
			this.fireing++;
			if(this.fireing>30){
				this.fireing=0;
				GlobalAPI.miniAniEffect.over(this.firemc);
				UIUtils.clearFilter(this.role,ColorFilter);
				this.firemc=null;
				this.eyemc.removeSelf();
			}
			if(this.hurt(1)){
				GlobalAPI.sceneRoleMgr.removeEnemy(this.baseRoleData.id,true,0,-1);
			}
			return;
		}
		if(this.isAttacklock && this.loseAttack){
			this.stop();
			return;
		}
		if(this.ex!=0){
			this.isJumpOver=this.isJumpOver==false ? this.touchGround :this.isJumpOver;
			if(this.isDrop && this.isJumpOver){
				this.tempSpeed=5;
			}
			this.speed=this.touchGround ? this.startSpeed :this.tempSpeed;
			this.ex=this.ex>0 ? this.speed :-this.speed;
		}
		if(this.time<100){
			this.time++;
			}else if(Math.random()*3>>0==1){
			this.startSpeed=this.vo.speed+1;
			this.time=0;
			}else{
			this.startSpeed=this.vo.speed;
			this.time=0;
		}
		if(!this.touchGround){
			if(this.hitWallX){
				if(this._pt.x<this.maxRect.x){
					this.ex=this.speed;
					}else if(this._pt.x>this.maxRect.right){
					this.ex=-this.speed;
				}
			}
			if(this.ex!=0){
				this.move(this._pt.x+this.ex,this._pt.y);
			}
			return;
		}
		if(this._pt.x<this.maxRect.x){
			this.ex=this.speed;
			this.move(this._pt.x+this.ex,this._pt.y);
			return;
			}else if(this._pt.x>this.maxRect.right){
			this.ex=-this.speed;
			this.move(this._pt.x+this.ex,this._pt.y);
			return;
		}
		if(this._pt.y>this.shootGroundpt.y){
			var b=true;
			this.dis=this._pt.y-this.shootGroundpt.y;
			this.dis=this.dis>0 ? this.dis :-this.dis;
			if(this.dis<this.seachDis &&
				((this._pt.x-this.shootGroundpt.x<0 && this.ex<0)|| (this._pt.x-this.shootGroundpt.x>0 && this.ex>0))){
				b=false;
			}
			if(b==true && this.canJump(this.ex)){
				this.orderJump();
				}else if(this.hitWallX){
				if(this._think>=80)
					this._think=Math.random()*80>>0;
				if(this._dir==1){
					this.ex=this.speed;
					}else{
					this.ex=-this.speed;
				}
			}
			}else if(this.hitWallX){
			this.dis=this._pt.y-this.shootGroundpt.y;
			this.dis=this.dis>0 ? this.dis :-this.dis;
			if(this.dis<this.seachDis &&
				((this._pt.x-this.shootGroundpt.x<0 && this.ex>0)|| (this._pt.x-this.shootGroundpt.x>0 && this.ex<0))&&
			this.canJump(this.ex)){
				this.orderJump();
				}else{
				if(this._think>=80)
					this._think=Math.random()*80>>0;
				if(this._dir==1){
					this.ex=this.speed;
					}else{
					this.ex=-this.speed;
				}
			}
		}else if(Math.abs(this._pt.y-this.shootGroundpt.y)<MapData.boxH &&
		((MapData.getType(this._pt.x-MapData.boxW2,this._pt.y+MapData.boxH2)==0 && this._dir==1)
		|| (MapData.getType(this._pt.x+MapData.boxW2,this._pt.y+MapData.boxH2)==0 && this._dir==5))){
			if(this.canJump(this.ex)){
				this.orderJump();
			}
		}
		if(this._think<80){
			this._think++;
			if(this.ex==0)
				this.ex=this._dir==5 ? this.speed :-this.speed;
			}else{
			var dis1=0;
			var dis2=0;
			if(this._hurt<10){
				this._hurt++;
				if(this._hurt==10){
					this.ex=this._dir==5 ? this.speed :-this.speed;
				}
				}else if(this._attack==false){
				dis1=this._pt.y-this.shootGroundpt.y;
				dis1=dis1>0 ? dis1 :-dis1;
				var yes=dis1<this.seachDis;
				if(yes){
					if(Math.abs(this._pt.x-this._shootpt.x)<50 && dis1>this.seachDis){
						yes=false;
					}
				}
				if(yes){
					this.spt=null;
					this.sptd=null;
					if(this.touchGround
						&& this._show
					&& this.shootpt.distance(this._pt.x,this._pt.y)>30
					&& (this.isAttack || this.shootpt.distance(this._pt.x,this._pt.y)<this.minAttackDis)
					&& this.shootpt.distance(this._pt.x,this._pt.y)<(this.vo.rw+Math.random()*10-10)
					&& this.isAttackM()){
						this.isAttacklock=true;
						this.loseAttack=false;
						this.ex=0;
						this._dir=this._pt.x<this.shootGroundpt.x ? 5 :1;
						this.stop();
						this._attack=true;
						this._attacktime=0;
						this.showRole("A_");
						this.role.play(1,false);
						this.role.once("complete",this,this.attackOver);
						}else{
						this.loseAttack=true;
						if(Math.abs(this.shootpt.x-this._pt.x)>60){
							this.ex=this._pt.x<this.shootpt.x ? this.speed :-this.speed;
						}
					}
					}else{
					var pt;
					if(this._pt.y>this.shootGroundpt.y){
						if(this.spt!=null && this.spt.y>this._pt.y){
							this.spt=null;
						}
						if(this.spt==null){
							this.tmpArray.length=0;
							var $each_pt;
							for($each_pt in MapData.jumppts){
								pt=MapData.jumppts[$each_pt];
								if(pt.y<this._groundPt.y){
									this.tmpArray.push(pt);
								}
							}
							var $each_pt;
							for($each_pt in this.tmpArray){
								pt=this.tmpArray[$each_pt];
								if(this.spt==null){
									this.spt=pt;
									}else{
									if(pt.y>this.spt.y){
										this.spt=pt;
										}else if(pt.y==this.spt.y){
										dis1=pt.x-this.shootGroundpt.x;
										dis1=dis1>0 ? dis1 :-dis1;
										dis2=this.spt.x-this.shootGroundpt.x;
										dis2=dis2>0 ? dis2 :-dis2;
										this.spt=dis1<dis2 ? pt :this.spt;
									}
								}
							}
							if(this.spt){
								this.ex=this._groundPt.x>this.spt.x ?-this.speed :this.speed;
							}
							}else{
							if(this._pt.y>this.spt.y){
								if(this._dir==1){
									if(this._pt.x<this.spt.x-MapData.boxW3){
										this.spt=null;
										this.ex=this.speed;
									}
									}else{
									if(this._pt.x>this.spt.x+MapData.boxW3){
										this.spt=null;
										this.ex=-this.speed;
									}
								}
							}
						}
						}else{
						if(this.sptd && this.sptd.y<this._pt.y){
							this.sptd=null;
						}
						if(!this.sptd){
							this.tmpArray.length=0;
							var $each_pt;
							for($each_pt in MapData.droppts){
								pt=MapData.droppts[$each_pt];
								if(pt.y>this._groundPt.y){
									this.tmpArray.push(pt);
								}
							}
							var $each_pt;
							for($each_pt in this.tmpArray){
								pt=this.tmpArray[$each_pt];
								if(!this.sptd){
									this.sptd=pt;
									}else{
									if(pt.y<this.sptd.y){
										this.sptd=pt;
										}else if(pt.y==this.sptd.y){
										dis1=pt.x-this.shootGroundpt.x;
										dis1=dis1>0 ? dis1 :-dis1;
										dis2=this.sptd.x-this.shootGroundpt.x;
										dis2=dis2>0 ? dis2 :-dis2;
										this.sptd=dis1<dis2 ? pt :this.sptd;
									}
								}
							}
							if(this.sptd){
								this.ex=this._groundPt.x>this.sptd.x ?-this.speed :this.speed;
							}
							}else{
							if(this._pt.y<this.sptd.y){
								if(this._dir==1){
									if(this._pt.x<this.sptd.x-MapData.boxW*3){
										this.sptd=null;
										this.ex=this.speed;
									}
									}else{
									if(this._pt.x>this.sptd.x+MapData.boxW*3){
										this.sptd=null;
										this.ex=-this.speed;
									}
								}
							}
						}
					}
				}
				}else if(this._attacktime>-1){
				if(this._attacktime>5){
					this.checkHit=true;
					this._attacktime=-1;
					}else{
					this._attacktime++;
				}
			}
		}
		if(this.ex!=0){
			this.move(this._pt.x+this.ex,this._pt.y);
		}
	}

	__proto.canJump=function(ex){
		var gay=this.bodyWid+2;
		if(MapData.isJumpWall(this._pt.x,this._pt.y-MapData.boxH-MapData.boxH2)||
			MapData.isJumpWall(this._pt.x,this._pt.y-MapData.boxH22-MapData.boxH2)||
		MapData.isJumpWall(this._pt.x,this._pt.y-MapData.boxH3-MapData.boxH2)||
		MapData.isJumpWall(this._pt.x,this._pt.y-MapData.boxH4-MapData.boxH2)){
			this.tempSpeed=this.startSpeed;
			return true;
		}
		if(MapData.isJumpWall(this._pt.x,this._pt.y-MapData.boxH3-gay)||
			(MapData.getType(this._pt.x,this._pt.y-MapData.boxH3-gay)==0 && MapData.getType(this._pt.x,this._pt.y-MapData.boxH4-gay)==0)){
			if((ex<0 &&
				((MapData.getType(this._pt.x-MapData.boxW2,this._pt.y-MapData.boxH2)>MapData.bevel ||
			MapData.getType(this._pt.x-MapData.boxW2,this._pt.y-MapData.boxH2-MapData.boxH3)>MapData.bevel ||
			MapData.getType(this._pt.x-MapData.boxW2,this._pt.y-MapData.boxH2-MapData.boxH4)>MapData.bevel ||
			MapData.getType(this._pt.x-MapData.boxW2,this._pt.y-MapData.boxH2-MapData.boxH22)>MapData.bevel ||
			MapData.getType(this._pt.x-MapData.boxW2,this._pt.y-MapData.boxH2-MapData.boxH)>MapData.bevel)
			&& MapData.getType(this._pt.x-MapData.boxW2,this._pt.y-MapData.boxH2-MapData.boxH5)==0)
			||
			(ex>0 &&
			(MapData.getType(this._pt.x+MapData.boxW2,this._pt.y-MapData.boxH2)>MapData.bevel ||
			MapData.getType(this._pt.x+MapData.boxW2,this._pt.y-MapData.boxH2-MapData.boxH3)>MapData.bevel ||
			MapData.getType(this._pt.x+MapData.boxW2,this._pt.y-MapData.boxH2-MapData.boxH4)>MapData.bevel ||
			MapData.getType(this._pt.x+MapData.boxW2,this._pt.y-MapData.boxH2-MapData.boxH22)>MapData.bevel ||
			MapData.getType(this._pt.x+MapData.boxW2,this._pt.y-MapData.boxH2-MapData.boxH)>MapData.bevel)
			&& MapData.getType(this._pt.x+gay,this._pt.y-MapData.boxH2-MapData.boxH5)==0))){
				this.tempSpeed=2;
				return true;
			}
			if((ex<0 &&
				(MapData.getType(this._pt.x-MapData.boxW-gay,this._pt.y-MapData.boxH2-MapData.boxH3)>MapData.bevel ||
			MapData.getType(this._pt.x-MapData.boxW-gay,this._pt.y-MapData.boxH2-MapData.boxH4)>MapData.bevel ||
			MapData.getType(this._pt.x-MapData.boxW-gay,this._pt.y-MapData.boxH2-MapData.boxH22)>MapData.bevel ||
			MapData.getType(this._pt.x-MapData.boxW-gay,this._pt.y-MapData.boxH2-MapData.boxH)>MapData.bevel)
			&& MapData.getType(this._pt.x-MapData.boxW-gay,this._pt.y-MapData.boxH2-MapData.boxH5)==0)
			||
			(ex>0 &&
			(MapData.getType(this._pt.x+MapData.boxW+gay,this._pt.y-MapData.boxH2-MapData.boxH3)>MapData.bevel ||
			MapData.getType(this._pt.x+MapData.boxW+gay,this._pt.y-MapData.boxH2-MapData.boxH4)>MapData.bevel ||
			MapData.getType(this._pt.x+MapData.boxW+gay,this._pt.y-MapData.boxH2-MapData.boxH22)>MapData.bevel ||
			MapData.getType(this._pt.x+MapData.boxW+gay,this._pt.y-MapData.boxH2-MapData.boxH)>MapData.bevel)
			&& MapData.getType(this._pt.x+gay,this._pt.y-MapData.boxH2-MapData.boxH5)==0
			&& MapData.getType(this._pt.x+MapData.boxW+gay,this._pt.y-MapData.boxH2-MapData.boxH5)==0)){
				this.tempSpeed=2;
				return true;
			}
			if((ex<0 &&
				(MapData.getType(this._pt.x-MapData.boxW22-gay,this._pt.y-MapData.boxH2-MapData.boxH22)>MapData.bevel ||
			MapData.getType(this._pt.x-MapData.boxW22-gay,this._pt.y-MapData.boxH2-MapData.boxH)>MapData.bevel ||
			MapData.getType(this._pt.x-MapData.boxW22-gay,this._pt.y-MapData.boxH2-MapData.boxH3)>MapData.bevel ||
			MapData.getType(this._pt.x-MapData.boxW22-gay,this._pt.y-MapData.boxH2-MapData.boxH4)>MapData.bevel)
			&& MapData.getType(this._pt.x-MapData.boxW22-gay,this._pt.y-MapData.boxH2-MapData.boxH5)==0
			&& MapData.getType(this._pt.x-gay,this._pt.y-MapData.boxH2-MapData.boxH5)==0
			&& (MapData.getType(this._pt.x-gay,this._pt.y+MapData.boxH2)==0 || MapData.getType(this._pt.x-gay,this._pt.y+MapData.boxH2)<MapData.bevel))
			||
			(ex>0 &&
			(MapData.getType(this._pt.x+MapData.boxW22+gay,this._pt.y-MapData.boxH2-MapData.boxH22)>MapData.bevel ||
			MapData.getType(this._pt.x+MapData.boxW22+gay,this._pt.y-MapData.boxH2-MapData.boxH)>MapData.bevel ||
			MapData.getType(this._pt.x+MapData.boxW22+gay,this._pt.y-MapData.boxH2-MapData.boxH3)>MapData.bevel ||
			MapData.getType(this._pt.x+MapData.boxW22+gay,this._pt.y-MapData.boxH2-MapData.boxH4)>MapData.bevel)
			&& MapData.getType(this._pt.x+MapData.boxW22+gay,this._pt.y-MapData.boxH2-MapData.boxH5)==0
			&& MapData.getType(this._pt.x+gay,this._pt.y-MapData.boxH2-MapData.boxH5)==0
			&&(MapData.getType(this._pt.x+gay,this._pt.y+MapData.boxH2)==0 || MapData.getType(this._pt.x+gay,this._pt.y+MapData.boxH2)<MapData.bevel))){
				this.tempSpeed=3;
				return true;
			}
			if((ex<0 &&
				(MapData.getType(this._pt.x-MapData.boxW3-gay,this._pt.y-MapData.boxH2-MapData.boxH4)>MapData.bevel ||
			MapData.getType(this._pt.x-MapData.boxW3-gay,this._pt.y-MapData.boxH2-MapData.boxH3)>MapData.bevel ||
			MapData.getType(this._pt.x-MapData.boxW3-gay,this._pt.y-MapData.boxH2-MapData.boxH22)>MapData.bevel ||
			MapData.getType(this._pt.x-MapData.boxW3-gay,this._pt.y-MapData.boxH2-MapData.boxH)>MapData.bevel)
			&& MapData.getType(this._pt.x-MapData.boxW3-gay,this._pt.y-MapData.boxH2-MapData.boxH5)==0
			&& MapData.getType(this._pt.x-MapData.boxW22-gay,this._pt.y-MapData.boxH2-MapData.boxH5)==0
			&& MapData.getType(this._pt.x-gay,this._pt.y-MapData.boxH2-MapData.boxH5)==0
			&& (MapData.getType(this._pt.x-gay,this._pt.y+MapData.boxH2)==0 || MapData.getType(this._pt.x-gay,this._pt.y+MapData.boxH2)<MapData.bevel))
			||
			(ex>0 &&
			(MapData.getType(this._pt.x+MapData.boxW3+gay,this._pt.y-MapData.boxH2-MapData.boxH4)>MapData.bevel ||
			MapData.getType(this._pt.x+MapData.boxW3+gay,this._pt.y-MapData.boxH2-MapData.boxH3)>MapData.bevel ||
			MapData.getType(this._pt.x+MapData.boxW3+gay,this._pt.y-MapData.boxH2-MapData.boxH22)>MapData.bevel ||
			MapData.getType(this._pt.x+MapData.boxW3+gay,this._pt.y-MapData.boxH2-MapData.boxH)>MapData.bevel)
			&& MapData.getType(this._pt.x+MapData.boxW3+gay,this._pt.y-MapData.boxH2-MapData.boxH5)==0
			&& MapData.getType(this._pt.x+MapData.boxW22+gay,this._pt.y-MapData.boxH2-MapData.boxH5)==0
			&& MapData.getType(this._pt.x+gay,this._pt.y-MapData.boxH2-MapData.boxH5)==0
			&&(MapData.getType(this._pt.x+gay,this._pt.y+MapData.boxH2)==0 || MapData.getType(this._pt.x+gay,this._pt.y+MapData.boxH2)<MapData.bevel))){
				this.tempSpeed=4;
				return true;
			}
			if((ex<0 &&
				(MapData.getType(this._pt.x-MapData.boxW4-gay,this._pt.y-MapData.boxH2-MapData.boxH4)>MapData.bevel ||
			MapData.getType(this._pt.x-MapData.boxW4-gay,this._pt.y-MapData.boxH2-MapData.boxH3)>MapData.bevel ||
			MapData.getType(this._pt.x-MapData.boxW4-gay,this._pt.y-MapData.boxH2-MapData.boxH22)>MapData.bevel ||
			MapData.getType(this._pt.x-MapData.boxW4-gay,this._pt.y-MapData.boxH2-MapData.boxH)>MapData.bevel)
			&& MapData.getType(this._pt.x-MapData.boxW4-gay,this._pt.y-MapData.boxH2-MapData.boxH5)==0
			&& MapData.getType(this._pt.x-MapData.boxW22-gay,this._pt.y-MapData.boxH2-MapData.boxH5)==0
			&& MapData.getType(this._pt.x-gay,this._pt.y-MapData.boxH2-MapData.boxH5)==0
			&& (MapData.getType(this._pt.x-gay,this._pt.y+MapData.boxH2)==0 || MapData.getType(this._pt.x-gay,this._pt.y+MapData.boxH2)<MapData.bevel))
			||
			(ex>0 &&
			(MapData.getType(this._pt.x+MapData.boxW4+gay,this._pt.y-MapData.boxH2-MapData.boxH4)>MapData.bevel ||
			MapData.getType(this._pt.x+MapData.boxW4+gay,this._pt.y-MapData.boxH2-MapData.boxH3)>MapData.bevel ||
			MapData.getType(this._pt.x+MapData.boxW4+gay,this._pt.y-MapData.boxH2-MapData.boxH22)>MapData.bevel ||
			MapData.getType(this._pt.x+MapData.boxW4+gay,this._pt.y-MapData.boxH2-MapData.boxH)>MapData.bevel)
			&& MapData.getType(this._pt.x+MapData.boxW4+gay,this._pt.y-MapData.boxH2-MapData.boxH5)==0
			&& MapData.getType(this._pt.x+MapData.boxW22+gay,this._pt.y-MapData.boxH2-MapData.boxH5)==0
			&& MapData.getType(this._pt.x+gay,this._pt.y-MapData.boxH2-MapData.boxH5)==0
			&&(MapData.getType(this._pt.x+gay,this._pt.y+MapData.boxH2)==0 || MapData.getType(this._pt.x+gay,this._pt.y+MapData.boxH2)<MapData.bevel))){
				this.tempSpeed=5;
				return true;
			}
			if((ex<0 &&
				(MapData.getType(this._pt.x-MapData.boxW-gay,this._pt.y+MapData.boxH2)>0 ||
			MapData.getType(this._pt.x-MapData.boxW22-gay,this._pt.y+MapData.boxH2)>0 ||
			MapData.getType(this._pt.x-MapData.boxW3-gay,this._pt.y+MapData.boxH2)>0 ||
			MapData.getType(this._pt.x-MapData.boxW4-gay,this._pt.y+MapData.boxH2)>0)
			&& MapData.getType(this._pt.x-gay,this._pt.y+MapData.boxH2)==0
			&& MapData.getType(this._pt.x-MapData.boxW-gay,this._pt.y-MapData.boxH2-MapData.boxH4)==0
			&& MapData.getType(this._pt.x-MapData.boxW22-gay,this._pt.y-MapData.boxH2-MapData.boxH4)==0
			&& MapData.getType(this._pt.x-MapData.boxW3-gay,this._pt.y-MapData.boxH2-MapData.boxH4)==0
			&& MapData.getType(this._pt.x-MapData.boxW4-gay,this._pt.y-MapData.boxH2-MapData.boxH4)==0)
			||
			(ex>0 &&
			(MapData.getType(this._pt.x+MapData.boxW+gay,this._pt.y+MapData.boxH2)>0 ||
			MapData.getType(this._pt.x+MapData.boxW22+gay,this._pt.y+MapData.boxH2)>0 ||
			MapData.getType(this._pt.x+MapData.boxW3+gay,this._pt.y+MapData.boxH2)>0 ||
			MapData.getType(this._pt.x+MapData.boxW4+gay,this._pt.y+MapData.boxH2)>0)
			&& MapData.getType(this._pt.x+gay,this._pt.y+MapData.boxH2)==0
			&& MapData.getType(this._pt.x+MapData.boxW+gay,this._pt.y-MapData.boxH2-MapData.boxH4)==0
			&& MapData.getType(this._pt.x+MapData.boxW22+gay,this._pt.y-MapData.boxH2-MapData.boxH4)==0
			&& MapData.getType(this._pt.x+MapData.boxW3+gay,this._pt.y-MapData.boxH2-MapData.boxH4)==0
			&& MapData.getType(this._pt.x+MapData.boxW4+gay,this._pt.y-MapData.boxH2-MapData.boxH4)==0)){
				this.tempSpeed=3;
				return true;
			}
		}
		return false;
	}

	__proto.attackOver=function(){
		this.checkHit=false;
		this._attacktime=-1;
		this._attackGay=Math.random()*40>>0;
		this.role.play();
		this._attack=false;
		this.stop();
		this.ex=this._dir==1 ?-this.speed :this.speed;
	}

	__proto.hurt=function(val,isAoe){
		(isAoe===void 0)&& (isAoe=false);
		if(this._attack==false
			&& this.go<1
		&& this.touchGround){
			if(isAoe && this.baseRoleData.hp>val){
				this.orderJump(-5-Math.random()*3>>0);
				if(this._dir==5){
					if(this._pt.x>GlobalAPI.moveViewPort.maxRect.x+64){
						this.move(this._pt.x-MapData.boxW-Math.random()*8>>0,this._pt.y,false);
					}
					}else{
					if(this._pt.x<GlobalAPI.moveViewPort.maxRect.right-64){
						this.move(this._pt.x+MapData.boxW+Math.random()*8>>0,this._pt.y,false);
					}
				}
			}
			this._attackGay=80;
			this.go=20;
			this._hurt=0;
			this.ex=0;
			this.showRole("H_");
		}
		return game.Body.BaseAct.prototype.hurt.call(this,val);
	}

	__proto.die=function(dir){
		this.checkHit=false;
		GlobalAPI.soundMgr.playSound("zombiediesound");
		GlobalAPI.soundMgr.playSound("jizhongsound");
		game.Body.BaseAct.prototype.die.call(this,dir);
		this.role.offAll();
		if(this.diemovespeed>0){
			this.showRole("F_");
			this.role.play(1);
			this.ex=(this.diemovespeed*0.1+6>>0)*dir;
			this.orderJump();
			}else{
			this.dispose();
		}
	}

	__proto.showRole=function(status){
		if((this._status !=status || this._skindir !=this._dir)&& this.firemc){
			this.eyemc.scaleX=this._dir==5 ? 1:-1;
		}
		if(this.fireing && status !="F_"){
			return;
		}
		if(this.isDie && status !="F_"){
			return;
		}
		game.Body.SkinAct.prototype.showRole.call(this,status);
	}

	__proto.setData=function(val){
		if(GlobalAPI.nowdouble){
			if(Math.random()*2>>0==0){
				this.shootpt=GlobalAPI.heropt;
				this.shootGroundpt=GlobalAPI.heroGroundPt;
				}else{
				this.shootpt=GlobalAPI.heropt2;
				this.shootGroundpt=GlobalAPI.heroGroundPt2;
			}
		}
		if(val.skin==102){
			this.isBlevel=true;
			this.frameDelay=50;
			}else if(val.skin==106){
			this.bodygay=35;
		}
		game.Body.SkinAct.prototype.setData.call(this,val);
		this.vo=val;
		this.startSpeed=this.speed=this.vo.speed;
		this.ey=this.baseRoleData.startY;
		this.ex=this.speed*this.vo.dir;
		this._think=40;
		this.jumpTim=-13;
	}

	__proto.getKillRect=function(atk){
		(atk===void 0)&& (atk=false);
		if(atk && this.vo.rw>60){
			var w=this.vo.rw-60+5;
			if(this._dir==5){
				this.killRect.x=this._rect.x-this.killRect.width*0.5+w;
				}else{
				this.killRect.x=this._rect.x-this.killRect.width*0.5-w;
			}
			}else{
			this.killRect.x=this._rect.x-this.killRect.width*0.5;
		}
		this.killRect.y=this._rect.y;
		return this.killRect;
	}

	__proto.play=function(val){
		game.Body.SkinAct.prototype.play.call(this,val);
		this._attack=false;
	}

	__proto.setWH=function(){
		var rect=this.role.getBounds();
		if(rect.width>0){
			this.killRect.width=rect.width;
			this.killRect.height=rect.height-this.bodygay;
			}else{
			this.killRect.width=this.killRect.height=this.bodyWid;
		}
		this.bodyRect.width=rect.width;
		this.bodyRect.height=rect.height-this.bodygay;
		this.bodyRect.x=-this.role.pivotX;
		this.bodyRect.y=-this.bodyRect.height;
		this.redraw();
		var hei=this.bodyRect.height;
		this.hits=[
		new Point(-this.bodyWid,2),
		new Point(-this.bodyWid,hei*0.25),
		new Point(-this.bodyWid,hei>>1),
		new Point(-this.bodyWid,hei-hei*0.25),
		new Point(-this.bodyWid,hei),
		new Point(this.bodyWid,2),
		new Point(this.bodyWid,hei*0.25),
		new Point(this.bodyWid,hei>>1),
		new Point(this.bodyWid,hei-hei*0.25),
		new Point(this.bodyWid,hei)];
	}

	__proto.orderJump=function(high){
		(high===void 0)&& (high=-14);
		game.Body.JumpAct.prototype.orderJump.call(this,high);
		this.isJumpOver=false;
	}

	__proto.dispose=function(){
		UIUtils.clearFilter(this.role,ColorFilter);
		this.time=0;
		if(this.firemc){
			GlobalAPI.miniAniEffect.over(this.firemc);
			this.firemc=null;
		}
		game.Body.DropAct.prototype.dispose.call(this);
	}

	return Enemy;
})(Role)


/**
*道具掉落
*@author guowc
*
*/
//class game.role.ai.Enemy115 extends game.Body.Role
var Enemy115=(function(_super){
	function Enemy115(){
		this.check=true;
		this.ex=0;
		this.speed=0;
		this.hasdrop=true;
		this.jumpTim=0;
		this.showtime=0;
		this.cleartime=0;
		this.maxtime=0;
		this.m=null;
		this.dropnum=0;
		this.isProp=false;
		this.fastClear=false;
		Enemy115.__super.call(this);
		this.areaNum=12;
		this.bodygay=0;
		this.bodyWid=0;
		this.frameDelay=120;
		this.isProp=true;
	}

	__class(Enemy115,'game.role.ai.Enemy115',_super);
	var __proto=Enemy115.prototype;
	__proto.step=function(){
		if(this.maxtime>0){
			if(this.cleartime>this.maxtime){
				GlobalAPI.sceneRoleMgr.removeEnemy(this.baseRoleData.id);
				}else{
				this.cleartime++;
			}
		}
		if(this._pause)return;
		if(this.isFly){
			this.checkHit=this.check;
			return;
		}
		if(this.showtime<31){
			if(this.showtime>5){
				this.checkHit=this.check;
			}
			this.showtime++;
		}
		if(this.hitWallX){
			this.ex=-this.ex;
		}
		if(this.isDrop && this.dropnum<30){
			this.dropnum++;
		}
		if(this.touchGround){
			if(this.isWater){
				this.jumpTim=0;
			}
			this.jumpTim+=4;
			if(this.jumpTim<0){
				this.orderJump(this.jumpTim);
				}else{
				this.ex=0;
				if(this.fastClear){
					GlobalAPI.sceneRoleMgr.removeEnemyAni(this.baseRoleData.id);
				}
			}
			}else if(this.dropnum>29){
			this.dropnum=0;
			this.jumpTim=-6;
		}
		if(this.ex!=0)
			this.move(this.x+this.ex,this._pt.y);
		_super.prototype.step.call(this);
	}

	__proto.setWH=function(){
		this.role.play(0,true,this.baseRoleData.skin+"");
		var rect=this.role.getBounds();
		if(rect.width>0){
			this.killRect.width=rect.width>>1;
			this.killRect.height=rect.height-this.bodygay;
			if(rect.height>MapData.boxH-2){
				rect.height=MapData.boxH-2;
			}
			}else{
			this.killRect.width=this.killRect.height=5;
		}
		this.bodyRect.width=rect.width;
		this.bodyRect.height=rect.height-this.bodygay;
		this.bodyRect.x=-this.role.pivotX;
		this.bodyRect.y=-this.bodyRect.height;
		this.redraw();
		var hei=this.bodyRect.height;
		this.hits=[
		new Point(-this.bodyWid,5),
		new Point(-this.bodyWid,hei>>1),
		new Point(-this.bodyWid,hei),
		new Point(this.bodyWid,5),
		new Point(this.bodyWid,hei>>1),
		new Point(this.bodyWid,hei)];
	}

	__proto.showRole=function(status){
		if(this._status)return;
		this._status=status;
		if(!this.role){
			this.role=GlobalAPI.poolMgr.getRoleSkin();
			this.role.setRoleType(false);
			this.role.interval=this.frameDelay;
			this.role.on("roleload",this,this.loaded);
			this.role.loadResource(PathMgr.path_miniani+"miniani.json",PathMgr.path_miniani+"miniani"+".ani");
			}else{
			this.loaded();
		}
		this._skindir=this._dir;
	}

	__proto.setData=function(val){
		this.maxtime=val.gold>0 ? 1800 :3600;
		this.maxtime=val.config ? 0 :this.maxtime;
		this.checkHit=false;
		game.Body.SkinAct.prototype.setData.call(this,val);
		this.hasdrop=this.baseRoleData.hasdrop;
		this.speed=this.baseRoleData.speed;
		this.ex=this.speed*this.baseRoleData.dir;
		if(this.isWater){
			this.jumpTim=0;
			}else if(this.baseRoleData.jumphight<0){
			this.jumpTim=-8;
			this.orderJump(this.jumpTim);
		}
	}

	__proto.dropFrameHandler=function(){
		if(this.hasdrop){
			game.Body.DropAct.prototype.dropFrameHandler.call(this);
		}
	}

	__proto.flyTo=function(pt,ox,oy,speed,flyover){
		(ox===void 0)&& (ox=0);
		(oy===void 0)&& (oy=0);
		(speed===void 0)&& (speed=10);
		if(this.showtime<30)return;
		game.Body.BaseAct.prototype.flyTo.call(this,pt,ox,oy);
		this.m=MoveToThing.add(this,pt,new Handler(this,this.over,[flyover]),speed);
		this.m.offsetXY(ox,oy);
	}

	__proto.over=function(flyover){
		if(this.m){
			GlobalAPI.sceneRoleMgr.removeEnemy(this.baseRoleData.id);
		}
		if(flyover){
			flyover.run();
		}
	}

	__proto.getKillRect=function(atk){
		(atk===void 0)&& (atk=false);
		if(this.m){
			this._rect.x=this.x;
			this._rect.y=this.y-this._rect.height;
		}
		this.killRect.x=this._rect.x-this.killRect.width*0.5;
		this.killRect.y=this._rect.y;
		return this.killRect;
	}

	__proto.orderJump=function(high){
		(high===void 0)&& (high=-14);
		game.Body.JumpAct.prototype.orderJump.call(this,high);
		if(high<-14 && this.ex==0){
			this.ex=this.speed;
		}
	}

	__proto.dispose=function(){
		this.pause();
		if(this.m){
			this.m.dispose();
			this.m=null;
		}
		this.inbevel=false;
		this.isJump=false;
		this.hasdrop=true;
		this.isWater=false;
		this.isFly=false;
		this.jumpTim=0;
		this.touchGround=false;
		this._status=null;
		this.showtime=0;
		this.check=true;
		this.cleartime=0;
		this.fastClear=false;
		this.scale(1,1,true);
		if(this.isProp){
			GlobalAPI.poolMgr.disposeprop(this);
		}
	}

	return Enemy115;
})(Role)


/**
*投炸弹本体
*@author guowc
*
*/
//class game.role.ai.Enemy405 extends game.Body.Role
var Enemy405=(function(_super){
	function Enemy405(){
		this.vo=null;
		this.ex=0;
		this.ey=0;
		this.speed=0;
		this.jumpTim=-16;
		this.tmp=0;
		Enemy405.__super.call(this);
		this.areaNum=12;
		this.bodyWid=0;
		this.bodygay=0;
	}

	__class(Enemy405,'game.role.ai.Enemy405',_super);
	var __proto=Enemy405.prototype;
	__proto.step=function(){
		if(this._pause || this.isDie)return;
		if(this.hitWallX){
			this.ex=-this.ex;
		}
		if(this.touchGround){
			if(this._pt.y-this.tmp>50){
				this.jumpTim=-6
			}
			this.tmp=this._pt.y;
			this.jumpTim+=4;
			if(this.jumpTim<0){
				this.orderJump(this.jumpTim);
				}else{
				GlobalAPI.sceneRoleMgr.removeEnemy(this.vo.id,true,0,-2);
			}
		}
		if(this.ex!=0)
			this.move(this.x+this.ex,this._pt.y);
		_super.prototype.step.call(this);
	}

	__proto.setData=function(val){
		game.Body.SkinAct.prototype.setData.call(this,val);
		this.isDie=false;
		this.vo=val;
		this.speed=this.vo.speed;
		this.ey=this.baseRoleData.startY;
		this.ex=this.speed*this.vo.dir;
		this.jumpTim=-9;
		this.orderJump(this.jumpTim);
		this.role.wrapMode=this.ex<0 ? 1 :0;
	}

	__proto.die=function(dir){
		GlobalAPI.miniAniEffect.start(null,this._pt.x,this._pt.y,"boom7",true,50,1.5);
		GlobalAPI.soundMgr.playSound("bomsound");
		this.aoebom();
		this.dispose();
	}

	__proto.aoebom=function(){
		if(MapData.isJumpWall(this.dx,this.dy+3)){
			GlobalAPI.scrollMap.clearPicTile(this.dx,this.dy+3);
		}
		if(MapData.isJumpWall(this.dx+1,this.dy+3)){
			GlobalAPI.scrollMap.clearPicTile(this.dx+1,this.dy+3);
		}
		if(MapData.isJumpWall(this.dx+2,this.dy+3)){
			GlobalAPI.scrollMap.clearPicTile(this.dx+2,this.dy+3);
		}
		MapData.rect.x=this._pt.x-250;
		MapData.rect.y=this._pt.y-450;
		MapData.rect.width=500;
		MapData.rect.height=500;
		GlobalAPI.hitMgr.aoeBoom(this.baseRoleData.maxhp,this._pt,this,MapData.rect);
		ShakeEffect.start(3,4,3,6);
	}

	__proto.setWH=function(){
		this.role.play(0,true,this.baseRoleData.skin+"");
		var rect=this.role.getBounds();
		if(rect.width>0){
			this.killRect.width=rect.width>>1;
			this.killRect.height=rect.height-this.bodygay;
			if(rect.height>MapData.boxH-2){
				rect.height=MapData.boxH-2;
			}
			}else{
			this.killRect.width=this.killRect.height=5;
		}
		this.bodyRect.width=rect.width;
		this.bodyRect.height=rect.height-this.bodygay;
		this.bodyRect.x=-this.bodyRect.width>>1;
		this.bodyRect.y=-this.bodyRect.height;
		this.role.pivotX=this.bodyRect.width>>1;
		this.role.pivotY=this.bodyRect.height;
		this.redraw();
		var hei=this.bodyRect.height;
		this.hits=[
		new Point(-this.bodyWid,5),
		new Point(-this.bodyWid,hei>>1),
		new Point(-this.bodyWid,hei),
		new Point(this.bodyWid,5),
		new Point(this.bodyWid,hei>>1),
		new Point(this.bodyWid,hei)];
	}

	__proto.showRole=function(status){
		if(this._status)return;
		this._status=status;
		if(!this.role){
			this.role=GlobalAPI.poolMgr.getRoleSkin();
			this.role.setRoleType(false);
			this.role.interval=this.frameDelay;
			this.role.on("roleload",this,this.loaded);
			this.role.loadResource(PathMgr.path_miniani+"miniani.json",PathMgr.path_miniani+"miniani"+".ani");
			}else{
			this.loaded();
		}
		this._skindir=this._dir;
	}

	__proto.dispose=function(){
		this.pause();
		this.jumpTim=-16;
		this.touchGround=false;
		this._status=null;
		Pool.recover("enemy405",this);
	}

	return Enemy405;
})(Role)


/**
*炮灰
*@author guowc
*
*/
//class game.role.ai.Enemy406 extends game.Body.Role
var Enemy406=(function(_super){
	function Enemy406(){
		this.ex=0;
		this.vo=null;
		this.speed=0;
		this.jumpTim=0;
		this.idx=0;
		Enemy406.__super.call(this);
		this.bodyWid=0;
	}

	__class(Enemy406,'game.role.ai.Enemy406',_super);
	var __proto=Enemy406.prototype;
	__proto.step=function(){
		if(this._pause){
			return;
		}
		if(this.hitWallX || this.touchGround){
			this.ex=0;
			GlobalAPI.sceneRoleMgr.removeEnemyAni(this.baseRoleData.id);
			return;
		}
		if(this.ex!=0)
			this.move(this.x+this.ex,this._pt.y);
		_super.prototype.step.call(this);
	}

	__proto.setWH=function(){
		if(GlobalAPI.isChid){
			this.role.play(0,true,"bloodb");
			}else{
			this.role.play(0,true,"blood");
		};
		var rect=this.role.getBounds();
		if(rect.width>0){
			if(rect.height>MapData.boxH-2){
				rect.height=MapData.boxH-2;
			}
		}
		this.bodyRect.width=rect.width;
		this.bodyRect.height=rect.height-this.bodygay;
		this.bodyRect.x=-this.bodyRect.width>>1;
		this.bodyRect.y=-this.bodyRect.height;
		this.role.pivotX=this.bodyRect.width>>1;
		this.role.pivotY=this.bodyRect.height;
		this.redraw();
		this.hits=[
		new Point(0,0)];
	}

	__proto.setData=function(val){
		this.isDie=false;
		this.areaNum=20;
		this.jumpTim=-13;
		game.Body.SkinAct.prototype.setData.call(this,val);
		this.vo=val;
		this.speed=this.vo.speed;
		this.ex=this.speed*this.vo.dir;
		this.velocity=-Math.random()*5-val.jumphight>>0;
		this.orderJump(this.velocity);
		switch(this.vo.bloodType){
			case 100:
				if(GlobalAPI.isChid){
					this.role.play(0,true,"bloodb");
					}else{
					this.role.play(0,true,"blood");
				}
				break ;
			case 200:
			case 300:
				if(MapData.mapbgName.indexOf("b",3)>-1){
					this.role.play(0,true,"dustw");
					}else{
					this.role.play(0,true,"dust");
				}
				break ;
			}
	}

	__proto.updateXY=function(){
		game.Body.BaseAct.prototype.updateXY.call(this);
		if(this.baseRoleData.shadow)
			this.shadow();
	}

	__proto.shadow=function(){
		this.idx++;
		if(this.idx>2){
			var bitmap=GlobalAPI.poolMgr.getbitmap();
			if(bitmap){
				bitmap.texture=this.role.getCurrentFrameTexture();
				bitmap.x=this._pt.x;
				bitmap.y=this._pt.y;
				GlobalAPI.shadowA.add(bitmap);
			}
			this.idx=0;
		}
	}

	__proto.pause=function(show){
		(show===void 0)&& (show=false);
		game.Body.SkinAct.prototype.pause.call(this);
		if(!this.isDie){
			GlobalAPI.sceneRoleMgr.removeEnemyAni(this.baseRoleData.id);
		}
	}

	__proto.showRole=function(status){
		if(this._status)return;
		this._status=status;
		if(!this.role){
			this.role=GlobalAPI.poolMgr.getRoleSkin();
			this.role.setRoleType(false);
			this.role.interval=this.frameDelay;
			this.role.on("roleload",this,this.loaded);
			this.role.loadResource(PathMgr.path_miniani+"miniani.json",PathMgr.path_miniani+"miniani"+".ani");
			}else{
			this.loaded();
		}
		this._skindir=this._dir;
	}

	__proto.checkdropwall=function(tx,ty,type){}
	__proto.play=function(val){
		game.Body.SkinAct.prototype.play.call(this,val);
	}

	//role.setCurrentFrame(2);
	__proto.dispose=function(){
		this.isDie=true;
		this.pause();
		this.touchGround=false;
		this._skindir=0;
		GlobalAPI.poolMgr.disposeflood(this);
		this.baseRoleData=null;
	}

	Enemy406.TYPE1=100;
	Enemy406.TYPE2=200;
	Enemy406.TYPE3=300;
	return Enemy406;
})(Role)


/**
*弹壳
*@author guowc
*
*/
//class game.role.ai.Enemy407 extends game.Body.Role
var Enemy407=(function(_super){
	function Enemy407(){
		this.soundplay=false;
		this.ex=0;
		this.speed=0;
		this.hasdrop=true;
		this.jumpTim=0;
		this.jumpGay=0;
		this.dropnum=0;
		Enemy407.__super.call(this);
		this.areaNum=8;
		this.bodygay=0;
		this.bodyWid=0;
		this.frameDelay=120;
		this.jumpGay=-5;
	}

	__class(Enemy407,'game.role.ai.Enemy407',_super);
	var __proto=Enemy407.prototype;
	__proto.step=function(){
		if(this._pause){
			GlobalAPI.sceneRoleMgr.removeEnemyAni(this.baseRoleData.id);
			return;
		}
		if(this.hitWallX){
			this.ex=-this.ex;
		}
		if(this.isDrop && this.dropnum<30){
			this.dropnum++;
		}
		if(this.touchGround){
			if(this.isWater){
				this.jumpTim=0;
				GlobalAPI.sceneRoleMgr.removeEnemyAni(this.baseRoleData.id);
			}
			this.jumpTim+=4;
			if(this.jumpTim<0){
				if(this.soundplay){
					GlobalAPI.soundMgr.playSound("shellsound");
					this.soundplay=false;
				}
				this.orderJump(this.jumpTim);
				}else{
				this.ex=0;
				GlobalAPI.sceneRoleMgr.removeEnemyAni(this.baseRoleData.id);
			}
			if(this.ex<0){
				this.ex=this.ex+1;
				if(this.ex==0)this.ex=-1;
				}else{
				this.ex=this.ex-1;
				if(this.ex==0)this.ex=1;
			}
			}else if(this.dropnum>29){
			this.dropnum=0;
			this.jumpTim=-6;
		}
		if(this.ex!=0)
			this.move(this.x+this.ex,this._pt.y);
		_super.prototype.step.call(this);
	}

	__proto.chgSetData=function(val){
		this.soundplay=true;
		switch(val.shellType){
			case 1:
			case 8:
				this.role.play(0,true,"shell1");
				break ;
			default :
				this.role.play(0,true,"shell0");
				break ;
			}
	}

	__proto.setWH=function(){
		this.role.play(0,true,"shell0");
		var rect=this.role.getBounds();
		if(rect.width>0){
			if(rect.height>MapData.boxH-2){
				rect.height=MapData.boxH-2;
			}
		}
		this.bodyRect.width=rect.width>>0;
		this.bodyRect.height=rect.height-this.bodygay>>0;
		this.bodyRect.x=-this.bodyRect.width>>1;
		this.bodyRect.y=-this.bodyRect.height;
		this.role.pivotX=0;
		this.role.pivotY=this.bodyRect.height>>1;
		this.redraw();
		this.hits=[
		new Point(0,0)];
	}

	__proto.showRole=function(status){
		if(this._status)return;
		this._status=status;
		if(!this.role){
			this.role=GlobalAPI.poolMgr.getRoleSkin();
			this.role.setRoleType(false);
			this.role.interval=this.frameDelay;
			this.role.on("roleload",this,this.loaded);
			this.role.loadResource(PathMgr.path_miniani+"miniani.json",PathMgr.path_miniani+"miniani"+".ani");
			}else{
			this.loaded();
		}
		this._skindir=this._dir;
	}

	__proto.pause=function(show){
		(show===void 0)&& (show=false);
		game.Body.SkinAct.prototype.pause.call(this,show);
		if(!this.isDie){
			GlobalAPI.sceneRoleMgr.removeEnemyAni(this.baseRoleData.id);
		}
	}

	__proto.setData=function(val){
		game.Body.SkinAct.prototype.setData.call(this,val);
		this.chgSetData(val);
		this.hasdrop=this.baseRoleData.hasdrop;
		this.speed=this.baseRoleData.speed;
		this.ex=this.speed*this.baseRoleData.dir;
		this.jumpTim=-(Math.random()*3)+this.jumpGay>>0;
		this.orderJump(this.jumpTim);
	}

	__proto.dropFrameHandler=function(){
		if(this.hasdrop){
			game.Body.DropAct.prototype.dropFrameHandler.call(this);
		}
	}

	__proto.checkdropwall=function(tx,ty,type){}
	__proto.checklr=function(){
		this.hitWallX=false;
		if(this._rect.x > this.maxRect.x+this.maxRect.width-10 ||
			this._rect.x < this.maxRect.x+10){
			}else{
			game.Body.HitJumpAct.prototype.checklr.call(this);
		}
	}

	__proto.dispose=function(){
		this.isDie=true;
		this.pause();
		this.inbevel=false;
		this.isJump=false;
		this.hasdrop=true;
		this.isWater=false;
		this.isFly=false;
		this.jumpTim=0;
		this.touchGround=false;
		GlobalAPI.poolMgr.disposeshell(this);
	}

	return Enemy407;
})(Role)


/**
*英雄 主角
*@author guowc
*
*/
//class game.role.Hero extends game.Body.Role
var Hero=(function(_super){
	function Hero(){
		this.keyjump=87;
		this.keyjump1=75;
		this.keyfire=74;
		this.keyleft=65;
		this.keyright=68;
		this.keychgWeapon=81;
		this.keyaddclip=82;
		this.keychgWeapon1=69;
		this.shootimg=null;
		this.bottom=0;
		this.cid=0;
		this.sid=0;
		this.spt=null;
		this.useMouse=true;
		this.gaspts=[new Point(5,5),new Point(-5,-5),new Point(0,0)];
		this.prop_speed_time=0;
		this.prop_magnet_time=0;
		this.prop_defend_time=0;
		this.prop_speed=false;
		this.prop_magnet=false;
		this.prop_defend=false;
		this.defendmc=null;
		this.fair=null;
		this.mountid=0;
		this.hitvelocity=false;
		this.idx=0;
		this.pt=null;
		this.moveX=0;
		this._isCon=false;
		this._keychgweapon=false;
		this.mountSpeed=0;
		this.proxy=null;
		this.hproxy=null;
		this.weaponMgr=null;
		this._start=false;
		this.dr=0;
		this.isexpmax=false;
		this.expobj=null;
		this.effect=null;
		this._weaponAng=0;
		this._weaponAngAni=0;
		this._shootang=0;
		this.shootEnemy=null;
		this.addbulletbool=false;
		this.handr0=null;
		this.missRan=null;
		this.buffVO=null;
		Hero.__super.call(this);
		this.tmpt=new Point;
		this.rectleft=new Rectangle(0,0,300,600);
		this.rectright=new Rectangle(300,0,800,600);
		this.shootPt=new Point;
		this.shootpt=new Point;
		this.areaNum=12;
		this.pt=new Point;
		this.proxy=new MountProxy;
		this.hproxy=HeroProxy.getInstance();
		this.bodyWid=9;
		this.frameDelay=100;
		this.expobj={};
		this.defendmc=GlobalAPI.miniAniEffect.start(this,0,0,"defend",false,24);
		this.defendmc.on("complete",this,this.defendover);
		this.defendmc.stop();
		this.effect=GlobalAPI.moveViewPort.getLayerContainer(4);
		this.fair=GlobalAPI.miniAniEffect.start(this,0,0,"fair",false);
		this.fair.stop();
		this.showHPBar(true);
		this.useMouse=GlobalAPI.isPC;
		this.missRan=new MRandom();
		this.buffVO=new BuffVO;
		this.shootimg=new Image("othericon/shootpt.png");
		this.shootimg.pivot(40,40);
	}

	__class(Hero,'game.role.Hero',_super);
	var __proto=Hero.prototype;
	__proto.defendover=function(){
		if(this.defendmc.wrapMode==1){
			this.defendmc.removeSelf();
		}
	}

	__proto.mousewheel=function(evt){
		this.weaponMgr.chgWeaponIdx(evt.delta<0);
	}

	__proto.reset=function(){
		this.rotation=this.ang=this.rotationAng=0;
		this.shootimg.removeSelf();
		this.hpbar.removeSelf();
		KeyUtil.allup();
		Laya.stage.off("mousewheel",this,this.mousewheel);
		this.addbulletbool=false;
		if(this._start){
			this.setMount(false,false);
		}
		this._start=false;
		this.resetProp();
		this.isWater=this.isWaterOld=false;
		this.isDie=false;
		this.x=this.y=0;
		this._pt.x=this._pt.y=0;
		this.isJump=false;
		this.moveChg=null;
		this.pause();
		this.bottom=this.maxRect.bottom;
		if(this.weaponMgr)
			this.weaponMgr.dispose();
	}

	__proto.start=function(){
		this.buffVO.reset();
		this.hproxy.reset();
		this.effect.addChild(this.shootimg);
		this.shootimg.visible=false;
		var roleData;
		if((this instanceof game.role.Hero2 )){
			roleData=this.hproxy.getBaseRoleVO1();
			roleData.startX=MapData.mapStartRt.x;
			this.cid=1;
			}else{
			roleData=this.hproxy.getBaseRoleVO();
			roleData.startX=MapData.mapStartRt.x+MapData.boxW22;
			this.cid=0;
			if(GlobalAPI.heroproxy.getDouble()){
				this.keyjump1=this.keyjump=38;
				this.keyfire=74;
				this.keyleft=37;
				this.keyright=39;
				this.keyaddclip=100;
				this.keychgWeapon=96;
				this.keychgWeapon1=96;
				}else{
				this.keyjump=87;
				this.keyjump1=75;
				this.keyfire=74;
				this.keyleft=65;
				this.keyright=68;
				this.keychgWeapon=81;
				this.keychgWeapon1=69;
				this.keyaddclip=82;
			}
			Laya.stage.on("mousewheel",this,this.mousewheel);
		};
		var exp=GlobalAPI.heroproxy.getExp(roleData.id);
		if(exp<roleData.maxexp){
			this.isexpmax=false;
			}else{
			exp=roleData.maxexp;
			this.isexpmax=true;
		};
		var obj=GlobalAPI.heroinfo.getLevAndExp(exp);
		this.expobj.lev=obj.lev;
		this.expobj.exp=obj.exp;
		this.expobj.texp=obj.texp;
		this.missRan.setRandom(GlobalAPI.heroinfo.getMiss(obj.lev,roleData.id),100);
		roleData.startY=MapData.mapStartRt.y-1;
		this.setData(roleData);
		if((this instanceof game.role.Hero2 )){
			this.weaponMgr=GlobalAPI.weaponMgr2;
			}else{
			this.weaponMgr=GlobalAPI.weaponMgr;
		}
		this.weaponMgr.setRoleid(roleData.id);
		this.weaponMgr.setHero(this);
		this.weaponMgr.start();
		this.baseRoleData.stronghp=false;
		this.play(GlobalAPI.moveViewPort.getLayerContainer(3));
		this.mountid=GlobalAPI.heroproxy.getMountSelect(roleData.id);
		var hp=GlobalAPI.heroinfo.getHP(obj.lev,this.baseRoleData.id);
		this.baseRoleData.maxhp=this.baseRoleData.hp=hp+hp*0.01*GlobalAPI.mountinfo.getHp(this.mountid,GlobalAPI.heroproxy.getMountLev(this.mountid))>>0;
		this.setMount(true,false);
		this.setBody(0);
	}

	__proto.setData=function(val){
		game.Body.SkinAct.prototype.setData.call(this,val);
		this.updateRoleSkin();
		this._dir=val.dir==-1 ? 1 :5;
		this.isRight=this._dir==5;
		GlobalAPI.heroinfo.setBuff(this.baseRoleData.id,this.buffVO);
		this.maxNum=this.buffVO.jumpnum;;
		this._start=true;
		if(this.weapond){
			this.handr0.removeSelf();
			this.handl0.removeSelf();
			this.weapon.removeSelf();
			this.body.removeSelf();
			}else{
			this.weapond=new Sprite;
			this.addChild(this.weapond);
			this.weapond1=new Sprite;
			this.addChildAt(this.weapond1,0);
		}
		this.weapon=this.hproxy.getWeaponSkin(this.cid);
		this.weapon.removeChildren();
		this.weapon.setStop(0);
		this.handr0=GlobalAPI.roleAniEffect.start(this.weapond,0,0,"handr"+this.baseRoleData.id,false);
		this.handr0.setStop(0);
		this.handl0=GlobalAPI.roleAniEffect.start(this.weapond,0,0,"handl"+this.baseRoleData.id,false);
		this.handl0.setStop(0);
		this.body=GlobalAPI.roleAniEffect.start(this,0,0,"hero"+this.baseRoleData.id,false);
		this.body.setStop(0);
		this.weapond.addChild(this.weapon);
		this.weapon.addChild(this.handr0);
		this.weapond1.addChild(this.handl0);
		this.addChild(this.body);
		DepthManager.bringToTop(this.weapond);
		this.updateRoleSkin();
		this.setXY(val.startX,val.startY);
		this._dir=val.dir==-1 ? 1 :5;
		this.isRight=this._dir==5;
	}

	__proto.step=function(){
		_super.prototype.step.call(this);
		if(this._pt.y>this.maxRect.height){
			this.hurtStep=100;
			this.hurt(100);
			if(this.prop_defend){
				GlobalAPI.soundMgr.playSound("springsound");
			}
		}
		this.tmpt.x=this._rect.x+this.bodyWid;
		this.tmpt.y=this._rect.y+this._rect.height;
		var type=MapData.isHurt(this.tmpt.x,this.tmpt.y);
		if(type<1){
			this.tmpt.x=this._rect.x-this.bodyWid;
			type=MapData.isHurt(this.tmpt.x,this.tmpt.y);
			if(type<1){
				this.tmpt.y=this._rect.y;
				type=MapData.isHurt(this.tmpt.x,this.tmpt.y);
				if(type<1){
					this.tmpt.x=this._rect.x+this.bodyWid;
					type=MapData.isHurt(this.tmpt.x,this.tmpt.y);
				}
			}
		}
		if(type>MapData.hurtboxSort){
			this.hurt(20*(MapData.levelLev+(MapData.levelLev-1)*2+MapData.mapLevel*0.5>>0));
		}
		this.addbullet();
	}

	__proto.setMount=function(val,effect){
		(effect===void 0)&& (effect=true);
		if(val){
			this.proxy.setMount(this.mountid);
			}else{
			if(this.isMount && effect){
				this.orderJump();
				this.velocity=-15;
			}
			this.proxy.setMount(-1);
		}
		this.setMountSkin(this.proxy.getUrl());
		this.updateBodyPt();
		if(this.role){
			this.role.y=this.proxy.getHerolegY();
		}
		this.isBlevel=this.proxy.isblevel();
		this.mountSpeed=this.proxy.getSpeed();
	}

	__proto.updateWeaponSkin=function(val){
		game.Body.SkinAct.prototype.updateWeaponSkin.call(this,val);
		this.updateBodyPt();
	}

	__proto.updateBodyPt=function(){
		if(this.isMount){
			this.body.y=this.proxy.getHerobodyY()-15;
			this.weapondPt.y=this.weapond.y=this.weapond1.y=this.weaponMgr.weaponPt.y+this.body.y+20;
			this.hpbar.y=this.bodyRect.y-25;
			this.defendmc.scale(1.2,1.2,true);
			}else{
			this.body.y=-25;
			this.weapondPt.y=this.weapond.y=this.weapond1.y=this.weaponMgr.weaponPt.y+this.body.y+20;
			this.hpbar.y=this.bodyRect.y-8;
			this.defendmc.scale(1,1,true);
		}
	}

	__proto.setWH=function(){
		var rect=this.role.getBounds();
		this.bodyRect.width=rect.width;
		this.bodyRect.height=120;
		this.bodyRect.x=-this.role.pivotX;
		this.bodyRect.y=-this.bodyRect.height;
		var hei=this.bodyRect.height;
		if(this.bodyRect.width>0){
			this.killRect.width=this.bodyRect.width;
			this.killRect.height=this.bodyRect.height-this.bodygay;
			}else{
			this.killRect.width=this.killRect.height=this.bodyWid;
		}
		this.hits=[
		new Point(-this.bodyWid,2),
		new Point(-this.bodyWid,hei*0.25),
		new Point(-this.bodyWid,hei>>1),
		new Point(-this.bodyWid,hei-hei*0.25),
		new Point(-this.bodyWid,hei),
		new Point(this.bodyWid,2),
		new Point(this.bodyWid,hei*0.25),
		new Point(this.bodyWid,hei>>1),
		new Point(this.bodyWid,hei-hei*0.25),
		new Point(this.bodyWid,hei)];
		this.redraw();
	}

	__proto.setGayNum=function(val){
		this.gayNum=val;
	}

	__proto.setShootPt=function(){
		if(this.useMouse){
			this.shootPt.x=(this.parent).mouseX;
			this.shootPt.y=(this.parent).mouseY;
			}else{
			var pt;
			if(this.sid>10){
				this.sid=0;
				if(GlobalAPI.hitMgr.ishitEnemy(this._pt.x,this._pt.y-50,this.ang)){
					pt=WeaponMgr.getShootPt(this._pt,false);
					}else{
					pt=WeaponMgr.getShootPt(this._pt,true);
				}
				}else{
				this.sid++;
				pt=WeaponMgr.getShootPt(this._pt,false);
			}
			if(pt){
				this.shootPt.x=pt.x;
				this.shootPt.y=pt.y;
				if(this.spt !=pt){
					this.spt=pt;
					if(GlobalAPI.shootTip){
						this.shootimg.visible=true;
						this.shootimg.scale(3,3,true);
						Tween.to(this.shootimg,{scaleX:1,scaleY:1,ease:Ease.backOut},600);
					}
				}
				if(GlobalAPI.shootTip){
					this.shootimg.pos(this.shootPt.x,this.shootPt.y);
				}
				}else{
				this.shootPt.x=this.shootpt.x;
				this.shootPt.y=this.shootpt.y;
				if(GlobalAPI.shootTip){
					this.shootimg.visible=false;
				}
			}
		}
	}

	__proto.updateShootTip=function(){
		if(this.useMouse==false){
			if(GlobalAPI.shootTip && this.isDie==false){
				this.shootimg.visible=true;
				this.shootimg.scale(3,3,true);
				Tween.to(this.shootimg,{scaleX:1,scaleY:1,ease:Ease.backOut},600);
				this.shootimg.pos(this.shootPt.x,this.shootPt.y);
				}else{
				this.shootimg.visible=false;
			}
		}
	}

	__proto.getShootAimPt=function(){
		return this.shootPt;
	}

	__proto.control=function(){
		this.shootpt.x=this.isRight ? this._pt.x+100 :this._pt.x-100;
		if(this.isMount){
			this.shootpt.y=this._pt.y-70;
			}else{
			this.shootpt.y=this._pt.y-55;
		}
		if((this.touchGround && !this.isJump)|| this.isWater){
			this.gayNum=0;
		}
		if((this.isWaterOld && !this.isWater)|| (!this.isWaterOld && this.isWater)){
		}
		if(this.weapond){
			if(this.parent){
				this.setShootPt();
				dx=this._pt.x+this.weapondPt.x-this.shootPt.x;
				dy=this._pt.y+this.weapondPt.y-this.shootPt.y;
				this.ang=Math.atan2(dy,dx)*MathUtil.rotation+180>>0;
				if(this.ang!=this.weaponMgr.ang){
					this.weaponMgr.ang=this._shootang=this.ang;
					this._weaponAngAni=this._weaponAng=this.ang-this.rotationAng;
					this.setBody(this._weaponAngAni);
					}else{
					if(this._weaponAngAni<this._weaponAng){
						this._weaponAngAni+=1;
						this.weapond.rotation=this.weapond1.rotation=this._weaponAngAni;
						}else if(this._weaponAngAni>this._weaponAng){
						this._weaponAngAni-=1;
						this.weapond.rotation=this.weapond1.rotation=this._weaponAngAni;
					}
				}
			}
		}
		if(this.isWaterOld && !this.isWater){
			this.gayNum=1;
			this.orderJump();
		}
		if(this.gayNum < this.maxNum){
			var jumpbool=false;
			if(!GlobalAPI.isPC){
				jumpbool=GlobalAPI.keyboard.isDown(30);
				}else{
				jumpbool=KeyUtil.down[this.keyjump] || KeyUtil.down[this.keyjump1];
			}
			if (jumpbool){
				if(this._isCon){
					if(this.isWater){
					}else{}
					this._isCon=false;
					if(this.gayNum==1){
						this.orderJump(-10);
						GlobalAPI.miniAniEffect.start(this.effect,this._pt.x,this._pt.y,"jumpdust",true,80);
						}else{
						this.orderJump();
					}
					this.gayNum+=1;
				}
			}
			if(!GlobalAPI.isPC){
				this._isCon=!GlobalAPI.keyboard.isDown(30);
				}else{
				if (!KeyUtil.down[this.keyjump] && !KeyUtil.down[this.keyjump1]){
					this._isCon=true;
				}
			}
			if(this.touchGround)
				this.hitvelocity=false;
			}else{
			this.hitvelocity=false;
		}
		if(KeyUtil.down[this.keyaddclip]){
			if(!this.addbulletbool){
				this.addclip();
			}
		}
		if(this._keychgweapon && (KeyUtil.isDown(this.keychgWeapon)|| KeyUtil.down[this.keychgWeapon1])){
			this._keychgweapon=false;
			this.weaponMgr.chgWeaponIdx(KeyUtil.isDown(this.keychgWeapon1));
			}else{
			if(!KeyUtil.down[this.keychgWeapon] && !KeyUtil.down[this.keychgWeapon1]){
				this._keychgweapon=true;
			}
		};
		var firebool=false;
		if(!GlobalAPI.isPC){
			firebool=GlobalAPI.keyboard.isDown(40);
			}else{
			if((this instanceof game.role.Hero2 )){
				firebool=KeyUtil.down[this.keyfire];
				}else{
				firebool=KeyUtil.mousedown;
			}
		};
		var speed=0;
		speed=this.baseRoleData.speed;
		if(this.isWater){
			speed=this.waterspeedx;
			}else if(this.isMount){
			speed=this.mountSpeed;
		}
		if(this.prop_speed){
			this.prop_speed_time++;
			this.prop_speed=this.prop_speed_time<2700;
			if(!this.prop_speed){
				this.weaponMgr.addspeed(false);
				this.fair.stop();
				this.fair.removeSelf();
			}
		}
		if(this.prop_magnet){
			this.prop_magnet_time++;
			this.prop_magnet=this.prop_magnet_time<3600;
		}
		if(this.prop_defend){
			this.prop_defend_time++;
			this.prop_defend=this.prop_defend_time<1200 ? true :false;
			if(!this.prop_defend){
				this.defendmc.wrapMode=1;
				this.defendmc.play(this.defendmc.count,false);
			}
		}
		this.moveX=0;
		if(!GlobalAPI.isPC){
			if(GlobalAPI.keyboard.isDown(10)){
				this.moveX+=-speed;
				}else if(GlobalAPI.keyboard.isDown(20)){
				this.moveX+=speed;
				}else{
				this.stop();
			}
			}else{
			if(KeyUtil.isDown(this.keyright)){
				this.moveX+=speed;
				}else if(KeyUtil.isDown(this.keyleft)){
				this.moveX+=-speed;
				}else{
				this.stop();
			}
		}
		if(firebool && this.weaponMgr.attack && this.addbulletbool==false && this.iscanfire()){
			if(this._bodydir==1){
				this.dr=-1;
				this._weaponAngAni=this._weaponAng+this.weaponMgr.aniAng;
				}else{
				this.dr=1;
				this._weaponAngAni=this._weaponAng-this.weaponMgr.aniAng;
			}
			this.weapond.rotation=this.weapond1.rotation=this._weaponAngAni;
			this.weaponMgr.ang=Math.random()*2>1 ? this.weaponMgr.ang+this.weaponMgr.aniAng :this.weaponMgr.ang;
			var dx=this._pt.x-MathUtil.sins[this.rotationAng]*this.weapondPt.y;
			var dy=this._pt.y+MathUtil.coss[this.rotationAng]*this.weapondPt.y;
			if(this._bodydir==5){
				this.ang=(this.weaponMgr.ang+this.weaponMgr.weaponAng)%360>>0;
				}else{
				this.ang=(this.weaponMgr.ang-this.weaponMgr.weaponAng)%360>>0;
			}
			this.pt.x=dx+MathUtil.coss[this.ang]*this.weaponMgr.weaponPt.x+this.weapondPt.x+this.moveX;
			this.pt.y=dy+MathUtil.sins[this.ang]*this.weaponMgr.weaponPt.x;
			this.weaponMgr.fire(this.pt);
			if(this._bodydir==5){
				this.ang=(this.ang+this.weaponMgr.weaponShellPt.y)%360>>0;
				}else{
				this.ang=(this.ang-this.weaponMgr.weaponShellPt.y)%360>>0;
			}
			if(this.weaponMgr.weaponSort==0 ||
				this.weaponMgr.weaponSort==1 ||
			this.weaponMgr.weaponSort==8){
				GlobalAPI.sceneRoleMgr.addShell(dx+MathUtil.coss[this.ang]*this.weaponMgr.weaponShellPt.x,
				dy+MathUtil.sins[this.ang]*this.weaponMgr.weaponShellPt.x,this.dr*-1,2,8,this.weaponMgr.weaponSort);
			}
			if(this.weaponMgr.nowclip<1){
				this.addclip();
			}
		}
		this.move(this._rect.x+this.moveX,this._pt.y);
		if(this.oldRect.x==this._rect.x && this.oldRect.y==this._rect.y){
			this.stop();
		}
	}

	__proto.updateXY=function(){
		if(this.prop_speed || this.isMount){
			this.shadow();
		}
		game.Body.BaseAct.prototype.updateXY.call(this);
	}

	__proto.checklr=function(){
		game.Body.HitJumpAct.prototype.checklr.call(this);
		if(this._start==false)return;
		var lx=this.viewRect.x+this.viewRect.width-this.bodyWid;
		var rx=this.viewRect.x+this.bodyWid;
		if(this._rect.x > lx){
			this._rect.x=lx;
		}
		if(this._rect.x < rx){
			this._rect.x=rx;
		}
	}

	__proto.dropCheck=function(){
		game.Body.JumpAct.prototype.dropCheck.call(this);
		if(this.y>this.viewRect.y+this.viewRect.height){
			this.isRender=true;
		}
	}

	__proto.shadow=function(){
		this.idx++;
		if(this.idx>5){
		}
	}

	/*var bitmap:Bitmap=ObjectPool.getObject(Bitmap);
	bitmap.bitmapData=role.bitmapData;
	bitmap.x=x+her.x;
	bitmap.y=y+her.y;
	GlobalAPI.shadow.add(bitmap);
	idx=0;*/
	__proto.hurt=function(val,isAoe){
		(isAoe===void 0)&& (isAoe=false);
		if(this.baseRoleData.stronghp)return 0;
		if(this.isDie)return 0;
		if(this.hurtStep<10)return-1;
		if(this.prop_defend==false){
			if(this.missRan.getRan()){
				TxtFly.getInstance().start(this._pt.x-10+Math.random()*20,this._pt.y-100+Math.random()*30,"othericon/miss.png");
				this.hurtStep=0;
				GlobalAPI.heartMgr.add(this,this.hurteffect);
				return-1;
			}
			if(!isAoe)
				GlobalAPI.miniAniEffect.start(null,this._pt.x-10+Math.random()*20,this._pt.y-80+Math.random()*30,"hurt");
			game.Body.BaseAct.prototype.hurt.call(this,val);
			if(val>0){
				GlobalAPI.soundMgr.playSound("hurtsound");
				GlobalAPI.sceneRoleMgr.addBlood(this._pt.x,this._pt.y-50,false,2,5);
				GlobalAPI.sceneRoleMgr.addBlood(this._pt.x,this._pt.y-50,false,3,7);
				GlobalAPI.numflyMgr.startHeroHurt(this._pt.x+Math.random()*20-10,this._pt.y-50-Math.random()*30,"-"+val);
			}
			if(this.baseRoleData.hp<1){
				this.baseRoleData.hp=0;
				this.die(0);
				GlobalAPI.systembar.updatehp();
				return 1;
			}
			GlobalAPI.systembar.updatehp();
		}
		if(this.prop_defend==false){
			this.hurtStep=0;
			GlobalAPI.heartMgr.add(this,this.hurteffect);
		}
		if(this._pt.y>this.maxRect.height){
			this.orderJump();
			this.velocity=-22;
		}
		return 0;
	}

	__proto.addProp=function(val,x,y,para){
		(x===void 0)&& (x=0);
		(y===void 0)&& (y=0);
		(para===void 0)&& (para=0);
		if(this.isDie)return;
		switch(val){
			case 105:
				GlobalAPI.soundMgr.playSound("propsound");
				this.baseRoleData.hp+=this.baseRoleData.maxhp*0.5;
				this.baseRoleData.hp=this.baseRoleData.hp>this.baseRoleData.maxhp ? this.baseRoleData.maxhp:this.baseRoleData.hp;
				this.hpbar.value=this.baseRoleData.hp;
				GlobalAPI.systembar.updatehp();
				GlobalAPI.systembar.skillbar.useProp(4);
				break ;
			case 107:
				this.weapon.addChild(this.fair);
				this.fair.play();
				GlobalAPI.soundMgr.playSound("speedsound");
				this.prop_speed_time=0;
				this.prop_speed=true;
				GlobalAPI.systembar.skillbar.useProp(3);
				this.weaponMgr.addspeed(true);
				this.updateFair();
				break ;
			case 106:
				GlobalAPI.soundMgr.playSound("magnetsound");
				this.prop_magnet_time=0;
				this.prop_magnet=true;
				GlobalAPI.systembar.skillbar.useProp(5);
				break ;
			case 7:
				this.addChild(this.defendmc);
				GlobalAPI.soundMgr.playSound("speedsound");
				this.prop_defend_time=0;
				this.prop_defend=true;
				this.defendmc.wrapMode=0;
				this.defendmc.play(0,false);
				break ;
			case 111:
				this.weaponMgr.fullallclip();
				GlobalAPI.systembar.skillbar.useProp(2);
				break ;
			case 110:
				GlobalAPI.taskVO.gemboxNum++;
				GlobalAPI.soundMgr.playSound("propsound");
				new AddGoldsBox(this._pt.x-18,this._pt.y-35,10);
				if(GlobalAPI.adtime>0){
					BoxgemView.getInstance().show(true);
				}
				break ;
			case 6:
				GlobalAPI.soundMgr.playSound("propsound");
				var dir=this._bodydir==5 ? 1:-1;
				this.weaponMgr.dropboom(this._pt.x+6*dir,this._pt.y-60,dir);
				break ;
			case 408:
				this.weaponMgr.addWeaponIdx(para,GlobalAPI.tryweaponNowuse);
				this.updateFair();
				break ;
			default :
				break ;
			}
	}

	__proto.updateFair=function(){
		if(this.prop_speed){
			var pt=GlobalAPI.weaponptinfo.getFirePt(this.weaponMgr.getWeaponIdx());
			this.fair.pos(pt.x,pt.y);
		}
	}

	__proto.clear=function(){
		this.pause();
		this.stop();
		this.baseRoleData.stronghp=true;
	}

	/**
	*复活
	*
	*/
	__proto.revive=function(){
		var _$this=this;
		if(GlobalAPI.heroproxy.checkDie()==false){
			MoveView.getInstance().setFocusPt(null);
			if((this instanceof game.role.Hero2 )){
				this.setXY(GlobalAPI.heropt.x,GlobalAPI.heropt.y);
				}else{
				this.setXY(GlobalAPI.heropt2.x,GlobalAPI.heropt2.y);
			}
			}else{
			this.setXY(this._pt.x,this._pt.y);
			GlobalAPI.shootpt=this._pt;
			GlobalAPI.shootGroundpt=this._groundPt;
			MoveView.getInstance().setFocusPt(this._pt);
		}
		this.baseRoleData.hp=this.baseRoleData.maxhp;
		this.isDie=false;
		this.play(GlobalAPI.moveViewPort.getLayerContainer(3));
		this.addProp(7);
		GlobalAPI.systembar.update();
		this.hpbar.value=1;
		this.updateShootTip();
		function check (tx,ty){
			var ar=[];
			var ny=ty;
			while(true){
				if(MapData.mapData[ny]){
					if(
						MapData.getIsWall(tx*MapData.boxW,ny*MapData.boxH)==false
					&& MapData.getType1(tx,ny+1)>0
					&& MapData.getType1(tx,ny-1)==0
					&& _$this.viewRect.contains(tx*MapData.boxW,ny*MapData.boxH)){
						ar.push(ny);
					}
					if(ny>0){
						ny--;
						}else{
						break ;
					}
					}else{
					if(ny>0){
						ny--;
						}else{
						break ;
					}
				}
			}
			if(ar.length>0){
				ar.sort(sortM);
				return ar[0];
			}
			return-1;
		}
		function sortM (a,b){
			if(Math.abs(a*MapData.boxH-_$this._pt.y)<Math.abs(b*MapData.boxH-_$this._pt.y)){
				return-1;
			}
			return 1;
		}
	}

	__proto.die=function(dir){
		if(this.isDie)
			return;
		GlobalAPI.soundMgr.playSound("failsound");
		this.isDie=true;
		this.updateShootTip();
		this.showRole("J_");
		this.pause(true);
		var ani=new DieAni(this,this.viewRect.bottom,dir);
		ani.setDieHandler(new Handler(this,this.dieover));
		ani.setScaleY(1);
		ani.setVelocity(-20);
		ani.setdropspeed(1);
	}

	__proto.resetProp=function(){
		this.prop_defend=this.prop_magnet=this.prop_speed=false;
		this.prop_defend_time=this.prop_magnet_time=this.prop_speed_time=0;
		this.defendmc.removeSelf();
		this.fair.stop();
		this.fair.removeSelf();
		if(this.weaponMgr){
			this.weaponMgr.addspeed(false);
		}
	}

	__proto.dieover=function(){
		if(!this._start)return;
		this.pause();
		if(this.hproxy.checkDie()){
			GlobalAPI.heroproxy.setnowRevive(this.baseRoleData.skin);
			KeyUtil.allup();
			if(GlobalAPI.heroproxy.revivetime>0 || GlobalAPI.heroproxy.getDouble()){
				GlobalAPI.levelMgr.failLevel();
				}else{
				ReviveView.getInstance().show(true);
			}
			return;
		}
		GlobalAPI.nowdouble=false;
		this.dieoverM();
	}

	__proto.dieoverM=function(){
		GlobalAPI.shootpt=GlobalAPI.heropt2;
		GlobalAPI.shootGroundpt=GlobalAPI.heroGroundPt2;
		MoveView.getInstance().setFocusPt(GlobalAPI.heropt2);
	}

	__proto.dispose=function(){
		game.Body.DropAct.prototype.dispose.call(this);
	}

	__proto.addExp=function(exp){
		if(this.isexpmax || exp==0)return;
		var hexp=GlobalAPI.heroproxy.addExp(this.baseRoleData,exp);
		this.expobj.exp+=exp;
		if(this.expobj.exp<this.expobj.texp){
			if(hexp<this.baseRoleData.maxexp){
				GlobalAPI.systembar.updateExpOne(this.baseRoleData.skin,this.expobj.exp,this.expobj.texp,false);
				}else{
				this.isexpmax=true;
				GlobalAPI.systembar.updateExpOne(this.baseRoleData.skin,this.expobj.exp,this.expobj.texp,true);
			}
			}else{
			GlobalAPI.miniAniEffect.start(this,0,0,"uplev",true,25);
			GlobalAPI.soundMgr.playSound("uplevelsound");
			var obj=GlobalAPI.heroinfo.getLevAndExp(hexp);
			this.expobj.lev=obj.lev;
			this.expobj.exp=obj.exp;
			this.expobj.texp=obj.texp;
			var hp=GlobalAPI.heroinfo.getHP(obj.lev,this.baseRoleData.id);
			this.baseRoleData.maxhp=this.baseRoleData.hp=hp+hp*0.01*GlobalAPI.mountinfo.getHp(this.mountid,GlobalAPI.heroproxy.getMountLev(this.mountid))>>0;
			GlobalAPI.systembar.updatehp();
			GlobalAPI.systembar.updateExp();
			this.isexpmax=hexp>=this.baseRoleData.maxexp;
		}
	}

	__proto.showRole=function(status){
		if(this._status==status && this._skindir==this._dir && this._skinbodydir==this._bodydir)
			return;
		this._status=status;
		if(!this.role){
			this.role=GlobalAPI.poolMgr.getRoleSkin();
			this.role.interval=this.frameDelay;
			this.role.updateSkin(this._status,this._dir);
			this.role.on("roleload",this,this.loaded);
			this.nowimgurl=this.baseRoleData.imgurl;
			this.role.loadResource(this.baseRoleData.imgurl+"base.json",this.baseRoleData.imgurl+"base"+".ani");
			}else{
			this.role.updateSkin(this._status,this._bodydir);
			if(this._bodydir==5){
				if(this._dir==1){
					this.role.wrapMode=1;
					}else{
					this.role.wrapMode=0;
				}
				}else{
				if(this._dir==1){
					this.role.wrapMode=0;
					}else{
					this.role.wrapMode=1;
				}
			}
		}
		this._skindir=this._dir;
		this._skinbodydir=this._bodydir;
	}

	/**
	*是否能开火
	*@return
	*
	*/
	__proto.iscanfire=function(){
		if(this.weaponMgr.nowclip>0){
			return true;
		}
		this.addclip();
		return false;
	}

	/**
	*填弹夹
	*
	*/
	__proto.addclip=function(){
		if(this.weaponMgr.addclip()){
			this.addbulletbool=true;
			GlobalAPI.soundMgr.playSound("addbulletsound");
			this.handr0.gotoAndStop(1);
			this.handl0.gotoAndStop(1);
			this.addbullet();
			}else if(this.weaponMgr.nowclip<1){
			if(GlobalAPI.levelMgr.sort==1){
				var dir=this._bodydir==1 ?-1 :1;
				GlobalAPI.propMgr.addThrowgun(this._pt.x+this.weapond.x,this._pt.y+this.weapond.y,dir,1,this.weapon.index,this.weapond.rotation);
				this.weaponMgr.removeWeaponIdx(this.weaponMgr.getGunid());
				}else{
				QuickMoveTip.show(StringInfo.getString("没有弹药了"));
				this.weaponMgr.chgWeaponIdx(true,true);
			}
		}
	}

	__proto.addbullet=function(){
		if(this.handr0.index==0){
			}else{
			if(this.handr0.index==this.handr0.count-1){
				this.weaponMgr.updatecliptxt();
				this.handr0.gotoAndStop(0);
				this.addbulletbool=false;
				}else{
				this.handr0.nextFrame();
			}
		}
		if(this.handl0.index==0){
			}else{
			if(this.handl0.index==this.handl0.count-1){
				this.handl0.gotoAndStop(0);
				}else{
				this.handl0.nextFrame();
			}
		}
	}

	return Hero;
})(Role)


/**
*智能攻击
*@author guowc
*
*/
//class game.role.ai.Enemy101 extends game.role.Enemy
var Enemy101=(function(_super){
	function Enemy101(){
		this.isAttackd=false;
		this.attack=0;
		this.attackGay=0;
		this.attackMaxGay=11;
		this.attackrt=null;
		this.dr=0;
		this.b=true;
		this.waiting=0;
		this.waitingMax=50;
		this.pt=new Point;
		Enemy101.__super.call(this);
		this.attackrt=new Rectangle(0,0,600,126);
	}

	__class(Enemy101,'game.role.ai.Enemy101',_super);
	var __proto=Enemy101.prototype;
	__proto.over=function(skin){}
	/*GlobalAPI.weaponEnemyMgr.shootBullet(pt,0,false,WeaponEnemyMgr.Shoot_Type1,baseRoleData.hurt);
	b=true;*/
	__proto.play=function(val){
		_super.prototype.play.call(this,val);
		this.waiting=0;
		this.showRole("S_");
	}

	return Enemy101;
})(Enemy)


/**
*试用枪
*@author guowc
*
*/
//class game.role.ai.Enemy408 extends game.role.ai.Enemy115
var Enemy408=(function(_super){
	function Enemy408(){
		this.weaponframe=0;
		this.chg=false;
		this.light=null;
		Enemy408.__super.call(this);
		this.isProp=false;
	}

	__class(Enemy408,'game.role.ai.Enemy408',_super);
	var __proto=Enemy408.prototype;
	__proto.step=function(){
		_super.prototype.step.call(this);
		if(this.touchGround){
			this.chg=true;
		}
		if(this.chg){
			var ang=(this.role.rotation+360)%360;
			if(ang>270 && ang<360){
				ang+=6;
				ang=ang>360 ? 360:ang;
				}else if(ang>0 && ang<90){
				ang-=6;
				ang=ang<0 ? 0:ang;
				}else if(ang > 180 && ang<270){
				ang-=6;
				ang=ang<180 ? 180:ang;
				}else if(ang >90 && ang<180){
				ang+=6;
				ang=ang<90 ? 90:ang;
			}
			this.role.rotation=ang;
		}
	}

	__proto.setData=function(val){
		var id=val.hp;
		this.fastClear=Boolean(val.thing==4);
		_super.prototype.setData.call(this,val);
		if(val.dir==-1){
			this.role.scaleY=-1;
		}
		if(!this.fastClear){
			if(MapData.tryweapon<1){
				MapData.tryweapon=id;
			}
			this.orderJump(-8);
			this.light=GlobalAPI.miniAniEffect.start(this,0,0,"door",false,80);
			this.light.play(0,true,"door");
			this.light.scale(0.5,0.5,true);
		}
		this.weaponframe=GlobalAPI.weaponinfo.getSkin(id);
	}

	__proto.loaded=function(){
		game.Body.SkinAct.prototype.loaded.call(this);
		this.role.play(0,false,"lookweapon");
		this.role.gotoAndStop(this.weaponframe);
		if(!this.fastClear){
			this.role.y=this.bodyRect.y-10;
			}else{
			this.role.y=this.bodyRect.y;
		}
	}

	/*role.scale(0.1,0.1,true);
	Tween.to(role,{scaleX:1,scaleY:1,ease:Ease.backOut},600);*/
	__proto.play=function(val){
		game.Body.SkinAct.prototype.play.call(this,val);
		this.role.gotoAndStop(this.weaponframe);
	}

	__proto.showRole=function(status){
		if(this._status)return;
		this._status=status;
		if(!this.role){
			this.role=GlobalAPI.poolMgr.getRoleSkin();
			this.role.setRoleType(false);
			this.role.interval=this.frameDelay;
			this.role.rotation=this.baseRoleData.shellType;
			this.role.on("roleload",this,this.loaded);
			this.role.loadResource(PathMgr.path_miniani+"weapon.json",PathMgr.path_miniani+"weapon"+".ani");
			}else{
			this.loaded();
		}
		this._skindir=this._dir;
	}

	__proto.dispose=function(){
		if(this.light){
			this.light.dispose();
		}
		this.role.scaleY=1;
		this.chg=false;
		_super.prototype.dispose.call(this);
	}

	return Enemy408;
})(Enemy115)


/**
*尸体炸碎
*@author guowc
*
*/
//class game.role.ai.Enemy413 extends game.role.ai.Enemy407
var Enemy413=(function(_super){
	function Enemy413(){
		this.idx=0;
		Enemy413.__super.call(this);
		this.jumpGay=-10;
	}

	__class(Enemy413,'game.role.ai.Enemy413',_super);
	var __proto=Enemy413.prototype;
	__proto.setData=function(val){
		Enemy413.num++;
		_super.prototype.setData.call(this,val);
	}

	__proto.chgSetData=function(val){
		switch(this.baseRoleData.bloodType){
			case 100:;
				var ran=Math.random()*9>>0;
				if(GlobalAPI.isChid){
					ran=Math.random()*6>>0;
					this.role.play(0,true,"skn"+ran);
					}else{
					ran=Math.random()*9>>0;
					this.role.play(0,true,"skeleton"+ran);
				}
				break ;
			case 200:
				this.role.play(0,true,"stone0");
				break ;
			case 300:
				this.role.play(0,true,"ash");
				break ;
			}
	}

	__proto.setWH=function(){
		var rect=this.role.getBounds();
		if(rect.width>0){
			if(rect.height>MapData.boxH2-2){
				rect.height=MapData.boxH2-2;
			}
		}
		this.bodyRect.width=rect.width>>0;
		this.bodyRect.height=rect.height-this.bodygay>>0;
		this.bodyRect.x=-this.bodyRect.width>>1;
		this.bodyRect.y=-this.bodyRect.height;
		this.role.pivotX=0;
		this.role.pivotY=this.bodyRect.height>>1;
		this.redraw();
		this.hits=[
		new Point(0,0)];
	}

	__proto.updateXY=function(){
		game.Body.BaseAct.prototype.updateXY.call(this);
		if(this.baseRoleData.shadow){
			this.shadow();
		}
	}

	__proto.shadow=function(){
		this.idx++;
		if(this.idx>2){
			var bitmap=GlobalAPI.poolMgr.getbitmap();
			if(bitmap){
				bitmap.texture=this.baseRoleData.bloodType==100 ? SkinMgr.bloodtexture :SkinMgr.dusttexture;
				bitmap.x=this._pt.x;
				bitmap.y=this._pt.y;
				GlobalAPI.shadowA.add(bitmap);
			}
			this.idx=0;
		}
	}

	__proto.dispose=function(){
		Enemy413.num--;
		this.isDie=true;
		this.pause();
		this.inbevel=false;
		this.isJump=false;
		this.hasdrop=true;
		this.isWater=false;
		this.isFly=false;
		this.jumpTim=0;
		this.touchGround=false;
		GlobalAPI.poolMgr.disposedebris(this);
	}

	Enemy413.num=0;
	return Enemy413;
})(Enemy407)


//class game.role.Hero2 extends game.role.Hero
var Hero2=(function(_super){
	function Hero2(){
		this._isCon2=false;
		this.shootRole=null;
		Hero2.__super.call(this);
		this.useMouse=false;
	}

	__class(Hero2,'game.role.Hero2',_super);
	var __proto=Hero2.prototype;
	__proto.dieoverM=function(){
		GlobalAPI.shootpt=GlobalAPI.heropt;
		GlobalAPI.shootGroundpt=GlobalAPI.heroGroundPt;
		MoveView.getInstance().setFocusPt(GlobalAPI.heropt);
	}

	return Hero2;
})(Hero)


/**
*智能攻击跑动投射
*@author guowc
*
*/
//class game.role.ai.Enemy102 extends game.role.ai.Enemy101
var Enemy102=(function(_super){
	function Enemy102(){
		this.firedelay=10;
		this.mx=0;
		this.my=0;
		this.isShootFire=false;
		Enemy102.__super.call(this);
		this.tpt=new Point;
		this.isShootFire=true;
	}

	__class(Enemy102,'game.role.ai.Enemy102',_super);
	var __proto=Enemy102.prototype;
	__proto.setData=function(val){
		switch(val.skin){
			case 302:
				this.mx=90;
				this.my=-90;
				break ;
			case 303:
				this.mx=35;
				this.my=-35;
				break ;
			default :
				this.mx=20;
				this.my=-50;
				break ;
			}
		game.role.Enemy.prototype.setData.call(this,val);
	}

	__proto.ai=function(){
		if(this._attack)return;
		if(this.attack>80){
			this.isAttack=true;
			}else{
			this.attack++;
		}
		game.role.Enemy.prototype.ai.call(this);
		if(this._attack){
			this.attackGay=0;
			this.checkHit=!this.isShootFire;
			GlobalAPI.heartMgr.add(this,this.fire);
		}
	}

	__proto.isAttackM=function(){
		var dis=this._pt.y-this.shootGroundpt.y;
		dis=dis>0 ? dis :-dis;
		if(dis>60){
			return false;
		}
		return MapData.getType(this._pt.x+MapData.boxW,this._pt.y-MapData.boxH)<1;
	}

	__proto.fire=function(){
		if(this.attackGay<this.attackMaxGay){
			this.attackGay++;
			if(this.attackGay%this.firedelay !=0)
				return;
			this.dr=this._dir==5 ? 1 :-1;
			this.pt.x=this._pt.x+this.mx*this.dr;
			this.pt.y=this._pt.y+this.my;
			this.tpt.x=(Math.random()*2>>0)==0 ? this._pt.x+300*this.dr :this._pt.x+260*this.dr;
			this.tpt.y=this._pt.y-GlobalAPI.heropt.y>40 ? this._pt.y-50:GlobalAPI.heropt.y-50;
			var dis=this.pt.distance(this.tpt.x,this.tpt.y);
			GlobalAPI.weaponEnemyMgr.throwBom(this.pt,this.dr,0,this.tpt,dis/12,false,2001,this.baseRoleData.hurt);
			GlobalAPI.soundMgr.playSound("transform");
			}else{
			this.attackGay=0;
			GlobalAPI.heartMgr.remove(this,this.fire);
		}
	}

	__proto.attackOver=function(){
		this.checkHit=false;
		this.attack=0;
		game.role.Enemy.prototype.attackOver.call(this);
	}

	__proto.dispose=function(){
		game.role.Enemy.prototype.dispose.call(this);
		GlobalAPI.heartMgr.remove(this,this.fire);
	}

	return Enemy102;
})(Enemy101)


//class game.role.ai.Enemy301 extends game.role.ai.Enemy102
var Enemy301=(function(_super){
	function Enemy301(){
		this.dietime=0;
		this.ept=new Point;
		Enemy301.__super.call(this);
		this.isShootFire=false;
	}

	__class(Enemy301,'game.role.ai.Enemy301',_super);
	var __proto=Enemy301.prototype;
	__proto.step=function(){
		if(this._pause){
			return;
		}
		if(this.isDie){
			if(EffectShake.update()<1){
				ShakeEffect.start(4,4,6,5);
			}
			if(this.dietime<150){
				this.dietime++;
				if(this.dietime%15==0){
					this.ept.x=this._pt.x-this.bodyRect.width*0.5+10+Math.random()*(this.bodyRect.width-20)>>0;
					this.ept.y=this._pt.y-Math.random()*(this._rect.height-this.bodyRect.height*0.5)-30;
					GlobalAPI.miniAniEffect.start(null,this.ept.x,this.ept.y,"boom8",true,50,1);
					GlobalAPI.sceneRoleMgr.addbloods(true,this.ept,100);
					var dir=Math.random()*2<1 ? 1:-1;
					var act=GlobalAPI.propMgr.addProp(101,this.ept.x,this.ept.y,1,dir);
					act.getData().gold=this.baseRoleData.gold-Math.random()*(this.baseRoleData.gold*0.5)>>0;
					var sc=act.getData().gold*0.01+1;
					sc=sc>2 ? 2 :sc;
					act.scale(sc,sc,true);
					GlobalAPI.soundMgr.playSound("jizhongsound");
				}
				}else{
				GlobalAPI.sceneRoleMgr.removeEnemy(this.baseRoleData.id,true,0,-1);
				EffectShake.deleteMe();
				GlobalAPI.miniAniEffect.start(null,this._pt.x,this._pt.y-this.bodyRect.height*0.5,"boom8",true,50,1.5);
				this.dispose();
				GlobalAPI.soundMgr.playSound("bomsound");
			}
			return;
		}
		game.role.Enemy.prototype.step.call(this);
	}

	__proto.setWH=function(){
		var rect=this.role.getBounds();
		if(rect.width>0){
			this.killRect.width=rect.width;
			this.killRect.height=rect.height-this.bodygay;
			}else{
			this.killRect.width=this.killRect.height=this.bodyWid;
		}
		this.bodyRect.width=rect.width;
		this.bodyRect.height=rect.height-this.bodygay;
		this.bodyRect.x=-this.role.pivotX;
		this.bodyRect.y=-this.bodyRect.height;
		this.redraw();
		var hei=this.bodyRect.height;
		if(hei>MapData.boxH5){
			hei=MapData.boxH5-10;
		}
		this.hits=[
		new Point(-this.bodyWid,2),
		new Point(-this.bodyWid,hei*0.25),
		new Point(-this.bodyWid,hei>>1),
		new Point(-this.bodyWid,hei-hei*0.25),
		new Point(-this.bodyWid,hei),
		new Point(this.bodyWid,2),
		new Point(this.bodyWid,hei*0.25),
		new Point(this.bodyWid,hei>>1),
		new Point(this.bodyWid,hei-hei*0.25),
		new Point(this.bodyWid,hei)];
	}

	__proto.hurt=function(val,isAoe){
		(isAoe===void 0)&& (isAoe=false);
		game.role.Enemy.prototype.hurt.call(this,val,isAoe);
		if(this.baseRoleData.hp<1){
			this.role.stop();
			this.isDie=true;
			if(this.fireing>0){
				UIUtils.clearFilter(this.role,ColorFilter);
			}
		}
		return 0;
	}

	__proto.fire=function(){}
	__proto.die=function(dir){
		UIUtils.clearFilter(this.role,ColorFilter);
		this.dietime=0;
		this.isDie=true;
		this.checkHit=false;
		GlobalAPI.soundMgr.playSound("zombiediesound");
		this.role.stop();
		this.role.offAll();
		this.hpbar.removeSelf();
	}

	return Enemy301;
})(Enemy102)


//class game.role.ai.Enemy302 extends game.role.ai.Enemy301
var Enemy302=(function(_super){
	function Enemy302(){
		this.ang1=0;
		Enemy302.__super.call(this);
		this.firedelay=20;
		this.attackMaxGay=41;
		this.isShootFire=true;
	}

	__class(Enemy302,'game.role.ai.Enemy302',_super);
	var __proto=Enemy302.prototype;
	__proto.fire=function(){
		if(this.attackGay<this.attackMaxGay){
			this.attackGay++;
			if(this.attackGay%this.firedelay !=0)
				return;
			this.dr=this._dir==5 ? 1 :-1;
			this.pt.x=this._pt.x+this.mx*this.dr;
			this.pt.y=this._pt.y+this.my;
			this.ang1=this.dr==1 ? 0 :180;
			GlobalAPI.soundMgr.playgunSound("rocketsound");
			GlobalAPI.weaponEnemyMgr.followBom(this.pt,this.ang1,this.baseRoleData.hurt,8);
			}else{
			this.attackGay=0;
			GlobalAPI.heartMgr.remove(this,this.fire);
		}
	}

	return Enemy302;
})(Enemy301)


//class game.role.ai.Enemy303 extends game.role.ai.Enemy301
var Enemy303=(function(_super){
	function Enemy303(){
		this.ang1=0;
		Enemy303.__super.call(this);
		this.firedelay=20;
		this.attackMaxGay=41;
		this.isShootFire=true;
	}

	__class(Enemy303,'game.role.ai.Enemy303',_super);
	var __proto=Enemy303.prototype;
	__proto.fire=function(){
		if(this.attackGay<this.attackMaxGay){
			this.attackGay++;
			if(this.attackGay%this.firedelay !=0)
				return;
			this.dr=this._dir==5 ? 1 :-1;
			this.pt.x=this._pt.x+this.mx*this.dr;
			this.pt.y=this._pt.y+this.my;
			this.ang1=this.dr==1 ? 0 :180;
			GlobalAPI.weaponEnemyMgr.shootBullet(this.pt,this.ang1,false,1001,this.baseRoleData.hurt);
			}else{
			this.attackGay=0;
			GlobalAPI.heartMgr.remove(this,this.fire);
		}
	}

	__proto.setWH=function(){
		var rect=new Rectangle(0,0,88,135);
		if(rect.width>0){
			this.killRect.width=rect.width;
			this.killRect.height=rect.height-this.bodygay;
			}else{
			this.killRect.width=this.killRect.height=this.bodyWid;
		}
		this.bodyRect.width=rect.width;
		this.bodyRect.height=rect.height-this.bodygay;
		this.bodyRect.x=-this.role.pivotX;
		this.bodyRect.y=-this.bodyRect.height;
		this.redraw();
		var hei=this.bodyRect.height;
		this.hits=[
		new Point(-this.bodyWid,2),
		new Point(-this.bodyWid,hei*0.25),
		new Point(-this.bodyWid,hei>>1),
		new Point(-this.bodyWid,hei-hei*0.25),
		new Point(-this.bodyWid,hei),
		new Point(this.bodyWid,2),
		new Point(this.bodyWid,hei*0.25),
		new Point(this.bodyWid,hei>>1),
		new Point(this.bodyWid,hei-hei*0.25),
		new Point(this.bodyWid,hei)];
	}

	return Enemy303;
})(Enemy301)


//class game.role.ai.Enemy305 extends game.role.ai.Enemy301
var Enemy305=(function(_super){
	function Enemy305(){
		this.ang1=0;
		Enemy305.__super.call(this);
		this.firedelay=30;
		this.attackMaxGay=this.firedelay*3;
		this.isShootFire=true;
	}

	__class(Enemy305,'game.role.ai.Enemy305',_super);
	var __proto=Enemy305.prototype;
	__proto.fire=function(){
		if(this.attackGay<this.attackMaxGay){
			this.attackGay++;
			if(this.attackGay%this.firedelay==0){
				this.bom(10)
				}else if(this.attackGay%(this.firedelay+10)==0){
				this.bom(50);
			}
			}else{
			this.attackGay=0;
			GlobalAPI.heartMgr.remove(this,this.fire);
		}
	}

	__proto.bom=function(a){
		GlobalAPI.soundMgr.playgunSound("rocketsound");
		this.dr=this._dir==5 ? 1 :-1;
		this.ang1=this.dr==1 ?-60 :-120;
		this.pt.x=this._pt.x+a*this.dr;
		this.pt.y=this._pt.y-200;
		GlobalAPI.weaponEnemyMgr.followBom(this.pt,this.ang1,this.baseRoleData.hurt,10,false);
	}

	return Enemy305;
})(Enemy301)


	Laya.__init([EventDispatcher,LoaderManager,DrawText,WebGLFilter,Browser,GraphicAnimation,LocalStorage,Render,Timer,View,WebGLContext2D,ShaderCompile,AtlasGrid]);
	/**LayaGameStart**/
	new Main();

})(window,document,Laya);

if (typeof define === 'function' && define.amd){
	define('laya.core', ['require', "exports"], function(require, exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        for (var i in Laya) {
			var o = Laya[i];
            o && o.__isclass && (exports[i] = o);
        }
    });
}